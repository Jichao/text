// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_195_000)
{
    // AAB5 AAAB 0062;	
    // (ꪵꪫ) TAI VIET VOWEL E, TAI VIET LETTER HIGH VO	[2EBB 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAB, 0x0062 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_001)
{
    // AAB6 AAAB 0021;	
    // (ꪶꪫ) TAI VIET VOWEL O, TAI VIET LETTER HIGH VO	[2EBB 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAB, 0x0021 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_002)
{
    // AAB6 AAAB 003F;	
    // (ꪶꪫ) TAI VIET VOWEL O, TAI VIET LETTER HIGH VO	[2EBB 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAB, 0x003F };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_003)
{
    // AAB6 AAAB 0061;	
    // (ꪶꪫ) TAI VIET VOWEL O, TAI VIET LETTER HIGH VO	[2EBB 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_004)
{
    // AAB6 AAAB 0041;	
    // (ꪶꪫ) TAI VIET VOWEL O, TAI VIET LETTER HIGH VO	[2EBB 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAB, 0x0041 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_005)
{
    // AAB6 AAAB 0062;	
    // (ꪶꪫ) TAI VIET VOWEL O, TAI VIET LETTER HIGH VO	[2EBB 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAB, 0x0062 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_006)
{
    // AAB9 AAAB 0021;	
    // (ꪹꪫ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH VO	[2EBB 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAB, 0x0021 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_007)
{
    // AAB9 AAAB 003F;	
    // (ꪹꪫ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH VO	[2EBB 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAB, 0x003F };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_008)
{
    // AAB9 AAAB 0061;	
    // (ꪹꪫ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH VO	[2EBB 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_009)
{
    // AAB9 AAAB 0041;	
    // (ꪹꪫ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH VO	[2EBB 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAB, 0x0041 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_010)
{
    // AAB9 AAAB 0062;	
    // (ꪹꪫ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH VO	[2EBB 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAB, 0x0062 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_011)
{
    // AABB AAAB 0021;	
    // (ꪻꪫ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH VO	[2EBB 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAB, 0x0021 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_012)
{
    // AABB AAAB 003F;	
    // (ꪻꪫ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH VO	[2EBB 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAB, 0x003F };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_013)
{
    // AABB AAAB 0061;	
    // (ꪻꪫ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH VO	[2EBB 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_014)
{
    // AABB AAAB 0041;	
    // (ꪻꪫ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH VO	[2EBB 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAB, 0x0041 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_015)
{
    // AABB AAAB 0062;	
    // (ꪻꪫ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH VO	[2EBB 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAB, 0x0062 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_016)
{
    // AABC AAAB 0021;	
    // (ꪼꪫ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH VO	[2EBB 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAB, 0x0021 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_017)
{
    // AABC AAAB 003F;	
    // (ꪼꪫ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH VO	[2EBB 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAB, 0x003F };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_018)
{
    // AABC AAAB 0061;	
    // (ꪼꪫ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH VO	[2EBB 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_019)
{
    // AABC AAAB 0041;	
    // (ꪼꪫ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH VO	[2EBB 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAB, 0x0041 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_020)
{
    // AABC AAAB 0062;	
    // (ꪼꪫ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH VO	[2EBB 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAB, 0x0062 };
    uint32_t const ces[12] = { 0x2EBB, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_021)
{
    // AAAC 0021;	
    // (ꪬ) TAI VIET LETTER LOW HO	[2EBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAC, 0x0021 };
    uint32_t const ces[9] = { 0x2EBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_022)
{
    // AAAC 003F;	
    // (ꪬ) TAI VIET LETTER LOW HO	[2EBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAC, 0x003F };
    uint32_t const ces[9] = { 0x2EBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_023)
{
    // AAAC 0061;	
    // (ꪬ) TAI VIET LETTER LOW HO	[2EBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAC, 0x0061 };
    uint32_t const ces[9] = { 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_024)
{
    // AAAC 0041;	
    // (ꪬ) TAI VIET LETTER LOW HO	[2EBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAAC, 0x0041 };
    uint32_t const ces[9] = { 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_025)
{
    // AAAC 0062;	
    // (ꪬ) TAI VIET LETTER LOW HO	[2EBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAC, 0x0062 };
    uint32_t const ces[9] = { 0x2EBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_026)
{
    // AAB5 AAAC 0021;	
    // (ꪵꪬ) TAI VIET VOWEL E, TAI VIET LETTER LOW HO	[2EBC 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAC, 0x0021 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_027)
{
    // AAB5 AAAC 003F;	
    // (ꪵꪬ) TAI VIET VOWEL E, TAI VIET LETTER LOW HO	[2EBC 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAC, 0x003F };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_028)
{
    // AAB5 AAAC 0061;	
    // (ꪵꪬ) TAI VIET VOWEL E, TAI VIET LETTER LOW HO	[2EBC 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_029)
{
    // AAB5 AAAC 0041;	
    // (ꪵꪬ) TAI VIET VOWEL E, TAI VIET LETTER LOW HO	[2EBC 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAC, 0x0041 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_030)
{
    // AAB5 AAAC 0062;	
    // (ꪵꪬ) TAI VIET VOWEL E, TAI VIET LETTER LOW HO	[2EBC 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAC, 0x0062 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_031)
{
    // AAB6 AAAC 0021;	
    // (ꪶꪬ) TAI VIET VOWEL O, TAI VIET LETTER LOW HO	[2EBC 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAC, 0x0021 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_032)
{
    // AAB6 AAAC 003F;	
    // (ꪶꪬ) TAI VIET VOWEL O, TAI VIET LETTER LOW HO	[2EBC 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAC, 0x003F };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_033)
{
    // AAB6 AAAC 0061;	
    // (ꪶꪬ) TAI VIET VOWEL O, TAI VIET LETTER LOW HO	[2EBC 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_034)
{
    // AAB6 AAAC 0041;	
    // (ꪶꪬ) TAI VIET VOWEL O, TAI VIET LETTER LOW HO	[2EBC 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAC, 0x0041 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_035)
{
    // AAB6 AAAC 0062;	
    // (ꪶꪬ) TAI VIET VOWEL O, TAI VIET LETTER LOW HO	[2EBC 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAC, 0x0062 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_036)
{
    // AAB9 AAAC 0021;	
    // (ꪹꪬ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW HO	[2EBC 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAC, 0x0021 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_037)
{
    // AAB9 AAAC 003F;	
    // (ꪹꪬ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW HO	[2EBC 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAC, 0x003F };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_038)
{
    // AAB9 AAAC 0061;	
    // (ꪹꪬ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW HO	[2EBC 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_039)
{
    // AAB9 AAAC 0041;	
    // (ꪹꪬ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW HO	[2EBC 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAC, 0x0041 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_040)
{
    // AAB9 AAAC 0062;	
    // (ꪹꪬ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW HO	[2EBC 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAC, 0x0062 };
    uint32_t const ces[12] = { 0x2EBC, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_041)
{
    // AABB AAAC 0021;	
    // (ꪻꪬ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW HO	[2EBC 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAC, 0x0021 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_042)
{
    // AABB AAAC 003F;	
    // (ꪻꪬ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW HO	[2EBC 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAC, 0x003F };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_043)
{
    // AABB AAAC 0061;	
    // (ꪻꪬ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW HO	[2EBC 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_044)
{
    // AABB AAAC 0041;	
    // (ꪻꪬ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW HO	[2EBC 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAC, 0x0041 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_045)
{
    // AABB AAAC 0062;	
    // (ꪻꪬ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW HO	[2EBC 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAC, 0x0062 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_046)
{
    // AABC AAAC 0021;	
    // (ꪼꪬ) TAI VIET VOWEL AY, TAI VIET LETTER LOW HO	[2EBC 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAC, 0x0021 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_047)
{
    // AABC AAAC 003F;	
    // (ꪼꪬ) TAI VIET VOWEL AY, TAI VIET LETTER LOW HO	[2EBC 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAC, 0x003F };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_048)
{
    // AABC AAAC 0061;	
    // (ꪼꪬ) TAI VIET VOWEL AY, TAI VIET LETTER LOW HO	[2EBC 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_049)
{
    // AABC AAAC 0041;	
    // (ꪼꪬ) TAI VIET VOWEL AY, TAI VIET LETTER LOW HO	[2EBC 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAC, 0x0041 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_050)
{
    // AABC AAAC 0062;	
    // (ꪼꪬ) TAI VIET VOWEL AY, TAI VIET LETTER LOW HO	[2EBC 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAC, 0x0062 };
    uint32_t const ces[12] = { 0x2EBC, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_051)
{
    // AAAD 0021;	
    // (ꪭ) TAI VIET LETTER HIGH HO	[2EBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAD, 0x0021 };
    uint32_t const ces[9] = { 0x2EBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_052)
{
    // AAAD 003F;	
    // (ꪭ) TAI VIET LETTER HIGH HO	[2EBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAD, 0x003F };
    uint32_t const ces[9] = { 0x2EBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_053)
{
    // AAAD 0061;	
    // (ꪭ) TAI VIET LETTER HIGH HO	[2EBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAD, 0x0061 };
    uint32_t const ces[9] = { 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_054)
{
    // AAAD 0041;	
    // (ꪭ) TAI VIET LETTER HIGH HO	[2EBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAAD, 0x0041 };
    uint32_t const ces[9] = { 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_055)
{
    // AAAD 0062;	
    // (ꪭ) TAI VIET LETTER HIGH HO	[2EBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAD, 0x0062 };
    uint32_t const ces[9] = { 0x2EBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_056)
{
    // AAB5 AAAD 0021;	
    // (ꪵꪭ) TAI VIET VOWEL E, TAI VIET LETTER HIGH HO	[2EBD 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAD, 0x0021 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_057)
{
    // AAB5 AAAD 003F;	
    // (ꪵꪭ) TAI VIET VOWEL E, TAI VIET LETTER HIGH HO	[2EBD 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAD, 0x003F };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_058)
{
    // AAB5 AAAD 0061;	
    // (ꪵꪭ) TAI VIET VOWEL E, TAI VIET LETTER HIGH HO	[2EBD 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_059)
{
    // AAB5 AAAD 0041;	
    // (ꪵꪭ) TAI VIET VOWEL E, TAI VIET LETTER HIGH HO	[2EBD 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAD, 0x0041 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_060)
{
    // AAB5 AAAD 0062;	
    // (ꪵꪭ) TAI VIET VOWEL E, TAI VIET LETTER HIGH HO	[2EBD 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAD, 0x0062 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_061)
{
    // AAB6 AAAD 0021;	
    // (ꪶꪭ) TAI VIET VOWEL O, TAI VIET LETTER HIGH HO	[2EBD 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAD, 0x0021 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_062)
{
    // AAB6 AAAD 003F;	
    // (ꪶꪭ) TAI VIET VOWEL O, TAI VIET LETTER HIGH HO	[2EBD 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAD, 0x003F };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_063)
{
    // AAB6 AAAD 0061;	
    // (ꪶꪭ) TAI VIET VOWEL O, TAI VIET LETTER HIGH HO	[2EBD 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_064)
{
    // AAB6 AAAD 0041;	
    // (ꪶꪭ) TAI VIET VOWEL O, TAI VIET LETTER HIGH HO	[2EBD 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAD, 0x0041 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_065)
{
    // AAB6 AAAD 0062;	
    // (ꪶꪭ) TAI VIET VOWEL O, TAI VIET LETTER HIGH HO	[2EBD 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAD, 0x0062 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_066)
{
    // AAB9 AAAD 0021;	
    // (ꪹꪭ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH HO	[2EBD 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAD, 0x0021 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_067)
{
    // AAB9 AAAD 003F;	
    // (ꪹꪭ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH HO	[2EBD 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAD, 0x003F };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_068)
{
    // AAB9 AAAD 0061;	
    // (ꪹꪭ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH HO	[2EBD 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_069)
{
    // AAB9 AAAD 0041;	
    // (ꪹꪭ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH HO	[2EBD 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAD, 0x0041 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_070)
{
    // AAB9 AAAD 0062;	
    // (ꪹꪭ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH HO	[2EBD 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAD, 0x0062 };
    uint32_t const ces[12] = { 0x2EBD, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_071)
{
    // AABB AAAD 0021;	
    // (ꪻꪭ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH HO	[2EBD 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAD, 0x0021 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_072)
{
    // AABB AAAD 003F;	
    // (ꪻꪭ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH HO	[2EBD 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAD, 0x003F };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_073)
{
    // AABB AAAD 0061;	
    // (ꪻꪭ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH HO	[2EBD 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_074)
{
    // AABB AAAD 0041;	
    // (ꪻꪭ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH HO	[2EBD 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAD, 0x0041 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_075)
{
    // AABB AAAD 0062;	
    // (ꪻꪭ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH HO	[2EBD 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAD, 0x0062 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_076)
{
    // AABC AAAD 0021;	
    // (ꪼꪭ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH HO	[2EBD 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAD, 0x0021 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_077)
{
    // AABC AAAD 003F;	
    // (ꪼꪭ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH HO	[2EBD 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAD, 0x003F };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_078)
{
    // AABC AAAD 0061;	
    // (ꪼꪭ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH HO	[2EBD 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_079)
{
    // AABC AAAD 0041;	
    // (ꪼꪭ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH HO	[2EBD 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAD, 0x0041 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_080)
{
    // AABC AAAD 0062;	
    // (ꪼꪭ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH HO	[2EBD 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAD, 0x0062 };
    uint32_t const ces[12] = { 0x2EBD, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_081)
{
    // AAAE 0021;	
    // (ꪮ) TAI VIET LETTER LOW O	[2EBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAE, 0x0021 };
    uint32_t const ces[9] = { 0x2EBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_082)
{
    // AAAE 003F;	
    // (ꪮ) TAI VIET LETTER LOW O	[2EBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAE, 0x003F };
    uint32_t const ces[9] = { 0x2EBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_083)
{
    // AAAE 0061;	
    // (ꪮ) TAI VIET LETTER LOW O	[2EBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAE, 0x0061 };
    uint32_t const ces[9] = { 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_084)
{
    // AAAE 0041;	
    // (ꪮ) TAI VIET LETTER LOW O	[2EBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAAE, 0x0041 };
    uint32_t const ces[9] = { 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_085)
{
    // AAAE 0062;	
    // (ꪮ) TAI VIET LETTER LOW O	[2EBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAE, 0x0062 };
    uint32_t const ces[9] = { 0x2EBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_086)
{
    // AAB5 AAAE 0021;	
    // (ꪵꪮ) TAI VIET VOWEL E, TAI VIET LETTER LOW O	[2EBE 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAE, 0x0021 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_087)
{
    // AAB5 AAAE 003F;	
    // (ꪵꪮ) TAI VIET VOWEL E, TAI VIET LETTER LOW O	[2EBE 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAE, 0x003F };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_088)
{
    // AAB5 AAAE 0061;	
    // (ꪵꪮ) TAI VIET VOWEL E, TAI VIET LETTER LOW O	[2EBE 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_089)
{
    // AAB5 AAAE 0041;	
    // (ꪵꪮ) TAI VIET VOWEL E, TAI VIET LETTER LOW O	[2EBE 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAE, 0x0041 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_090)
{
    // AAB5 AAAE 0062;	
    // (ꪵꪮ) TAI VIET VOWEL E, TAI VIET LETTER LOW O	[2EBE 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAE, 0x0062 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_091)
{
    // AAB6 AAAE 0021;	
    // (ꪶꪮ) TAI VIET VOWEL O, TAI VIET LETTER LOW O	[2EBE 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAE, 0x0021 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_092)
{
    // AAB6 AAAE 003F;	
    // (ꪶꪮ) TAI VIET VOWEL O, TAI VIET LETTER LOW O	[2EBE 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAE, 0x003F };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_093)
{
    // AAB6 AAAE 0061;	
    // (ꪶꪮ) TAI VIET VOWEL O, TAI VIET LETTER LOW O	[2EBE 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_094)
{
    // AAB6 AAAE 0041;	
    // (ꪶꪮ) TAI VIET VOWEL O, TAI VIET LETTER LOW O	[2EBE 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAE, 0x0041 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_095)
{
    // AAB6 AAAE 0062;	
    // (ꪶꪮ) TAI VIET VOWEL O, TAI VIET LETTER LOW O	[2EBE 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAE, 0x0062 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_096)
{
    // AAB9 AAAE 0021;	
    // (ꪹꪮ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW O	[2EBE 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAE, 0x0021 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_097)
{
    // AAB9 AAAE 003F;	
    // (ꪹꪮ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW O	[2EBE 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAE, 0x003F };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_098)
{
    // AAB9 AAAE 0061;	
    // (ꪹꪮ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW O	[2EBE 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_099)
{
    // AAB9 AAAE 0041;	
    // (ꪹꪮ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW O	[2EBE 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAE, 0x0041 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_100)
{
    // AAB9 AAAE 0062;	
    // (ꪹꪮ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW O	[2EBE 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAE, 0x0062 };
    uint32_t const ces[12] = { 0x2EBE, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_101)
{
    // AABB AAAE 0021;	
    // (ꪻꪮ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW O	[2EBE 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAE, 0x0021 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_102)
{
    // AABB AAAE 003F;	
    // (ꪻꪮ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW O	[2EBE 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAE, 0x003F };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_103)
{
    // AABB AAAE 0061;	
    // (ꪻꪮ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW O	[2EBE 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_104)
{
    // AABB AAAE 0041;	
    // (ꪻꪮ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW O	[2EBE 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAE, 0x0041 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_105)
{
    // AABB AAAE 0062;	
    // (ꪻꪮ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW O	[2EBE 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAE, 0x0062 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_106)
{
    // AABC AAAE 0021;	
    // (ꪼꪮ) TAI VIET VOWEL AY, TAI VIET LETTER LOW O	[2EBE 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAE, 0x0021 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_107)
{
    // AABC AAAE 003F;	
    // (ꪼꪮ) TAI VIET VOWEL AY, TAI VIET LETTER LOW O	[2EBE 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAE, 0x003F };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_108)
{
    // AABC AAAE 0061;	
    // (ꪼꪮ) TAI VIET VOWEL AY, TAI VIET LETTER LOW O	[2EBE 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_109)
{
    // AABC AAAE 0041;	
    // (ꪼꪮ) TAI VIET VOWEL AY, TAI VIET LETTER LOW O	[2EBE 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAE, 0x0041 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_110)
{
    // AABC AAAE 0062;	
    // (ꪼꪮ) TAI VIET VOWEL AY, TAI VIET LETTER LOW O	[2EBE 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAE, 0x0062 };
    uint32_t const ces[12] = { 0x2EBE, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_111)
{
    // AAAF 0021;	
    // (ꪯ) TAI VIET LETTER HIGH O	[2EBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAF, 0x0021 };
    uint32_t const ces[9] = { 0x2EBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_112)
{
    // AAAF 003F;	
    // (ꪯ) TAI VIET LETTER HIGH O	[2EBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAF, 0x003F };
    uint32_t const ces[9] = { 0x2EBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_113)
{
    // AAAF 0061;	
    // (ꪯ) TAI VIET LETTER HIGH O	[2EBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAF, 0x0061 };
    uint32_t const ces[9] = { 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_114)
{
    // AAAF 0041;	
    // (ꪯ) TAI VIET LETTER HIGH O	[2EBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAAF, 0x0041 };
    uint32_t const ces[9] = { 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_115)
{
    // AAAF 0062;	
    // (ꪯ) TAI VIET LETTER HIGH O	[2EBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAF, 0x0062 };
    uint32_t const ces[9] = { 0x2EBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_116)
{
    // AAB5 AAAF 0021;	
    // (ꪵꪯ) TAI VIET VOWEL E, TAI VIET LETTER HIGH O	[2EBF 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAF, 0x0021 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_117)
{
    // AAB5 AAAF 003F;	
    // (ꪵꪯ) TAI VIET VOWEL E, TAI VIET LETTER HIGH O	[2EBF 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAF, 0x003F };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_118)
{
    // AAB5 AAAF 0061;	
    // (ꪵꪯ) TAI VIET VOWEL E, TAI VIET LETTER HIGH O	[2EBF 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_119)
{
    // AAB5 AAAF 0041;	
    // (ꪵꪯ) TAI VIET VOWEL E, TAI VIET LETTER HIGH O	[2EBF 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAF, 0x0041 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_120)
{
    // AAB5 AAAF 0062;	
    // (ꪵꪯ) TAI VIET VOWEL E, TAI VIET LETTER HIGH O	[2EBF 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAF, 0x0062 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_121)
{
    // AAB6 AAAF 0021;	
    // (ꪶꪯ) TAI VIET VOWEL O, TAI VIET LETTER HIGH O	[2EBF 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAF, 0x0021 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_122)
{
    // AAB6 AAAF 003F;	
    // (ꪶꪯ) TAI VIET VOWEL O, TAI VIET LETTER HIGH O	[2EBF 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAF, 0x003F };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_123)
{
    // AAB6 AAAF 0061;	
    // (ꪶꪯ) TAI VIET VOWEL O, TAI VIET LETTER HIGH O	[2EBF 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_124)
{
    // AAB6 AAAF 0041;	
    // (ꪶꪯ) TAI VIET VOWEL O, TAI VIET LETTER HIGH O	[2EBF 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAF, 0x0041 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_125)
{
    // AAB6 AAAF 0062;	
    // (ꪶꪯ) TAI VIET VOWEL O, TAI VIET LETTER HIGH O	[2EBF 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAF, 0x0062 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_126)
{
    // AAB9 AAAF 0021;	
    // (ꪹꪯ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH O	[2EBF 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAF, 0x0021 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_127)
{
    // AAB9 AAAF 003F;	
    // (ꪹꪯ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH O	[2EBF 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAF, 0x003F };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_128)
{
    // AAB9 AAAF 0061;	
    // (ꪹꪯ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH O	[2EBF 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_129)
{
    // AAB9 AAAF 0041;	
    // (ꪹꪯ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH O	[2EBF 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAF, 0x0041 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_130)
{
    // AAB9 AAAF 0062;	
    // (ꪹꪯ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH O	[2EBF 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAF, 0x0062 };
    uint32_t const ces[12] = { 0x2EBF, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_131)
{
    // AABB AAAF 0021;	
    // (ꪻꪯ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH O	[2EBF 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAF, 0x0021 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_132)
{
    // AABB AAAF 003F;	
    // (ꪻꪯ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH O	[2EBF 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAF, 0x003F };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_133)
{
    // AABB AAAF 0061;	
    // (ꪻꪯ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH O	[2EBF 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_134)
{
    // AABB AAAF 0041;	
    // (ꪻꪯ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH O	[2EBF 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAF, 0x0041 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_135)
{
    // AABB AAAF 0062;	
    // (ꪻꪯ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH O	[2EBF 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAF, 0x0062 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_136)
{
    // AABC AAAF 0021;	
    // (ꪼꪯ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH O	[2EBF 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAF, 0x0021 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_137)
{
    // AABC AAAF 003F;	
    // (ꪼꪯ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH O	[2EBF 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAF, 0x003F };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_138)
{
    // AABC AAAF 0061;	
    // (ꪼꪯ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH O	[2EBF 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_139)
{
    // AABC AAAF 0041;	
    // (ꪼꪯ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH O	[2EBF 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAF, 0x0041 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_140)
{
    // AABC AAAF 0062;	
    // (ꪼꪯ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH O	[2EBF 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAF, 0x0062 };
    uint32_t const ces[12] = { 0x2EBF, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_141)
{
    // 0334 AAB0;	
    // (ꪰ) TAI VIET MAI KANG	[2EC0 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAB0 };
    uint32_t const ces[8] = { 0x2EC0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_142)
{
    // AAB0 0334;	
    // (ꪰ) TAI VIET MAI KANG	[2EC0 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB0, 0x0334 };
    uint32_t const ces[8] = { 0x2EC0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_143)
{
    // AAB0 0021;	
    // (ꪰ) TAI VIET MAI KANG	[2EC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB0, 0x0021 };
    uint32_t const ces[9] = { 0x2EC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_144)
{
    // AAB0 003F;	
    // (ꪰ) TAI VIET MAI KANG	[2EC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB0, 0x003F };
    uint32_t const ces[9] = { 0x2EC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_145)
{
    // AAB0 0061;	
    // (ꪰ) TAI VIET MAI KANG	[2EC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB0, 0x0061 };
    uint32_t const ces[9] = { 0x2EC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_146)
{
    // AAB0 0041;	
    // (ꪰ) TAI VIET MAI KANG	[2EC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB0, 0x0041 };
    uint32_t const ces[9] = { 0x2EC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_147)
{
    // AAB0 0062;	
    // (ꪰ) TAI VIET MAI KANG	[2EC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB0, 0x0062 };
    uint32_t const ces[9] = { 0x2EC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_148)
{
    // AAB1 0021;	
    // (ꪱ) TAI VIET VOWEL AA	[2EC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB1, 0x0021 };
    uint32_t const ces[9] = { 0x2EC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_149)
{
    // AAB1 003F;	
    // (ꪱ) TAI VIET VOWEL AA	[2EC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB1, 0x003F };
    uint32_t const ces[9] = { 0x2EC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_150)
{
    // AAB1 0061;	
    // (ꪱ) TAI VIET VOWEL AA	[2EC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB1, 0x0061 };
    uint32_t const ces[9] = { 0x2EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_151)
{
    // AAB1 0041;	
    // (ꪱ) TAI VIET VOWEL AA	[2EC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB1, 0x0041 };
    uint32_t const ces[9] = { 0x2EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_152)
{
    // AAB1 0062;	
    // (ꪱ) TAI VIET VOWEL AA	[2EC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB1, 0x0062 };
    uint32_t const ces[9] = { 0x2EC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_153)
{
    // 0334 AAB2;	
    // (ꪲ) TAI VIET VOWEL I	[2EC2 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAB2 };
    uint32_t const ces[8] = { 0x2EC2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_154)
{
    // AAB2 0334;	
    // (ꪲ) TAI VIET VOWEL I	[2EC2 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB2, 0x0334 };
    uint32_t const ces[8] = { 0x2EC2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_155)
{
    // AAB2 0021;	
    // (ꪲ) TAI VIET VOWEL I	[2EC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB2, 0x0021 };
    uint32_t const ces[9] = { 0x2EC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_156)
{
    // AAB2 003F;	
    // (ꪲ) TAI VIET VOWEL I	[2EC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB2, 0x003F };
    uint32_t const ces[9] = { 0x2EC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_157)
{
    // AAB2 0061;	
    // (ꪲ) TAI VIET VOWEL I	[2EC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB2, 0x0061 };
    uint32_t const ces[9] = { 0x2EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_158)
{
    // AAB2 0041;	
    // (ꪲ) TAI VIET VOWEL I	[2EC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB2, 0x0041 };
    uint32_t const ces[9] = { 0x2EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_159)
{
    // AAB2 0062;	
    // (ꪲ) TAI VIET VOWEL I	[2EC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB2, 0x0062 };
    uint32_t const ces[9] = { 0x2EC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_160)
{
    // 0334 AAB3;	
    // (ꪳ) TAI VIET VOWEL UE	[2EC3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAB3 };
    uint32_t const ces[8] = { 0x2EC3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_161)
{
    // AAB3 0334;	
    // (ꪳ) TAI VIET VOWEL UE	[2EC3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB3, 0x0334 };
    uint32_t const ces[8] = { 0x2EC3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_162)
{
    // AAB3 0021;	
    // (ꪳ) TAI VIET VOWEL UE	[2EC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB3, 0x0021 };
    uint32_t const ces[9] = { 0x2EC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_163)
{
    // AAB3 003F;	
    // (ꪳ) TAI VIET VOWEL UE	[2EC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB3, 0x003F };
    uint32_t const ces[9] = { 0x2EC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_164)
{
    // AAB3 0061;	
    // (ꪳ) TAI VIET VOWEL UE	[2EC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB3, 0x0061 };
    uint32_t const ces[9] = { 0x2EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_165)
{
    // AAB3 0041;	
    // (ꪳ) TAI VIET VOWEL UE	[2EC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB3, 0x0041 };
    uint32_t const ces[9] = { 0x2EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_166)
{
    // AAB3 0062;	
    // (ꪳ) TAI VIET VOWEL UE	[2EC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB3, 0x0062 };
    uint32_t const ces[9] = { 0x2EC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_167)
{
    // 0334 AAB4;	
    // (ꪴ) TAI VIET VOWEL U	[2EC4 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAB4 };
    uint32_t const ces[8] = { 0x2EC4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_168)
{
    // AAB4 0334;	
    // (ꪴ) TAI VIET VOWEL U	[2EC4 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB4, 0x0334 };
    uint32_t const ces[8] = { 0x2EC4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_169)
{
    // AAB4 0021;	
    // (ꪴ) TAI VIET VOWEL U	[2EC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB4, 0x0021 };
    uint32_t const ces[9] = { 0x2EC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_170)
{
    // AAB4 003F;	
    // (ꪴ) TAI VIET VOWEL U	[2EC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB4, 0x003F };
    uint32_t const ces[9] = { 0x2EC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_171)
{
    // AAB4 0061;	
    // (ꪴ) TAI VIET VOWEL U	[2EC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB4, 0x0061 };
    uint32_t const ces[9] = { 0x2EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_172)
{
    // AAB4 0041;	
    // (ꪴ) TAI VIET VOWEL U	[2EC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB4, 0x0041 };
    uint32_t const ces[9] = { 0x2EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_173)
{
    // AAB4 0062;	
    // (ꪴ) TAI VIET VOWEL U	[2EC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB4, 0x0062 };
    uint32_t const ces[9] = { 0x2EC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_174)
{
    // AAB5 0021;	
    // (ꪵ) TAI VIET VOWEL E	[2EC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB5, 0x0021 };
    uint32_t const ces[9] = { 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_175)
{
    // AAB5 003F;	
    // (ꪵ) TAI VIET VOWEL E	[2EC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB5, 0x003F };
    uint32_t const ces[9] = { 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_176)
{
    // AAB5 0061;	
    // (ꪵ) TAI VIET VOWEL E	[2EC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB5, 0x0061 };
    uint32_t const ces[9] = { 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_177)
{
    // AAB5 0041;	
    // (ꪵ) TAI VIET VOWEL E	[2EC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB5, 0x0041 };
    uint32_t const ces[9] = { 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_178)
{
    // AAB5 0062;	
    // (ꪵ) TAI VIET VOWEL E	[2EC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB5, 0x0062 };
    uint32_t const ces[9] = { 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_179)
{
    // AAB5 0001 AA80 0061;	
    // (ꪵ'\u0001'ꪀ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW KO	[2EC5 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_180)
{
    // AAB5 0591 AA80 0061;	
    // (ꪵ֑ꪀ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KO	[2EC5 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_181)
{
    // AAB5 1D165 AA80 0061;	
    // (ꪵ𝅥ꪀ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KO	[2EC5 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_182)
{
    // AAB5 0001 AA81 0061;	
    // (ꪵ'\u0001'ꪁ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH KO	[2EC5 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_183)
{
    // AAB5 0591 AA81 0061;	
    // (ꪵ֑ꪁ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KO	[2EC5 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_184)
{
    // AAB5 1D165 AA81 0061;	
    // (ꪵ𝅥ꪁ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KO	[2EC5 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_185)
{
    // AAB5 0001 AA82 0061;	
    // (ꪵ'\u0001'ꪂ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW KHO	[2EC5 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_186)
{
    // AAB5 0591 AA82 0061;	
    // (ꪵ֑ꪂ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHO	[2EC5 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_187)
{
    // AAB5 1D165 AA82 0061;	
    // (ꪵ𝅥ꪂ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHO	[2EC5 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_188)
{
    // AAB5 0001 AA83 0061;	
    // (ꪵ'\u0001'ꪃ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2EC5 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_189)
{
    // AAB5 0591 AA83 0061;	
    // (ꪵ֑ꪃ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2EC5 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_190)
{
    // AAB5 1D165 AA83 0061;	
    // (ꪵ𝅥ꪃ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2EC5 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_191)
{
    // AAB5 0001 AA84 0061;	
    // (ꪵ'\u0001'ꪄ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2EC5 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_192)
{
    // AAB5 0591 AA84 0061;	
    // (ꪵ֑ꪄ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2EC5 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_193)
{
    // AAB5 1D165 AA84 0061;	
    // (ꪵ𝅥ꪄ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2EC5 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_194)
{
    // AAB5 0001 AA85 0061;	
    // (ꪵ'\u0001'ꪅ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2EC5 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_195)
{
    // AAB5 0591 AA85 0061;	
    // (ꪵ֑ꪅ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2EC5 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_196)
{
    // AAB5 1D165 AA85 0061;	
    // (ꪵ𝅥ꪅ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2EC5 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_197)
{
    // AAB5 0001 AA86 0061;	
    // (ꪵ'\u0001'ꪆ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW GO	[2EC5 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_198)
{
    // AAB5 0591 AA86 0061;	
    // (ꪵ֑ꪆ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2EC5 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_199)
{
    // AAB5 1D165 AA86 0061;	
    // (ꪵ𝅥ꪆ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2EC5 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_200)
{
    // AAB5 0001 AA87 0061;	
    // (ꪵ'\u0001'ꪇ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2EC5 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_201)
{
    // AAB5 0591 AA87 0061;	
    // (ꪵ֑ꪇ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2EC5 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_202)
{
    // AAB5 1D165 AA87 0061;	
    // (ꪵ𝅥ꪇ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2EC5 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_203)
{
    // AAB5 0001 AA88 0061;	
    // (ꪵ'\u0001'ꪈ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2EC5 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_204)
{
    // AAB5 0591 AA88 0061;	
    // (ꪵ֑ꪈ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2EC5 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_205)
{
    // AAB5 1D165 AA88 0061;	
    // (ꪵ𝅥ꪈ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2EC5 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_206)
{
    // AAB5 0001 AA89 0061;	
    // (ꪵ'\u0001'ꪉ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2EC5 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_207)
{
    // AAB5 0591 AA89 0061;	
    // (ꪵ֑ꪉ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2EC5 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_208)
{
    // AAB5 1D165 AA89 0061;	
    // (ꪵ𝅥ꪉ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2EC5 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_209)
{
    // AAB5 0001 AA8A 0061;	
    // (ꪵ'\u0001'ꪊ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW CO	[2EC5 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_210)
{
    // AAB5 0591 AA8A 0061;	
    // (ꪵ֑ꪊ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2EC5 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_211)
{
    // AAB5 1D165 AA8A 0061;	
    // (ꪵ𝅥ꪊ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2EC5 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_212)
{
    // AAB5 0001 AA8B 0061;	
    // (ꪵ'\u0001'ꪋ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2EC5 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_213)
{
    // AAB5 0591 AA8B 0061;	
    // (ꪵ֑ꪋ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2EC5 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_214)
{
    // AAB5 1D165 AA8B 0061;	
    // (ꪵ𝅥ꪋ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2EC5 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_215)
{
    // AAB5 0001 AA8C 0061;	
    // (ꪵ'\u0001'ꪌ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2EC5 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_216)
{
    // AAB5 0591 AA8C 0061;	
    // (ꪵ֑ꪌ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2EC5 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_217)
{
    // AAB5 1D165 AA8C 0061;	
    // (ꪵ𝅥ꪌ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2EC5 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_218)
{
    // AAB5 0001 AA8D 0061;	
    // (ꪵ'\u0001'ꪍ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2EC5 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_219)
{
    // AAB5 0591 AA8D 0061;	
    // (ꪵ֑ꪍ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2EC5 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_220)
{
    // AAB5 1D165 AA8D 0061;	
    // (ꪵ𝅥ꪍ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2EC5 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_221)
{
    // AAB5 0001 AA8E 0061;	
    // (ꪵ'\u0001'ꪎ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW SO	[2EC5 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_222)
{
    // AAB5 0591 AA8E 0061;	
    // (ꪵ֑ꪎ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2EC5 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_223)
{
    // AAB5 1D165 AA8E 0061;	
    // (ꪵ𝅥ꪎ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2EC5 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_224)
{
    // AAB5 0001 AA8F 0061;	
    // (ꪵ'\u0001'ꪏ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2EC5 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_225)
{
    // AAB5 0591 AA8F 0061;	
    // (ꪵ֑ꪏ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2EC5 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_226)
{
    // AAB5 1D165 AA8F 0061;	
    // (ꪵ𝅥ꪏ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2EC5 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_227)
{
    // AAB5 0001 AA90 0061;	
    // (ꪵ'\u0001'ꪐ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2EC5 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_228)
{
    // AAB5 0591 AA90 0061;	
    // (ꪵ֑ꪐ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2EC5 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_229)
{
    // AAB5 1D165 AA90 0061;	
    // (ꪵ𝅥ꪐ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2EC5 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_230)
{
    // AAB5 0001 AA91 0061;	
    // (ꪵ'\u0001'ꪑ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2EC5 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_231)
{
    // AAB5 0591 AA91 0061;	
    // (ꪵ֑ꪑ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2EC5 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_232)
{
    // AAB5 1D165 AA91 0061;	
    // (ꪵ𝅥ꪑ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2EC5 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_233)
{
    // AAB5 0001 AA92 0061;	
    // (ꪵ'\u0001'ꪒ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW DO	[2EC5 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_234)
{
    // AAB5 0591 AA92 0061;	
    // (ꪵ֑ꪒ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2EC5 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_235)
{
    // AAB5 1D165 AA92 0061;	
    // (ꪵ𝅥ꪒ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2EC5 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_236)
{
    // AAB5 0001 AA93 0061;	
    // (ꪵ'\u0001'ꪓ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2EC5 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_237)
{
    // AAB5 0591 AA93 0061;	
    // (ꪵ֑ꪓ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2EC5 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_238)
{
    // AAB5 1D165 AA93 0061;	
    // (ꪵ𝅥ꪓ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2EC5 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_239)
{
    // AAB5 0001 AA94 0061;	
    // (ꪵ'\u0001'ꪔ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW TO	[2EC5 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_240)
{
    // AAB5 0591 AA94 0061;	
    // (ꪵ֑ꪔ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2EC5 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_241)
{
    // AAB5 1D165 AA94 0061;	
    // (ꪵ𝅥ꪔ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2EC5 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_242)
{
    // AAB5 0001 AA95 0061;	
    // (ꪵ'\u0001'ꪕ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2EC5 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_243)
{
    // AAB5 0591 AA95 0061;	
    // (ꪵ֑ꪕ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2EC5 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_244)
{
    // AAB5 1D165 AA95 0061;	
    // (ꪵ𝅥ꪕ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2EC5 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_245)
{
    // AAB5 0001 AA96 0061;	
    // (ꪵ'\u0001'ꪖ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW THO	[2EC5 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_246)
{
    // AAB5 0591 AA96 0061;	
    // (ꪵ֑ꪖ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2EC5 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_247)
{
    // AAB5 1D165 AA96 0061;	
    // (ꪵ𝅥ꪖ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2EC5 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_248)
{
    // AAB5 0001 AA97 0061;	
    // (ꪵ'\u0001'ꪗ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2EC5 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_249)
{
    // AAB5 0591 AA97 0061;	
    // (ꪵ֑ꪗ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2EC5 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_250)
{
    // AAB5 1D165 AA97 0061;	
    // (ꪵ𝅥ꪗ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2EC5 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_251)
{
    // AAB5 0001 AA98 0061;	
    // (ꪵ'\u0001'ꪘ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW NO	[2EC5 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_252)
{
    // AAB5 0591 AA98 0061;	
    // (ꪵ֑ꪘ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2EC5 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_253)
{
    // AAB5 1D165 AA98 0061;	
    // (ꪵ𝅥ꪘ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2EC5 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_254)
{
    // AAB5 0001 AA99 0061;	
    // (ꪵ'\u0001'ꪙ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2EC5 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_255)
{
    // AAB5 0591 AA99 0061;	
    // (ꪵ֑ꪙ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2EC5 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_256)
{
    // AAB5 1D165 AA99 0061;	
    // (ꪵ𝅥ꪙ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2EC5 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_257)
{
    // AAB5 0001 AA9A 0061;	
    // (ꪵ'\u0001'ꪚ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW BO	[2EC5 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_258)
{
    // AAB5 0591 AA9A 0061;	
    // (ꪵ֑ꪚ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2EC5 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_259)
{
    // AAB5 1D165 AA9A 0061;	
    // (ꪵ𝅥ꪚ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2EC5 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_260)
{
    // AAB5 0001 AA9B 0061;	
    // (ꪵ'\u0001'ꪛ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2EC5 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_261)
{
    // AAB5 0591 AA9B 0061;	
    // (ꪵ֑ꪛ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2EC5 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_262)
{
    // AAB5 1D165 AA9B 0061;	
    // (ꪵ𝅥ꪛ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2EC5 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_263)
{
    // AAB5 0001 AA9C 0061;	
    // (ꪵ'\u0001'ꪜ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW PO	[2EC5 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_264)
{
    // AAB5 0591 AA9C 0061;	
    // (ꪵ֑ꪜ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2EC5 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_265)
{
    // AAB5 1D165 AA9C 0061;	
    // (ꪵ𝅥ꪜ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2EC5 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_266)
{
    // AAB5 0001 AA9D 0061;	
    // (ꪵ'\u0001'ꪝ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2EC5 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_267)
{
    // AAB5 0591 AA9D 0061;	
    // (ꪵ֑ꪝ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2EC5 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_268)
{
    // AAB5 1D165 AA9D 0061;	
    // (ꪵ𝅥ꪝ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2EC5 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_269)
{
    // AAB5 0001 AA9E 0061;	
    // (ꪵ'\u0001'ꪞ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2EC5 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_270)
{
    // AAB5 0591 AA9E 0061;	
    // (ꪵ֑ꪞ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2EC5 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_271)
{
    // AAB5 1D165 AA9E 0061;	
    // (ꪵ𝅥ꪞ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2EC5 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_272)
{
    // AAB5 0001 AA9F 0061;	
    // (ꪵ'\u0001'ꪟ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2EC5 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_273)
{
    // AAB5 0591 AA9F 0061;	
    // (ꪵ֑ꪟ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2EC5 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_274)
{
    // AAB5 1D165 AA9F 0061;	
    // (ꪵ𝅥ꪟ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2EC5 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_275)
{
    // AAB5 0001 AAA0 0061;	
    // (ꪵ'\u0001'ꪠ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW FO	[2EC5 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_276)
{
    // AAB5 0591 AAA0 0061;	
    // (ꪵ֑ꪠ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2EC5 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_277)
{
    // AAB5 1D165 AAA0 0061;	
    // (ꪵ𝅥ꪠ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2EC5 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_278)
{
    // AAB5 0001 AAA1 0061;	
    // (ꪵ'\u0001'ꪡ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2EC5 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_279)
{
    // AAB5 0591 AAA1 0061;	
    // (ꪵ֑ꪡ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2EC5 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_280)
{
    // AAB5 1D165 AAA1 0061;	
    // (ꪵ𝅥ꪡ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2EC5 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_281)
{
    // AAB5 0001 AAA2 0061;	
    // (ꪵ'\u0001'ꪢ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW MO	[2EC5 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_282)
{
    // AAB5 0591 AAA2 0061;	
    // (ꪵ֑ꪢ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2EC5 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_283)
{
    // AAB5 1D165 AAA2 0061;	
    // (ꪵ𝅥ꪢ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2EC5 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_284)
{
    // AAB5 0001 AAA3 0061;	
    // (ꪵ'\u0001'ꪣ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2EC5 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_285)
{
    // AAB5 0591 AAA3 0061;	
    // (ꪵ֑ꪣ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2EC5 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_286)
{
    // AAB5 1D165 AAA3 0061;	
    // (ꪵ𝅥ꪣ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2EC5 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_287)
{
    // AAB5 0001 AAA4 0061;	
    // (ꪵ'\u0001'ꪤ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW YO	[2EC5 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_288)
{
    // AAB5 0591 AAA4 0061;	
    // (ꪵ֑ꪤ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2EC5 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_289)
{
    // AAB5 1D165 AAA4 0061;	
    // (ꪵ𝅥ꪤ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2EC5 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_290)
{
    // AAB5 0001 AAA5 0061;	
    // (ꪵ'\u0001'ꪥ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2EC5 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_291)
{
    // AAB5 0591 AAA5 0061;	
    // (ꪵ֑ꪥ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2EC5 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_292)
{
    // AAB5 1D165 AAA5 0061;	
    // (ꪵ𝅥ꪥ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2EC5 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_293)
{
    // AAB5 0001 AAA6 0061;	
    // (ꪵ'\u0001'ꪦ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW RO	[2EC5 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_294)
{
    // AAB5 0591 AAA6 0061;	
    // (ꪵ֑ꪦ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2EC5 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_295)
{
    // AAB5 1D165 AAA6 0061;	
    // (ꪵ𝅥ꪦ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2EC5 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_296)
{
    // AAB5 0001 AAA7 0061;	
    // (ꪵ'\u0001'ꪧ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2EC5 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_297)
{
    // AAB5 0591 AAA7 0061;	
    // (ꪵ֑ꪧ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2EC5 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_298)
{
    // AAB5 1D165 AAA7 0061;	
    // (ꪵ𝅥ꪧ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2EC5 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_299)
{
    // AAB5 0001 AAA8 0061;	
    // (ꪵ'\u0001'ꪨ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW LO	[2EC5 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_300)
{
    // AAB5 0591 AAA8 0061;	
    // (ꪵ֑ꪨ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2EC5 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_301)
{
    // AAB5 1D165 AAA8 0061;	
    // (ꪵ𝅥ꪨ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2EC5 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_302)
{
    // AAB5 0001 AAA9 0061;	
    // (ꪵ'\u0001'ꪩ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2EC5 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_303)
{
    // AAB5 0591 AAA9 0061;	
    // (ꪵ֑ꪩ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2EC5 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_304)
{
    // AAB5 1D165 AAA9 0061;	
    // (ꪵ𝅥ꪩ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2EC5 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_305)
{
    // AAB5 0001 AAAA 0061;	
    // (ꪵ'\u0001'ꪪ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW VO	[2EC5 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_306)
{
    // AAB5 0591 AAAA 0061;	
    // (ꪵ֑ꪪ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2EC5 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_307)
{
    // AAB5 1D165 AAAA 0061;	
    // (ꪵ𝅥ꪪ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2EC5 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_308)
{
    // AAB5 0001 AAAB 0061;	
    // (ꪵ'\u0001'ꪫ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2EC5 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_309)
{
    // AAB5 0591 AAAB 0061;	
    // (ꪵ֑ꪫ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2EC5 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_310)
{
    // AAB5 1D165 AAAB 0061;	
    // (ꪵ𝅥ꪫ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2EC5 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_311)
{
    // AAB5 0001 AAAC 0061;	
    // (ꪵ'\u0001'ꪬ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW HO	[2EC5 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_312)
{
    // AAB5 0591 AAAC 0061;	
    // (ꪵ֑ꪬ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2EC5 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_313)
{
    // AAB5 1D165 AAAC 0061;	
    // (ꪵ𝅥ꪬ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2EC5 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_314)
{
    // AAB5 0001 AAAD 0061;	
    // (ꪵ'\u0001'ꪭ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2EC5 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_315)
{
    // AAB5 0591 AAAD 0061;	
    // (ꪵ֑ꪭ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2EC5 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_316)
{
    // AAB5 1D165 AAAD 0061;	
    // (ꪵ𝅥ꪭ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2EC5 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_317)
{
    // AAB5 0001 AAAE 0061;	
    // (ꪵ'\u0001'ꪮ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER LOW O	[2EC5 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_318)
{
    // AAB5 0591 AAAE 0061;	
    // (ꪵ֑ꪮ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2EC5 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_319)
{
    // AAB5 1D165 AAAE 0061;	
    // (ꪵ𝅥ꪮ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2EC5 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_320)
{
    // AAB5 0001 AAAF 0061;	
    // (ꪵ'\u0001'ꪯ) TAI VIET VOWEL E, <START OF HEADING>, TAI VIET LETTER HIGH O	[2EC5 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0001, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_321)
{
    // AAB5 0591 AAAF 0061;	
    // (ꪵ֑ꪯ) TAI VIET VOWEL E, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2EC5 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x0591, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_322)
{
    // AAB5 1D165 AAAF 0061;	
    // (ꪵ𝅥ꪯ) TAI VIET VOWEL E, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2EC5 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB5, 0x1D165, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EC5, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_323)
{
    // AAB6 0021;	
    // (ꪶ) TAI VIET VOWEL O	[2EC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB6, 0x0021 };
    uint32_t const ces[9] = { 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_324)
{
    // AAB6 003F;	
    // (ꪶ) TAI VIET VOWEL O	[2EC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB6, 0x003F };
    uint32_t const ces[9] = { 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_325)
{
    // AAB6 0061;	
    // (ꪶ) TAI VIET VOWEL O	[2EC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB6, 0x0061 };
    uint32_t const ces[9] = { 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_326)
{
    // AAB6 0041;	
    // (ꪶ) TAI VIET VOWEL O	[2EC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB6, 0x0041 };
    uint32_t const ces[9] = { 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_327)
{
    // AAB6 0062;	
    // (ꪶ) TAI VIET VOWEL O	[2EC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB6, 0x0062 };
    uint32_t const ces[9] = { 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_328)
{
    // AAB6 0001 AA80 0061;	
    // (ꪶ'\u0001'ꪀ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW KO	[2EC6 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_329)
{
    // AAB6 0591 AA80 0061;	
    // (ꪶ֑ꪀ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KO	[2EC6 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_330)
{
    // AAB6 1D165 AA80 0061;	
    // (ꪶ𝅥ꪀ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KO	[2EC6 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_331)
{
    // AAB6 0001 AA81 0061;	
    // (ꪶ'\u0001'ꪁ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH KO	[2EC6 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_332)
{
    // AAB6 0591 AA81 0061;	
    // (ꪶ֑ꪁ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KO	[2EC6 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_333)
{
    // AAB6 1D165 AA81 0061;	
    // (ꪶ𝅥ꪁ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KO	[2EC6 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_334)
{
    // AAB6 0001 AA82 0061;	
    // (ꪶ'\u0001'ꪂ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW KHO	[2EC6 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_335)
{
    // AAB6 0591 AA82 0061;	
    // (ꪶ֑ꪂ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHO	[2EC6 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_336)
{
    // AAB6 1D165 AA82 0061;	
    // (ꪶ𝅥ꪂ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHO	[2EC6 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_337)
{
    // AAB6 0001 AA83 0061;	
    // (ꪶ'\u0001'ꪃ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2EC6 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_338)
{
    // AAB6 0591 AA83 0061;	
    // (ꪶ֑ꪃ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2EC6 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_339)
{
    // AAB6 1D165 AA83 0061;	
    // (ꪶ𝅥ꪃ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2EC6 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_340)
{
    // AAB6 0001 AA84 0061;	
    // (ꪶ'\u0001'ꪄ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2EC6 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_341)
{
    // AAB6 0591 AA84 0061;	
    // (ꪶ֑ꪄ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2EC6 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_342)
{
    // AAB6 1D165 AA84 0061;	
    // (ꪶ𝅥ꪄ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2EC6 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_343)
{
    // AAB6 0001 AA85 0061;	
    // (ꪶ'\u0001'ꪅ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2EC6 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_344)
{
    // AAB6 0591 AA85 0061;	
    // (ꪶ֑ꪅ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2EC6 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_345)
{
    // AAB6 1D165 AA85 0061;	
    // (ꪶ𝅥ꪅ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2EC6 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_346)
{
    // AAB6 0001 AA86 0061;	
    // (ꪶ'\u0001'ꪆ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW GO	[2EC6 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_347)
{
    // AAB6 0591 AA86 0061;	
    // (ꪶ֑ꪆ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2EC6 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_348)
{
    // AAB6 1D165 AA86 0061;	
    // (ꪶ𝅥ꪆ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2EC6 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_349)
{
    // AAB6 0001 AA87 0061;	
    // (ꪶ'\u0001'ꪇ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2EC6 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_350)
{
    // AAB6 0591 AA87 0061;	
    // (ꪶ֑ꪇ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2EC6 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_351)
{
    // AAB6 1D165 AA87 0061;	
    // (ꪶ𝅥ꪇ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2EC6 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_352)
{
    // AAB6 0001 AA88 0061;	
    // (ꪶ'\u0001'ꪈ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2EC6 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_353)
{
    // AAB6 0591 AA88 0061;	
    // (ꪶ֑ꪈ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2EC6 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_354)
{
    // AAB6 1D165 AA88 0061;	
    // (ꪶ𝅥ꪈ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2EC6 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_355)
{
    // AAB6 0001 AA89 0061;	
    // (ꪶ'\u0001'ꪉ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2EC6 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_356)
{
    // AAB6 0591 AA89 0061;	
    // (ꪶ֑ꪉ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2EC6 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_357)
{
    // AAB6 1D165 AA89 0061;	
    // (ꪶ𝅥ꪉ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2EC6 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_358)
{
    // AAB6 0001 AA8A 0061;	
    // (ꪶ'\u0001'ꪊ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW CO	[2EC6 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_359)
{
    // AAB6 0591 AA8A 0061;	
    // (ꪶ֑ꪊ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2EC6 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_360)
{
    // AAB6 1D165 AA8A 0061;	
    // (ꪶ𝅥ꪊ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2EC6 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_361)
{
    // AAB6 0001 AA8B 0061;	
    // (ꪶ'\u0001'ꪋ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2EC6 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_362)
{
    // AAB6 0591 AA8B 0061;	
    // (ꪶ֑ꪋ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2EC6 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_363)
{
    // AAB6 1D165 AA8B 0061;	
    // (ꪶ𝅥ꪋ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2EC6 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_364)
{
    // AAB6 0001 AA8C 0061;	
    // (ꪶ'\u0001'ꪌ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2EC6 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_365)
{
    // AAB6 0591 AA8C 0061;	
    // (ꪶ֑ꪌ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2EC6 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_366)
{
    // AAB6 1D165 AA8C 0061;	
    // (ꪶ𝅥ꪌ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2EC6 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_367)
{
    // AAB6 0001 AA8D 0061;	
    // (ꪶ'\u0001'ꪍ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2EC6 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_368)
{
    // AAB6 0591 AA8D 0061;	
    // (ꪶ֑ꪍ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2EC6 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_369)
{
    // AAB6 1D165 AA8D 0061;	
    // (ꪶ𝅥ꪍ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2EC6 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_370)
{
    // AAB6 0001 AA8E 0061;	
    // (ꪶ'\u0001'ꪎ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW SO	[2EC6 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_371)
{
    // AAB6 0591 AA8E 0061;	
    // (ꪶ֑ꪎ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2EC6 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_372)
{
    // AAB6 1D165 AA8E 0061;	
    // (ꪶ𝅥ꪎ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2EC6 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_373)
{
    // AAB6 0001 AA8F 0061;	
    // (ꪶ'\u0001'ꪏ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2EC6 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_374)
{
    // AAB6 0591 AA8F 0061;	
    // (ꪶ֑ꪏ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2EC6 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_375)
{
    // AAB6 1D165 AA8F 0061;	
    // (ꪶ𝅥ꪏ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2EC6 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_376)
{
    // AAB6 0001 AA90 0061;	
    // (ꪶ'\u0001'ꪐ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2EC6 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_377)
{
    // AAB6 0591 AA90 0061;	
    // (ꪶ֑ꪐ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2EC6 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_378)
{
    // AAB6 1D165 AA90 0061;	
    // (ꪶ𝅥ꪐ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2EC6 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_379)
{
    // AAB6 0001 AA91 0061;	
    // (ꪶ'\u0001'ꪑ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2EC6 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_380)
{
    // AAB6 0591 AA91 0061;	
    // (ꪶ֑ꪑ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2EC6 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_381)
{
    // AAB6 1D165 AA91 0061;	
    // (ꪶ𝅥ꪑ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2EC6 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_382)
{
    // AAB6 0001 AA92 0061;	
    // (ꪶ'\u0001'ꪒ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW DO	[2EC6 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_383)
{
    // AAB6 0591 AA92 0061;	
    // (ꪶ֑ꪒ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2EC6 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_384)
{
    // AAB6 1D165 AA92 0061;	
    // (ꪶ𝅥ꪒ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2EC6 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_385)
{
    // AAB6 0001 AA93 0061;	
    // (ꪶ'\u0001'ꪓ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2EC6 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_386)
{
    // AAB6 0591 AA93 0061;	
    // (ꪶ֑ꪓ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2EC6 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_387)
{
    // AAB6 1D165 AA93 0061;	
    // (ꪶ𝅥ꪓ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2EC6 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_388)
{
    // AAB6 0001 AA94 0061;	
    // (ꪶ'\u0001'ꪔ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW TO	[2EC6 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_389)
{
    // AAB6 0591 AA94 0061;	
    // (ꪶ֑ꪔ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2EC6 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_390)
{
    // AAB6 1D165 AA94 0061;	
    // (ꪶ𝅥ꪔ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2EC6 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_391)
{
    // AAB6 0001 AA95 0061;	
    // (ꪶ'\u0001'ꪕ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2EC6 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_392)
{
    // AAB6 0591 AA95 0061;	
    // (ꪶ֑ꪕ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2EC6 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_393)
{
    // AAB6 1D165 AA95 0061;	
    // (ꪶ𝅥ꪕ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2EC6 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_394)
{
    // AAB6 0001 AA96 0061;	
    // (ꪶ'\u0001'ꪖ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW THO	[2EC6 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_395)
{
    // AAB6 0591 AA96 0061;	
    // (ꪶ֑ꪖ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2EC6 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_396)
{
    // AAB6 1D165 AA96 0061;	
    // (ꪶ𝅥ꪖ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2EC6 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_397)
{
    // AAB6 0001 AA97 0061;	
    // (ꪶ'\u0001'ꪗ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2EC6 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_398)
{
    // AAB6 0591 AA97 0061;	
    // (ꪶ֑ꪗ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2EC6 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_399)
{
    // AAB6 1D165 AA97 0061;	
    // (ꪶ𝅥ꪗ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2EC6 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_400)
{
    // AAB6 0001 AA98 0061;	
    // (ꪶ'\u0001'ꪘ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW NO	[2EC6 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_401)
{
    // AAB6 0591 AA98 0061;	
    // (ꪶ֑ꪘ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2EC6 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_402)
{
    // AAB6 1D165 AA98 0061;	
    // (ꪶ𝅥ꪘ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2EC6 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_403)
{
    // AAB6 0001 AA99 0061;	
    // (ꪶ'\u0001'ꪙ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2EC6 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_404)
{
    // AAB6 0591 AA99 0061;	
    // (ꪶ֑ꪙ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2EC6 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_405)
{
    // AAB6 1D165 AA99 0061;	
    // (ꪶ𝅥ꪙ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2EC6 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_406)
{
    // AAB6 0001 AA9A 0061;	
    // (ꪶ'\u0001'ꪚ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW BO	[2EC6 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_407)
{
    // AAB6 0591 AA9A 0061;	
    // (ꪶ֑ꪚ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2EC6 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_408)
{
    // AAB6 1D165 AA9A 0061;	
    // (ꪶ𝅥ꪚ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2EC6 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_409)
{
    // AAB6 0001 AA9B 0061;	
    // (ꪶ'\u0001'ꪛ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2EC6 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_410)
{
    // AAB6 0591 AA9B 0061;	
    // (ꪶ֑ꪛ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2EC6 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_411)
{
    // AAB6 1D165 AA9B 0061;	
    // (ꪶ𝅥ꪛ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2EC6 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_412)
{
    // AAB6 0001 AA9C 0061;	
    // (ꪶ'\u0001'ꪜ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW PO	[2EC6 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_413)
{
    // AAB6 0591 AA9C 0061;	
    // (ꪶ֑ꪜ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2EC6 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_414)
{
    // AAB6 1D165 AA9C 0061;	
    // (ꪶ𝅥ꪜ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2EC6 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_415)
{
    // AAB6 0001 AA9D 0061;	
    // (ꪶ'\u0001'ꪝ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2EC6 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_416)
{
    // AAB6 0591 AA9D 0061;	
    // (ꪶ֑ꪝ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2EC6 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_417)
{
    // AAB6 1D165 AA9D 0061;	
    // (ꪶ𝅥ꪝ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2EC6 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_418)
{
    // AAB6 0001 AA9E 0061;	
    // (ꪶ'\u0001'ꪞ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2EC6 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_419)
{
    // AAB6 0591 AA9E 0061;	
    // (ꪶ֑ꪞ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2EC6 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_420)
{
    // AAB6 1D165 AA9E 0061;	
    // (ꪶ𝅥ꪞ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2EC6 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_421)
{
    // AAB6 0001 AA9F 0061;	
    // (ꪶ'\u0001'ꪟ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2EC6 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_422)
{
    // AAB6 0591 AA9F 0061;	
    // (ꪶ֑ꪟ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2EC6 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_423)
{
    // AAB6 1D165 AA9F 0061;	
    // (ꪶ𝅥ꪟ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2EC6 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_424)
{
    // AAB6 0001 AAA0 0061;	
    // (ꪶ'\u0001'ꪠ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW FO	[2EC6 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_425)
{
    // AAB6 0591 AAA0 0061;	
    // (ꪶ֑ꪠ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2EC6 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_426)
{
    // AAB6 1D165 AAA0 0061;	
    // (ꪶ𝅥ꪠ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2EC6 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_427)
{
    // AAB6 0001 AAA1 0061;	
    // (ꪶ'\u0001'ꪡ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2EC6 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_428)
{
    // AAB6 0591 AAA1 0061;	
    // (ꪶ֑ꪡ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2EC6 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_429)
{
    // AAB6 1D165 AAA1 0061;	
    // (ꪶ𝅥ꪡ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2EC6 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_430)
{
    // AAB6 0001 AAA2 0061;	
    // (ꪶ'\u0001'ꪢ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW MO	[2EC6 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_431)
{
    // AAB6 0591 AAA2 0061;	
    // (ꪶ֑ꪢ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2EC6 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_432)
{
    // AAB6 1D165 AAA2 0061;	
    // (ꪶ𝅥ꪢ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2EC6 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_433)
{
    // AAB6 0001 AAA3 0061;	
    // (ꪶ'\u0001'ꪣ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2EC6 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_434)
{
    // AAB6 0591 AAA3 0061;	
    // (ꪶ֑ꪣ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2EC6 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_435)
{
    // AAB6 1D165 AAA3 0061;	
    // (ꪶ𝅥ꪣ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2EC6 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_436)
{
    // AAB6 0001 AAA4 0061;	
    // (ꪶ'\u0001'ꪤ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW YO	[2EC6 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_437)
{
    // AAB6 0591 AAA4 0061;	
    // (ꪶ֑ꪤ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2EC6 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_438)
{
    // AAB6 1D165 AAA4 0061;	
    // (ꪶ𝅥ꪤ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2EC6 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_439)
{
    // AAB6 0001 AAA5 0061;	
    // (ꪶ'\u0001'ꪥ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2EC6 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_440)
{
    // AAB6 0591 AAA5 0061;	
    // (ꪶ֑ꪥ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2EC6 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_441)
{
    // AAB6 1D165 AAA5 0061;	
    // (ꪶ𝅥ꪥ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2EC6 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_442)
{
    // AAB6 0001 AAA6 0061;	
    // (ꪶ'\u0001'ꪦ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW RO	[2EC6 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_443)
{
    // AAB6 0591 AAA6 0061;	
    // (ꪶ֑ꪦ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2EC6 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_444)
{
    // AAB6 1D165 AAA6 0061;	
    // (ꪶ𝅥ꪦ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2EC6 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_445)
{
    // AAB6 0001 AAA7 0061;	
    // (ꪶ'\u0001'ꪧ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2EC6 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_446)
{
    // AAB6 0591 AAA7 0061;	
    // (ꪶ֑ꪧ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2EC6 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_447)
{
    // AAB6 1D165 AAA7 0061;	
    // (ꪶ𝅥ꪧ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2EC6 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_448)
{
    // AAB6 0001 AAA8 0061;	
    // (ꪶ'\u0001'ꪨ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW LO	[2EC6 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_449)
{
    // AAB6 0591 AAA8 0061;	
    // (ꪶ֑ꪨ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2EC6 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_450)
{
    // AAB6 1D165 AAA8 0061;	
    // (ꪶ𝅥ꪨ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2EC6 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_451)
{
    // AAB6 0001 AAA9 0061;	
    // (ꪶ'\u0001'ꪩ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2EC6 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_452)
{
    // AAB6 0591 AAA9 0061;	
    // (ꪶ֑ꪩ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2EC6 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_453)
{
    // AAB6 1D165 AAA9 0061;	
    // (ꪶ𝅥ꪩ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2EC6 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_454)
{
    // AAB6 0001 AAAA 0061;	
    // (ꪶ'\u0001'ꪪ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW VO	[2EC6 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_455)
{
    // AAB6 0591 AAAA 0061;	
    // (ꪶ֑ꪪ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2EC6 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_456)
{
    // AAB6 1D165 AAAA 0061;	
    // (ꪶ𝅥ꪪ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2EC6 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_457)
{
    // AAB6 0001 AAAB 0061;	
    // (ꪶ'\u0001'ꪫ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2EC6 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_458)
{
    // AAB6 0591 AAAB 0061;	
    // (ꪶ֑ꪫ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2EC6 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_459)
{
    // AAB6 1D165 AAAB 0061;	
    // (ꪶ𝅥ꪫ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2EC6 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_460)
{
    // AAB6 0001 AAAC 0061;	
    // (ꪶ'\u0001'ꪬ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW HO	[2EC6 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_461)
{
    // AAB6 0591 AAAC 0061;	
    // (ꪶ֑ꪬ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2EC6 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_462)
{
    // AAB6 1D165 AAAC 0061;	
    // (ꪶ𝅥ꪬ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2EC6 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAAC, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_463)
{
    // AAB6 0001 AAAD 0061;	
    // (ꪶ'\u0001'ꪭ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2EC6 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_464)
{
    // AAB6 0591 AAAD 0061;	
    // (ꪶ֑ꪭ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2EC6 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_465)
{
    // AAB6 1D165 AAAD 0061;	
    // (ꪶ𝅥ꪭ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2EC6 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAAD, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_466)
{
    // AAB6 0001 AAAE 0061;	
    // (ꪶ'\u0001'ꪮ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER LOW O	[2EC6 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_467)
{
    // AAB6 0591 AAAE 0061;	
    // (ꪶ֑ꪮ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2EC6 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_468)
{
    // AAB6 1D165 AAAE 0061;	
    // (ꪶ𝅥ꪮ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2EC6 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAAE, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_469)
{
    // AAB6 0001 AAAF 0061;	
    // (ꪶ'\u0001'ꪯ) TAI VIET VOWEL O, <START OF HEADING>, TAI VIET LETTER HIGH O	[2EC6 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0001, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_470)
{
    // AAB6 0591 AAAF 0061;	
    // (ꪶ֑ꪯ) TAI VIET VOWEL O, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2EC6 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x0591, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_471)
{
    // AAB6 1D165 AAAF 0061;	
    // (ꪶ𝅥ꪯ) TAI VIET VOWEL O, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2EC6 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB6, 0x1D165, 0xAAAF, 0x0061 };
    uint32_t const ces[12] = { 0x2EC6, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_472)
{
    // 0334 AAB7;	
    // (ꪷ) TAI VIET MAI KHIT	[2EC7 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAB7 };
    uint32_t const ces[8] = { 0x2EC7, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_473)
{
    // AAB7 0334;	
    // (ꪷ) TAI VIET MAI KHIT	[2EC7 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB7, 0x0334 };
    uint32_t const ces[8] = { 0x2EC7, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_474)
{
    // AAB7 0021;	
    // (ꪷ) TAI VIET MAI KHIT	[2EC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB7, 0x0021 };
    uint32_t const ces[9] = { 0x2EC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_475)
{
    // AAB7 003F;	
    // (ꪷ) TAI VIET MAI KHIT	[2EC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB7, 0x003F };
    uint32_t const ces[9] = { 0x2EC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_476)
{
    // AAB7 0061;	
    // (ꪷ) TAI VIET MAI KHIT	[2EC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB7, 0x0061 };
    uint32_t const ces[9] = { 0x2EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_477)
{
    // AAB7 0041;	
    // (ꪷ) TAI VIET MAI KHIT	[2EC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB7, 0x0041 };
    uint32_t const ces[9] = { 0x2EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_478)
{
    // AAB7 0062;	
    // (ꪷ) TAI VIET MAI KHIT	[2EC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB7, 0x0062 };
    uint32_t const ces[9] = { 0x2EC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_479)
{
    // 0334 AAB8;	
    // (ꪸ) TAI VIET VOWEL IA	[2EC8 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAB8 };
    uint32_t const ces[8] = { 0x2EC8, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_480)
{
    // AAB8 0334;	
    // (ꪸ) TAI VIET VOWEL IA	[2EC8 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB8, 0x0334 };
    uint32_t const ces[8] = { 0x2EC8, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_481)
{
    // AAB8 0021;	
    // (ꪸ) TAI VIET VOWEL IA	[2EC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB8, 0x0021 };
    uint32_t const ces[9] = { 0x2EC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_482)
{
    // AAB8 003F;	
    // (ꪸ) TAI VIET VOWEL IA	[2EC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB8, 0x003F };
    uint32_t const ces[9] = { 0x2EC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_483)
{
    // AAB8 0061;	
    // (ꪸ) TAI VIET VOWEL IA	[2EC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB8, 0x0061 };
    uint32_t const ces[9] = { 0x2EC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_484)
{
    // AAB8 0041;	
    // (ꪸ) TAI VIET VOWEL IA	[2EC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB8, 0x0041 };
    uint32_t const ces[9] = { 0x2EC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_485)
{
    // AAB8 0062;	
    // (ꪸ) TAI VIET VOWEL IA	[2EC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB8, 0x0062 };
    uint32_t const ces[9] = { 0x2EC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_486)
{
    // AAB9 0021;	
    // (ꪹ) TAI VIET VOWEL UEA	[2EC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB9, 0x0021 };
    uint32_t const ces[9] = { 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_487)
{
    // AAB9 003F;	
    // (ꪹ) TAI VIET VOWEL UEA	[2EC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB9, 0x003F };
    uint32_t const ces[9] = { 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_488)
{
    // AAB9 0061;	
    // (ꪹ) TAI VIET VOWEL UEA	[2EC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB9, 0x0061 };
    uint32_t const ces[9] = { 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_489)
{
    // AAB9 0041;	
    // (ꪹ) TAI VIET VOWEL UEA	[2EC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAB9, 0x0041 };
    uint32_t const ces[9] = { 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_490)
{
    // AAB9 0062;	
    // (ꪹ) TAI VIET VOWEL UEA	[2EC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAB9, 0x0062 };
    uint32_t const ces[9] = { 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_491)
{
    // AAB9 0001 AA80 0061;	
    // (ꪹ'\u0001'ꪀ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW KO	[2EC9 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x0001, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_492)
{
    // AAB9 0591 AA80 0061;	
    // (ꪹ֑ꪀ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KO	[2EC9 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x0591, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_493)
{
    // AAB9 1D165 AA80 0061;	
    // (ꪹ𝅥ꪀ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KO	[2EC9 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x1D165, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_494)
{
    // AAB9 0001 AA81 0061;	
    // (ꪹ'\u0001'ꪁ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH KO	[2EC9 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x0001, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_495)
{
    // AAB9 0591 AA81 0061;	
    // (ꪹ֑ꪁ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KO	[2EC9 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x0591, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_496)
{
    // AAB9 1D165 AA81 0061;	
    // (ꪹ𝅥ꪁ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KO	[2EC9 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x1D165, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_497)
{
    // AAB9 0001 AA82 0061;	
    // (ꪹ'\u0001'ꪂ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW KHO	[2EC9 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x0001, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_498)
{
    // AAB9 0591 AA82 0061;	
    // (ꪹ֑ꪂ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHO	[2EC9 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x0591, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_195_499)
{
    // AAB9 1D165 AA82 0061;	
    // (ꪹ𝅥ꪂ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHO	[2EC9 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0xAAB9, 0x1D165, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2EC9, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

