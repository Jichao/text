// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_062_000)
{
    // 1F5A3 0041;	
    // (🖣) BLACK DOWN POINTING BACKHAND INDEX	[156A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A3, 0x0041 };
    uint32_t const ces[9] = { 0x156A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_001)
{
    // 1F5A3 0062;	
    // (🖣) BLACK DOWN POINTING BACKHAND INDEX	[156A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A3, 0x0062 };
    uint32_t const ces[9] = { 0x156A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_002)
{
    // 1F5A4 0021;	
    // (🖤) BLACK HEART	[156B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A4, 0x0021 };
    uint32_t const ces[9] = { 0x156B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_003)
{
    // 1F5A4 003F;	
    // (🖤) BLACK HEART	[156B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A4, 0x003F };
    uint32_t const ces[9] = { 0x156B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_004)
{
    // 1F5A4 0061;	
    // (🖤) BLACK HEART	[156B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A4, 0x0061 };
    uint32_t const ces[9] = { 0x156B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_005)
{
    // 1F5A4 0041;	
    // (🖤) BLACK HEART	[156B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A4, 0x0041 };
    uint32_t const ces[9] = { 0x156B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_006)
{
    // 1F5A4 0062;	
    // (🖤) BLACK HEART	[156B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A4, 0x0062 };
    uint32_t const ces[9] = { 0x156B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_007)
{
    // 1F5A5 0021;	
    // (🖥) DESKTOP COMPUTER	[156C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A5, 0x0021 };
    uint32_t const ces[9] = { 0x156C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_008)
{
    // 1F5A5 003F;	
    // (🖥) DESKTOP COMPUTER	[156C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A5, 0x003F };
    uint32_t const ces[9] = { 0x156C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_009)
{
    // 1F5A5 0061;	
    // (🖥) DESKTOP COMPUTER	[156C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A5, 0x0061 };
    uint32_t const ces[9] = { 0x156C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_010)
{
    // 1F5A5 0041;	
    // (🖥) DESKTOP COMPUTER	[156C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A5, 0x0041 };
    uint32_t const ces[9] = { 0x156C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_011)
{
    // 1F5A5 0062;	
    // (🖥) DESKTOP COMPUTER	[156C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A5, 0x0062 };
    uint32_t const ces[9] = { 0x156C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_012)
{
    // 1F5A6 0021;	
    // (🖦) KEYBOARD AND MOUSE	[156D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A6, 0x0021 };
    uint32_t const ces[9] = { 0x156D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_013)
{
    // 1F5A6 003F;	
    // (🖦) KEYBOARD AND MOUSE	[156D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A6, 0x003F };
    uint32_t const ces[9] = { 0x156D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_014)
{
    // 1F5A6 0061;	
    // (🖦) KEYBOARD AND MOUSE	[156D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A6, 0x0061 };
    uint32_t const ces[9] = { 0x156D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_015)
{
    // 1F5A6 0041;	
    // (🖦) KEYBOARD AND MOUSE	[156D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A6, 0x0041 };
    uint32_t const ces[9] = { 0x156D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_016)
{
    // 1F5A6 0062;	
    // (🖦) KEYBOARD AND MOUSE	[156D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A6, 0x0062 };
    uint32_t const ces[9] = { 0x156D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_017)
{
    // 1F5A7 0021;	
    // (🖧) THREE NETWORKED COMPUTERS	[156E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A7, 0x0021 };
    uint32_t const ces[9] = { 0x156E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_018)
{
    // 1F5A7 003F;	
    // (🖧) THREE NETWORKED COMPUTERS	[156E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A7, 0x003F };
    uint32_t const ces[9] = { 0x156E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_019)
{
    // 1F5A7 0061;	
    // (🖧) THREE NETWORKED COMPUTERS	[156E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A7, 0x0061 };
    uint32_t const ces[9] = { 0x156E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_020)
{
    // 1F5A7 0041;	
    // (🖧) THREE NETWORKED COMPUTERS	[156E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A7, 0x0041 };
    uint32_t const ces[9] = { 0x156E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_021)
{
    // 1F5A7 0062;	
    // (🖧) THREE NETWORKED COMPUTERS	[156E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A7, 0x0062 };
    uint32_t const ces[9] = { 0x156E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_022)
{
    // 1F5A8 0021;	
    // (🖨) PRINTER	[156F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A8, 0x0021 };
    uint32_t const ces[9] = { 0x156F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_023)
{
    // 1F5A8 003F;	
    // (🖨) PRINTER	[156F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A8, 0x003F };
    uint32_t const ces[9] = { 0x156F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_024)
{
    // 1F5A8 0061;	
    // (🖨) PRINTER	[156F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A8, 0x0061 };
    uint32_t const ces[9] = { 0x156F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_025)
{
    // 1F5A8 0041;	
    // (🖨) PRINTER	[156F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A8, 0x0041 };
    uint32_t const ces[9] = { 0x156F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_026)
{
    // 1F5A8 0062;	
    // (🖨) PRINTER	[156F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A8, 0x0062 };
    uint32_t const ces[9] = { 0x156F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_027)
{
    // 1F5A9 0021;	
    // (🖩) POCKET CALCULATOR	[1570 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A9, 0x0021 };
    uint32_t const ces[9] = { 0x1570, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_028)
{
    // 1F5A9 003F;	
    // (🖩) POCKET CALCULATOR	[1570 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A9, 0x003F };
    uint32_t const ces[9] = { 0x1570, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_029)
{
    // 1F5A9 0061;	
    // (🖩) POCKET CALCULATOR	[1570 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A9, 0x0061 };
    uint32_t const ces[9] = { 0x1570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_030)
{
    // 1F5A9 0041;	
    // (🖩) POCKET CALCULATOR	[1570 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A9, 0x0041 };
    uint32_t const ces[9] = { 0x1570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_031)
{
    // 1F5A9 0062;	
    // (🖩) POCKET CALCULATOR	[1570 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A9, 0x0062 };
    uint32_t const ces[9] = { 0x1570, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_032)
{
    // 1F5AA 0021;	
    // (🖪) BLACK HARD SHELL FLOPPY DISK	[1571 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AA, 0x0021 };
    uint32_t const ces[9] = { 0x1571, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_033)
{
    // 1F5AA 003F;	
    // (🖪) BLACK HARD SHELL FLOPPY DISK	[1571 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AA, 0x003F };
    uint32_t const ces[9] = { 0x1571, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_034)
{
    // 1F5AA 0061;	
    // (🖪) BLACK HARD SHELL FLOPPY DISK	[1571 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AA, 0x0061 };
    uint32_t const ces[9] = { 0x1571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_035)
{
    // 1F5AA 0041;	
    // (🖪) BLACK HARD SHELL FLOPPY DISK	[1571 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5AA, 0x0041 };
    uint32_t const ces[9] = { 0x1571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_036)
{
    // 1F5AA 0062;	
    // (🖪) BLACK HARD SHELL FLOPPY DISK	[1571 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AA, 0x0062 };
    uint32_t const ces[9] = { 0x1571, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_037)
{
    // 1F5AB 0021;	
    // (🖫) WHITE HARD SHELL FLOPPY DISK	[1572 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AB, 0x0021 };
    uint32_t const ces[9] = { 0x1572, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_038)
{
    // 1F5AB 003F;	
    // (🖫) WHITE HARD SHELL FLOPPY DISK	[1572 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AB, 0x003F };
    uint32_t const ces[9] = { 0x1572, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_039)
{
    // 1F5AB 0061;	
    // (🖫) WHITE HARD SHELL FLOPPY DISK	[1572 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AB, 0x0061 };
    uint32_t const ces[9] = { 0x1572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_040)
{
    // 1F5AB 0041;	
    // (🖫) WHITE HARD SHELL FLOPPY DISK	[1572 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5AB, 0x0041 };
    uint32_t const ces[9] = { 0x1572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_041)
{
    // 1F5AB 0062;	
    // (🖫) WHITE HARD SHELL FLOPPY DISK	[1572 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AB, 0x0062 };
    uint32_t const ces[9] = { 0x1572, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_042)
{
    // 1F5AC 0021;	
    // (🖬) SOFT SHELL FLOPPY DISK	[1573 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AC, 0x0021 };
    uint32_t const ces[9] = { 0x1573, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_043)
{
    // 1F5AC 003F;	
    // (🖬) SOFT SHELL FLOPPY DISK	[1573 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AC, 0x003F };
    uint32_t const ces[9] = { 0x1573, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_044)
{
    // 1F5AC 0061;	
    // (🖬) SOFT SHELL FLOPPY DISK	[1573 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AC, 0x0061 };
    uint32_t const ces[9] = { 0x1573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_045)
{
    // 1F5AC 0041;	
    // (🖬) SOFT SHELL FLOPPY DISK	[1573 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5AC, 0x0041 };
    uint32_t const ces[9] = { 0x1573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_046)
{
    // 1F5AC 0062;	
    // (🖬) SOFT SHELL FLOPPY DISK	[1573 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AC, 0x0062 };
    uint32_t const ces[9] = { 0x1573, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_047)
{
    // 1F5AD 0021;	
    // (🖭) TAPE CARTRIDGE	[1574 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AD, 0x0021 };
    uint32_t const ces[9] = { 0x1574, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_048)
{
    // 1F5AD 003F;	
    // (🖭) TAPE CARTRIDGE	[1574 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AD, 0x003F };
    uint32_t const ces[9] = { 0x1574, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_049)
{
    // 1F5AD 0061;	
    // (🖭) TAPE CARTRIDGE	[1574 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AD, 0x0061 };
    uint32_t const ces[9] = { 0x1574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_050)
{
    // 1F5AD 0041;	
    // (🖭) TAPE CARTRIDGE	[1574 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5AD, 0x0041 };
    uint32_t const ces[9] = { 0x1574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_051)
{
    // 1F5AD 0062;	
    // (🖭) TAPE CARTRIDGE	[1574 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AD, 0x0062 };
    uint32_t const ces[9] = { 0x1574, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_052)
{
    // 1F5AE 0021;	
    // (🖮) WIRED KEYBOARD	[1575 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AE, 0x0021 };
    uint32_t const ces[9] = { 0x1575, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_053)
{
    // 1F5AE 003F;	
    // (🖮) WIRED KEYBOARD	[1575 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AE, 0x003F };
    uint32_t const ces[9] = { 0x1575, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_054)
{
    // 1F5AE 0061;	
    // (🖮) WIRED KEYBOARD	[1575 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AE, 0x0061 };
    uint32_t const ces[9] = { 0x1575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_055)
{
    // 1F5AE 0041;	
    // (🖮) WIRED KEYBOARD	[1575 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5AE, 0x0041 };
    uint32_t const ces[9] = { 0x1575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_056)
{
    // 1F5AE 0062;	
    // (🖮) WIRED KEYBOARD	[1575 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AE, 0x0062 };
    uint32_t const ces[9] = { 0x1575, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_057)
{
    // 1F5AF 0021;	
    // (🖯) ONE BUTTON MOUSE	[1576 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AF, 0x0021 };
    uint32_t const ces[9] = { 0x1576, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_058)
{
    // 1F5AF 003F;	
    // (🖯) ONE BUTTON MOUSE	[1576 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AF, 0x003F };
    uint32_t const ces[9] = { 0x1576, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_059)
{
    // 1F5AF 0061;	
    // (🖯) ONE BUTTON MOUSE	[1576 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AF, 0x0061 };
    uint32_t const ces[9] = { 0x1576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_060)
{
    // 1F5AF 0041;	
    // (🖯) ONE BUTTON MOUSE	[1576 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5AF, 0x0041 };
    uint32_t const ces[9] = { 0x1576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_061)
{
    // 1F5AF 0062;	
    // (🖯) ONE BUTTON MOUSE	[1576 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5AF, 0x0062 };
    uint32_t const ces[9] = { 0x1576, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_062)
{
    // 1F5B0 0021;	
    // (🖰) TWO BUTTON MOUSE	[1577 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B0, 0x0021 };
    uint32_t const ces[9] = { 0x1577, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_063)
{
    // 1F5B0 003F;	
    // (🖰) TWO BUTTON MOUSE	[1577 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B0, 0x003F };
    uint32_t const ces[9] = { 0x1577, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_064)
{
    // 1F5B0 0061;	
    // (🖰) TWO BUTTON MOUSE	[1577 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B0, 0x0061 };
    uint32_t const ces[9] = { 0x1577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_065)
{
    // 1F5B0 0041;	
    // (🖰) TWO BUTTON MOUSE	[1577 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B0, 0x0041 };
    uint32_t const ces[9] = { 0x1577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_066)
{
    // 1F5B0 0062;	
    // (🖰) TWO BUTTON MOUSE	[1577 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B0, 0x0062 };
    uint32_t const ces[9] = { 0x1577, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_067)
{
    // 1F5B1 0021;	
    // (🖱) THREE BUTTON MOUSE	[1578 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B1, 0x0021 };
    uint32_t const ces[9] = { 0x1578, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_068)
{
    // 1F5B1 003F;	
    // (🖱) THREE BUTTON MOUSE	[1578 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B1, 0x003F };
    uint32_t const ces[9] = { 0x1578, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_069)
{
    // 1F5B1 0061;	
    // (🖱) THREE BUTTON MOUSE	[1578 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B1, 0x0061 };
    uint32_t const ces[9] = { 0x1578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_070)
{
    // 1F5B1 0041;	
    // (🖱) THREE BUTTON MOUSE	[1578 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B1, 0x0041 };
    uint32_t const ces[9] = { 0x1578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_071)
{
    // 1F5B1 0062;	
    // (🖱) THREE BUTTON MOUSE	[1578 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B1, 0x0062 };
    uint32_t const ces[9] = { 0x1578, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_072)
{
    // 1F5B2 0021;	
    // (🖲) TRACKBALL	[1579 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B2, 0x0021 };
    uint32_t const ces[9] = { 0x1579, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_073)
{
    // 1F5B2 003F;	
    // (🖲) TRACKBALL	[1579 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B2, 0x003F };
    uint32_t const ces[9] = { 0x1579, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_074)
{
    // 1F5B2 0061;	
    // (🖲) TRACKBALL	[1579 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B2, 0x0061 };
    uint32_t const ces[9] = { 0x1579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_075)
{
    // 1F5B2 0041;	
    // (🖲) TRACKBALL	[1579 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B2, 0x0041 };
    uint32_t const ces[9] = { 0x1579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_076)
{
    // 1F5B2 0062;	
    // (🖲) TRACKBALL	[1579 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B2, 0x0062 };
    uint32_t const ces[9] = { 0x1579, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_077)
{
    // 1F5B3 0021;	
    // (🖳) OLD PERSONAL COMPUTER	[157A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B3, 0x0021 };
    uint32_t const ces[9] = { 0x157A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_078)
{
    // 1F5B3 003F;	
    // (🖳) OLD PERSONAL COMPUTER	[157A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B3, 0x003F };
    uint32_t const ces[9] = { 0x157A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_079)
{
    // 1F5B3 0061;	
    // (🖳) OLD PERSONAL COMPUTER	[157A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B3, 0x0061 };
    uint32_t const ces[9] = { 0x157A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_080)
{
    // 1F5B3 0041;	
    // (🖳) OLD PERSONAL COMPUTER	[157A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B3, 0x0041 };
    uint32_t const ces[9] = { 0x157A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_081)
{
    // 1F5B3 0062;	
    // (🖳) OLD PERSONAL COMPUTER	[157A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B3, 0x0062 };
    uint32_t const ces[9] = { 0x157A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_082)
{
    // 1F5B4 0021;	
    // (🖴) HARD DISK	[157B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B4, 0x0021 };
    uint32_t const ces[9] = { 0x157B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_083)
{
    // 1F5B4 003F;	
    // (🖴) HARD DISK	[157B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B4, 0x003F };
    uint32_t const ces[9] = { 0x157B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_084)
{
    // 1F5B4 0061;	
    // (🖴) HARD DISK	[157B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B4, 0x0061 };
    uint32_t const ces[9] = { 0x157B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_085)
{
    // 1F5B4 0041;	
    // (🖴) HARD DISK	[157B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B4, 0x0041 };
    uint32_t const ces[9] = { 0x157B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_086)
{
    // 1F5B4 0062;	
    // (🖴) HARD DISK	[157B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B4, 0x0062 };
    uint32_t const ces[9] = { 0x157B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_087)
{
    // 1F5B5 0021;	
    // (🖵) SCREEN	[157C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B5, 0x0021 };
    uint32_t const ces[9] = { 0x157C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_088)
{
    // 1F5B5 003F;	
    // (🖵) SCREEN	[157C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B5, 0x003F };
    uint32_t const ces[9] = { 0x157C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_089)
{
    // 1F5B5 0061;	
    // (🖵) SCREEN	[157C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B5, 0x0061 };
    uint32_t const ces[9] = { 0x157C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_090)
{
    // 1F5B5 0041;	
    // (🖵) SCREEN	[157C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B5, 0x0041 };
    uint32_t const ces[9] = { 0x157C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_091)
{
    // 1F5B5 0062;	
    // (🖵) SCREEN	[157C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B5, 0x0062 };
    uint32_t const ces[9] = { 0x157C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_092)
{
    // 1F5B6 0021;	
    // (🖶) PRINTER ICON	[157D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B6, 0x0021 };
    uint32_t const ces[9] = { 0x157D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_093)
{
    // 1F5B6 003F;	
    // (🖶) PRINTER ICON	[157D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B6, 0x003F };
    uint32_t const ces[9] = { 0x157D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_094)
{
    // 1F5B6 0061;	
    // (🖶) PRINTER ICON	[157D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B6, 0x0061 };
    uint32_t const ces[9] = { 0x157D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_095)
{
    // 1F5B6 0041;	
    // (🖶) PRINTER ICON	[157D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B6, 0x0041 };
    uint32_t const ces[9] = { 0x157D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_096)
{
    // 1F5B6 0062;	
    // (🖶) PRINTER ICON	[157D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B6, 0x0062 };
    uint32_t const ces[9] = { 0x157D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_097)
{
    // 1F5B7 0021;	
    // (🖷) FAX ICON	[157E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B7, 0x0021 };
    uint32_t const ces[9] = { 0x157E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_098)
{
    // 1F5B7 003F;	
    // (🖷) FAX ICON	[157E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B7, 0x003F };
    uint32_t const ces[9] = { 0x157E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_099)
{
    // 1F5B7 0061;	
    // (🖷) FAX ICON	[157E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B7, 0x0061 };
    uint32_t const ces[9] = { 0x157E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_100)
{
    // 1F5B7 0041;	
    // (🖷) FAX ICON	[157E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B7, 0x0041 };
    uint32_t const ces[9] = { 0x157E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_101)
{
    // 1F5B7 0062;	
    // (🖷) FAX ICON	[157E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B7, 0x0062 };
    uint32_t const ces[9] = { 0x157E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_102)
{
    // 1F5B8 0021;	
    // (🖸) OPTICAL DISC ICON	[157F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B8, 0x0021 };
    uint32_t const ces[9] = { 0x157F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_103)
{
    // 1F5B8 003F;	
    // (🖸) OPTICAL DISC ICON	[157F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B8, 0x003F };
    uint32_t const ces[9] = { 0x157F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_104)
{
    // 1F5B8 0061;	
    // (🖸) OPTICAL DISC ICON	[157F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B8, 0x0061 };
    uint32_t const ces[9] = { 0x157F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_105)
{
    // 1F5B8 0041;	
    // (🖸) OPTICAL DISC ICON	[157F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B8, 0x0041 };
    uint32_t const ces[9] = { 0x157F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_106)
{
    // 1F5B8 0062;	
    // (🖸) OPTICAL DISC ICON	[157F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B8, 0x0062 };
    uint32_t const ces[9] = { 0x157F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_107)
{
    // 1F5B9 0021;	
    // (🖹) DOCUMENT WITH TEXT	[1580 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B9, 0x0021 };
    uint32_t const ces[9] = { 0x1580, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_108)
{
    // 1F5B9 003F;	
    // (🖹) DOCUMENT WITH TEXT	[1580 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B9, 0x003F };
    uint32_t const ces[9] = { 0x1580, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_109)
{
    // 1F5B9 0061;	
    // (🖹) DOCUMENT WITH TEXT	[1580 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B9, 0x0061 };
    uint32_t const ces[9] = { 0x1580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_110)
{
    // 1F5B9 0041;	
    // (🖹) DOCUMENT WITH TEXT	[1580 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B9, 0x0041 };
    uint32_t const ces[9] = { 0x1580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_111)
{
    // 1F5B9 0062;	
    // (🖹) DOCUMENT WITH TEXT	[1580 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B9, 0x0062 };
    uint32_t const ces[9] = { 0x1580, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_112)
{
    // 1F5BA 0021;	
    // (🖺) DOCUMENT WITH TEXT AND PICTURE	[1581 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BA, 0x0021 };
    uint32_t const ces[9] = { 0x1581, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_113)
{
    // 1F5BA 003F;	
    // (🖺) DOCUMENT WITH TEXT AND PICTURE	[1581 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BA, 0x003F };
    uint32_t const ces[9] = { 0x1581, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_114)
{
    // 1F5BA 0061;	
    // (🖺) DOCUMENT WITH TEXT AND PICTURE	[1581 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BA, 0x0061 };
    uint32_t const ces[9] = { 0x1581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_115)
{
    // 1F5BA 0041;	
    // (🖺) DOCUMENT WITH TEXT AND PICTURE	[1581 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5BA, 0x0041 };
    uint32_t const ces[9] = { 0x1581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_116)
{
    // 1F5BA 0062;	
    // (🖺) DOCUMENT WITH TEXT AND PICTURE	[1581 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BA, 0x0062 };
    uint32_t const ces[9] = { 0x1581, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_117)
{
    // 1F5BB 0021;	
    // (🖻) DOCUMENT WITH PICTURE	[1582 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BB, 0x0021 };
    uint32_t const ces[9] = { 0x1582, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_118)
{
    // 1F5BB 003F;	
    // (🖻) DOCUMENT WITH PICTURE	[1582 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BB, 0x003F };
    uint32_t const ces[9] = { 0x1582, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_119)
{
    // 1F5BB 0061;	
    // (🖻) DOCUMENT WITH PICTURE	[1582 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BB, 0x0061 };
    uint32_t const ces[9] = { 0x1582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_120)
{
    // 1F5BB 0041;	
    // (🖻) DOCUMENT WITH PICTURE	[1582 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5BB, 0x0041 };
    uint32_t const ces[9] = { 0x1582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_121)
{
    // 1F5BB 0062;	
    // (🖻) DOCUMENT WITH PICTURE	[1582 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BB, 0x0062 };
    uint32_t const ces[9] = { 0x1582, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_122)
{
    // 1F5BC 0021;	
    // (🖼) FRAME WITH PICTURE	[1583 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BC, 0x0021 };
    uint32_t const ces[9] = { 0x1583, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_123)
{
    // 1F5BC 003F;	
    // (🖼) FRAME WITH PICTURE	[1583 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BC, 0x003F };
    uint32_t const ces[9] = { 0x1583, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_124)
{
    // 1F5BC 0061;	
    // (🖼) FRAME WITH PICTURE	[1583 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BC, 0x0061 };
    uint32_t const ces[9] = { 0x1583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_125)
{
    // 1F5BC 0041;	
    // (🖼) FRAME WITH PICTURE	[1583 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5BC, 0x0041 };
    uint32_t const ces[9] = { 0x1583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_126)
{
    // 1F5BC 0062;	
    // (🖼) FRAME WITH PICTURE	[1583 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BC, 0x0062 };
    uint32_t const ces[9] = { 0x1583, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_127)
{
    // 1F5BD 0021;	
    // (🖽) FRAME WITH TILES	[1584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BD, 0x0021 };
    uint32_t const ces[9] = { 0x1584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_128)
{
    // 1F5BD 003F;	
    // (🖽) FRAME WITH TILES	[1584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BD, 0x003F };
    uint32_t const ces[9] = { 0x1584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_129)
{
    // 1F5BD 0061;	
    // (🖽) FRAME WITH TILES	[1584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BD, 0x0061 };
    uint32_t const ces[9] = { 0x1584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_130)
{
    // 1F5BD 0041;	
    // (🖽) FRAME WITH TILES	[1584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5BD, 0x0041 };
    uint32_t const ces[9] = { 0x1584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_131)
{
    // 1F5BD 0062;	
    // (🖽) FRAME WITH TILES	[1584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BD, 0x0062 };
    uint32_t const ces[9] = { 0x1584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_132)
{
    // 1F5BE 0021;	
    // (🖾) FRAME WITH AN X	[1585 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BE, 0x0021 };
    uint32_t const ces[9] = { 0x1585, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_133)
{
    // 1F5BE 003F;	
    // (🖾) FRAME WITH AN X	[1585 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BE, 0x003F };
    uint32_t const ces[9] = { 0x1585, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_134)
{
    // 1F5BE 0061;	
    // (🖾) FRAME WITH AN X	[1585 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BE, 0x0061 };
    uint32_t const ces[9] = { 0x1585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_135)
{
    // 1F5BE 0041;	
    // (🖾) FRAME WITH AN X	[1585 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5BE, 0x0041 };
    uint32_t const ces[9] = { 0x1585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_136)
{
    // 1F5BE 0062;	
    // (🖾) FRAME WITH AN X	[1585 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BE, 0x0062 };
    uint32_t const ces[9] = { 0x1585, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_137)
{
    // 1F5BF 0021;	
    // (🖿) BLACK FOLDER	[1586 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BF, 0x0021 };
    uint32_t const ces[9] = { 0x1586, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_138)
{
    // 1F5BF 003F;	
    // (🖿) BLACK FOLDER	[1586 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BF, 0x003F };
    uint32_t const ces[9] = { 0x1586, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_139)
{
    // 1F5BF 0061;	
    // (🖿) BLACK FOLDER	[1586 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BF, 0x0061 };
    uint32_t const ces[9] = { 0x1586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_140)
{
    // 1F5BF 0041;	
    // (🖿) BLACK FOLDER	[1586 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5BF, 0x0041 };
    uint32_t const ces[9] = { 0x1586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_141)
{
    // 1F5BF 0062;	
    // (🖿) BLACK FOLDER	[1586 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5BF, 0x0062 };
    uint32_t const ces[9] = { 0x1586, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_142)
{
    // 1F5C0 0021;	
    // (🗀) FOLDER	[1587 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C0, 0x0021 };
    uint32_t const ces[9] = { 0x1587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_143)
{
    // 1F5C0 003F;	
    // (🗀) FOLDER	[1587 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C0, 0x003F };
    uint32_t const ces[9] = { 0x1587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_144)
{
    // 1F5C0 0061;	
    // (🗀) FOLDER	[1587 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C0, 0x0061 };
    uint32_t const ces[9] = { 0x1587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_145)
{
    // 1F5C0 0041;	
    // (🗀) FOLDER	[1587 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C0, 0x0041 };
    uint32_t const ces[9] = { 0x1587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_146)
{
    // 1F5C0 0062;	
    // (🗀) FOLDER	[1587 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C0, 0x0062 };
    uint32_t const ces[9] = { 0x1587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_147)
{
    // 1F5C1 0021;	
    // (🗁) OPEN FOLDER	[1588 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C1, 0x0021 };
    uint32_t const ces[9] = { 0x1588, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_148)
{
    // 1F5C1 003F;	
    // (🗁) OPEN FOLDER	[1588 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C1, 0x003F };
    uint32_t const ces[9] = { 0x1588, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_149)
{
    // 1F5C1 0061;	
    // (🗁) OPEN FOLDER	[1588 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C1, 0x0061 };
    uint32_t const ces[9] = { 0x1588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_150)
{
    // 1F5C1 0041;	
    // (🗁) OPEN FOLDER	[1588 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C1, 0x0041 };
    uint32_t const ces[9] = { 0x1588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_151)
{
    // 1F5C1 0062;	
    // (🗁) OPEN FOLDER	[1588 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C1, 0x0062 };
    uint32_t const ces[9] = { 0x1588, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_152)
{
    // 1F5C2 0021;	
    // (🗂) CARD INDEX DIVIDERS	[1589 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C2, 0x0021 };
    uint32_t const ces[9] = { 0x1589, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_153)
{
    // 1F5C2 003F;	
    // (🗂) CARD INDEX DIVIDERS	[1589 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C2, 0x003F };
    uint32_t const ces[9] = { 0x1589, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_154)
{
    // 1F5C2 0061;	
    // (🗂) CARD INDEX DIVIDERS	[1589 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C2, 0x0061 };
    uint32_t const ces[9] = { 0x1589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_155)
{
    // 1F5C2 0041;	
    // (🗂) CARD INDEX DIVIDERS	[1589 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C2, 0x0041 };
    uint32_t const ces[9] = { 0x1589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_156)
{
    // 1F5C2 0062;	
    // (🗂) CARD INDEX DIVIDERS	[1589 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C2, 0x0062 };
    uint32_t const ces[9] = { 0x1589, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_157)
{
    // 1F5C3 0021;	
    // (🗃) CARD FILE BOX	[158A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C3, 0x0021 };
    uint32_t const ces[9] = { 0x158A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_158)
{
    // 1F5C3 003F;	
    // (🗃) CARD FILE BOX	[158A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C3, 0x003F };
    uint32_t const ces[9] = { 0x158A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_159)
{
    // 1F5C3 0061;	
    // (🗃) CARD FILE BOX	[158A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C3, 0x0061 };
    uint32_t const ces[9] = { 0x158A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_160)
{
    // 1F5C3 0041;	
    // (🗃) CARD FILE BOX	[158A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C3, 0x0041 };
    uint32_t const ces[9] = { 0x158A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_161)
{
    // 1F5C3 0062;	
    // (🗃) CARD FILE BOX	[158A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C3, 0x0062 };
    uint32_t const ces[9] = { 0x158A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_162)
{
    // 1F5C4 0021;	
    // (🗄) FILE CABINET	[158B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C4, 0x0021 };
    uint32_t const ces[9] = { 0x158B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_163)
{
    // 1F5C4 003F;	
    // (🗄) FILE CABINET	[158B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C4, 0x003F };
    uint32_t const ces[9] = { 0x158B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_164)
{
    // 1F5C4 0061;	
    // (🗄) FILE CABINET	[158B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C4, 0x0061 };
    uint32_t const ces[9] = { 0x158B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_165)
{
    // 1F5C4 0041;	
    // (🗄) FILE CABINET	[158B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C4, 0x0041 };
    uint32_t const ces[9] = { 0x158B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_166)
{
    // 1F5C4 0062;	
    // (🗄) FILE CABINET	[158B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C4, 0x0062 };
    uint32_t const ces[9] = { 0x158B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_167)
{
    // 1F5C5 0021;	
    // (🗅) EMPTY NOTE	[158C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C5, 0x0021 };
    uint32_t const ces[9] = { 0x158C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_168)
{
    // 1F5C5 003F;	
    // (🗅) EMPTY NOTE	[158C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C5, 0x003F };
    uint32_t const ces[9] = { 0x158C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_169)
{
    // 1F5C5 0061;	
    // (🗅) EMPTY NOTE	[158C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C5, 0x0061 };
    uint32_t const ces[9] = { 0x158C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_170)
{
    // 1F5C5 0041;	
    // (🗅) EMPTY NOTE	[158C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C5, 0x0041 };
    uint32_t const ces[9] = { 0x158C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_171)
{
    // 1F5C5 0062;	
    // (🗅) EMPTY NOTE	[158C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C5, 0x0062 };
    uint32_t const ces[9] = { 0x158C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_172)
{
    // 1F5C6 0021;	
    // (🗆) EMPTY NOTE PAGE	[158D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C6, 0x0021 };
    uint32_t const ces[9] = { 0x158D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_173)
{
    // 1F5C6 003F;	
    // (🗆) EMPTY NOTE PAGE	[158D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C6, 0x003F };
    uint32_t const ces[9] = { 0x158D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_174)
{
    // 1F5C6 0061;	
    // (🗆) EMPTY NOTE PAGE	[158D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C6, 0x0061 };
    uint32_t const ces[9] = { 0x158D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_175)
{
    // 1F5C6 0041;	
    // (🗆) EMPTY NOTE PAGE	[158D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C6, 0x0041 };
    uint32_t const ces[9] = { 0x158D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_176)
{
    // 1F5C6 0062;	
    // (🗆) EMPTY NOTE PAGE	[158D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C6, 0x0062 };
    uint32_t const ces[9] = { 0x158D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_177)
{
    // 1F5C7 0021;	
    // (🗇) EMPTY NOTE PAD	[158E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C7, 0x0021 };
    uint32_t const ces[9] = { 0x158E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_178)
{
    // 1F5C7 003F;	
    // (🗇) EMPTY NOTE PAD	[158E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C7, 0x003F };
    uint32_t const ces[9] = { 0x158E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_179)
{
    // 1F5C7 0061;	
    // (🗇) EMPTY NOTE PAD	[158E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C7, 0x0061 };
    uint32_t const ces[9] = { 0x158E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_180)
{
    // 1F5C7 0041;	
    // (🗇) EMPTY NOTE PAD	[158E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C7, 0x0041 };
    uint32_t const ces[9] = { 0x158E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_181)
{
    // 1F5C7 0062;	
    // (🗇) EMPTY NOTE PAD	[158E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C7, 0x0062 };
    uint32_t const ces[9] = { 0x158E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_182)
{
    // 1F5C8 0021;	
    // (🗈) NOTE	[158F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C8, 0x0021 };
    uint32_t const ces[9] = { 0x158F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_183)
{
    // 1F5C8 003F;	
    // (🗈) NOTE	[158F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C8, 0x003F };
    uint32_t const ces[9] = { 0x158F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_184)
{
    // 1F5C8 0061;	
    // (🗈) NOTE	[158F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C8, 0x0061 };
    uint32_t const ces[9] = { 0x158F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_185)
{
    // 1F5C8 0041;	
    // (🗈) NOTE	[158F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C8, 0x0041 };
    uint32_t const ces[9] = { 0x158F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_186)
{
    // 1F5C8 0062;	
    // (🗈) NOTE	[158F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C8, 0x0062 };
    uint32_t const ces[9] = { 0x158F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_187)
{
    // 1F5C9 0021;	
    // (🗉) NOTE PAGE	[1590 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C9, 0x0021 };
    uint32_t const ces[9] = { 0x1590, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_188)
{
    // 1F5C9 003F;	
    // (🗉) NOTE PAGE	[1590 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C9, 0x003F };
    uint32_t const ces[9] = { 0x1590, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_189)
{
    // 1F5C9 0061;	
    // (🗉) NOTE PAGE	[1590 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C9, 0x0061 };
    uint32_t const ces[9] = { 0x1590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_190)
{
    // 1F5C9 0041;	
    // (🗉) NOTE PAGE	[1590 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5C9, 0x0041 };
    uint32_t const ces[9] = { 0x1590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_191)
{
    // 1F5C9 0062;	
    // (🗉) NOTE PAGE	[1590 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5C9, 0x0062 };
    uint32_t const ces[9] = { 0x1590, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_192)
{
    // 1F5CA 0021;	
    // (🗊) NOTE PAD	[1591 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CA, 0x0021 };
    uint32_t const ces[9] = { 0x1591, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_193)
{
    // 1F5CA 003F;	
    // (🗊) NOTE PAD	[1591 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CA, 0x003F };
    uint32_t const ces[9] = { 0x1591, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_194)
{
    // 1F5CA 0061;	
    // (🗊) NOTE PAD	[1591 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CA, 0x0061 };
    uint32_t const ces[9] = { 0x1591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_195)
{
    // 1F5CA 0041;	
    // (🗊) NOTE PAD	[1591 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5CA, 0x0041 };
    uint32_t const ces[9] = { 0x1591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_196)
{
    // 1F5CA 0062;	
    // (🗊) NOTE PAD	[1591 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CA, 0x0062 };
    uint32_t const ces[9] = { 0x1591, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_197)
{
    // 1F5CB 0021;	
    // (🗋) EMPTY DOCUMENT	[1592 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CB, 0x0021 };
    uint32_t const ces[9] = { 0x1592, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_198)
{
    // 1F5CB 003F;	
    // (🗋) EMPTY DOCUMENT	[1592 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CB, 0x003F };
    uint32_t const ces[9] = { 0x1592, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_199)
{
    // 1F5CB 0061;	
    // (🗋) EMPTY DOCUMENT	[1592 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CB, 0x0061 };
    uint32_t const ces[9] = { 0x1592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_200)
{
    // 1F5CB 0041;	
    // (🗋) EMPTY DOCUMENT	[1592 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5CB, 0x0041 };
    uint32_t const ces[9] = { 0x1592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_201)
{
    // 1F5CB 0062;	
    // (🗋) EMPTY DOCUMENT	[1592 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CB, 0x0062 };
    uint32_t const ces[9] = { 0x1592, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_202)
{
    // 1F5CC 0021;	
    // (🗌) EMPTY PAGE	[1593 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CC, 0x0021 };
    uint32_t const ces[9] = { 0x1593, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_203)
{
    // 1F5CC 003F;	
    // (🗌) EMPTY PAGE	[1593 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CC, 0x003F };
    uint32_t const ces[9] = { 0x1593, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_204)
{
    // 1F5CC 0061;	
    // (🗌) EMPTY PAGE	[1593 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CC, 0x0061 };
    uint32_t const ces[9] = { 0x1593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_205)
{
    // 1F5CC 0041;	
    // (🗌) EMPTY PAGE	[1593 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5CC, 0x0041 };
    uint32_t const ces[9] = { 0x1593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_206)
{
    // 1F5CC 0062;	
    // (🗌) EMPTY PAGE	[1593 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CC, 0x0062 };
    uint32_t const ces[9] = { 0x1593, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_207)
{
    // 1F5CD 0021;	
    // (🗍) EMPTY PAGES	[1594 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CD, 0x0021 };
    uint32_t const ces[9] = { 0x1594, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_208)
{
    // 1F5CD 003F;	
    // (🗍) EMPTY PAGES	[1594 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CD, 0x003F };
    uint32_t const ces[9] = { 0x1594, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_209)
{
    // 1F5CD 0061;	
    // (🗍) EMPTY PAGES	[1594 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CD, 0x0061 };
    uint32_t const ces[9] = { 0x1594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_210)
{
    // 1F5CD 0041;	
    // (🗍) EMPTY PAGES	[1594 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5CD, 0x0041 };
    uint32_t const ces[9] = { 0x1594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_211)
{
    // 1F5CD 0062;	
    // (🗍) EMPTY PAGES	[1594 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CD, 0x0062 };
    uint32_t const ces[9] = { 0x1594, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_212)
{
    // 1F5CE 0021;	
    // (🗎) DOCUMENT	[1595 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CE, 0x0021 };
    uint32_t const ces[9] = { 0x1595, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_213)
{
    // 1F5CE 003F;	
    // (🗎) DOCUMENT	[1595 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CE, 0x003F };
    uint32_t const ces[9] = { 0x1595, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_214)
{
    // 1F5CE 0061;	
    // (🗎) DOCUMENT	[1595 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CE, 0x0061 };
    uint32_t const ces[9] = { 0x1595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_215)
{
    // 1F5CE 0041;	
    // (🗎) DOCUMENT	[1595 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5CE, 0x0041 };
    uint32_t const ces[9] = { 0x1595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_216)
{
    // 1F5CE 0062;	
    // (🗎) DOCUMENT	[1595 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CE, 0x0062 };
    uint32_t const ces[9] = { 0x1595, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_217)
{
    // 1F5CF 0021;	
    // (🗏) PAGE	[1596 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CF, 0x0021 };
    uint32_t const ces[9] = { 0x1596, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_218)
{
    // 1F5CF 003F;	
    // (🗏) PAGE	[1596 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CF, 0x003F };
    uint32_t const ces[9] = { 0x1596, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_219)
{
    // 1F5CF 0061;	
    // (🗏) PAGE	[1596 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CF, 0x0061 };
    uint32_t const ces[9] = { 0x1596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_220)
{
    // 1F5CF 0041;	
    // (🗏) PAGE	[1596 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5CF, 0x0041 };
    uint32_t const ces[9] = { 0x1596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_221)
{
    // 1F5CF 0062;	
    // (🗏) PAGE	[1596 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5CF, 0x0062 };
    uint32_t const ces[9] = { 0x1596, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_222)
{
    // 1F5D0 0021;	
    // (🗐) PAGES	[1597 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D0, 0x0021 };
    uint32_t const ces[9] = { 0x1597, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_223)
{
    // 1F5D0 003F;	
    // (🗐) PAGES	[1597 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D0, 0x003F };
    uint32_t const ces[9] = { 0x1597, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_224)
{
    // 1F5D0 0061;	
    // (🗐) PAGES	[1597 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D0, 0x0061 };
    uint32_t const ces[9] = { 0x1597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_225)
{
    // 1F5D0 0041;	
    // (🗐) PAGES	[1597 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D0, 0x0041 };
    uint32_t const ces[9] = { 0x1597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_226)
{
    // 1F5D0 0062;	
    // (🗐) PAGES	[1597 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D0, 0x0062 };
    uint32_t const ces[9] = { 0x1597, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_227)
{
    // 1F5D1 0021;	
    // (🗑) WASTEBASKET	[1598 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D1, 0x0021 };
    uint32_t const ces[9] = { 0x1598, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_228)
{
    // 1F5D1 003F;	
    // (🗑) WASTEBASKET	[1598 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D1, 0x003F };
    uint32_t const ces[9] = { 0x1598, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_229)
{
    // 1F5D1 0061;	
    // (🗑) WASTEBASKET	[1598 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D1, 0x0061 };
    uint32_t const ces[9] = { 0x1598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_230)
{
    // 1F5D1 0041;	
    // (🗑) WASTEBASKET	[1598 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D1, 0x0041 };
    uint32_t const ces[9] = { 0x1598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_231)
{
    // 1F5D1 0062;	
    // (🗑) WASTEBASKET	[1598 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D1, 0x0062 };
    uint32_t const ces[9] = { 0x1598, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_232)
{
    // 1F5D2 0021;	
    // (🗒) SPIRAL NOTE PAD	[1599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D2, 0x0021 };
    uint32_t const ces[9] = { 0x1599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_233)
{
    // 1F5D2 003F;	
    // (🗒) SPIRAL NOTE PAD	[1599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D2, 0x003F };
    uint32_t const ces[9] = { 0x1599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_234)
{
    // 1F5D2 0061;	
    // (🗒) SPIRAL NOTE PAD	[1599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D2, 0x0061 };
    uint32_t const ces[9] = { 0x1599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_235)
{
    // 1F5D2 0041;	
    // (🗒) SPIRAL NOTE PAD	[1599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D2, 0x0041 };
    uint32_t const ces[9] = { 0x1599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_236)
{
    // 1F5D2 0062;	
    // (🗒) SPIRAL NOTE PAD	[1599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D2, 0x0062 };
    uint32_t const ces[9] = { 0x1599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_237)
{
    // 1F5D3 0021;	
    // (🗓) SPIRAL CALENDAR PAD	[159A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D3, 0x0021 };
    uint32_t const ces[9] = { 0x159A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_238)
{
    // 1F5D3 003F;	
    // (🗓) SPIRAL CALENDAR PAD	[159A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D3, 0x003F };
    uint32_t const ces[9] = { 0x159A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_239)
{
    // 1F5D3 0061;	
    // (🗓) SPIRAL CALENDAR PAD	[159A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D3, 0x0061 };
    uint32_t const ces[9] = { 0x159A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_240)
{
    // 1F5D3 0041;	
    // (🗓) SPIRAL CALENDAR PAD	[159A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D3, 0x0041 };
    uint32_t const ces[9] = { 0x159A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_241)
{
    // 1F5D3 0062;	
    // (🗓) SPIRAL CALENDAR PAD	[159A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D3, 0x0062 };
    uint32_t const ces[9] = { 0x159A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_242)
{
    // 1F5D4 0021;	
    // (🗔) DESKTOP WINDOW	[159B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D4, 0x0021 };
    uint32_t const ces[9] = { 0x159B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_243)
{
    // 1F5D4 003F;	
    // (🗔) DESKTOP WINDOW	[159B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D4, 0x003F };
    uint32_t const ces[9] = { 0x159B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_244)
{
    // 1F5D4 0061;	
    // (🗔) DESKTOP WINDOW	[159B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D4, 0x0061 };
    uint32_t const ces[9] = { 0x159B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_245)
{
    // 1F5D4 0041;	
    // (🗔) DESKTOP WINDOW	[159B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D4, 0x0041 };
    uint32_t const ces[9] = { 0x159B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_246)
{
    // 1F5D4 0062;	
    // (🗔) DESKTOP WINDOW	[159B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D4, 0x0062 };
    uint32_t const ces[9] = { 0x159B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_247)
{
    // 1F5D5 0021;	
    // (🗕) MINIMIZE	[159C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D5, 0x0021 };
    uint32_t const ces[9] = { 0x159C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_248)
{
    // 1F5D5 003F;	
    // (🗕) MINIMIZE	[159C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D5, 0x003F };
    uint32_t const ces[9] = { 0x159C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_249)
{
    // 1F5D5 0061;	
    // (🗕) MINIMIZE	[159C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D5, 0x0061 };
    uint32_t const ces[9] = { 0x159C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_250)
{
    // 1F5D5 0041;	
    // (🗕) MINIMIZE	[159C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D5, 0x0041 };
    uint32_t const ces[9] = { 0x159C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_251)
{
    // 1F5D5 0062;	
    // (🗕) MINIMIZE	[159C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D5, 0x0062 };
    uint32_t const ces[9] = { 0x159C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_252)
{
    // 1F5D6 0021;	
    // (🗖) MAXIMIZE	[159D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D6, 0x0021 };
    uint32_t const ces[9] = { 0x159D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_253)
{
    // 1F5D6 003F;	
    // (🗖) MAXIMIZE	[159D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D6, 0x003F };
    uint32_t const ces[9] = { 0x159D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_254)
{
    // 1F5D6 0061;	
    // (🗖) MAXIMIZE	[159D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D6, 0x0061 };
    uint32_t const ces[9] = { 0x159D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_255)
{
    // 1F5D6 0041;	
    // (🗖) MAXIMIZE	[159D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D6, 0x0041 };
    uint32_t const ces[9] = { 0x159D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_256)
{
    // 1F5D6 0062;	
    // (🗖) MAXIMIZE	[159D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D6, 0x0062 };
    uint32_t const ces[9] = { 0x159D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_257)
{
    // 1F5D7 0021;	
    // (🗗) OVERLAP	[159E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D7, 0x0021 };
    uint32_t const ces[9] = { 0x159E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_258)
{
    // 1F5D7 003F;	
    // (🗗) OVERLAP	[159E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D7, 0x003F };
    uint32_t const ces[9] = { 0x159E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_259)
{
    // 1F5D7 0061;	
    // (🗗) OVERLAP	[159E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D7, 0x0061 };
    uint32_t const ces[9] = { 0x159E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_260)
{
    // 1F5D7 0041;	
    // (🗗) OVERLAP	[159E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D7, 0x0041 };
    uint32_t const ces[9] = { 0x159E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_261)
{
    // 1F5D7 0062;	
    // (🗗) OVERLAP	[159E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D7, 0x0062 };
    uint32_t const ces[9] = { 0x159E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_262)
{
    // 1F5D8 0021;	
    // (🗘) CLOCKWISE RIGHT AND LEFT SEMICIRCLE ARROWS	[159F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D8, 0x0021 };
    uint32_t const ces[9] = { 0x159F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_263)
{
    // 1F5D8 003F;	
    // (🗘) CLOCKWISE RIGHT AND LEFT SEMICIRCLE ARROWS	[159F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D8, 0x003F };
    uint32_t const ces[9] = { 0x159F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_264)
{
    // 1F5D8 0061;	
    // (🗘) CLOCKWISE RIGHT AND LEFT SEMICIRCLE ARROWS	[159F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D8, 0x0061 };
    uint32_t const ces[9] = { 0x159F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_265)
{
    // 1F5D8 0041;	
    // (🗘) CLOCKWISE RIGHT AND LEFT SEMICIRCLE ARROWS	[159F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D8, 0x0041 };
    uint32_t const ces[9] = { 0x159F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_266)
{
    // 1F5D8 0062;	
    // (🗘) CLOCKWISE RIGHT AND LEFT SEMICIRCLE ARROWS	[159F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D8, 0x0062 };
    uint32_t const ces[9] = { 0x159F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_267)
{
    // 1F5D9 0021;	
    // (🗙) CANCELLATION X	[15A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D9, 0x0021 };
    uint32_t const ces[9] = { 0x15A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_268)
{
    // 1F5D9 003F;	
    // (🗙) CANCELLATION X	[15A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D9, 0x003F };
    uint32_t const ces[9] = { 0x15A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_269)
{
    // 1F5D9 0061;	
    // (🗙) CANCELLATION X	[15A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D9, 0x0061 };
    uint32_t const ces[9] = { 0x15A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_270)
{
    // 1F5D9 0041;	
    // (🗙) CANCELLATION X	[15A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D9, 0x0041 };
    uint32_t const ces[9] = { 0x15A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_271)
{
    // 1F5D9 0062;	
    // (🗙) CANCELLATION X	[15A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D9, 0x0062 };
    uint32_t const ces[9] = { 0x15A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_272)
{
    // 1F5DA 0021;	
    // (🗚) INCREASE FONT SIZE SYMBOL	[15A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DA, 0x0021 };
    uint32_t const ces[9] = { 0x15A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_273)
{
    // 1F5DA 003F;	
    // (🗚) INCREASE FONT SIZE SYMBOL	[15A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DA, 0x003F };
    uint32_t const ces[9] = { 0x15A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_274)
{
    // 1F5DA 0061;	
    // (🗚) INCREASE FONT SIZE SYMBOL	[15A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DA, 0x0061 };
    uint32_t const ces[9] = { 0x15A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_275)
{
    // 1F5DA 0041;	
    // (🗚) INCREASE FONT SIZE SYMBOL	[15A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5DA, 0x0041 };
    uint32_t const ces[9] = { 0x15A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_276)
{
    // 1F5DA 0062;	
    // (🗚) INCREASE FONT SIZE SYMBOL	[15A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DA, 0x0062 };
    uint32_t const ces[9] = { 0x15A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_277)
{
    // 1F5DB 0021;	
    // (🗛) DECREASE FONT SIZE SYMBOL	[15A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DB, 0x0021 };
    uint32_t const ces[9] = { 0x15A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_278)
{
    // 1F5DB 003F;	
    // (🗛) DECREASE FONT SIZE SYMBOL	[15A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DB, 0x003F };
    uint32_t const ces[9] = { 0x15A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_279)
{
    // 1F5DB 0061;	
    // (🗛) DECREASE FONT SIZE SYMBOL	[15A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DB, 0x0061 };
    uint32_t const ces[9] = { 0x15A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_280)
{
    // 1F5DB 0041;	
    // (🗛) DECREASE FONT SIZE SYMBOL	[15A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5DB, 0x0041 };
    uint32_t const ces[9] = { 0x15A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_281)
{
    // 1F5DB 0062;	
    // (🗛) DECREASE FONT SIZE SYMBOL	[15A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DB, 0x0062 };
    uint32_t const ces[9] = { 0x15A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_282)
{
    // 1F5DC 0021;	
    // (🗜) COMPRESSION	[15A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DC, 0x0021 };
    uint32_t const ces[9] = { 0x15A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_283)
{
    // 1F5DC 003F;	
    // (🗜) COMPRESSION	[15A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DC, 0x003F };
    uint32_t const ces[9] = { 0x15A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_284)
{
    // 1F5DC 0061;	
    // (🗜) COMPRESSION	[15A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DC, 0x0061 };
    uint32_t const ces[9] = { 0x15A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_285)
{
    // 1F5DC 0041;	
    // (🗜) COMPRESSION	[15A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5DC, 0x0041 };
    uint32_t const ces[9] = { 0x15A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_286)
{
    // 1F5DC 0062;	
    // (🗜) COMPRESSION	[15A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DC, 0x0062 };
    uint32_t const ces[9] = { 0x15A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_287)
{
    // 1F5DD 0021;	
    // (🗝) OLD KEY	[15A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DD, 0x0021 };
    uint32_t const ces[9] = { 0x15A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_288)
{
    // 1F5DD 003F;	
    // (🗝) OLD KEY	[15A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DD, 0x003F };
    uint32_t const ces[9] = { 0x15A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_289)
{
    // 1F5DD 0061;	
    // (🗝) OLD KEY	[15A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DD, 0x0061 };
    uint32_t const ces[9] = { 0x15A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_290)
{
    // 1F5DD 0041;	
    // (🗝) OLD KEY	[15A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5DD, 0x0041 };
    uint32_t const ces[9] = { 0x15A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_291)
{
    // 1F5DD 0062;	
    // (🗝) OLD KEY	[15A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DD, 0x0062 };
    uint32_t const ces[9] = { 0x15A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_292)
{
    // 1F5DE 0021;	
    // (🗞) ROLLED-UP NEWSPAPER	[15A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DE, 0x0021 };
    uint32_t const ces[9] = { 0x15A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_293)
{
    // 1F5DE 003F;	
    // (🗞) ROLLED-UP NEWSPAPER	[15A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DE, 0x003F };
    uint32_t const ces[9] = { 0x15A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_294)
{
    // 1F5DE 0061;	
    // (🗞) ROLLED-UP NEWSPAPER	[15A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DE, 0x0061 };
    uint32_t const ces[9] = { 0x15A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_295)
{
    // 1F5DE 0041;	
    // (🗞) ROLLED-UP NEWSPAPER	[15A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5DE, 0x0041 };
    uint32_t const ces[9] = { 0x15A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_296)
{
    // 1F5DE 0062;	
    // (🗞) ROLLED-UP NEWSPAPER	[15A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DE, 0x0062 };
    uint32_t const ces[9] = { 0x15A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_297)
{
    // 1F5DF 0021;	
    // (🗟) PAGE WITH CIRCLED TEXT	[15A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DF, 0x0021 };
    uint32_t const ces[9] = { 0x15A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_298)
{
    // 1F5DF 003F;	
    // (🗟) PAGE WITH CIRCLED TEXT	[15A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DF, 0x003F };
    uint32_t const ces[9] = { 0x15A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_299)
{
    // 1F5DF 0061;	
    // (🗟) PAGE WITH CIRCLED TEXT	[15A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DF, 0x0061 };
    uint32_t const ces[9] = { 0x15A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_300)
{
    // 1F5DF 0041;	
    // (🗟) PAGE WITH CIRCLED TEXT	[15A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5DF, 0x0041 };
    uint32_t const ces[9] = { 0x15A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_301)
{
    // 1F5DF 0062;	
    // (🗟) PAGE WITH CIRCLED TEXT	[15A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5DF, 0x0062 };
    uint32_t const ces[9] = { 0x15A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_302)
{
    // 1F5E0 0021;	
    // (🗠) STOCK CHART	[15A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E0, 0x0021 };
    uint32_t const ces[9] = { 0x15A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_303)
{
    // 1F5E0 003F;	
    // (🗠) STOCK CHART	[15A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E0, 0x003F };
    uint32_t const ces[9] = { 0x15A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_304)
{
    // 1F5E0 0061;	
    // (🗠) STOCK CHART	[15A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E0, 0x0061 };
    uint32_t const ces[9] = { 0x15A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_305)
{
    // 1F5E0 0041;	
    // (🗠) STOCK CHART	[15A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E0, 0x0041 };
    uint32_t const ces[9] = { 0x15A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_306)
{
    // 1F5E0 0062;	
    // (🗠) STOCK CHART	[15A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E0, 0x0062 };
    uint32_t const ces[9] = { 0x15A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_307)
{
    // 1F5E1 0021;	
    // (🗡) DAGGER KNIFE	[15A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E1, 0x0021 };
    uint32_t const ces[9] = { 0x15A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_308)
{
    // 1F5E1 003F;	
    // (🗡) DAGGER KNIFE	[15A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E1, 0x003F };
    uint32_t const ces[9] = { 0x15A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_309)
{
    // 1F5E1 0061;	
    // (🗡) DAGGER KNIFE	[15A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E1, 0x0061 };
    uint32_t const ces[9] = { 0x15A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_310)
{
    // 1F5E1 0041;	
    // (🗡) DAGGER KNIFE	[15A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E1, 0x0041 };
    uint32_t const ces[9] = { 0x15A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_311)
{
    // 1F5E1 0062;	
    // (🗡) DAGGER KNIFE	[15A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E1, 0x0062 };
    uint32_t const ces[9] = { 0x15A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_312)
{
    // 1F5E2 0021;	
    // (🗢) LIPS	[15A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E2, 0x0021 };
    uint32_t const ces[9] = { 0x15A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_313)
{
    // 1F5E2 003F;	
    // (🗢) LIPS	[15A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E2, 0x003F };
    uint32_t const ces[9] = { 0x15A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_314)
{
    // 1F5E2 0061;	
    // (🗢) LIPS	[15A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E2, 0x0061 };
    uint32_t const ces[9] = { 0x15A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_315)
{
    // 1F5E2 0041;	
    // (🗢) LIPS	[15A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E2, 0x0041 };
    uint32_t const ces[9] = { 0x15A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_316)
{
    // 1F5E2 0062;	
    // (🗢) LIPS	[15A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E2, 0x0062 };
    uint32_t const ces[9] = { 0x15A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_317)
{
    // 1F5E3 0021;	
    // (🗣) SPEAKING HEAD IN SILHOUETTE	[15AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E3, 0x0021 };
    uint32_t const ces[9] = { 0x15AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_318)
{
    // 1F5E3 003F;	
    // (🗣) SPEAKING HEAD IN SILHOUETTE	[15AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E3, 0x003F };
    uint32_t const ces[9] = { 0x15AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_319)
{
    // 1F5E3 0061;	
    // (🗣) SPEAKING HEAD IN SILHOUETTE	[15AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E3, 0x0061 };
    uint32_t const ces[9] = { 0x15AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_320)
{
    // 1F5E3 0041;	
    // (🗣) SPEAKING HEAD IN SILHOUETTE	[15AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E3, 0x0041 };
    uint32_t const ces[9] = { 0x15AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_321)
{
    // 1F5E3 0062;	
    // (🗣) SPEAKING HEAD IN SILHOUETTE	[15AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E3, 0x0062 };
    uint32_t const ces[9] = { 0x15AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_322)
{
    // 1F5E4 0021;	
    // (🗤) THREE RAYS ABOVE	[15AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E4, 0x0021 };
    uint32_t const ces[9] = { 0x15AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_323)
{
    // 1F5E4 003F;	
    // (🗤) THREE RAYS ABOVE	[15AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E4, 0x003F };
    uint32_t const ces[9] = { 0x15AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_324)
{
    // 1F5E4 0061;	
    // (🗤) THREE RAYS ABOVE	[15AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E4, 0x0061 };
    uint32_t const ces[9] = { 0x15AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_325)
{
    // 1F5E4 0041;	
    // (🗤) THREE RAYS ABOVE	[15AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E4, 0x0041 };
    uint32_t const ces[9] = { 0x15AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_326)
{
    // 1F5E4 0062;	
    // (🗤) THREE RAYS ABOVE	[15AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E4, 0x0062 };
    uint32_t const ces[9] = { 0x15AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_327)
{
    // 1F5E5 0021;	
    // (🗥) THREE RAYS BELOW	[15AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E5, 0x0021 };
    uint32_t const ces[9] = { 0x15AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_328)
{
    // 1F5E5 003F;	
    // (🗥) THREE RAYS BELOW	[15AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E5, 0x003F };
    uint32_t const ces[9] = { 0x15AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_329)
{
    // 1F5E5 0061;	
    // (🗥) THREE RAYS BELOW	[15AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E5, 0x0061 };
    uint32_t const ces[9] = { 0x15AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_330)
{
    // 1F5E5 0041;	
    // (🗥) THREE RAYS BELOW	[15AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E5, 0x0041 };
    uint32_t const ces[9] = { 0x15AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_331)
{
    // 1F5E5 0062;	
    // (🗥) THREE RAYS BELOW	[15AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E5, 0x0062 };
    uint32_t const ces[9] = { 0x15AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_332)
{
    // 1F5E6 0021;	
    // (🗦) THREE RAYS LEFT	[15AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E6, 0x0021 };
    uint32_t const ces[9] = { 0x15AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_333)
{
    // 1F5E6 003F;	
    // (🗦) THREE RAYS LEFT	[15AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E6, 0x003F };
    uint32_t const ces[9] = { 0x15AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_334)
{
    // 1F5E6 0061;	
    // (🗦) THREE RAYS LEFT	[15AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E6, 0x0061 };
    uint32_t const ces[9] = { 0x15AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_335)
{
    // 1F5E6 0041;	
    // (🗦) THREE RAYS LEFT	[15AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E6, 0x0041 };
    uint32_t const ces[9] = { 0x15AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_336)
{
    // 1F5E6 0062;	
    // (🗦) THREE RAYS LEFT	[15AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E6, 0x0062 };
    uint32_t const ces[9] = { 0x15AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_337)
{
    // 1F5E7 0021;	
    // (🗧) THREE RAYS RIGHT	[15AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E7, 0x0021 };
    uint32_t const ces[9] = { 0x15AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_338)
{
    // 1F5E7 003F;	
    // (🗧) THREE RAYS RIGHT	[15AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E7, 0x003F };
    uint32_t const ces[9] = { 0x15AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_339)
{
    // 1F5E7 0061;	
    // (🗧) THREE RAYS RIGHT	[15AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E7, 0x0061 };
    uint32_t const ces[9] = { 0x15AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_340)
{
    // 1F5E7 0041;	
    // (🗧) THREE RAYS RIGHT	[15AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E7, 0x0041 };
    uint32_t const ces[9] = { 0x15AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_341)
{
    // 1F5E7 0062;	
    // (🗧) THREE RAYS RIGHT	[15AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E7, 0x0062 };
    uint32_t const ces[9] = { 0x15AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_342)
{
    // 1F5E8 0021;	
    // (🗨) LEFT SPEECH BUBBLE	[15AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E8, 0x0021 };
    uint32_t const ces[9] = { 0x15AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_343)
{
    // 1F5E8 003F;	
    // (🗨) LEFT SPEECH BUBBLE	[15AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E8, 0x003F };
    uint32_t const ces[9] = { 0x15AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_344)
{
    // 1F5E8 0061;	
    // (🗨) LEFT SPEECH BUBBLE	[15AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E8, 0x0061 };
    uint32_t const ces[9] = { 0x15AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_345)
{
    // 1F5E8 0041;	
    // (🗨) LEFT SPEECH BUBBLE	[15AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E8, 0x0041 };
    uint32_t const ces[9] = { 0x15AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_346)
{
    // 1F5E8 0062;	
    // (🗨) LEFT SPEECH BUBBLE	[15AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E8, 0x0062 };
    uint32_t const ces[9] = { 0x15AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_347)
{
    // 1F5E9 0021;	
    // (🗩) RIGHT SPEECH BUBBLE	[15B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E9, 0x0021 };
    uint32_t const ces[9] = { 0x15B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_348)
{
    // 1F5E9 003F;	
    // (🗩) RIGHT SPEECH BUBBLE	[15B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E9, 0x003F };
    uint32_t const ces[9] = { 0x15B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_349)
{
    // 1F5E9 0061;	
    // (🗩) RIGHT SPEECH BUBBLE	[15B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E9, 0x0061 };
    uint32_t const ces[9] = { 0x15B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_350)
{
    // 1F5E9 0041;	
    // (🗩) RIGHT SPEECH BUBBLE	[15B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5E9, 0x0041 };
    uint32_t const ces[9] = { 0x15B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_351)
{
    // 1F5E9 0062;	
    // (🗩) RIGHT SPEECH BUBBLE	[15B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5E9, 0x0062 };
    uint32_t const ces[9] = { 0x15B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_352)
{
    // 1F5EA 0021;	
    // (🗪) TWO SPEECH BUBBLES	[15B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EA, 0x0021 };
    uint32_t const ces[9] = { 0x15B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_353)
{
    // 1F5EA 003F;	
    // (🗪) TWO SPEECH BUBBLES	[15B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EA, 0x003F };
    uint32_t const ces[9] = { 0x15B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_354)
{
    // 1F5EA 0061;	
    // (🗪) TWO SPEECH BUBBLES	[15B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EA, 0x0061 };
    uint32_t const ces[9] = { 0x15B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_355)
{
    // 1F5EA 0041;	
    // (🗪) TWO SPEECH BUBBLES	[15B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5EA, 0x0041 };
    uint32_t const ces[9] = { 0x15B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_356)
{
    // 1F5EA 0062;	
    // (🗪) TWO SPEECH BUBBLES	[15B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EA, 0x0062 };
    uint32_t const ces[9] = { 0x15B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_357)
{
    // 1F5EB 0021;	
    // (🗫) THREE SPEECH BUBBLES	[15B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EB, 0x0021 };
    uint32_t const ces[9] = { 0x15B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_358)
{
    // 1F5EB 003F;	
    // (🗫) THREE SPEECH BUBBLES	[15B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EB, 0x003F };
    uint32_t const ces[9] = { 0x15B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_359)
{
    // 1F5EB 0061;	
    // (🗫) THREE SPEECH BUBBLES	[15B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EB, 0x0061 };
    uint32_t const ces[9] = { 0x15B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_360)
{
    // 1F5EB 0041;	
    // (🗫) THREE SPEECH BUBBLES	[15B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5EB, 0x0041 };
    uint32_t const ces[9] = { 0x15B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_361)
{
    // 1F5EB 0062;	
    // (🗫) THREE SPEECH BUBBLES	[15B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EB, 0x0062 };
    uint32_t const ces[9] = { 0x15B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_362)
{
    // 1F5EC 0021;	
    // (🗬) LEFT THOUGHT BUBBLE	[15B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EC, 0x0021 };
    uint32_t const ces[9] = { 0x15B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_363)
{
    // 1F5EC 003F;	
    // (🗬) LEFT THOUGHT BUBBLE	[15B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EC, 0x003F };
    uint32_t const ces[9] = { 0x15B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_364)
{
    // 1F5EC 0061;	
    // (🗬) LEFT THOUGHT BUBBLE	[15B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EC, 0x0061 };
    uint32_t const ces[9] = { 0x15B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_365)
{
    // 1F5EC 0041;	
    // (🗬) LEFT THOUGHT BUBBLE	[15B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5EC, 0x0041 };
    uint32_t const ces[9] = { 0x15B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_366)
{
    // 1F5EC 0062;	
    // (🗬) LEFT THOUGHT BUBBLE	[15B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EC, 0x0062 };
    uint32_t const ces[9] = { 0x15B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_367)
{
    // 1F5ED 0021;	
    // (🗭) RIGHT THOUGHT BUBBLE	[15B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5ED, 0x0021 };
    uint32_t const ces[9] = { 0x15B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_368)
{
    // 1F5ED 003F;	
    // (🗭) RIGHT THOUGHT BUBBLE	[15B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5ED, 0x003F };
    uint32_t const ces[9] = { 0x15B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_369)
{
    // 1F5ED 0061;	
    // (🗭) RIGHT THOUGHT BUBBLE	[15B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5ED, 0x0061 };
    uint32_t const ces[9] = { 0x15B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_370)
{
    // 1F5ED 0041;	
    // (🗭) RIGHT THOUGHT BUBBLE	[15B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5ED, 0x0041 };
    uint32_t const ces[9] = { 0x15B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_371)
{
    // 1F5ED 0062;	
    // (🗭) RIGHT THOUGHT BUBBLE	[15B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5ED, 0x0062 };
    uint32_t const ces[9] = { 0x15B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_372)
{
    // 1F5EE 0021;	
    // (🗮) LEFT ANGER BUBBLE	[15B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EE, 0x0021 };
    uint32_t const ces[9] = { 0x15B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_373)
{
    // 1F5EE 003F;	
    // (🗮) LEFT ANGER BUBBLE	[15B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EE, 0x003F };
    uint32_t const ces[9] = { 0x15B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_374)
{
    // 1F5EE 0061;	
    // (🗮) LEFT ANGER BUBBLE	[15B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EE, 0x0061 };
    uint32_t const ces[9] = { 0x15B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_375)
{
    // 1F5EE 0041;	
    // (🗮) LEFT ANGER BUBBLE	[15B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5EE, 0x0041 };
    uint32_t const ces[9] = { 0x15B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_376)
{
    // 1F5EE 0062;	
    // (🗮) LEFT ANGER BUBBLE	[15B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EE, 0x0062 };
    uint32_t const ces[9] = { 0x15B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_377)
{
    // 1F5EF 0021;	
    // (🗯) RIGHT ANGER BUBBLE	[15B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EF, 0x0021 };
    uint32_t const ces[9] = { 0x15B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_378)
{
    // 1F5EF 003F;	
    // (🗯) RIGHT ANGER BUBBLE	[15B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EF, 0x003F };
    uint32_t const ces[9] = { 0x15B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_379)
{
    // 1F5EF 0061;	
    // (🗯) RIGHT ANGER BUBBLE	[15B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EF, 0x0061 };
    uint32_t const ces[9] = { 0x15B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_380)
{
    // 1F5EF 0041;	
    // (🗯) RIGHT ANGER BUBBLE	[15B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5EF, 0x0041 };
    uint32_t const ces[9] = { 0x15B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_381)
{
    // 1F5EF 0062;	
    // (🗯) RIGHT ANGER BUBBLE	[15B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5EF, 0x0062 };
    uint32_t const ces[9] = { 0x15B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_382)
{
    // 1F5F0 0021;	
    // (🗰) MOOD BUBBLE	[15B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F0, 0x0021 };
    uint32_t const ces[9] = { 0x15B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_383)
{
    // 1F5F0 003F;	
    // (🗰) MOOD BUBBLE	[15B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F0, 0x003F };
    uint32_t const ces[9] = { 0x15B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_384)
{
    // 1F5F0 0061;	
    // (🗰) MOOD BUBBLE	[15B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F0, 0x0061 };
    uint32_t const ces[9] = { 0x15B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_385)
{
    // 1F5F0 0041;	
    // (🗰) MOOD BUBBLE	[15B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F0, 0x0041 };
    uint32_t const ces[9] = { 0x15B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_386)
{
    // 1F5F0 0062;	
    // (🗰) MOOD BUBBLE	[15B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F0, 0x0062 };
    uint32_t const ces[9] = { 0x15B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_387)
{
    // 1F5F1 0021;	
    // (🗱) LIGHTNING MOOD BUBBLE	[15B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F1, 0x0021 };
    uint32_t const ces[9] = { 0x15B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_388)
{
    // 1F5F1 003F;	
    // (🗱) LIGHTNING MOOD BUBBLE	[15B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F1, 0x003F };
    uint32_t const ces[9] = { 0x15B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_389)
{
    // 1F5F1 0061;	
    // (🗱) LIGHTNING MOOD BUBBLE	[15B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F1, 0x0061 };
    uint32_t const ces[9] = { 0x15B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_390)
{
    // 1F5F1 0041;	
    // (🗱) LIGHTNING MOOD BUBBLE	[15B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F1, 0x0041 };
    uint32_t const ces[9] = { 0x15B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_391)
{
    // 1F5F1 0062;	
    // (🗱) LIGHTNING MOOD BUBBLE	[15B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F1, 0x0062 };
    uint32_t const ces[9] = { 0x15B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_392)
{
    // 1F5F2 0021;	
    // (🗲) LIGHTNING MOOD	[15B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F2, 0x0021 };
    uint32_t const ces[9] = { 0x15B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_393)
{
    // 1F5F2 003F;	
    // (🗲) LIGHTNING MOOD	[15B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F2, 0x003F };
    uint32_t const ces[9] = { 0x15B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_394)
{
    // 1F5F2 0061;	
    // (🗲) LIGHTNING MOOD	[15B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F2, 0x0061 };
    uint32_t const ces[9] = { 0x15B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_395)
{
    // 1F5F2 0041;	
    // (🗲) LIGHTNING MOOD	[15B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F2, 0x0041 };
    uint32_t const ces[9] = { 0x15B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_396)
{
    // 1F5F2 0062;	
    // (🗲) LIGHTNING MOOD	[15B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F2, 0x0062 };
    uint32_t const ces[9] = { 0x15B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_397)
{
    // 1F5F3 0021;	
    // (🗳) BALLOT BOX WITH BALLOT	[15BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F3, 0x0021 };
    uint32_t const ces[9] = { 0x15BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_398)
{
    // 1F5F3 003F;	
    // (🗳) BALLOT BOX WITH BALLOT	[15BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F3, 0x003F };
    uint32_t const ces[9] = { 0x15BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_399)
{
    // 1F5F3 0061;	
    // (🗳) BALLOT BOX WITH BALLOT	[15BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F3, 0x0061 };
    uint32_t const ces[9] = { 0x15BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_400)
{
    // 1F5F3 0041;	
    // (🗳) BALLOT BOX WITH BALLOT	[15BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F3, 0x0041 };
    uint32_t const ces[9] = { 0x15BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_401)
{
    // 1F5F3 0062;	
    // (🗳) BALLOT BOX WITH BALLOT	[15BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F3, 0x0062 };
    uint32_t const ces[9] = { 0x15BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_402)
{
    // 1F5F4 0021;	
    // (🗴) BALLOT SCRIPT X	[15BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F4, 0x0021 };
    uint32_t const ces[9] = { 0x15BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_403)
{
    // 1F5F4 003F;	
    // (🗴) BALLOT SCRIPT X	[15BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F4, 0x003F };
    uint32_t const ces[9] = { 0x15BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_404)
{
    // 1F5F4 0061;	
    // (🗴) BALLOT SCRIPT X	[15BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F4, 0x0061 };
    uint32_t const ces[9] = { 0x15BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_405)
{
    // 1F5F4 0041;	
    // (🗴) BALLOT SCRIPT X	[15BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F4, 0x0041 };
    uint32_t const ces[9] = { 0x15BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_406)
{
    // 1F5F4 0062;	
    // (🗴) BALLOT SCRIPT X	[15BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F4, 0x0062 };
    uint32_t const ces[9] = { 0x15BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_407)
{
    // 1F5F5 0021;	
    // (🗵) BALLOT BOX WITH SCRIPT X	[15BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F5, 0x0021 };
    uint32_t const ces[9] = { 0x15BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_408)
{
    // 1F5F5 003F;	
    // (🗵) BALLOT BOX WITH SCRIPT X	[15BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F5, 0x003F };
    uint32_t const ces[9] = { 0x15BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_409)
{
    // 1F5F5 0061;	
    // (🗵) BALLOT BOX WITH SCRIPT X	[15BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F5, 0x0061 };
    uint32_t const ces[9] = { 0x15BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_410)
{
    // 1F5F5 0041;	
    // (🗵) BALLOT BOX WITH SCRIPT X	[15BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F5, 0x0041 };
    uint32_t const ces[9] = { 0x15BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_411)
{
    // 1F5F5 0062;	
    // (🗵) BALLOT BOX WITH SCRIPT X	[15BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F5, 0x0062 };
    uint32_t const ces[9] = { 0x15BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_412)
{
    // 1F5F6 0021;	
    // (🗶) BALLOT BOLD SCRIPT X	[15BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F6, 0x0021 };
    uint32_t const ces[9] = { 0x15BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_413)
{
    // 1F5F6 003F;	
    // (🗶) BALLOT BOLD SCRIPT X	[15BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F6, 0x003F };
    uint32_t const ces[9] = { 0x15BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_414)
{
    // 1F5F6 0061;	
    // (🗶) BALLOT BOLD SCRIPT X	[15BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F6, 0x0061 };
    uint32_t const ces[9] = { 0x15BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_415)
{
    // 1F5F6 0041;	
    // (🗶) BALLOT BOLD SCRIPT X	[15BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F6, 0x0041 };
    uint32_t const ces[9] = { 0x15BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_416)
{
    // 1F5F6 0062;	
    // (🗶) BALLOT BOLD SCRIPT X	[15BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F6, 0x0062 };
    uint32_t const ces[9] = { 0x15BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_417)
{
    // 1F5F7 0021;	
    // (🗷) BALLOT BOX WITH BOLD SCRIPT X	[15BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F7, 0x0021 };
    uint32_t const ces[9] = { 0x15BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_418)
{
    // 1F5F7 003F;	
    // (🗷) BALLOT BOX WITH BOLD SCRIPT X	[15BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F7, 0x003F };
    uint32_t const ces[9] = { 0x15BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_419)
{
    // 1F5F7 0061;	
    // (🗷) BALLOT BOX WITH BOLD SCRIPT X	[15BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F7, 0x0061 };
    uint32_t const ces[9] = { 0x15BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_420)
{
    // 1F5F7 0041;	
    // (🗷) BALLOT BOX WITH BOLD SCRIPT X	[15BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F7, 0x0041 };
    uint32_t const ces[9] = { 0x15BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_421)
{
    // 1F5F7 0062;	
    // (🗷) BALLOT BOX WITH BOLD SCRIPT X	[15BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F7, 0x0062 };
    uint32_t const ces[9] = { 0x15BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_422)
{
    // 1F5F8 0021;	
    // (🗸) LIGHT CHECK MARK	[15BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F8, 0x0021 };
    uint32_t const ces[9] = { 0x15BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_423)
{
    // 1F5F8 003F;	
    // (🗸) LIGHT CHECK MARK	[15BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F8, 0x003F };
    uint32_t const ces[9] = { 0x15BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_424)
{
    // 1F5F8 0061;	
    // (🗸) LIGHT CHECK MARK	[15BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F8, 0x0061 };
    uint32_t const ces[9] = { 0x15BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_425)
{
    // 1F5F8 0041;	
    // (🗸) LIGHT CHECK MARK	[15BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F8, 0x0041 };
    uint32_t const ces[9] = { 0x15BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_426)
{
    // 1F5F8 0062;	
    // (🗸) LIGHT CHECK MARK	[15BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F8, 0x0062 };
    uint32_t const ces[9] = { 0x15BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_427)
{
    // 1F5F9 0021;	
    // (🗹) BALLOT BOX WITH BOLD CHECK	[15C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F9, 0x0021 };
    uint32_t const ces[9] = { 0x15C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_428)
{
    // 1F5F9 003F;	
    // (🗹) BALLOT BOX WITH BOLD CHECK	[15C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F9, 0x003F };
    uint32_t const ces[9] = { 0x15C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_429)
{
    // 1F5F9 0061;	
    // (🗹) BALLOT BOX WITH BOLD CHECK	[15C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F9, 0x0061 };
    uint32_t const ces[9] = { 0x15C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_430)
{
    // 1F5F9 0041;	
    // (🗹) BALLOT BOX WITH BOLD CHECK	[15C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F9, 0x0041 };
    uint32_t const ces[9] = { 0x15C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_431)
{
    // 1F5F9 0062;	
    // (🗹) BALLOT BOX WITH BOLD CHECK	[15C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F9, 0x0062 };
    uint32_t const ces[9] = { 0x15C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_432)
{
    // 1F5FA 0021;	
    // (🗺) WORLD MAP	[15C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FA, 0x0021 };
    uint32_t const ces[9] = { 0x15C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_433)
{
    // 1F5FA 003F;	
    // (🗺) WORLD MAP	[15C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FA, 0x003F };
    uint32_t const ces[9] = { 0x15C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_434)
{
    // 1F5FA 0061;	
    // (🗺) WORLD MAP	[15C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FA, 0x0061 };
    uint32_t const ces[9] = { 0x15C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_435)
{
    // 1F5FA 0041;	
    // (🗺) WORLD MAP	[15C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5FA, 0x0041 };
    uint32_t const ces[9] = { 0x15C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_436)
{
    // 1F5FA 0062;	
    // (🗺) WORLD MAP	[15C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FA, 0x0062 };
    uint32_t const ces[9] = { 0x15C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_437)
{
    // 1F5FB 0021;	
    // (🗻) MOUNT FUJI	[15C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FB, 0x0021 };
    uint32_t const ces[9] = { 0x15C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_438)
{
    // 1F5FB 003F;	
    // (🗻) MOUNT FUJI	[15C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FB, 0x003F };
    uint32_t const ces[9] = { 0x15C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_439)
{
    // 1F5FB 0061;	
    // (🗻) MOUNT FUJI	[15C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FB, 0x0061 };
    uint32_t const ces[9] = { 0x15C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_440)
{
    // 1F5FB 0041;	
    // (🗻) MOUNT FUJI	[15C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5FB, 0x0041 };
    uint32_t const ces[9] = { 0x15C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_441)
{
    // 1F5FB 0062;	
    // (🗻) MOUNT FUJI	[15C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FB, 0x0062 };
    uint32_t const ces[9] = { 0x15C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_442)
{
    // 1F5FC 0021;	
    // (🗼) TOKYO TOWER	[15C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FC, 0x0021 };
    uint32_t const ces[9] = { 0x15C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_443)
{
    // 1F5FC 003F;	
    // (🗼) TOKYO TOWER	[15C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FC, 0x003F };
    uint32_t const ces[9] = { 0x15C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_444)
{
    // 1F5FC 0061;	
    // (🗼) TOKYO TOWER	[15C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FC, 0x0061 };
    uint32_t const ces[9] = { 0x15C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_445)
{
    // 1F5FC 0041;	
    // (🗼) TOKYO TOWER	[15C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5FC, 0x0041 };
    uint32_t const ces[9] = { 0x15C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_446)
{
    // 1F5FC 0062;	
    // (🗼) TOKYO TOWER	[15C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FC, 0x0062 };
    uint32_t const ces[9] = { 0x15C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_447)
{
    // 1F5FD 0021;	
    // (🗽) STATUE OF LIBERTY	[15C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FD, 0x0021 };
    uint32_t const ces[9] = { 0x15C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_448)
{
    // 1F5FD 003F;	
    // (🗽) STATUE OF LIBERTY	[15C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FD, 0x003F };
    uint32_t const ces[9] = { 0x15C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_449)
{
    // 1F5FD 0061;	
    // (🗽) STATUE OF LIBERTY	[15C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FD, 0x0061 };
    uint32_t const ces[9] = { 0x15C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_450)
{
    // 1F5FD 0041;	
    // (🗽) STATUE OF LIBERTY	[15C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5FD, 0x0041 };
    uint32_t const ces[9] = { 0x15C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_451)
{
    // 1F5FD 0062;	
    // (🗽) STATUE OF LIBERTY	[15C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FD, 0x0062 };
    uint32_t const ces[9] = { 0x15C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_452)
{
    // 1F5FE 0021;	
    // (🗾) SILHOUETTE OF JAPAN	[15C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FE, 0x0021 };
    uint32_t const ces[9] = { 0x15C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_453)
{
    // 1F5FE 003F;	
    // (🗾) SILHOUETTE OF JAPAN	[15C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FE, 0x003F };
    uint32_t const ces[9] = { 0x15C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_454)
{
    // 1F5FE 0061;	
    // (🗾) SILHOUETTE OF JAPAN	[15C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FE, 0x0061 };
    uint32_t const ces[9] = { 0x15C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_455)
{
    // 1F5FE 0041;	
    // (🗾) SILHOUETTE OF JAPAN	[15C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5FE, 0x0041 };
    uint32_t const ces[9] = { 0x15C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_456)
{
    // 1F5FE 0062;	
    // (🗾) SILHOUETTE OF JAPAN	[15C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FE, 0x0062 };
    uint32_t const ces[9] = { 0x15C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_457)
{
    // 1F5FF 0021;	
    // (🗿) MOYAI	[15C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FF, 0x0021 };
    uint32_t const ces[9] = { 0x15C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_458)
{
    // 1F5FF 003F;	
    // (🗿) MOYAI	[15C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FF, 0x003F };
    uint32_t const ces[9] = { 0x15C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_459)
{
    // 1F5FF 0061;	
    // (🗿) MOYAI	[15C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FF, 0x0061 };
    uint32_t const ces[9] = { 0x15C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_460)
{
    // 1F5FF 0041;	
    // (🗿) MOYAI	[15C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5FF, 0x0041 };
    uint32_t const ces[9] = { 0x15C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_461)
{
    // 1F5FF 0062;	
    // (🗿) MOYAI	[15C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5FF, 0x0062 };
    uint32_t const ces[9] = { 0x15C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_462)
{
    // 1F900 0021;	
    // (🤀) CIRCLED CROSS FORMEE WITH FOUR DOTS	[15C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F900, 0x0021 };
    uint32_t const ces[9] = { 0x15C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_463)
{
    // 1F900 003F;	
    // (🤀) CIRCLED CROSS FORMEE WITH FOUR DOTS	[15C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F900, 0x003F };
    uint32_t const ces[9] = { 0x15C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_464)
{
    // 1F900 0061;	
    // (🤀) CIRCLED CROSS FORMEE WITH FOUR DOTS	[15C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F900, 0x0061 };
    uint32_t const ces[9] = { 0x15C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_465)
{
    // 1F900 0041;	
    // (🤀) CIRCLED CROSS FORMEE WITH FOUR DOTS	[15C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F900, 0x0041 };
    uint32_t const ces[9] = { 0x15C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_466)
{
    // 1F900 0062;	
    // (🤀) CIRCLED CROSS FORMEE WITH FOUR DOTS	[15C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F900, 0x0062 };
    uint32_t const ces[9] = { 0x15C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_467)
{
    // 1F901 0021;	
    // (🤁) CIRCLED CROSS FORMEE WITH TWO DOTS	[15C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F901, 0x0021 };
    uint32_t const ces[9] = { 0x15C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_468)
{
    // 1F901 003F;	
    // (🤁) CIRCLED CROSS FORMEE WITH TWO DOTS	[15C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F901, 0x003F };
    uint32_t const ces[9] = { 0x15C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_469)
{
    // 1F901 0061;	
    // (🤁) CIRCLED CROSS FORMEE WITH TWO DOTS	[15C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F901, 0x0061 };
    uint32_t const ces[9] = { 0x15C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_470)
{
    // 1F901 0041;	
    // (🤁) CIRCLED CROSS FORMEE WITH TWO DOTS	[15C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F901, 0x0041 };
    uint32_t const ces[9] = { 0x15C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_471)
{
    // 1F901 0062;	
    // (🤁) CIRCLED CROSS FORMEE WITH TWO DOTS	[15C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F901, 0x0062 };
    uint32_t const ces[9] = { 0x15C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_472)
{
    // 1F902 0021;	
    // (🤂) CIRCLED CROSS FORMEE	[15C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F902, 0x0021 };
    uint32_t const ces[9] = { 0x15C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_473)
{
    // 1F902 003F;	
    // (🤂) CIRCLED CROSS FORMEE	[15C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F902, 0x003F };
    uint32_t const ces[9] = { 0x15C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_474)
{
    // 1F902 0061;	
    // (🤂) CIRCLED CROSS FORMEE	[15C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F902, 0x0061 };
    uint32_t const ces[9] = { 0x15C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_475)
{
    // 1F902 0041;	
    // (🤂) CIRCLED CROSS FORMEE	[15C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F902, 0x0041 };
    uint32_t const ces[9] = { 0x15C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_476)
{
    // 1F902 0062;	
    // (🤂) CIRCLED CROSS FORMEE	[15C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F902, 0x0062 };
    uint32_t const ces[9] = { 0x15C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_477)
{
    // 1F903 0021;	
    // (🤃) LEFT HALF CIRCLE WITH FOUR DOTS	[15CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F903, 0x0021 };
    uint32_t const ces[9] = { 0x15CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_478)
{
    // 1F903 003F;	
    // (🤃) LEFT HALF CIRCLE WITH FOUR DOTS	[15CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F903, 0x003F };
    uint32_t const ces[9] = { 0x15CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_479)
{
    // 1F903 0061;	
    // (🤃) LEFT HALF CIRCLE WITH FOUR DOTS	[15CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F903, 0x0061 };
    uint32_t const ces[9] = { 0x15CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_480)
{
    // 1F903 0041;	
    // (🤃) LEFT HALF CIRCLE WITH FOUR DOTS	[15CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F903, 0x0041 };
    uint32_t const ces[9] = { 0x15CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_481)
{
    // 1F903 0062;	
    // (🤃) LEFT HALF CIRCLE WITH FOUR DOTS	[15CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F903, 0x0062 };
    uint32_t const ces[9] = { 0x15CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_482)
{
    // 1F904 0021;	
    // (🤄) LEFT HALF CIRCLE WITH THREE DOTS	[15CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F904, 0x0021 };
    uint32_t const ces[9] = { 0x15CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_483)
{
    // 1F904 003F;	
    // (🤄) LEFT HALF CIRCLE WITH THREE DOTS	[15CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F904, 0x003F };
    uint32_t const ces[9] = { 0x15CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_484)
{
    // 1F904 0061;	
    // (🤄) LEFT HALF CIRCLE WITH THREE DOTS	[15CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F904, 0x0061 };
    uint32_t const ces[9] = { 0x15CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_485)
{
    // 1F904 0041;	
    // (🤄) LEFT HALF CIRCLE WITH THREE DOTS	[15CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F904, 0x0041 };
    uint32_t const ces[9] = { 0x15CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_486)
{
    // 1F904 0062;	
    // (🤄) LEFT HALF CIRCLE WITH THREE DOTS	[15CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F904, 0x0062 };
    uint32_t const ces[9] = { 0x15CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_487)
{
    // 1F905 0021;	
    // (🤅) LEFT HALF CIRCLE WITH TWO DOTS	[15CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F905, 0x0021 };
    uint32_t const ces[9] = { 0x15CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_488)
{
    // 1F905 003F;	
    // (🤅) LEFT HALF CIRCLE WITH TWO DOTS	[15CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F905, 0x003F };
    uint32_t const ces[9] = { 0x15CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_489)
{
    // 1F905 0061;	
    // (🤅) LEFT HALF CIRCLE WITH TWO DOTS	[15CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F905, 0x0061 };
    uint32_t const ces[9] = { 0x15CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_490)
{
    // 1F905 0041;	
    // (🤅) LEFT HALF CIRCLE WITH TWO DOTS	[15CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F905, 0x0041 };
    uint32_t const ces[9] = { 0x15CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_491)
{
    // 1F905 0062;	
    // (🤅) LEFT HALF CIRCLE WITH TWO DOTS	[15CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F905, 0x0062 };
    uint32_t const ces[9] = { 0x15CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_492)
{
    // 1F906 0021;	
    // (🤆) LEFT HALF CIRCLE WITH DOT	[15CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F906, 0x0021 };
    uint32_t const ces[9] = { 0x15CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_493)
{
    // 1F906 003F;	
    // (🤆) LEFT HALF CIRCLE WITH DOT	[15CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F906, 0x003F };
    uint32_t const ces[9] = { 0x15CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_494)
{
    // 1F906 0061;	
    // (🤆) LEFT HALF CIRCLE WITH DOT	[15CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F906, 0x0061 };
    uint32_t const ces[9] = { 0x15CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_495)
{
    // 1F906 0041;	
    // (🤆) LEFT HALF CIRCLE WITH DOT	[15CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F906, 0x0041 };
    uint32_t const ces[9] = { 0x15CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_496)
{
    // 1F906 0062;	
    // (🤆) LEFT HALF CIRCLE WITH DOT	[15CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F906, 0x0062 };
    uint32_t const ces[9] = { 0x15CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_497)
{
    // 1F907 0021;	
    // (🤇) LEFT HALF CIRCLE	[15CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F907, 0x0021 };
    uint32_t const ces[9] = { 0x15CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_498)
{
    // 1F907 003F;	
    // (🤇) LEFT HALF CIRCLE	[15CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F907, 0x003F };
    uint32_t const ces[9] = { 0x15CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_062_499)
{
    // 1F907 0061;	
    // (🤇) LEFT HALF CIRCLE	[15CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F907, 0x0061 };
    uint32_t const ces[9] = { 0x15CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

