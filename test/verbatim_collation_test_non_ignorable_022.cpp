// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_022_000)
{
    // 208A 0041;	
    // (₊) SUBSCRIPT PLUS SIGN	[062C 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x208A, 0x0041 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_001)
{
    // 002B 0062;	
    // ('+') PLUS SIGN	[062C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002B, 0x0062 };
    uint32_t const ces[9] = { 0x062C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_002)
{
    // FF0B 0062;	
    // (＋) FULLWIDTH PLUS SIGN	[062C 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0B, 0x0062 };
    uint32_t const ces[9] = { 0x062C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_003)
{
    // FB29 0062;	
    // (﬩) HEBREW LETTER ALTERNATIVE PLUS SIGN	[062C 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB29, 0x0062 };
    uint32_t const ces[9] = { 0x062C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_004)
{
    // FE62 0062;	
    // (﹢) SMALL PLUS SIGN	[062C 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE62, 0x0062 };
    uint32_t const ces[9] = { 0x062C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_005)
{
    // 207A 0062;	
    // (⁺) SUPERSCRIPT PLUS SIGN	[062C 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207A, 0x0062 };
    uint32_t const ces[9] = { 0x062C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_006)
{
    // 208A 0062;	
    // (₊) SUBSCRIPT PLUS SIGN	[062C 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208A, 0x0062 };
    uint32_t const ces[9] = { 0x062C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_007)
{
    // 00B1 0021;	
    // (±) PLUS-MINUS SIGN	[062D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B1, 0x0021 };
    uint32_t const ces[9] = { 0x062D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_008)
{
    // 00B1 003F;	
    // (±) PLUS-MINUS SIGN	[062D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B1, 0x003F };
    uint32_t const ces[9] = { 0x062D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_009)
{
    // 00B1 0061;	
    // (±) PLUS-MINUS SIGN	[062D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B1, 0x0061 };
    uint32_t const ces[9] = { 0x062D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_010)
{
    // 00B1 0041;	
    // (±) PLUS-MINUS SIGN	[062D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00B1, 0x0041 };
    uint32_t const ces[9] = { 0x062D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_011)
{
    // 00B1 0062;	
    // (±) PLUS-MINUS SIGN	[062D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B1, 0x0062 };
    uint32_t const ces[9] = { 0x062D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_012)
{
    // 00F7 0021;	
    // (÷) DIVISION SIGN	[062E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00F7, 0x0021 };
    uint32_t const ces[9] = { 0x062E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_013)
{
    // 00F7 003F;	
    // (÷) DIVISION SIGN	[062E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00F7, 0x003F };
    uint32_t const ces[9] = { 0x062E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_014)
{
    // 00F7 0061;	
    // (÷) DIVISION SIGN	[062E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00F7, 0x0061 };
    uint32_t const ces[9] = { 0x062E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_015)
{
    // 00F7 0041;	
    // (÷) DIVISION SIGN	[062E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00F7, 0x0041 };
    uint32_t const ces[9] = { 0x062E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_016)
{
    // 00F7 0062;	
    // (÷) DIVISION SIGN	[062E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00F7, 0x0062 };
    uint32_t const ces[9] = { 0x062E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_017)
{
    // 00D7 0021;	
    // (×) MULTIPLICATION SIGN	[062F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00D7, 0x0021 };
    uint32_t const ces[9] = { 0x062F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_018)
{
    // 00D7 003F;	
    // (×) MULTIPLICATION SIGN	[062F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00D7, 0x003F };
    uint32_t const ces[9] = { 0x062F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_019)
{
    // 00D7 0061;	
    // (×) MULTIPLICATION SIGN	[062F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00D7, 0x0061 };
    uint32_t const ces[9] = { 0x062F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_020)
{
    // 00D7 0041;	
    // (×) MULTIPLICATION SIGN	[062F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00D7, 0x0041 };
    uint32_t const ces[9] = { 0x062F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_021)
{
    // 00D7 0062;	
    // (×) MULTIPLICATION SIGN	[062F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00D7, 0x0062 };
    uint32_t const ces[9] = { 0x062F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_022)
{
    // 003C 0338 0334;	
    // (≮) LESS-THAN SIGN, COMBINING LONG SOLIDUS OVERLAY	[0630 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x003C, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0630, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_023)
{
    // 226E 0334;	
    // (≮) NOT LESS-THAN	[0630 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226E, 0x0334 };
    uint32_t const ces[10] = { 0x0630, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_024)
{
    // 003C 0021;	
    // ('<') LESS-THAN SIGN	[0630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003C, 0x0021 };
    uint32_t const ces[9] = { 0x0630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_025)
{
    // FF1C 0021;	
    // (＜) FULLWIDTH LESS-THAN SIGN	[0630 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1C, 0x0021 };
    uint32_t const ces[9] = { 0x0630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_026)
{
    // FE64 0021;	
    // (﹤) SMALL LESS-THAN SIGN	[0630 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE64, 0x0021 };
    uint32_t const ces[9] = { 0x0630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_027)
{
    // 226E 0021;	
    // (≮) NOT LESS-THAN	[0630 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226E, 0x0021 };
    uint32_t const ces[11] = { 0x0630, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_028)
{
    // 003C 003F;	
    // ('<') LESS-THAN SIGN	[0630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003C, 0x003F };
    uint32_t const ces[9] = { 0x0630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_029)
{
    // FF1C 003F;	
    // (＜) FULLWIDTH LESS-THAN SIGN	[0630 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1C, 0x003F };
    uint32_t const ces[9] = { 0x0630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_030)
{
    // FE64 003F;	
    // (﹤) SMALL LESS-THAN SIGN	[0630 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE64, 0x003F };
    uint32_t const ces[9] = { 0x0630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_031)
{
    // 226E 003F;	
    // (≮) NOT LESS-THAN	[0630 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226E, 0x003F };
    uint32_t const ces[11] = { 0x0630, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_032)
{
    // 003C 0061;	
    // ('<') LESS-THAN SIGN	[0630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003C, 0x0061 };
    uint32_t const ces[9] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_033)
{
    // 003C 0041;	
    // ('<') LESS-THAN SIGN	[0630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x003C, 0x0041 };
    uint32_t const ces[9] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_034)
{
    // FF1C 0061;	
    // (＜) FULLWIDTH LESS-THAN SIGN	[0630 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1C, 0x0061 };
    uint32_t const ces[9] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_035)
{
    // FF1C 0041;	
    // (＜) FULLWIDTH LESS-THAN SIGN	[0630 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF1C, 0x0041 };
    uint32_t const ces[9] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_036)
{
    // FE64 0061;	
    // (﹤) SMALL LESS-THAN SIGN	[0630 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE64, 0x0061 };
    uint32_t const ces[9] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_037)
{
    // FE64 0041;	
    // (﹤) SMALL LESS-THAN SIGN	[0630 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE64, 0x0041 };
    uint32_t const ces[9] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_038)
{
    // 226E 0061;	
    // (≮) NOT LESS-THAN	[0630 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226E, 0x0061 };
    uint32_t const ces[11] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_039)
{
    // 226E 0041;	
    // (≮) NOT LESS-THAN	[0630 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x226E, 0x0041 };
    uint32_t const ces[11] = { 0x0630, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_040)
{
    // 003C 0062;	
    // ('<') LESS-THAN SIGN	[0630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003C, 0x0062 };
    uint32_t const ces[9] = { 0x0630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_041)
{
    // FF1C 0062;	
    // (＜) FULLWIDTH LESS-THAN SIGN	[0630 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1C, 0x0062 };
    uint32_t const ces[9] = { 0x0630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_042)
{
    // FE64 0062;	
    // (﹤) SMALL LESS-THAN SIGN	[0630 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE64, 0x0062 };
    uint32_t const ces[9] = { 0x0630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_043)
{
    // 226E 0062;	
    // (≮) NOT LESS-THAN	[0630 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226E, 0x0062 };
    uint32_t const ces[11] = { 0x0630, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_044)
{
    // 003D 0338 0334;	
    // (≠) EQUALS SIGN, COMBINING LONG SOLIDUS OVERLAY	[0631 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x003D, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0631, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_045)
{
    // 2260 0334;	
    // (≠) NOT EQUAL TO	[0631 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2260, 0x0334 };
    uint32_t const ces[10] = { 0x0631, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_046)
{
    // 003D 0021;	
    // ('=') EQUALS SIGN	[0631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003D, 0x0021 };
    uint32_t const ces[9] = { 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_047)
{
    // FF1D 0021;	
    // (＝) FULLWIDTH EQUALS SIGN	[0631 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1D, 0x0021 };
    uint32_t const ces[9] = { 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_048)
{
    // FE66 0021;	
    // (﹦) SMALL EQUALS SIGN	[0631 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE66, 0x0021 };
    uint32_t const ces[9] = { 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_049)
{
    // 207C 0021;	
    // (⁼) SUPERSCRIPT EQUALS SIGN	[0631 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207C, 0x0021 };
    uint32_t const ces[9] = { 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_050)
{
    // 208C 0021;	
    // (₌) SUBSCRIPT EQUALS SIGN	[0631 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208C, 0x0021 };
    uint32_t const ces[9] = { 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_051)
{
    // 2260 0021;	
    // (≠) NOT EQUAL TO	[0631 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2260, 0x0021 };
    uint32_t const ces[11] = { 0x0631, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_052)
{
    // 003D 003F;	
    // ('=') EQUALS SIGN	[0631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003D, 0x003F };
    uint32_t const ces[9] = { 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_053)
{
    // FF1D 003F;	
    // (＝) FULLWIDTH EQUALS SIGN	[0631 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1D, 0x003F };
    uint32_t const ces[9] = { 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_054)
{
    // FE66 003F;	
    // (﹦) SMALL EQUALS SIGN	[0631 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE66, 0x003F };
    uint32_t const ces[9] = { 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_055)
{
    // 207C 003F;	
    // (⁼) SUPERSCRIPT EQUALS SIGN	[0631 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207C, 0x003F };
    uint32_t const ces[9] = { 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_056)
{
    // 208C 003F;	
    // (₌) SUBSCRIPT EQUALS SIGN	[0631 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208C, 0x003F };
    uint32_t const ces[9] = { 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_057)
{
    // 2260 003F;	
    // (≠) NOT EQUAL TO	[0631 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2260, 0x003F };
    uint32_t const ces[11] = { 0x0631, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_058)
{
    // 2A75 0021;	
    // (⩵) TWO CONSECUTIVE EQUALS SIGNS	[0631 0631 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A75, 0x0021 };
    uint32_t const ces[12] = { 0x0631, 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_059)
{
    // 2A75 003F;	
    // (⩵) TWO CONSECUTIVE EQUALS SIGNS	[0631 0631 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A75, 0x003F };
    uint32_t const ces[12] = { 0x0631, 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_060)
{
    // 2A76 0021;	
    // (⩶) THREE CONSECUTIVE EQUALS SIGNS	[0631 0631 0631 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A76, 0x0021 };
    uint32_t const ces[15] = { 0x0631, 0x0631, 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_061)
{
    // 2A76 003F;	
    // (⩶) THREE CONSECUTIVE EQUALS SIGNS	[0631 0631 0631 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A76, 0x003F };
    uint32_t const ces[15] = { 0x0631, 0x0631, 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_062)
{
    // 2A76 0061;	
    // (⩶) THREE CONSECUTIVE EQUALS SIGNS	[0631 0631 0631 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A76, 0x0061 };
    uint32_t const ces[15] = { 0x0631, 0x0631, 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_063)
{
    // 2A76 0041;	
    // (⩶) THREE CONSECUTIVE EQUALS SIGNS	[0631 0631 0631 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2A76, 0x0041 };
    uint32_t const ces[15] = { 0x0631, 0x0631, 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_064)
{
    // 2A76 0062;	
    // (⩶) THREE CONSECUTIVE EQUALS SIGNS	[0631 0631 0631 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A76, 0x0062 };
    uint32_t const ces[15] = { 0x0631, 0x0631, 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_065)
{
    // 2A75 0061;	
    // (⩵) TWO CONSECUTIVE EQUALS SIGNS	[0631 0631 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A75, 0x0061 };
    uint32_t const ces[12] = { 0x0631, 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_066)
{
    // 2A75 0041;	
    // (⩵) TWO CONSECUTIVE EQUALS SIGNS	[0631 0631 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2A75, 0x0041 };
    uint32_t const ces[12] = { 0x0631, 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_067)
{
    // 2A75 0062;	
    // (⩵) TWO CONSECUTIVE EQUALS SIGNS	[0631 0631 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A75, 0x0062 };
    uint32_t const ces[12] = { 0x0631, 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_068)
{
    // 003D 0061;	
    // ('=') EQUALS SIGN	[0631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003D, 0x0061 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_069)
{
    // 003D 0041;	
    // ('=') EQUALS SIGN	[0631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x003D, 0x0041 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_070)
{
    // FF1D 0061;	
    // (＝) FULLWIDTH EQUALS SIGN	[0631 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1D, 0x0061 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_071)
{
    // FF1D 0041;	
    // (＝) FULLWIDTH EQUALS SIGN	[0631 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF1D, 0x0041 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_072)
{
    // FE66 0061;	
    // (﹦) SMALL EQUALS SIGN	[0631 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE66, 0x0061 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_073)
{
    // FE66 0041;	
    // (﹦) SMALL EQUALS SIGN	[0631 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE66, 0x0041 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_074)
{
    // 207C 0061;	
    // (⁼) SUPERSCRIPT EQUALS SIGN	[0631 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207C, 0x0061 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_075)
{
    // 207C 0041;	
    // (⁼) SUPERSCRIPT EQUALS SIGN	[0631 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x207C, 0x0041 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_076)
{
    // 208C 0061;	
    // (₌) SUBSCRIPT EQUALS SIGN	[0631 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208C, 0x0061 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_077)
{
    // 208C 0041;	
    // (₌) SUBSCRIPT EQUALS SIGN	[0631 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x208C, 0x0041 };
    uint32_t const ces[9] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_078)
{
    // 2260 0061;	
    // (≠) NOT EQUAL TO	[0631 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2260, 0x0061 };
    uint32_t const ces[11] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_079)
{
    // 2260 0041;	
    // (≠) NOT EQUAL TO	[0631 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2260, 0x0041 };
    uint32_t const ces[11] = { 0x0631, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_080)
{
    // 003D 0062;	
    // ('=') EQUALS SIGN	[0631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003D, 0x0062 };
    uint32_t const ces[9] = { 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_081)
{
    // FF1D 0062;	
    // (＝) FULLWIDTH EQUALS SIGN	[0631 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1D, 0x0062 };
    uint32_t const ces[9] = { 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_082)
{
    // FE66 0062;	
    // (﹦) SMALL EQUALS SIGN	[0631 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE66, 0x0062 };
    uint32_t const ces[9] = { 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_083)
{
    // 207C 0062;	
    // (⁼) SUPERSCRIPT EQUALS SIGN	[0631 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207C, 0x0062 };
    uint32_t const ces[9] = { 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_084)
{
    // 208C 0062;	
    // (₌) SUBSCRIPT EQUALS SIGN	[0631 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208C, 0x0062 };
    uint32_t const ces[9] = { 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_085)
{
    // 2260 0062;	
    // (≠) NOT EQUAL TO	[0631 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2260, 0x0062 };
    uint32_t const ces[11] = { 0x0631, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_086)
{
    // 003E 0338 0334;	
    // (≯) GREATER-THAN SIGN, COMBINING LONG SOLIDUS OVERLAY	[0632 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x003E, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0632, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_087)
{
    // 226F 0334;	
    // (≯) NOT GREATER-THAN	[0632 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226F, 0x0334 };
    uint32_t const ces[10] = { 0x0632, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_088)
{
    // 003E 0021;	
    // ('>') GREATER-THAN SIGN	[0632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003E, 0x0021 };
    uint32_t const ces[9] = { 0x0632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_089)
{
    // FF1E 0021;	
    // (＞) FULLWIDTH GREATER-THAN SIGN	[0632 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1E, 0x0021 };
    uint32_t const ces[9] = { 0x0632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_090)
{
    // FE65 0021;	
    // (﹥) SMALL GREATER-THAN SIGN	[0632 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE65, 0x0021 };
    uint32_t const ces[9] = { 0x0632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_091)
{
    // 226F 0021;	
    // (≯) NOT GREATER-THAN	[0632 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226F, 0x0021 };
    uint32_t const ces[11] = { 0x0632, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_092)
{
    // 003E 003F;	
    // ('>') GREATER-THAN SIGN	[0632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003E, 0x003F };
    uint32_t const ces[9] = { 0x0632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_093)
{
    // FF1E 003F;	
    // (＞) FULLWIDTH GREATER-THAN SIGN	[0632 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1E, 0x003F };
    uint32_t const ces[9] = { 0x0632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_094)
{
    // FE65 003F;	
    // (﹥) SMALL GREATER-THAN SIGN	[0632 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE65, 0x003F };
    uint32_t const ces[9] = { 0x0632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_095)
{
    // 226F 003F;	
    // (≯) NOT GREATER-THAN	[0632 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226F, 0x003F };
    uint32_t const ces[11] = { 0x0632, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_096)
{
    // 003E 0061;	
    // ('>') GREATER-THAN SIGN	[0632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003E, 0x0061 };
    uint32_t const ces[9] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_097)
{
    // 003E 0041;	
    // ('>') GREATER-THAN SIGN	[0632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x003E, 0x0041 };
    uint32_t const ces[9] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_098)
{
    // FF1E 0061;	
    // (＞) FULLWIDTH GREATER-THAN SIGN	[0632 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1E, 0x0061 };
    uint32_t const ces[9] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_099)
{
    // FF1E 0041;	
    // (＞) FULLWIDTH GREATER-THAN SIGN	[0632 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF1E, 0x0041 };
    uint32_t const ces[9] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_100)
{
    // FE65 0061;	
    // (﹥) SMALL GREATER-THAN SIGN	[0632 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE65, 0x0061 };
    uint32_t const ces[9] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_101)
{
    // FE65 0041;	
    // (﹥) SMALL GREATER-THAN SIGN	[0632 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE65, 0x0041 };
    uint32_t const ces[9] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_102)
{
    // 226F 0061;	
    // (≯) NOT GREATER-THAN	[0632 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226F, 0x0061 };
    uint32_t const ces[11] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_103)
{
    // 226F 0041;	
    // (≯) NOT GREATER-THAN	[0632 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x226F, 0x0041 };
    uint32_t const ces[11] = { 0x0632, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_104)
{
    // 003E 0062;	
    // ('>') GREATER-THAN SIGN	[0632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003E, 0x0062 };
    uint32_t const ces[9] = { 0x0632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_105)
{
    // FF1E 0062;	
    // (＞) FULLWIDTH GREATER-THAN SIGN	[0632 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1E, 0x0062 };
    uint32_t const ces[9] = { 0x0632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_106)
{
    // FE65 0062;	
    // (﹥) SMALL GREATER-THAN SIGN	[0632 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE65, 0x0062 };
    uint32_t const ces[9] = { 0x0632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_107)
{
    // 226F 0062;	
    // (≯) NOT GREATER-THAN	[0632 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226F, 0x0062 };
    uint32_t const ces[11] = { 0x0632, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_108)
{
    // 00AC 0021;	
    // (¬) NOT SIGN	[0633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AC, 0x0021 };
    uint32_t const ces[9] = { 0x0633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_109)
{
    // FFE2 0021;	
    // (￢) FULLWIDTH NOT SIGN	[0633 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE2, 0x0021 };
    uint32_t const ces[9] = { 0x0633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_110)
{
    // 00AC 003F;	
    // (¬) NOT SIGN	[0633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AC, 0x003F };
    uint32_t const ces[9] = { 0x0633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_111)
{
    // FFE2 003F;	
    // (￢) FULLWIDTH NOT SIGN	[0633 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE2, 0x003F };
    uint32_t const ces[9] = { 0x0633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_112)
{
    // 00AC 0061;	
    // (¬) NOT SIGN	[0633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AC, 0x0061 };
    uint32_t const ces[9] = { 0x0633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_113)
{
    // 00AC 0041;	
    // (¬) NOT SIGN	[0633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00AC, 0x0041 };
    uint32_t const ces[9] = { 0x0633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_114)
{
    // FFE2 0061;	
    // (￢) FULLWIDTH NOT SIGN	[0633 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE2, 0x0061 };
    uint32_t const ces[9] = { 0x0633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_115)
{
    // FFE2 0041;	
    // (￢) FULLWIDTH NOT SIGN	[0633 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFFE2, 0x0041 };
    uint32_t const ces[9] = { 0x0633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_116)
{
    // 00AC 0062;	
    // (¬) NOT SIGN	[0633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AC, 0x0062 };
    uint32_t const ces[9] = { 0x0633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_117)
{
    // FFE2 0062;	
    // (￢) FULLWIDTH NOT SIGN	[0633 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE2, 0x0062 };
    uint32_t const ces[9] = { 0x0633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_118)
{
    // 007C 0021;	
    // ('|') VERTICAL LINE	[0634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007C, 0x0021 };
    uint32_t const ces[9] = { 0x0634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_119)
{
    // FF5C 0021;	
    // (｜) FULLWIDTH VERTICAL LINE	[0634 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5C, 0x0021 };
    uint32_t const ces[9] = { 0x0634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_120)
{
    // 007C 003F;	
    // ('|') VERTICAL LINE	[0634 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007C, 0x003F };
    uint32_t const ces[9] = { 0x0634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_121)
{
    // FF5C 003F;	
    // (｜) FULLWIDTH VERTICAL LINE	[0634 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5C, 0x003F };
    uint32_t const ces[9] = { 0x0634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_122)
{
    // 007C 0061;	
    // ('|') VERTICAL LINE	[0634 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007C, 0x0061 };
    uint32_t const ces[9] = { 0x0634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_123)
{
    // 007C 0041;	
    // ('|') VERTICAL LINE	[0634 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x007C, 0x0041 };
    uint32_t const ces[9] = { 0x0634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_124)
{
    // FF5C 0061;	
    // (｜) FULLWIDTH VERTICAL LINE	[0634 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5C, 0x0061 };
    uint32_t const ces[9] = { 0x0634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_125)
{
    // FF5C 0041;	
    // (｜) FULLWIDTH VERTICAL LINE	[0634 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF5C, 0x0041 };
    uint32_t const ces[9] = { 0x0634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_126)
{
    // 007C 0062;	
    // ('|') VERTICAL LINE	[0634 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007C, 0x0062 };
    uint32_t const ces[9] = { 0x0634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_127)
{
    // FF5C 0062;	
    // (｜) FULLWIDTH VERTICAL LINE	[0634 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5C, 0x0062 };
    uint32_t const ces[9] = { 0x0634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_128)
{
    // 00A6 0021;	
    // (¦) BROKEN BAR	[0635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A6, 0x0021 };
    uint32_t const ces[9] = { 0x0635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_129)
{
    // FFE4 0021;	
    // (￤) FULLWIDTH BROKEN BAR	[0635 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE4, 0x0021 };
    uint32_t const ces[9] = { 0x0635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_130)
{
    // 00A6 003F;	
    // (¦) BROKEN BAR	[0635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A6, 0x003F };
    uint32_t const ces[9] = { 0x0635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_131)
{
    // FFE4 003F;	
    // (￤) FULLWIDTH BROKEN BAR	[0635 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE4, 0x003F };
    uint32_t const ces[9] = { 0x0635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_132)
{
    // 00A6 0061;	
    // (¦) BROKEN BAR	[0635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A6, 0x0061 };
    uint32_t const ces[9] = { 0x0635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_133)
{
    // 00A6 0041;	
    // (¦) BROKEN BAR	[0635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A6, 0x0041 };
    uint32_t const ces[9] = { 0x0635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_134)
{
    // FFE4 0061;	
    // (￤) FULLWIDTH BROKEN BAR	[0635 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE4, 0x0061 };
    uint32_t const ces[9] = { 0x0635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_135)
{
    // FFE4 0041;	
    // (￤) FULLWIDTH BROKEN BAR	[0635 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFFE4, 0x0041 };
    uint32_t const ces[9] = { 0x0635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_136)
{
    // 00A6 0062;	
    // (¦) BROKEN BAR	[0635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A6, 0x0062 };
    uint32_t const ces[9] = { 0x0635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_137)
{
    // FFE4 0062;	
    // (￤) FULLWIDTH BROKEN BAR	[0635 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE4, 0x0062 };
    uint32_t const ces[9] = { 0x0635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_138)
{
    // 007E 0021;	
    // ('~') TILDE	[0636 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007E, 0x0021 };
    uint32_t const ces[9] = { 0x0636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_139)
{
    // FF5E 0021;	
    // (～) FULLWIDTH TILDE	[0636 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5E, 0x0021 };
    uint32_t const ces[9] = { 0x0636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_140)
{
    // 007E 003F;	
    // ('~') TILDE	[0636 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007E, 0x003F };
    uint32_t const ces[9] = { 0x0636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_141)
{
    // FF5E 003F;	
    // (～) FULLWIDTH TILDE	[0636 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5E, 0x003F };
    uint32_t const ces[9] = { 0x0636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_142)
{
    // 007E 0061;	
    // ('~') TILDE	[0636 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007E, 0x0061 };
    uint32_t const ces[9] = { 0x0636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_143)
{
    // 007E 0041;	
    // ('~') TILDE	[0636 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x007E, 0x0041 };
    uint32_t const ces[9] = { 0x0636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_144)
{
    // FF5E 0061;	
    // (～) FULLWIDTH TILDE	[0636 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5E, 0x0061 };
    uint32_t const ces[9] = { 0x0636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_145)
{
    // FF5E 0041;	
    // (～) FULLWIDTH TILDE	[0636 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF5E, 0x0041 };
    uint32_t const ces[9] = { 0x0636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_146)
{
    // 007E 0062;	
    // ('~') TILDE	[0636 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007E, 0x0062 };
    uint32_t const ces[9] = { 0x0636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_147)
{
    // FF5E 0062;	
    // (～) FULLWIDTH TILDE	[0636 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5E, 0x0062 };
    uint32_t const ces[9] = { 0x0636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_148)
{
    // 2212 0021;	
    // (−) MINUS SIGN	[0637 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2212, 0x0021 };
    uint32_t const ces[9] = { 0x0637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_149)
{
    // 207B 0021;	
    // (⁻) SUPERSCRIPT MINUS	[0637 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207B, 0x0021 };
    uint32_t const ces[9] = { 0x0637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_150)
{
    // 208B 0021;	
    // (₋) SUBSCRIPT MINUS	[0637 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208B, 0x0021 };
    uint32_t const ces[9] = { 0x0637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_151)
{
    // 2212 003F;	
    // (−) MINUS SIGN	[0637 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2212, 0x003F };
    uint32_t const ces[9] = { 0x0637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_152)
{
    // 207B 003F;	
    // (⁻) SUPERSCRIPT MINUS	[0637 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207B, 0x003F };
    uint32_t const ces[9] = { 0x0637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_153)
{
    // 208B 003F;	
    // (₋) SUBSCRIPT MINUS	[0637 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208B, 0x003F };
    uint32_t const ces[9] = { 0x0637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_154)
{
    // 2212 0061;	
    // (−) MINUS SIGN	[0637 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2212, 0x0061 };
    uint32_t const ces[9] = { 0x0637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_155)
{
    // 2212 0041;	
    // (−) MINUS SIGN	[0637 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2212, 0x0041 };
    uint32_t const ces[9] = { 0x0637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_156)
{
    // 207B 0061;	
    // (⁻) SUPERSCRIPT MINUS	[0637 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207B, 0x0061 };
    uint32_t const ces[9] = { 0x0637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_157)
{
    // 207B 0041;	
    // (⁻) SUPERSCRIPT MINUS	[0637 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x207B, 0x0041 };
    uint32_t const ces[9] = { 0x0637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_158)
{
    // 208B 0061;	
    // (₋) SUBSCRIPT MINUS	[0637 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208B, 0x0061 };
    uint32_t const ces[9] = { 0x0637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_159)
{
    // 208B 0041;	
    // (₋) SUBSCRIPT MINUS	[0637 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x208B, 0x0041 };
    uint32_t const ces[9] = { 0x0637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_160)
{
    // 2212 0062;	
    // (−) MINUS SIGN	[0637 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2212, 0x0062 };
    uint32_t const ces[9] = { 0x0637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_161)
{
    // 207B 0062;	
    // (⁻) SUPERSCRIPT MINUS	[0637 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207B, 0x0062 };
    uint32_t const ces[9] = { 0x0637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_162)
{
    // 208B 0062;	
    // (₋) SUBSCRIPT MINUS	[0637 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208B, 0x0062 };
    uint32_t const ces[9] = { 0x0637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_163)
{
    // 2052 0021;	
    // (⁒) COMMERCIAL MINUS SIGN	[0638 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2052, 0x0021 };
    uint32_t const ces[9] = { 0x0638, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_164)
{
    // 2052 003F;	
    // (⁒) COMMERCIAL MINUS SIGN	[0638 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2052, 0x003F };
    uint32_t const ces[9] = { 0x0638, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_165)
{
    // 2052 0061;	
    // (⁒) COMMERCIAL MINUS SIGN	[0638 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2052, 0x0061 };
    uint32_t const ces[9] = { 0x0638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_166)
{
    // 2052 0041;	
    // (⁒) COMMERCIAL MINUS SIGN	[0638 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2052, 0x0041 };
    uint32_t const ces[9] = { 0x0638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_167)
{
    // 2052 0062;	
    // (⁒) COMMERCIAL MINUS SIGN	[0638 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2052, 0x0062 };
    uint32_t const ces[9] = { 0x0638, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_168)
{
    // 2213 0021;	
    // (∓) MINUS-OR-PLUS SIGN	[0639 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2213, 0x0021 };
    uint32_t const ces[9] = { 0x0639, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_169)
{
    // 2213 003F;	
    // (∓) MINUS-OR-PLUS SIGN	[0639 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2213, 0x003F };
    uint32_t const ces[9] = { 0x0639, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_170)
{
    // 2213 0061;	
    // (∓) MINUS-OR-PLUS SIGN	[0639 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2213, 0x0061 };
    uint32_t const ces[9] = { 0x0639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_171)
{
    // 2213 0041;	
    // (∓) MINUS-OR-PLUS SIGN	[0639 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2213, 0x0041 };
    uint32_t const ces[9] = { 0x0639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_172)
{
    // 2213 0062;	
    // (∓) MINUS-OR-PLUS SIGN	[0639 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2213, 0x0062 };
    uint32_t const ces[9] = { 0x0639, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_173)
{
    // 2214 0021;	
    // (∔) DOT PLUS	[063A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2214, 0x0021 };
    uint32_t const ces[9] = { 0x063A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_174)
{
    // 2214 003F;	
    // (∔) DOT PLUS	[063A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2214, 0x003F };
    uint32_t const ces[9] = { 0x063A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_175)
{
    // 2214 0061;	
    // (∔) DOT PLUS	[063A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2214, 0x0061 };
    uint32_t const ces[9] = { 0x063A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_176)
{
    // 2214 0041;	
    // (∔) DOT PLUS	[063A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2214, 0x0041 };
    uint32_t const ces[9] = { 0x063A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_177)
{
    // 2214 0062;	
    // (∔) DOT PLUS	[063A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2214, 0x0062 };
    uint32_t const ces[9] = { 0x063A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_178)
{
    // 2215 0021;	
    // (∕) DIVISION SLASH	[063B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2215, 0x0021 };
    uint32_t const ces[9] = { 0x063B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_179)
{
    // 2215 003F;	
    // (∕) DIVISION SLASH	[063B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2215, 0x003F };
    uint32_t const ces[9] = { 0x063B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_180)
{
    // 2215 0061;	
    // (∕) DIVISION SLASH	[063B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2215, 0x0061 };
    uint32_t const ces[9] = { 0x063B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_181)
{
    // 2215 0041;	
    // (∕) DIVISION SLASH	[063B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2215, 0x0041 };
    uint32_t const ces[9] = { 0x063B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_182)
{
    // 2215 0062;	
    // (∕) DIVISION SLASH	[063B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2215, 0x0062 };
    uint32_t const ces[9] = { 0x063B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_183)
{
    // 2044 0021;	
    // (⁄) FRACTION SLASH	[063C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2044, 0x0021 };
    uint32_t const ces[9] = { 0x063C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_184)
{
    // 2044 003F;	
    // (⁄) FRACTION SLASH	[063C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2044, 0x003F };
    uint32_t const ces[9] = { 0x063C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_185)
{
    // 2044 0061;	
    // (⁄) FRACTION SLASH	[063C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2044, 0x0061 };
    uint32_t const ces[9] = { 0x063C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_186)
{
    // 2044 0041;	
    // (⁄) FRACTION SLASH	[063C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2044, 0x0041 };
    uint32_t const ces[9] = { 0x063C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_187)
{
    // 2044 0062;	
    // (⁄) FRACTION SLASH	[063C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2044, 0x0062 };
    uint32_t const ces[9] = { 0x063C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_188)
{
    // 2216 0021;	
    // (∖) SET MINUS	[063D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2216, 0x0021 };
    uint32_t const ces[9] = { 0x063D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_189)
{
    // 2216 003F;	
    // (∖) SET MINUS	[063D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2216, 0x003F };
    uint32_t const ces[9] = { 0x063D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_190)
{
    // 2216 0061;	
    // (∖) SET MINUS	[063D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2216, 0x0061 };
    uint32_t const ces[9] = { 0x063D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_191)
{
    // 2216 0041;	
    // (∖) SET MINUS	[063D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2216, 0x0041 };
    uint32_t const ces[9] = { 0x063D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_192)
{
    // 2216 0062;	
    // (∖) SET MINUS	[063D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2216, 0x0062 };
    uint32_t const ces[9] = { 0x063D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_193)
{
    // 2217 0021;	
    // (∗) ASTERISK OPERATOR	[063E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2217, 0x0021 };
    uint32_t const ces[9] = { 0x063E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_194)
{
    // 2217 003F;	
    // (∗) ASTERISK OPERATOR	[063E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2217, 0x003F };
    uint32_t const ces[9] = { 0x063E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_195)
{
    // 2217 0061;	
    // (∗) ASTERISK OPERATOR	[063E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2217, 0x0061 };
    uint32_t const ces[9] = { 0x063E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_196)
{
    // 2217 0041;	
    // (∗) ASTERISK OPERATOR	[063E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2217, 0x0041 };
    uint32_t const ces[9] = { 0x063E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_197)
{
    // 2217 0062;	
    // (∗) ASTERISK OPERATOR	[063E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2217, 0x0062 };
    uint32_t const ces[9] = { 0x063E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_198)
{
    // 2218 0021;	
    // (∘) RING OPERATOR	[063F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2218, 0x0021 };
    uint32_t const ces[9] = { 0x063F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_199)
{
    // 2218 003F;	
    // (∘) RING OPERATOR	[063F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2218, 0x003F };
    uint32_t const ces[9] = { 0x063F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_200)
{
    // 2218 0061;	
    // (∘) RING OPERATOR	[063F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2218, 0x0061 };
    uint32_t const ces[9] = { 0x063F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_201)
{
    // 2218 0041;	
    // (∘) RING OPERATOR	[063F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2218, 0x0041 };
    uint32_t const ces[9] = { 0x063F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_202)
{
    // 2218 0062;	
    // (∘) RING OPERATOR	[063F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2218, 0x0062 };
    uint32_t const ces[9] = { 0x063F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_203)
{
    // 2219 0021;	
    // (∙) BULLET OPERATOR	[0640 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2219, 0x0021 };
    uint32_t const ces[9] = { 0x0640, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_204)
{
    // 2219 003F;	
    // (∙) BULLET OPERATOR	[0640 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2219, 0x003F };
    uint32_t const ces[9] = { 0x0640, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_205)
{
    // 2219 0061;	
    // (∙) BULLET OPERATOR	[0640 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2219, 0x0061 };
    uint32_t const ces[9] = { 0x0640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_206)
{
    // 2219 0041;	
    // (∙) BULLET OPERATOR	[0640 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2219, 0x0041 };
    uint32_t const ces[9] = { 0x0640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_207)
{
    // 2219 0062;	
    // (∙) BULLET OPERATOR	[0640 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2219, 0x0062 };
    uint32_t const ces[9] = { 0x0640, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_208)
{
    // 221A 0021;	
    // (√) SQUARE ROOT	[0641 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221A, 0x0021 };
    uint32_t const ces[9] = { 0x0641, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_209)
{
    // 221A 003F;	
    // (√) SQUARE ROOT	[0641 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221A, 0x003F };
    uint32_t const ces[9] = { 0x0641, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_210)
{
    // 221A 0061;	
    // (√) SQUARE ROOT	[0641 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221A, 0x0061 };
    uint32_t const ces[9] = { 0x0641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_211)
{
    // 221A 0041;	
    // (√) SQUARE ROOT	[0641 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x221A, 0x0041 };
    uint32_t const ces[9] = { 0x0641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_212)
{
    // 221A 0062;	
    // (√) SQUARE ROOT	[0641 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221A, 0x0062 };
    uint32_t const ces[9] = { 0x0641, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_213)
{
    // 221B 0021;	
    // (∛) CUBE ROOT	[0642 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221B, 0x0021 };
    uint32_t const ces[9] = { 0x0642, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_214)
{
    // 221B 003F;	
    // (∛) CUBE ROOT	[0642 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221B, 0x003F };
    uint32_t const ces[9] = { 0x0642, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_215)
{
    // 221B 0061;	
    // (∛) CUBE ROOT	[0642 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221B, 0x0061 };
    uint32_t const ces[9] = { 0x0642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_216)
{
    // 221B 0041;	
    // (∛) CUBE ROOT	[0642 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x221B, 0x0041 };
    uint32_t const ces[9] = { 0x0642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_217)
{
    // 221B 0062;	
    // (∛) CUBE ROOT	[0642 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221B, 0x0062 };
    uint32_t const ces[9] = { 0x0642, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_218)
{
    // 0606 0021;	
    // (؆) ARABIC-INDIC CUBE ROOT	[0643 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0606, 0x0021 };
    uint32_t const ces[9] = { 0x0643, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_219)
{
    // 0606 003F;	
    // (؆) ARABIC-INDIC CUBE ROOT	[0643 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0606, 0x003F };
    uint32_t const ces[9] = { 0x0643, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_220)
{
    // 0606 0061;	
    // (؆) ARABIC-INDIC CUBE ROOT	[0643 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0606, 0x0061 };
    uint32_t const ces[9] = { 0x0643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_221)
{
    // 0606 0041;	
    // (؆) ARABIC-INDIC CUBE ROOT	[0643 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0606, 0x0041 };
    uint32_t const ces[9] = { 0x0643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_222)
{
    // 0606 0062;	
    // (؆) ARABIC-INDIC CUBE ROOT	[0643 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0606, 0x0062 };
    uint32_t const ces[9] = { 0x0643, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_223)
{
    // 221C 0021;	
    // (∜) FOURTH ROOT	[0644 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221C, 0x0021 };
    uint32_t const ces[9] = { 0x0644, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_224)
{
    // 221C 003F;	
    // (∜) FOURTH ROOT	[0644 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221C, 0x003F };
    uint32_t const ces[9] = { 0x0644, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_225)
{
    // 221C 0061;	
    // (∜) FOURTH ROOT	[0644 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221C, 0x0061 };
    uint32_t const ces[9] = { 0x0644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_226)
{
    // 221C 0041;	
    // (∜) FOURTH ROOT	[0644 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x221C, 0x0041 };
    uint32_t const ces[9] = { 0x0644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_227)
{
    // 221C 0062;	
    // (∜) FOURTH ROOT	[0644 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221C, 0x0062 };
    uint32_t const ces[9] = { 0x0644, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_228)
{
    // 0607 0021;	
    // (؇) ARABIC-INDIC FOURTH ROOT	[0645 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0607, 0x0021 };
    uint32_t const ces[9] = { 0x0645, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_229)
{
    // 0607 003F;	
    // (؇) ARABIC-INDIC FOURTH ROOT	[0645 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0607, 0x003F };
    uint32_t const ces[9] = { 0x0645, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_230)
{
    // 0607 0061;	
    // (؇) ARABIC-INDIC FOURTH ROOT	[0645 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0607, 0x0061 };
    uint32_t const ces[9] = { 0x0645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_231)
{
    // 0607 0041;	
    // (؇) ARABIC-INDIC FOURTH ROOT	[0645 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0607, 0x0041 };
    uint32_t const ces[9] = { 0x0645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_232)
{
    // 0607 0062;	
    // (؇) ARABIC-INDIC FOURTH ROOT	[0645 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0607, 0x0062 };
    uint32_t const ces[9] = { 0x0645, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_233)
{
    // 221D 0021;	
    // (∝) PROPORTIONAL TO	[0646 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221D, 0x0021 };
    uint32_t const ces[9] = { 0x0646, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_234)
{
    // 221D 003F;	
    // (∝) PROPORTIONAL TO	[0646 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221D, 0x003F };
    uint32_t const ces[9] = { 0x0646, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_235)
{
    // 221D 0061;	
    // (∝) PROPORTIONAL TO	[0646 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221D, 0x0061 };
    uint32_t const ces[9] = { 0x0646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_236)
{
    // 221D 0041;	
    // (∝) PROPORTIONAL TO	[0646 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x221D, 0x0041 };
    uint32_t const ces[9] = { 0x0646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_237)
{
    // 221D 0062;	
    // (∝) PROPORTIONAL TO	[0646 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221D, 0x0062 };
    uint32_t const ces[9] = { 0x0646, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_238)
{
    // 221E 0021;	
    // (∞) INFINITY	[0647 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221E, 0x0021 };
    uint32_t const ces[9] = { 0x0647, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_239)
{
    // 221E 003F;	
    // (∞) INFINITY	[0647 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221E, 0x003F };
    uint32_t const ces[9] = { 0x0647, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_240)
{
    // 221E 0061;	
    // (∞) INFINITY	[0647 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221E, 0x0061 };
    uint32_t const ces[9] = { 0x0647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_241)
{
    // 221E 0041;	
    // (∞) INFINITY	[0647 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x221E, 0x0041 };
    uint32_t const ces[9] = { 0x0647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_242)
{
    // 221E 0062;	
    // (∞) INFINITY	[0647 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221E, 0x0062 };
    uint32_t const ces[9] = { 0x0647, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_243)
{
    // 221F 0021;	
    // (∟) RIGHT ANGLE	[0648 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221F, 0x0021 };
    uint32_t const ces[9] = { 0x0648, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_244)
{
    // 221F 003F;	
    // (∟) RIGHT ANGLE	[0648 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221F, 0x003F };
    uint32_t const ces[9] = { 0x0648, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_245)
{
    // 221F 0061;	
    // (∟) RIGHT ANGLE	[0648 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221F, 0x0061 };
    uint32_t const ces[9] = { 0x0648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_246)
{
    // 221F 0041;	
    // (∟) RIGHT ANGLE	[0648 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x221F, 0x0041 };
    uint32_t const ces[9] = { 0x0648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_247)
{
    // 221F 0062;	
    // (∟) RIGHT ANGLE	[0648 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x221F, 0x0062 };
    uint32_t const ces[9] = { 0x0648, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_248)
{
    // 2220 0021;	
    // (∠) ANGLE	[0649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2220, 0x0021 };
    uint32_t const ces[9] = { 0x0649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_249)
{
    // 2220 003F;	
    // (∠) ANGLE	[0649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2220, 0x003F };
    uint32_t const ces[9] = { 0x0649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_250)
{
    // 2220 0061;	
    // (∠) ANGLE	[0649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2220, 0x0061 };
    uint32_t const ces[9] = { 0x0649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_251)
{
    // 2220 0041;	
    // (∠) ANGLE	[0649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2220, 0x0041 };
    uint32_t const ces[9] = { 0x0649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_252)
{
    // 2220 0062;	
    // (∠) ANGLE	[0649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2220, 0x0062 };
    uint32_t const ces[9] = { 0x0649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_253)
{
    // 2221 0021;	
    // (∡) MEASURED ANGLE	[064A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2221, 0x0021 };
    uint32_t const ces[9] = { 0x064A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_254)
{
    // 2221 003F;	
    // (∡) MEASURED ANGLE	[064A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2221, 0x003F };
    uint32_t const ces[9] = { 0x064A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_255)
{
    // 2221 0061;	
    // (∡) MEASURED ANGLE	[064A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2221, 0x0061 };
    uint32_t const ces[9] = { 0x064A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_256)
{
    // 2221 0041;	
    // (∡) MEASURED ANGLE	[064A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2221, 0x0041 };
    uint32_t const ces[9] = { 0x064A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_257)
{
    // 2221 0062;	
    // (∡) MEASURED ANGLE	[064A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2221, 0x0062 };
    uint32_t const ces[9] = { 0x064A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_258)
{
    // 2222 0021;	
    // (∢) SPHERICAL ANGLE	[064B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2222, 0x0021 };
    uint32_t const ces[9] = { 0x064B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_259)
{
    // 2222 003F;	
    // (∢) SPHERICAL ANGLE	[064B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2222, 0x003F };
    uint32_t const ces[9] = { 0x064B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_260)
{
    // 2222 0061;	
    // (∢) SPHERICAL ANGLE	[064B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2222, 0x0061 };
    uint32_t const ces[9] = { 0x064B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_261)
{
    // 2222 0041;	
    // (∢) SPHERICAL ANGLE	[064B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2222, 0x0041 };
    uint32_t const ces[9] = { 0x064B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_262)
{
    // 2222 0062;	
    // (∢) SPHERICAL ANGLE	[064B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2222, 0x0062 };
    uint32_t const ces[9] = { 0x064B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_263)
{
    // 2223 0338 0334;	
    // (∤) DIVIDES, COMBINING LONG SOLIDUS OVERLAY	[064C | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2223, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x064C, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_264)
{
    // 2224 0334;	
    // (∤) DOES NOT DIVIDE	[064C | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2224, 0x0334 };
    uint32_t const ces[10] = { 0x064C, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_265)
{
    // 2223 0021;	
    // (∣) DIVIDES	[064C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2223, 0x0021 };
    uint32_t const ces[9] = { 0x064C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_266)
{
    // 2224 0021;	
    // (∤) DOES NOT DIVIDE	[064C 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2224, 0x0021 };
    uint32_t const ces[11] = { 0x064C, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_267)
{
    // 2223 003F;	
    // (∣) DIVIDES	[064C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2223, 0x003F };
    uint32_t const ces[9] = { 0x064C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_268)
{
    // 2224 003F;	
    // (∤) DOES NOT DIVIDE	[064C 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2224, 0x003F };
    uint32_t const ces[11] = { 0x064C, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_269)
{
    // 2223 0061;	
    // (∣) DIVIDES	[064C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2223, 0x0061 };
    uint32_t const ces[9] = { 0x064C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_270)
{
    // 2223 0041;	
    // (∣) DIVIDES	[064C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2223, 0x0041 };
    uint32_t const ces[9] = { 0x064C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_271)
{
    // 2224 0061;	
    // (∤) DOES NOT DIVIDE	[064C 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2224, 0x0061 };
    uint32_t const ces[11] = { 0x064C, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_272)
{
    // 2224 0041;	
    // (∤) DOES NOT DIVIDE	[064C 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2224, 0x0041 };
    uint32_t const ces[11] = { 0x064C, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_273)
{
    // 2223 0062;	
    // (∣) DIVIDES	[064C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2223, 0x0062 };
    uint32_t const ces[9] = { 0x064C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_274)
{
    // 2224 0062;	
    // (∤) DOES NOT DIVIDE	[064C 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2224, 0x0062 };
    uint32_t const ces[11] = { 0x064C, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_275)
{
    // 2225 0338 0334;	
    // (∦) PARALLEL TO, COMBINING LONG SOLIDUS OVERLAY	[064D | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2225, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x064D, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_276)
{
    // 2226 0334;	
    // (∦) NOT PARALLEL TO	[064D | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2226, 0x0334 };
    uint32_t const ces[10] = { 0x064D, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_277)
{
    // 2225 0021;	
    // (∥) PARALLEL TO	[064D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2225, 0x0021 };
    uint32_t const ces[9] = { 0x064D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_278)
{
    // 2226 0021;	
    // (∦) NOT PARALLEL TO	[064D 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2226, 0x0021 };
    uint32_t const ces[11] = { 0x064D, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_279)
{
    // 2225 003F;	
    // (∥) PARALLEL TO	[064D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2225, 0x003F };
    uint32_t const ces[9] = { 0x064D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_280)
{
    // 2226 003F;	
    // (∦) NOT PARALLEL TO	[064D 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2226, 0x003F };
    uint32_t const ces[11] = { 0x064D, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_281)
{
    // 2225 0061;	
    // (∥) PARALLEL TO	[064D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2225, 0x0061 };
    uint32_t const ces[9] = { 0x064D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_282)
{
    // 2225 0041;	
    // (∥) PARALLEL TO	[064D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2225, 0x0041 };
    uint32_t const ces[9] = { 0x064D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_283)
{
    // 2226 0061;	
    // (∦) NOT PARALLEL TO	[064D 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2226, 0x0061 };
    uint32_t const ces[11] = { 0x064D, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_284)
{
    // 2226 0041;	
    // (∦) NOT PARALLEL TO	[064D 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2226, 0x0041 };
    uint32_t const ces[11] = { 0x064D, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_285)
{
    // 2225 0062;	
    // (∥) PARALLEL TO	[064D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2225, 0x0062 };
    uint32_t const ces[9] = { 0x064D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_286)
{
    // 2226 0062;	
    // (∦) NOT PARALLEL TO	[064D 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2226, 0x0062 };
    uint32_t const ces[11] = { 0x064D, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_287)
{
    // 2227 0021;	
    // (∧) LOGICAL AND	[064E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2227, 0x0021 };
    uint32_t const ces[9] = { 0x064E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_288)
{
    // 2227 003F;	
    // (∧) LOGICAL AND	[064E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2227, 0x003F };
    uint32_t const ces[9] = { 0x064E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_289)
{
    // 2227 0061;	
    // (∧) LOGICAL AND	[064E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2227, 0x0061 };
    uint32_t const ces[9] = { 0x064E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_290)
{
    // 2227 0041;	
    // (∧) LOGICAL AND	[064E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2227, 0x0041 };
    uint32_t const ces[9] = { 0x064E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_291)
{
    // 2227 0062;	
    // (∧) LOGICAL AND	[064E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2227, 0x0062 };
    uint32_t const ces[9] = { 0x064E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_292)
{
    // 2228 0021;	
    // (∨) LOGICAL OR	[064F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2228, 0x0021 };
    uint32_t const ces[9] = { 0x064F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_293)
{
    // 2228 003F;	
    // (∨) LOGICAL OR	[064F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2228, 0x003F };
    uint32_t const ces[9] = { 0x064F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_294)
{
    // 2228 0061;	
    // (∨) LOGICAL OR	[064F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2228, 0x0061 };
    uint32_t const ces[9] = { 0x064F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_295)
{
    // 2228 0041;	
    // (∨) LOGICAL OR	[064F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2228, 0x0041 };
    uint32_t const ces[9] = { 0x064F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_296)
{
    // 2228 0062;	
    // (∨) LOGICAL OR	[064F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2228, 0x0062 };
    uint32_t const ces[9] = { 0x064F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_297)
{
    // 2229 0021;	
    // (∩) INTERSECTION	[0650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2229, 0x0021 };
    uint32_t const ces[9] = { 0x0650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_298)
{
    // 2229 003F;	
    // (∩) INTERSECTION	[0650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2229, 0x003F };
    uint32_t const ces[9] = { 0x0650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_299)
{
    // 2229 0061;	
    // (∩) INTERSECTION	[0650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2229, 0x0061 };
    uint32_t const ces[9] = { 0x0650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_300)
{
    // 2229 0041;	
    // (∩) INTERSECTION	[0650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2229, 0x0041 };
    uint32_t const ces[9] = { 0x0650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_301)
{
    // 2229 0062;	
    // (∩) INTERSECTION	[0650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2229, 0x0062 };
    uint32_t const ces[9] = { 0x0650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_302)
{
    // 222A 0021;	
    // (∪) UNION	[0651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222A, 0x0021 };
    uint32_t const ces[9] = { 0x0651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_303)
{
    // 222A 003F;	
    // (∪) UNION	[0651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222A, 0x003F };
    uint32_t const ces[9] = { 0x0651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_304)
{
    // 222A 0061;	
    // (∪) UNION	[0651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222A, 0x0061 };
    uint32_t const ces[9] = { 0x0651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_305)
{
    // 222A 0041;	
    // (∪) UNION	[0651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x222A, 0x0041 };
    uint32_t const ces[9] = { 0x0651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_306)
{
    // 222A 0062;	
    // (∪) UNION	[0651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222A, 0x0062 };
    uint32_t const ces[9] = { 0x0651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_307)
{
    // 222B 0021;	
    // (∫) INTEGRAL	[0652 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222B, 0x0021 };
    uint32_t const ces[9] = { 0x0652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_308)
{
    // 222B 003F;	
    // (∫) INTEGRAL	[0652 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222B, 0x003F };
    uint32_t const ces[9] = { 0x0652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_309)
{
    // 222C 0021;	
    // (∬) DOUBLE INTEGRAL	[0652 0652 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222C, 0x0021 };
    uint32_t const ces[12] = { 0x0652, 0x0652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_310)
{
    // 222C 003F;	
    // (∬) DOUBLE INTEGRAL	[0652 0652 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222C, 0x003F };
    uint32_t const ces[12] = { 0x0652, 0x0652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_311)
{
    // 222D 0021;	
    // (∭) TRIPLE INTEGRAL	[0652 0652 0652 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222D, 0x0021 };
    uint32_t const ces[15] = { 0x0652, 0x0652, 0x0652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_312)
{
    // 222D 003F;	
    // (∭) TRIPLE INTEGRAL	[0652 0652 0652 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222D, 0x003F };
    uint32_t const ces[15] = { 0x0652, 0x0652, 0x0652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_313)
{
    // 2A0C 0021;	
    // (⨌) QUADRUPLE INTEGRAL OPERATOR	[0652 0652 0652 0652 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A0C, 0x0021 };
    uint32_t const ces[18] = { 0x0652, 0x0652, 0x0652, 0x0652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_314)
{
    // 2A0C 003F;	
    // (⨌) QUADRUPLE INTEGRAL OPERATOR	[0652 0652 0652 0652 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A0C, 0x003F };
    uint32_t const ces[18] = { 0x0652, 0x0652, 0x0652, 0x0652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_315)
{
    // 2A0C 0061;	
    // (⨌) QUADRUPLE INTEGRAL OPERATOR	[0652 0652 0652 0652 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A0C, 0x0061 };
    uint32_t const ces[18] = { 0x0652, 0x0652, 0x0652, 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_316)
{
    // 2A0C 0041;	
    // (⨌) QUADRUPLE INTEGRAL OPERATOR	[0652 0652 0652 0652 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2A0C, 0x0041 };
    uint32_t const ces[18] = { 0x0652, 0x0652, 0x0652, 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_317)
{
    // 2A0C 0062;	
    // (⨌) QUADRUPLE INTEGRAL OPERATOR	[0652 0652 0652 0652 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A0C, 0x0062 };
    uint32_t const ces[18] = { 0x0652, 0x0652, 0x0652, 0x0652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_318)
{
    // 222D 0061;	
    // (∭) TRIPLE INTEGRAL	[0652 0652 0652 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222D, 0x0061 };
    uint32_t const ces[15] = { 0x0652, 0x0652, 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_319)
{
    // 222D 0041;	
    // (∭) TRIPLE INTEGRAL	[0652 0652 0652 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x222D, 0x0041 };
    uint32_t const ces[15] = { 0x0652, 0x0652, 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_320)
{
    // 222D 0062;	
    // (∭) TRIPLE INTEGRAL	[0652 0652 0652 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222D, 0x0062 };
    uint32_t const ces[15] = { 0x0652, 0x0652, 0x0652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_321)
{
    // 222C 0061;	
    // (∬) DOUBLE INTEGRAL	[0652 0652 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222C, 0x0061 };
    uint32_t const ces[12] = { 0x0652, 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_322)
{
    // 222C 0041;	
    // (∬) DOUBLE INTEGRAL	[0652 0652 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x222C, 0x0041 };
    uint32_t const ces[12] = { 0x0652, 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_323)
{
    // 222C 0062;	
    // (∬) DOUBLE INTEGRAL	[0652 0652 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222C, 0x0062 };
    uint32_t const ces[12] = { 0x0652, 0x0652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_324)
{
    // 222B 0061;	
    // (∫) INTEGRAL	[0652 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222B, 0x0061 };
    uint32_t const ces[9] = { 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_325)
{
    // 222B 0041;	
    // (∫) INTEGRAL	[0652 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x222B, 0x0041 };
    uint32_t const ces[9] = { 0x0652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_326)
{
    // 222B 0062;	
    // (∫) INTEGRAL	[0652 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222B, 0x0062 };
    uint32_t const ces[9] = { 0x0652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_327)
{
    // 222E 0021;	
    // (∮) CONTOUR INTEGRAL	[0653 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222E, 0x0021 };
    uint32_t const ces[9] = { 0x0653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_328)
{
    // 222E 003F;	
    // (∮) CONTOUR INTEGRAL	[0653 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222E, 0x003F };
    uint32_t const ces[9] = { 0x0653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_329)
{
    // 222F 0021;	
    // (∯) SURFACE INTEGRAL	[0653 0653 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222F, 0x0021 };
    uint32_t const ces[12] = { 0x0653, 0x0653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_330)
{
    // 222F 003F;	
    // (∯) SURFACE INTEGRAL	[0653 0653 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222F, 0x003F };
    uint32_t const ces[12] = { 0x0653, 0x0653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_331)
{
    // 2230 0021;	
    // (∰) VOLUME INTEGRAL	[0653 0653 0653 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2230, 0x0021 };
    uint32_t const ces[15] = { 0x0653, 0x0653, 0x0653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_332)
{
    // 2230 003F;	
    // (∰) VOLUME INTEGRAL	[0653 0653 0653 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2230, 0x003F };
    uint32_t const ces[15] = { 0x0653, 0x0653, 0x0653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_333)
{
    // 2230 0061;	
    // (∰) VOLUME INTEGRAL	[0653 0653 0653 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2230, 0x0061 };
    uint32_t const ces[15] = { 0x0653, 0x0653, 0x0653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_334)
{
    // 2230 0041;	
    // (∰) VOLUME INTEGRAL	[0653 0653 0653 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2230, 0x0041 };
    uint32_t const ces[15] = { 0x0653, 0x0653, 0x0653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_335)
{
    // 2230 0062;	
    // (∰) VOLUME INTEGRAL	[0653 0653 0653 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2230, 0x0062 };
    uint32_t const ces[15] = { 0x0653, 0x0653, 0x0653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_336)
{
    // 222F 0061;	
    // (∯) SURFACE INTEGRAL	[0653 0653 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222F, 0x0061 };
    uint32_t const ces[12] = { 0x0653, 0x0653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_337)
{
    // 222F 0041;	
    // (∯) SURFACE INTEGRAL	[0653 0653 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x222F, 0x0041 };
    uint32_t const ces[12] = { 0x0653, 0x0653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_338)
{
    // 222F 0062;	
    // (∯) SURFACE INTEGRAL	[0653 0653 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x222F, 0x0062 };
    uint32_t const ces[12] = { 0x0653, 0x0653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_339)
{
    // 222E 0061;	
    // (∮) CONTOUR INTEGRAL	[0653 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222E, 0x0061 };
    uint32_t const ces[9] = { 0x0653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_340)
{
    // 222E 0041;	
    // (∮) CONTOUR INTEGRAL	[0653 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x222E, 0x0041 };
    uint32_t const ces[9] = { 0x0653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_341)
{
    // 222E 0062;	
    // (∮) CONTOUR INTEGRAL	[0653 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x222E, 0x0062 };
    uint32_t const ces[9] = { 0x0653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_342)
{
    // 2231 0021;	
    // (∱) CLOCKWISE INTEGRAL	[0654 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2231, 0x0021 };
    uint32_t const ces[9] = { 0x0654, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_343)
{
    // 2231 003F;	
    // (∱) CLOCKWISE INTEGRAL	[0654 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2231, 0x003F };
    uint32_t const ces[9] = { 0x0654, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_344)
{
    // 2231 0061;	
    // (∱) CLOCKWISE INTEGRAL	[0654 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2231, 0x0061 };
    uint32_t const ces[9] = { 0x0654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_345)
{
    // 2231 0041;	
    // (∱) CLOCKWISE INTEGRAL	[0654 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2231, 0x0041 };
    uint32_t const ces[9] = { 0x0654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_346)
{
    // 2231 0062;	
    // (∱) CLOCKWISE INTEGRAL	[0654 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2231, 0x0062 };
    uint32_t const ces[9] = { 0x0654, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_347)
{
    // 2232 0021;	
    // (∲) CLOCKWISE CONTOUR INTEGRAL	[0655 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2232, 0x0021 };
    uint32_t const ces[9] = { 0x0655, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_348)
{
    // 2232 003F;	
    // (∲) CLOCKWISE CONTOUR INTEGRAL	[0655 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2232, 0x003F };
    uint32_t const ces[9] = { 0x0655, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_349)
{
    // 2232 0061;	
    // (∲) CLOCKWISE CONTOUR INTEGRAL	[0655 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2232, 0x0061 };
    uint32_t const ces[9] = { 0x0655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_350)
{
    // 2232 0041;	
    // (∲) CLOCKWISE CONTOUR INTEGRAL	[0655 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2232, 0x0041 };
    uint32_t const ces[9] = { 0x0655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_351)
{
    // 2232 0062;	
    // (∲) CLOCKWISE CONTOUR INTEGRAL	[0655 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2232, 0x0062 };
    uint32_t const ces[9] = { 0x0655, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_352)
{
    // 2233 0021;	
    // (∳) ANTICLOCKWISE CONTOUR INTEGRAL	[0656 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2233, 0x0021 };
    uint32_t const ces[9] = { 0x0656, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_353)
{
    // 2233 003F;	
    // (∳) ANTICLOCKWISE CONTOUR INTEGRAL	[0656 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2233, 0x003F };
    uint32_t const ces[9] = { 0x0656, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_354)
{
    // 2233 0061;	
    // (∳) ANTICLOCKWISE CONTOUR INTEGRAL	[0656 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2233, 0x0061 };
    uint32_t const ces[9] = { 0x0656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_355)
{
    // 2233 0041;	
    // (∳) ANTICLOCKWISE CONTOUR INTEGRAL	[0656 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2233, 0x0041 };
    uint32_t const ces[9] = { 0x0656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_356)
{
    // 2233 0062;	
    // (∳) ANTICLOCKWISE CONTOUR INTEGRAL	[0656 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2233, 0x0062 };
    uint32_t const ces[9] = { 0x0656, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_357)
{
    // 2234 0021;	
    // (∴) THEREFORE	[0657 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2234, 0x0021 };
    uint32_t const ces[9] = { 0x0657, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_358)
{
    // 2234 003F;	
    // (∴) THEREFORE	[0657 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2234, 0x003F };
    uint32_t const ces[9] = { 0x0657, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_359)
{
    // 2234 0061;	
    // (∴) THEREFORE	[0657 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2234, 0x0061 };
    uint32_t const ces[9] = { 0x0657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_360)
{
    // 2234 0041;	
    // (∴) THEREFORE	[0657 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2234, 0x0041 };
    uint32_t const ces[9] = { 0x0657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_361)
{
    // 2234 0062;	
    // (∴) THEREFORE	[0657 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2234, 0x0062 };
    uint32_t const ces[9] = { 0x0657, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_362)
{
    // 2235 0021;	
    // (∵) BECAUSE	[0658 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2235, 0x0021 };
    uint32_t const ces[9] = { 0x0658, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_363)
{
    // 2235 003F;	
    // (∵) BECAUSE	[0658 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2235, 0x003F };
    uint32_t const ces[9] = { 0x0658, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_364)
{
    // 2235 0061;	
    // (∵) BECAUSE	[0658 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2235, 0x0061 };
    uint32_t const ces[9] = { 0x0658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_365)
{
    // 2235 0041;	
    // (∵) BECAUSE	[0658 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2235, 0x0041 };
    uint32_t const ces[9] = { 0x0658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_366)
{
    // 2235 0062;	
    // (∵) BECAUSE	[0658 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2235, 0x0062 };
    uint32_t const ces[9] = { 0x0658, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_367)
{
    // 2236 0021;	
    // (∶) RATIO	[0659 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2236, 0x0021 };
    uint32_t const ces[9] = { 0x0659, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_368)
{
    // 2236 003F;	
    // (∶) RATIO	[0659 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2236, 0x003F };
    uint32_t const ces[9] = { 0x0659, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_369)
{
    // 2236 0061;	
    // (∶) RATIO	[0659 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2236, 0x0061 };
    uint32_t const ces[9] = { 0x0659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_370)
{
    // 2236 0041;	
    // (∶) RATIO	[0659 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2236, 0x0041 };
    uint32_t const ces[9] = { 0x0659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_371)
{
    // 2236 0062;	
    // (∶) RATIO	[0659 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2236, 0x0062 };
    uint32_t const ces[9] = { 0x0659, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_372)
{
    // 2237 0021;	
    // (∷) PROPORTION	[065A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2237, 0x0021 };
    uint32_t const ces[9] = { 0x065A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_373)
{
    // 2237 003F;	
    // (∷) PROPORTION	[065A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2237, 0x003F };
    uint32_t const ces[9] = { 0x065A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_374)
{
    // 2237 0061;	
    // (∷) PROPORTION	[065A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2237, 0x0061 };
    uint32_t const ces[9] = { 0x065A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_375)
{
    // 2237 0041;	
    // (∷) PROPORTION	[065A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2237, 0x0041 };
    uint32_t const ces[9] = { 0x065A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_376)
{
    // 2237 0062;	
    // (∷) PROPORTION	[065A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2237, 0x0062 };
    uint32_t const ces[9] = { 0x065A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_377)
{
    // 2238 0021;	
    // (∸) DOT MINUS	[065B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2238, 0x0021 };
    uint32_t const ces[9] = { 0x065B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_378)
{
    // 2238 003F;	
    // (∸) DOT MINUS	[065B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2238, 0x003F };
    uint32_t const ces[9] = { 0x065B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_379)
{
    // 2238 0061;	
    // (∸) DOT MINUS	[065B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2238, 0x0061 };
    uint32_t const ces[9] = { 0x065B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_380)
{
    // 2238 0041;	
    // (∸) DOT MINUS	[065B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2238, 0x0041 };
    uint32_t const ces[9] = { 0x065B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_381)
{
    // 2238 0062;	
    // (∸) DOT MINUS	[065B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2238, 0x0062 };
    uint32_t const ces[9] = { 0x065B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_382)
{
    // 2239 0021;	
    // (∹) EXCESS	[065C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2239, 0x0021 };
    uint32_t const ces[9] = { 0x065C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_383)
{
    // 2239 003F;	
    // (∹) EXCESS	[065C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2239, 0x003F };
    uint32_t const ces[9] = { 0x065C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_384)
{
    // 2239 0061;	
    // (∹) EXCESS	[065C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2239, 0x0061 };
    uint32_t const ces[9] = { 0x065C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_385)
{
    // 2239 0041;	
    // (∹) EXCESS	[065C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2239, 0x0041 };
    uint32_t const ces[9] = { 0x065C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_386)
{
    // 2239 0062;	
    // (∹) EXCESS	[065C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2239, 0x0062 };
    uint32_t const ces[9] = { 0x065C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_387)
{
    // 223A 0021;	
    // (∺) GEOMETRIC PROPORTION	[065D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223A, 0x0021 };
    uint32_t const ces[9] = { 0x065D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_388)
{
    // 223A 003F;	
    // (∺) GEOMETRIC PROPORTION	[065D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223A, 0x003F };
    uint32_t const ces[9] = { 0x065D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_389)
{
    // 223A 0061;	
    // (∺) GEOMETRIC PROPORTION	[065D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223A, 0x0061 };
    uint32_t const ces[9] = { 0x065D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_390)
{
    // 223A 0041;	
    // (∺) GEOMETRIC PROPORTION	[065D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x223A, 0x0041 };
    uint32_t const ces[9] = { 0x065D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_391)
{
    // 223A 0062;	
    // (∺) GEOMETRIC PROPORTION	[065D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223A, 0x0062 };
    uint32_t const ces[9] = { 0x065D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_392)
{
    // 223B 0021;	
    // (∻) HOMOTHETIC	[065E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223B, 0x0021 };
    uint32_t const ces[9] = { 0x065E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_393)
{
    // 223B 003F;	
    // (∻) HOMOTHETIC	[065E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223B, 0x003F };
    uint32_t const ces[9] = { 0x065E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_394)
{
    // 223B 0061;	
    // (∻) HOMOTHETIC	[065E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223B, 0x0061 };
    uint32_t const ces[9] = { 0x065E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_395)
{
    // 223B 0041;	
    // (∻) HOMOTHETIC	[065E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x223B, 0x0041 };
    uint32_t const ces[9] = { 0x065E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_396)
{
    // 223B 0062;	
    // (∻) HOMOTHETIC	[065E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223B, 0x0062 };
    uint32_t const ces[9] = { 0x065E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_397)
{
    // 223C 0338 0334;	
    // (≁) TILDE OPERATOR, COMBINING LONG SOLIDUS OVERLAY	[065F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x223C, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x065F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_398)
{
    // 2241 0334;	
    // (≁) NOT TILDE	[065F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2241, 0x0334 };
    uint32_t const ces[10] = { 0x065F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_399)
{
    // 223C 0021;	
    // (∼) TILDE OPERATOR	[065F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223C, 0x0021 };
    uint32_t const ces[9] = { 0x065F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_400)
{
    // 2241 0021;	
    // (≁) NOT TILDE	[065F 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2241, 0x0021 };
    uint32_t const ces[11] = { 0x065F, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_401)
{
    // 223C 003F;	
    // (∼) TILDE OPERATOR	[065F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223C, 0x003F };
    uint32_t const ces[9] = { 0x065F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_402)
{
    // 2241 003F;	
    // (≁) NOT TILDE	[065F 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2241, 0x003F };
    uint32_t const ces[11] = { 0x065F, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_403)
{
    // 223C 0061;	
    // (∼) TILDE OPERATOR	[065F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223C, 0x0061 };
    uint32_t const ces[9] = { 0x065F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_404)
{
    // 223C 0041;	
    // (∼) TILDE OPERATOR	[065F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x223C, 0x0041 };
    uint32_t const ces[9] = { 0x065F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_405)
{
    // 2241 0061;	
    // (≁) NOT TILDE	[065F 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2241, 0x0061 };
    uint32_t const ces[11] = { 0x065F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_406)
{
    // 2241 0041;	
    // (≁) NOT TILDE	[065F 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2241, 0x0041 };
    uint32_t const ces[11] = { 0x065F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_407)
{
    // 223C 0062;	
    // (∼) TILDE OPERATOR	[065F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223C, 0x0062 };
    uint32_t const ces[9] = { 0x065F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_408)
{
    // 2241 0062;	
    // (≁) NOT TILDE	[065F 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2241, 0x0062 };
    uint32_t const ces[11] = { 0x065F, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_409)
{
    // 223D 0021;	
    // (∽) REVERSED TILDE	[0660 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223D, 0x0021 };
    uint32_t const ces[9] = { 0x0660, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_410)
{
    // 223D 003F;	
    // (∽) REVERSED TILDE	[0660 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223D, 0x003F };
    uint32_t const ces[9] = { 0x0660, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_411)
{
    // 223D 0061;	
    // (∽) REVERSED TILDE	[0660 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223D, 0x0061 };
    uint32_t const ces[9] = { 0x0660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_412)
{
    // 223D 0041;	
    // (∽) REVERSED TILDE	[0660 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x223D, 0x0041 };
    uint32_t const ces[9] = { 0x0660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_413)
{
    // 223D 0062;	
    // (∽) REVERSED TILDE	[0660 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223D, 0x0062 };
    uint32_t const ces[9] = { 0x0660, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_414)
{
    // 223E 0021;	
    // (∾) INVERTED LAZY S	[0661 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223E, 0x0021 };
    uint32_t const ces[9] = { 0x0661, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_415)
{
    // 223E 003F;	
    // (∾) INVERTED LAZY S	[0661 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223E, 0x003F };
    uint32_t const ces[9] = { 0x0661, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_416)
{
    // 223E 0061;	
    // (∾) INVERTED LAZY S	[0661 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223E, 0x0061 };
    uint32_t const ces[9] = { 0x0661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_417)
{
    // 223E 0041;	
    // (∾) INVERTED LAZY S	[0661 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x223E, 0x0041 };
    uint32_t const ces[9] = { 0x0661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_418)
{
    // 223E 0062;	
    // (∾) INVERTED LAZY S	[0661 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223E, 0x0062 };
    uint32_t const ces[9] = { 0x0661, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_419)
{
    // 223F 0021;	
    // (∿) SINE WAVE	[0662 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223F, 0x0021 };
    uint32_t const ces[9] = { 0x0662, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_420)
{
    // 223F 003F;	
    // (∿) SINE WAVE	[0662 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223F, 0x003F };
    uint32_t const ces[9] = { 0x0662, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_421)
{
    // 223F 0061;	
    // (∿) SINE WAVE	[0662 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223F, 0x0061 };
    uint32_t const ces[9] = { 0x0662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_422)
{
    // 223F 0041;	
    // (∿) SINE WAVE	[0662 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x223F, 0x0041 };
    uint32_t const ces[9] = { 0x0662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_423)
{
    // 223F 0062;	
    // (∿) SINE WAVE	[0662 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x223F, 0x0062 };
    uint32_t const ces[9] = { 0x0662, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_424)
{
    // 2240 0021;	
    // (≀) WREATH PRODUCT	[0663 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2240, 0x0021 };
    uint32_t const ces[9] = { 0x0663, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_425)
{
    // 2240 003F;	
    // (≀) WREATH PRODUCT	[0663 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2240, 0x003F };
    uint32_t const ces[9] = { 0x0663, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_426)
{
    // 2240 0061;	
    // (≀) WREATH PRODUCT	[0663 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2240, 0x0061 };
    uint32_t const ces[9] = { 0x0663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_427)
{
    // 2240 0041;	
    // (≀) WREATH PRODUCT	[0663 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2240, 0x0041 };
    uint32_t const ces[9] = { 0x0663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_428)
{
    // 2240 0062;	
    // (≀) WREATH PRODUCT	[0663 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2240, 0x0062 };
    uint32_t const ces[9] = { 0x0663, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_429)
{
    // 2242 0021;	
    // (≂) MINUS TILDE	[0664 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2242, 0x0021 };
    uint32_t const ces[9] = { 0x0664, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_430)
{
    // 2242 003F;	
    // (≂) MINUS TILDE	[0664 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2242, 0x003F };
    uint32_t const ces[9] = { 0x0664, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_431)
{
    // 2242 0061;	
    // (≂) MINUS TILDE	[0664 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2242, 0x0061 };
    uint32_t const ces[9] = { 0x0664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_432)
{
    // 2242 0041;	
    // (≂) MINUS TILDE	[0664 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2242, 0x0041 };
    uint32_t const ces[9] = { 0x0664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_433)
{
    // 2242 0062;	
    // (≂) MINUS TILDE	[0664 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2242, 0x0062 };
    uint32_t const ces[9] = { 0x0664, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_434)
{
    // 2243 0338 0334;	
    // (≄) ASYMPTOTICALLY EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0665 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2243, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0665, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_435)
{
    // 2244 0334;	
    // (≄) NOT ASYMPTOTICALLY EQUAL TO	[0665 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2244, 0x0334 };
    uint32_t const ces[10] = { 0x0665, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_436)
{
    // 2243 0021;	
    // (≃) ASYMPTOTICALLY EQUAL TO	[0665 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2243, 0x0021 };
    uint32_t const ces[9] = { 0x0665, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_437)
{
    // 2244 0021;	
    // (≄) NOT ASYMPTOTICALLY EQUAL TO	[0665 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2244, 0x0021 };
    uint32_t const ces[11] = { 0x0665, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_438)
{
    // 2243 003F;	
    // (≃) ASYMPTOTICALLY EQUAL TO	[0665 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2243, 0x003F };
    uint32_t const ces[9] = { 0x0665, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_439)
{
    // 2244 003F;	
    // (≄) NOT ASYMPTOTICALLY EQUAL TO	[0665 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2244, 0x003F };
    uint32_t const ces[11] = { 0x0665, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_440)
{
    // 2243 0061;	
    // (≃) ASYMPTOTICALLY EQUAL TO	[0665 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2243, 0x0061 };
    uint32_t const ces[9] = { 0x0665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_441)
{
    // 2243 0041;	
    // (≃) ASYMPTOTICALLY EQUAL TO	[0665 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2243, 0x0041 };
    uint32_t const ces[9] = { 0x0665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_442)
{
    // 2244 0061;	
    // (≄) NOT ASYMPTOTICALLY EQUAL TO	[0665 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2244, 0x0061 };
    uint32_t const ces[11] = { 0x0665, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_443)
{
    // 2244 0041;	
    // (≄) NOT ASYMPTOTICALLY EQUAL TO	[0665 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2244, 0x0041 };
    uint32_t const ces[11] = { 0x0665, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_444)
{
    // 2243 0062;	
    // (≃) ASYMPTOTICALLY EQUAL TO	[0665 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2243, 0x0062 };
    uint32_t const ces[9] = { 0x0665, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_445)
{
    // 2244 0062;	
    // (≄) NOT ASYMPTOTICALLY EQUAL TO	[0665 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2244, 0x0062 };
    uint32_t const ces[11] = { 0x0665, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_446)
{
    // 2245 0338 0334;	
    // (≇) APPROXIMATELY EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0666 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2245, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0666, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_447)
{
    // 2247 0334;	
    // (≇) NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO	[0666 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2247, 0x0334 };
    uint32_t const ces[10] = { 0x0666, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_448)
{
    // 2245 0021;	
    // (≅) APPROXIMATELY EQUAL TO	[0666 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2245, 0x0021 };
    uint32_t const ces[9] = { 0x0666, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_449)
{
    // 2247 0021;	
    // (≇) NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO	[0666 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2247, 0x0021 };
    uint32_t const ces[11] = { 0x0666, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_450)
{
    // 2245 003F;	
    // (≅) APPROXIMATELY EQUAL TO	[0666 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2245, 0x003F };
    uint32_t const ces[9] = { 0x0666, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_451)
{
    // 2247 003F;	
    // (≇) NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO	[0666 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2247, 0x003F };
    uint32_t const ces[11] = { 0x0666, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_452)
{
    // 2245 0061;	
    // (≅) APPROXIMATELY EQUAL TO	[0666 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2245, 0x0061 };
    uint32_t const ces[9] = { 0x0666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_453)
{
    // 2245 0041;	
    // (≅) APPROXIMATELY EQUAL TO	[0666 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2245, 0x0041 };
    uint32_t const ces[9] = { 0x0666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_454)
{
    // 2247 0061;	
    // (≇) NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO	[0666 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2247, 0x0061 };
    uint32_t const ces[11] = { 0x0666, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_455)
{
    // 2247 0041;	
    // (≇) NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO	[0666 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2247, 0x0041 };
    uint32_t const ces[11] = { 0x0666, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_456)
{
    // 2245 0062;	
    // (≅) APPROXIMATELY EQUAL TO	[0666 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2245, 0x0062 };
    uint32_t const ces[9] = { 0x0666, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_457)
{
    // 2247 0062;	
    // (≇) NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO	[0666 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2247, 0x0062 };
    uint32_t const ces[11] = { 0x0666, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_458)
{
    // 2246 0021;	
    // (≆) APPROXIMATELY BUT NOT ACTUALLY EQUAL TO	[0667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2246, 0x0021 };
    uint32_t const ces[9] = { 0x0667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_459)
{
    // 2246 003F;	
    // (≆) APPROXIMATELY BUT NOT ACTUALLY EQUAL TO	[0667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2246, 0x003F };
    uint32_t const ces[9] = { 0x0667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_460)
{
    // 2246 0061;	
    // (≆) APPROXIMATELY BUT NOT ACTUALLY EQUAL TO	[0667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2246, 0x0061 };
    uint32_t const ces[9] = { 0x0667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_461)
{
    // 2246 0041;	
    // (≆) APPROXIMATELY BUT NOT ACTUALLY EQUAL TO	[0667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2246, 0x0041 };
    uint32_t const ces[9] = { 0x0667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_462)
{
    // 2246 0062;	
    // (≆) APPROXIMATELY BUT NOT ACTUALLY EQUAL TO	[0667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2246, 0x0062 };
    uint32_t const ces[9] = { 0x0667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_463)
{
    // 2248 0338 0334;	
    // (≉) ALMOST EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0668 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2248, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0668, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_464)
{
    // 2249 0334;	
    // (≉) NOT ALMOST EQUAL TO	[0668 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2249, 0x0334 };
    uint32_t const ces[10] = { 0x0668, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_465)
{
    // 2248 0021;	
    // (≈) ALMOST EQUAL TO	[0668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2248, 0x0021 };
    uint32_t const ces[9] = { 0x0668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_466)
{
    // 2249 0021;	
    // (≉) NOT ALMOST EQUAL TO	[0668 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2249, 0x0021 };
    uint32_t const ces[11] = { 0x0668, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_467)
{
    // 2248 003F;	
    // (≈) ALMOST EQUAL TO	[0668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2248, 0x003F };
    uint32_t const ces[9] = { 0x0668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_468)
{
    // 2249 003F;	
    // (≉) NOT ALMOST EQUAL TO	[0668 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2249, 0x003F };
    uint32_t const ces[11] = { 0x0668, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_469)
{
    // 2248 0061;	
    // (≈) ALMOST EQUAL TO	[0668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2248, 0x0061 };
    uint32_t const ces[9] = { 0x0668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_470)
{
    // 2248 0041;	
    // (≈) ALMOST EQUAL TO	[0668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2248, 0x0041 };
    uint32_t const ces[9] = { 0x0668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_471)
{
    // 2249 0061;	
    // (≉) NOT ALMOST EQUAL TO	[0668 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2249, 0x0061 };
    uint32_t const ces[11] = { 0x0668, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_472)
{
    // 2249 0041;	
    // (≉) NOT ALMOST EQUAL TO	[0668 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2249, 0x0041 };
    uint32_t const ces[11] = { 0x0668, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_473)
{
    // 2248 0062;	
    // (≈) ALMOST EQUAL TO	[0668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2248, 0x0062 };
    uint32_t const ces[9] = { 0x0668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_474)
{
    // 2249 0062;	
    // (≉) NOT ALMOST EQUAL TO	[0668 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2249, 0x0062 };
    uint32_t const ces[11] = { 0x0668, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_475)
{
    // 224A 0021;	
    // (≊) ALMOST EQUAL OR EQUAL TO	[0669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224A, 0x0021 };
    uint32_t const ces[9] = { 0x0669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_476)
{
    // 224A 003F;	
    // (≊) ALMOST EQUAL OR EQUAL TO	[0669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224A, 0x003F };
    uint32_t const ces[9] = { 0x0669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_477)
{
    // 224A 0061;	
    // (≊) ALMOST EQUAL OR EQUAL TO	[0669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224A, 0x0061 };
    uint32_t const ces[9] = { 0x0669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_478)
{
    // 224A 0041;	
    // (≊) ALMOST EQUAL OR EQUAL TO	[0669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x224A, 0x0041 };
    uint32_t const ces[9] = { 0x0669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_479)
{
    // 224A 0062;	
    // (≊) ALMOST EQUAL OR EQUAL TO	[0669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224A, 0x0062 };
    uint32_t const ces[9] = { 0x0669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_480)
{
    // 224B 0021;	
    // (≋) TRIPLE TILDE	[066A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224B, 0x0021 };
    uint32_t const ces[9] = { 0x066A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_481)
{
    // 224B 003F;	
    // (≋) TRIPLE TILDE	[066A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224B, 0x003F };
    uint32_t const ces[9] = { 0x066A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_482)
{
    // 224B 0061;	
    // (≋) TRIPLE TILDE	[066A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224B, 0x0061 };
    uint32_t const ces[9] = { 0x066A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_483)
{
    // 224B 0041;	
    // (≋) TRIPLE TILDE	[066A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x224B, 0x0041 };
    uint32_t const ces[9] = { 0x066A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_484)
{
    // 224B 0062;	
    // (≋) TRIPLE TILDE	[066A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224B, 0x0062 };
    uint32_t const ces[9] = { 0x066A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_485)
{
    // 224C 0021;	
    // (≌) ALL EQUAL TO	[066B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224C, 0x0021 };
    uint32_t const ces[9] = { 0x066B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_486)
{
    // 224C 003F;	
    // (≌) ALL EQUAL TO	[066B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224C, 0x003F };
    uint32_t const ces[9] = { 0x066B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_487)
{
    // 224C 0061;	
    // (≌) ALL EQUAL TO	[066B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224C, 0x0061 };
    uint32_t const ces[9] = { 0x066B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_488)
{
    // 224C 0041;	
    // (≌) ALL EQUAL TO	[066B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x224C, 0x0041 };
    uint32_t const ces[9] = { 0x066B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_489)
{
    // 224C 0062;	
    // (≌) ALL EQUAL TO	[066B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224C, 0x0062 };
    uint32_t const ces[9] = { 0x066B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_490)
{
    // 224D 0338 0334;	
    // (≭) EQUIVALENT TO, COMBINING LONG SOLIDUS OVERLAY	[066C | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x224D, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x066C, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_491)
{
    // 226D 0334;	
    // (≭) NOT EQUIVALENT TO	[066C | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226D, 0x0334 };
    uint32_t const ces[10] = { 0x066C, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_492)
{
    // 224D 0021;	
    // (≍) EQUIVALENT TO	[066C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224D, 0x0021 };
    uint32_t const ces[9] = { 0x066C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_493)
{
    // 226D 0021;	
    // (≭) NOT EQUIVALENT TO	[066C 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226D, 0x0021 };
    uint32_t const ces[11] = { 0x066C, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_494)
{
    // 224D 003F;	
    // (≍) EQUIVALENT TO	[066C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224D, 0x003F };
    uint32_t const ces[9] = { 0x066C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_495)
{
    // 226D 003F;	
    // (≭) NOT EQUIVALENT TO	[066C 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226D, 0x003F };
    uint32_t const ces[11] = { 0x066C, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_496)
{
    // 224D 0061;	
    // (≍) EQUIVALENT TO	[066C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224D, 0x0061 };
    uint32_t const ces[9] = { 0x066C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_497)
{
    // 224D 0041;	
    // (≍) EQUIVALENT TO	[066C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x224D, 0x0041 };
    uint32_t const ces[9] = { 0x066C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_498)
{
    // 226D 0061;	
    // (≭) NOT EQUIVALENT TO	[066C 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226D, 0x0061 };
    uint32_t const ces[11] = { 0x066C, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_022_499)
{
    // 226D 0041;	
    // (≭) NOT EQUIVALENT TO	[066C 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x226D, 0x0041 };
    uint32_t const ces[11] = { 0x066C, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

