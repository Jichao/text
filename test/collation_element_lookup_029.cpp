// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_029_000)
{
    // 11C9  ; [.3E09.0020.0002] 
    // HANGUL JONGSEONG NIEUN-THIEUTH

    uint32_t const cps[1] = { 0x11c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_001)
{
    // 11CA  ; [.3E0A.0020.0002] 
    // HANGUL JONGSEONG TIKEUT-KIYEOK

    uint32_t const cps[1] = { 0x11ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_002)
{
    // 11CB  ; [.3E0B.0020.0002] 
    // HANGUL JONGSEONG TIKEUT-RIEUL

    uint32_t const cps[1] = { 0x11cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_003)
{
    // 11CC  ; [.3E0C.0020.0002] 
    // HANGUL JONGSEONG RIEUL-KIYEOK-SIOS

    uint32_t const cps[1] = { 0x11cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_004)
{
    // 11CD  ; [.3E0D.0020.0002] 
    // HANGUL JONGSEONG RIEUL-NIEUN

    uint32_t const cps[1] = { 0x11cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_005)
{
    // 11CE  ; [.3E0E.0020.0002] 
    // HANGUL JONGSEONG RIEUL-TIKEUT

    uint32_t const cps[1] = { 0x11ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_006)
{
    // 11CF  ; [.3E0F.0020.0002] 
    // HANGUL JONGSEONG RIEUL-TIKEUT-HIEUH

    uint32_t const cps[1] = { 0x11cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_007)
{
    // 11D0  ; [.3E10.0020.0002] 
    // HANGUL JONGSEONG SSANGRIEUL

    uint32_t const cps[1] = { 0x11d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_008)
{
    // 11D1  ; [.3E11.0020.0002] 
    // HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK

    uint32_t const cps[1] = { 0x11d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_009)
{
    // 11D2  ; [.3E12.0020.0002] 
    // HANGUL JONGSEONG RIEUL-MIEUM-SIOS

    uint32_t const cps[1] = { 0x11d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_010)
{
    // 11D3  ; [.3E13.0020.0002] 
    // HANGUL JONGSEONG RIEUL-PIEUP-SIOS

    uint32_t const cps[1] = { 0x11d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_011)
{
    // 11D4  ; [.3E14.0020.0002] 
    // HANGUL JONGSEONG RIEUL-PIEUP-HIEUH

    uint32_t const cps[1] = { 0x11d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_012)
{
    // 11D5  ; [.3E15.0020.0002] 
    // HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP

    uint32_t const cps[1] = { 0x11d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_013)
{
    // 11D6  ; [.3E16.0020.0002] 
    // HANGUL JONGSEONG RIEUL-SSANGSIOS

    uint32_t const cps[1] = { 0x11d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_014)
{
    // 11D7  ; [.3E17.0020.0002] 
    // HANGUL JONGSEONG RIEUL-PANSIOS

    uint32_t const cps[1] = { 0x11d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_015)
{
    // 11D8  ; [.3E18.0020.0002] 
    // HANGUL JONGSEONG RIEUL-KHIEUKH

    uint32_t const cps[1] = { 0x11d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_016)
{
    // 11D9  ; [.3E19.0020.0002] 
    // HANGUL JONGSEONG RIEUL-YEORINHIEUH

    uint32_t const cps[1] = { 0x11d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_017)
{
    // 11DA  ; [.3E1A.0020.0002] 
    // HANGUL JONGSEONG MIEUM-KIYEOK

    uint32_t const cps[1] = { 0x11da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_018)
{
    // 11DB  ; [.3E1B.0020.0002] 
    // HANGUL JONGSEONG MIEUM-RIEUL

    uint32_t const cps[1] = { 0x11db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_019)
{
    // 11DC  ; [.3E1C.0020.0002] 
    // HANGUL JONGSEONG MIEUM-PIEUP

    uint32_t const cps[1] = { 0x11dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_020)
{
    // 11DD  ; [.3E1D.0020.0002] 
    // HANGUL JONGSEONG MIEUM-SIOS

    uint32_t const cps[1] = { 0x11dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_021)
{
    // 11DE  ; [.3E1E.0020.0002] 
    // HANGUL JONGSEONG MIEUM-SSANGSIOS

    uint32_t const cps[1] = { 0x11de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_022)
{
    // 11DF  ; [.3E1F.0020.0002] 
    // HANGUL JONGSEONG MIEUM-PANSIOS

    uint32_t const cps[1] = { 0x11df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_023)
{
    // 11E0  ; [.3E20.0020.0002] 
    // HANGUL JONGSEONG MIEUM-CHIEUCH

    uint32_t const cps[1] = { 0x11e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_024)
{
    // 11E1  ; [.3E21.0020.0002] 
    // HANGUL JONGSEONG MIEUM-HIEUH

    uint32_t const cps[1] = { 0x11e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_025)
{
    // 11E2  ; [.3E22.0020.0002] 
    // HANGUL JONGSEONG KAPYEOUNMIEUM

    uint32_t const cps[1] = { 0x11e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_026)
{
    // 11E3  ; [.3E23.0020.0002] 
    // HANGUL JONGSEONG PIEUP-RIEUL

    uint32_t const cps[1] = { 0x11e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_027)
{
    // 11E4  ; [.3E24.0020.0002] 
    // HANGUL JONGSEONG PIEUP-PHIEUPH

    uint32_t const cps[1] = { 0x11e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_028)
{
    // 11E5  ; [.3E25.0020.0002] 
    // HANGUL JONGSEONG PIEUP-HIEUH

    uint32_t const cps[1] = { 0x11e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_029)
{
    // 11E6  ; [.3E26.0020.0002] 
    // HANGUL JONGSEONG KAPYEOUNPIEUP

    uint32_t const cps[1] = { 0x11e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_030)
{
    // 11E7  ; [.3E27.0020.0002] 
    // HANGUL JONGSEONG SIOS-KIYEOK

    uint32_t const cps[1] = { 0x11e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_031)
{
    // 11E8  ; [.3E28.0020.0002] 
    // HANGUL JONGSEONG SIOS-TIKEUT

    uint32_t const cps[1] = { 0x11e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_032)
{
    // 11E9  ; [.3E29.0020.0002] 
    // HANGUL JONGSEONG SIOS-RIEUL

    uint32_t const cps[1] = { 0x11e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_033)
{
    // 11EA  ; [.3E2A.0020.0002] 
    // HANGUL JONGSEONG SIOS-PIEUP

    uint32_t const cps[1] = { 0x11ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_034)
{
    // 11EB  ; [.3E2B.0020.0002] 
    // HANGUL JONGSEONG PANSIOS

    uint32_t const cps[1] = { 0x11eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_035)
{
    // 11EC  ; [.3E2C.0020.0002] 
    // HANGUL JONGSEONG IEUNG-KIYEOK

    uint32_t const cps[1] = { 0x11ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_036)
{
    // 11ED  ; [.3E2D.0020.0002] 
    // HANGUL JONGSEONG IEUNG-SSANGKIYEOK

    uint32_t const cps[1] = { 0x11ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_037)
{
    // 11EE  ; [.3E2E.0020.0002] 
    // HANGUL JONGSEONG SSANGIEUNG

    uint32_t const cps[1] = { 0x11ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_038)
{
    // 11EF  ; [.3E2F.0020.0002] 
    // HANGUL JONGSEONG IEUNG-KHIEUKH

    uint32_t const cps[1] = { 0x11ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_039)
{
    // 11F0  ; [.3E30.0020.0002] 
    // HANGUL JONGSEONG YESIEUNG

    uint32_t const cps[1] = { 0x11f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_040)
{
    // 11F1  ; [.3E31.0020.0002] 
    // HANGUL JONGSEONG YESIEUNG-SIOS

    uint32_t const cps[1] = { 0x11f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_041)
{
    // 11F2  ; [.3E32.0020.0002] 
    // HANGUL JONGSEONG YESIEUNG-PANSIOS

    uint32_t const cps[1] = { 0x11f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_042)
{
    // 11F3  ; [.3E33.0020.0002] 
    // HANGUL JONGSEONG PHIEUPH-PIEUP

    uint32_t const cps[1] = { 0x11f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_043)
{
    // 11F4  ; [.3E34.0020.0002] 
    // HANGUL JONGSEONG KAPYEOUNPHIEUPH

    uint32_t const cps[1] = { 0x11f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_044)
{
    // 11F5  ; [.3E35.0020.0002] 
    // HANGUL JONGSEONG HIEUH-NIEUN

    uint32_t const cps[1] = { 0x11f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_045)
{
    // 11F6  ; [.3E36.0020.0002] 
    // HANGUL JONGSEONG HIEUH-RIEUL

    uint32_t const cps[1] = { 0x11f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_046)
{
    // 11F7  ; [.3E37.0020.0002] 
    // HANGUL JONGSEONG HIEUH-MIEUM

    uint32_t const cps[1] = { 0x11f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_047)
{
    // 11F8  ; [.3E38.0020.0002] 
    // HANGUL JONGSEONG HIEUH-PIEUP

    uint32_t const cps[1] = { 0x11f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_048)
{
    // 11F9  ; [.3E39.0020.0002] 
    // HANGUL JONGSEONG YEORINHIEUH

    uint32_t const cps[1] = { 0x11f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_049)
{
    // 11FA  ; [.3E3A.0020.0002] 
    // HANGUL JONGSEONG KIYEOK-NIEUN

    uint32_t const cps[1] = { 0x11fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_050)
{
    // 11FB  ; [.3E3B.0020.0002] 
    // HANGUL JONGSEONG KIYEOK-PIEUP

    uint32_t const cps[1] = { 0x11fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_051)
{
    // 11FC  ; [.3E3C.0020.0002] 
    // HANGUL JONGSEONG KIYEOK-CHIEUCH

    uint32_t const cps[1] = { 0x11fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_052)
{
    // 11FD  ; [.3E3D.0020.0002] 
    // HANGUL JONGSEONG KIYEOK-KHIEUKH

    uint32_t const cps[1] = { 0x11fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_053)
{
    // 11FE  ; [.3E3E.0020.0002] 
    // HANGUL JONGSEONG KIYEOK-HIEUH

    uint32_t const cps[1] = { 0x11fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_054)
{
    // 11FF  ; [.3E3F.0020.0002] 
    // HANGUL JONGSEONG SSANGNIEUN

    uint32_t const cps[1] = { 0x11ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_055)
{
    // 1200  ; [.2507.0020.0002] 
    // ETHIOPIC SYLLABLE HA

    uint32_t const cps[1] = { 0x1200 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2507), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_056)
{
    // 1201  ; [.2508.0020.0002] 
    // ETHIOPIC SYLLABLE HU

    uint32_t const cps[1] = { 0x1201 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2508), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_057)
{
    // 1202  ; [.2509.0020.0002] 
    // ETHIOPIC SYLLABLE HI

    uint32_t const cps[1] = { 0x1202 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2509), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_058)
{
    // 1203  ; [.250A.0020.0002] 
    // ETHIOPIC SYLLABLE HAA

    uint32_t const cps[1] = { 0x1203 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x250a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_059)
{
    // 1204  ; [.250B.0020.0002] 
    // ETHIOPIC SYLLABLE HEE

    uint32_t const cps[1] = { 0x1204 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x250b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_060)
{
    // 1205  ; [.250C.0020.0002] 
    // ETHIOPIC SYLLABLE HE

    uint32_t const cps[1] = { 0x1205 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x250c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_061)
{
    // 1206  ; [.250D.0020.0002] 
    // ETHIOPIC SYLLABLE HO

    uint32_t const cps[1] = { 0x1206 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x250d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_062)
{
    // 1207  ; [.250E.0020.0002] 
    // ETHIOPIC SYLLABLE HOA

    uint32_t const cps[1] = { 0x1207 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x250e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_063)
{
    // 1208  ; [.250F.0020.0002] 
    // ETHIOPIC SYLLABLE LA

    uint32_t const cps[1] = { 0x1208 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x250f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_064)
{
    // 1209  ; [.2510.0020.0002] 
    // ETHIOPIC SYLLABLE LU

    uint32_t const cps[1] = { 0x1209 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2510), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_065)
{
    // 120A  ; [.2511.0020.0002] 
    // ETHIOPIC SYLLABLE LI

    uint32_t const cps[1] = { 0x120a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2511), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_066)
{
    // 120B  ; [.2512.0020.0002] 
    // ETHIOPIC SYLLABLE LAA

    uint32_t const cps[1] = { 0x120b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2512), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_067)
{
    // 120C  ; [.2513.0020.0002] 
    // ETHIOPIC SYLLABLE LEE

    uint32_t const cps[1] = { 0x120c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2513), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_068)
{
    // 120D  ; [.2514.0020.0002] 
    // ETHIOPIC SYLLABLE LE

    uint32_t const cps[1] = { 0x120d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2514), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_069)
{
    // 120E  ; [.2515.0020.0002] 
    // ETHIOPIC SYLLABLE LO

    uint32_t const cps[1] = { 0x120e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2515), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_070)
{
    // 120F  ; [.2516.0020.0002] 
    // ETHIOPIC SYLLABLE LWA

    uint32_t const cps[1] = { 0x120f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2516), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_071)
{
    // 1210  ; [.2518.0020.0002] 
    // ETHIOPIC SYLLABLE HHA

    uint32_t const cps[1] = { 0x1210 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2518), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_072)
{
    // 1211  ; [.2519.0020.0002] 
    // ETHIOPIC SYLLABLE HHU

    uint32_t const cps[1] = { 0x1211 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2519), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_073)
{
    // 1212  ; [.251A.0020.0002] 
    // ETHIOPIC SYLLABLE HHI

    uint32_t const cps[1] = { 0x1212 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x251a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_074)
{
    // 1213  ; [.251B.0020.0002] 
    // ETHIOPIC SYLLABLE HHAA

    uint32_t const cps[1] = { 0x1213 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x251b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_075)
{
    // 1214  ; [.251C.0020.0002] 
    // ETHIOPIC SYLLABLE HHEE

    uint32_t const cps[1] = { 0x1214 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x251c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_076)
{
    // 1215  ; [.251D.0020.0002] 
    // ETHIOPIC SYLLABLE HHE

    uint32_t const cps[1] = { 0x1215 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x251d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_077)
{
    // 1216  ; [.251E.0020.0002] 
    // ETHIOPIC SYLLABLE HHO

    uint32_t const cps[1] = { 0x1216 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x251e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_078)
{
    // 1217  ; [.251F.0020.0002] 
    // ETHIOPIC SYLLABLE HHWA

    uint32_t const cps[1] = { 0x1217 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x251f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_079)
{
    // 1218  ; [.2520.0020.0002] 
    // ETHIOPIC SYLLABLE MA

    uint32_t const cps[1] = { 0x1218 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2520), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_080)
{
    // 1219  ; [.2521.0020.0002] 
    // ETHIOPIC SYLLABLE MU

    uint32_t const cps[1] = { 0x1219 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2521), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_081)
{
    // 121A  ; [.2522.0020.0002] 
    // ETHIOPIC SYLLABLE MI

    uint32_t const cps[1] = { 0x121a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2522), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_082)
{
    // 121B  ; [.2523.0020.0002] 
    // ETHIOPIC SYLLABLE MAA

    uint32_t const cps[1] = { 0x121b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2523), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_083)
{
    // 121C  ; [.2524.0020.0002] 
    // ETHIOPIC SYLLABLE MEE

    uint32_t const cps[1] = { 0x121c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2524), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_084)
{
    // 121D  ; [.2525.0020.0002] 
    // ETHIOPIC SYLLABLE ME

    uint32_t const cps[1] = { 0x121d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2525), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_085)
{
    // 121E  ; [.2526.0020.0002] 
    // ETHIOPIC SYLLABLE MO

    uint32_t const cps[1] = { 0x121e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2526), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_086)
{
    // 121F  ; [.2527.0020.0002] 
    // ETHIOPIC SYLLABLE MWA

    uint32_t const cps[1] = { 0x121f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2527), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_087)
{
    // 1220  ; [.252D.0020.0002] 
    // ETHIOPIC SYLLABLE SZA

    uint32_t const cps[1] = { 0x1220 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x252d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_088)
{
    // 1221  ; [.252E.0020.0002] 
    // ETHIOPIC SYLLABLE SZU

    uint32_t const cps[1] = { 0x1221 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x252e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_089)
{
    // 1222  ; [.252F.0020.0002] 
    // ETHIOPIC SYLLABLE SZI

    uint32_t const cps[1] = { 0x1222 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x252f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_090)
{
    // 1223  ; [.2530.0020.0002] 
    // ETHIOPIC SYLLABLE SZAA

    uint32_t const cps[1] = { 0x1223 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2530), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_091)
{
    // 1224  ; [.2531.0020.0002] 
    // ETHIOPIC SYLLABLE SZEE

    uint32_t const cps[1] = { 0x1224 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2531), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_092)
{
    // 1225  ; [.2532.0020.0002] 
    // ETHIOPIC SYLLABLE SZE

    uint32_t const cps[1] = { 0x1225 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2532), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_093)
{
    // 1226  ; [.2533.0020.0002] 
    // ETHIOPIC SYLLABLE SZO

    uint32_t const cps[1] = { 0x1226 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2533), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_094)
{
    // 1227  ; [.2534.0020.0002] 
    // ETHIOPIC SYLLABLE SZWA

    uint32_t const cps[1] = { 0x1227 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2534), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_095)
{
    // 1228  ; [.2535.0020.0002] 
    // ETHIOPIC SYLLABLE RA

    uint32_t const cps[1] = { 0x1228 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2535), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_096)
{
    // 1229  ; [.2536.0020.0002] 
    // ETHIOPIC SYLLABLE RU

    uint32_t const cps[1] = { 0x1229 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2536), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_097)
{
    // 122A  ; [.2537.0020.0002] 
    // ETHIOPIC SYLLABLE RI

    uint32_t const cps[1] = { 0x122a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2537), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_098)
{
    // 122B  ; [.2538.0020.0002] 
    // ETHIOPIC SYLLABLE RAA

    uint32_t const cps[1] = { 0x122b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2538), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_099)
{
    // 122C  ; [.2539.0020.0002] 
    // ETHIOPIC SYLLABLE REE

    uint32_t const cps[1] = { 0x122c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2539), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_100)
{
    // 122D  ; [.253A.0020.0002] 
    // ETHIOPIC SYLLABLE RE

    uint32_t const cps[1] = { 0x122d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x253a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_101)
{
    // 122E  ; [.253B.0020.0002] 
    // ETHIOPIC SYLLABLE RO

    uint32_t const cps[1] = { 0x122e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x253b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_102)
{
    // 122F  ; [.253C.0020.0002] 
    // ETHIOPIC SYLLABLE RWA

    uint32_t const cps[1] = { 0x122f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x253c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_103)
{
    // 1230  ; [.253E.0020.0002] 
    // ETHIOPIC SYLLABLE SA

    uint32_t const cps[1] = { 0x1230 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x253e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_104)
{
    // 1231  ; [.253F.0020.0002] 
    // ETHIOPIC SYLLABLE SU

    uint32_t const cps[1] = { 0x1231 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x253f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_105)
{
    // 1232  ; [.2540.0020.0002] 
    // ETHIOPIC SYLLABLE SI

    uint32_t const cps[1] = { 0x1232 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2540), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_106)
{
    // 1233  ; [.2541.0020.0002] 
    // ETHIOPIC SYLLABLE SAA

    uint32_t const cps[1] = { 0x1233 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2541), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_107)
{
    // 1234  ; [.2542.0020.0002] 
    // ETHIOPIC SYLLABLE SEE

    uint32_t const cps[1] = { 0x1234 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2542), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_108)
{
    // 1235  ; [.2543.0020.0002] 
    // ETHIOPIC SYLLABLE SE

    uint32_t const cps[1] = { 0x1235 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2543), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_109)
{
    // 1236  ; [.2544.0020.0002] 
    // ETHIOPIC SYLLABLE SO

    uint32_t const cps[1] = { 0x1236 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2544), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_110)
{
    // 1237  ; [.2545.0020.0002] 
    // ETHIOPIC SYLLABLE SWA

    uint32_t const cps[1] = { 0x1237 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2545), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_111)
{
    // 1238  ; [.254D.0020.0002] 
    // ETHIOPIC SYLLABLE SHA

    uint32_t const cps[1] = { 0x1238 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x254d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_112)
{
    // 1239  ; [.254E.0020.0002] 
    // ETHIOPIC SYLLABLE SHU

    uint32_t const cps[1] = { 0x1239 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x254e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_113)
{
    // 123A  ; [.254F.0020.0002] 
    // ETHIOPIC SYLLABLE SHI

    uint32_t const cps[1] = { 0x123a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x254f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_114)
{
    // 123B  ; [.2550.0020.0002] 
    // ETHIOPIC SYLLABLE SHAA

    uint32_t const cps[1] = { 0x123b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2550), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_115)
{
    // 123C  ; [.2551.0020.0002] 
    // ETHIOPIC SYLLABLE SHEE

    uint32_t const cps[1] = { 0x123c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2551), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_116)
{
    // 123D  ; [.2552.0020.0002] 
    // ETHIOPIC SYLLABLE SHE

    uint32_t const cps[1] = { 0x123d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2552), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_117)
{
    // 123E  ; [.2553.0020.0002] 
    // ETHIOPIC SYLLABLE SHO

    uint32_t const cps[1] = { 0x123e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2553), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_118)
{
    // 123F  ; [.2554.0020.0002] 
    // ETHIOPIC SYLLABLE SHWA

    uint32_t const cps[1] = { 0x123f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2554), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_119)
{
    // 1240  ; [.2556.0020.0002] 
    // ETHIOPIC SYLLABLE QA

    uint32_t const cps[1] = { 0x1240 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2556), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_120)
{
    // 1241  ; [.2557.0020.0002] 
    // ETHIOPIC SYLLABLE QU

    uint32_t const cps[1] = { 0x1241 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2557), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_121)
{
    // 1242  ; [.2558.0020.0002] 
    // ETHIOPIC SYLLABLE QI

    uint32_t const cps[1] = { 0x1242 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2558), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_122)
{
    // 1243  ; [.2559.0020.0002] 
    // ETHIOPIC SYLLABLE QAA

    uint32_t const cps[1] = { 0x1243 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2559), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_123)
{
    // 1244  ; [.255A.0020.0002] 
    // ETHIOPIC SYLLABLE QEE

    uint32_t const cps[1] = { 0x1244 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x255a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_124)
{
    // 1245  ; [.255B.0020.0002] 
    // ETHIOPIC SYLLABLE QE

    uint32_t const cps[1] = { 0x1245 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x255b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_125)
{
    // 1246  ; [.255C.0020.0002] 
    // ETHIOPIC SYLLABLE QO

    uint32_t const cps[1] = { 0x1246 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x255c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_126)
{
    // 1247  ; [.255D.0020.0002] 
    // ETHIOPIC SYLLABLE QOA

    uint32_t const cps[1] = { 0x1247 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x255d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_127)
{
    // 1248  ; [.255E.0020.0002] 
    // ETHIOPIC SYLLABLE QWA

    uint32_t const cps[1] = { 0x1248 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x255e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_128)
{
    // 124A  ; [.255F.0020.0002] 
    // ETHIOPIC SYLLABLE QWI

    uint32_t const cps[1] = { 0x124a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x255f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_129)
{
    // 124B  ; [.2560.0020.0002] 
    // ETHIOPIC SYLLABLE QWAA

    uint32_t const cps[1] = { 0x124b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2560), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_130)
{
    // 124C  ; [.2561.0020.0002] 
    // ETHIOPIC SYLLABLE QWEE

    uint32_t const cps[1] = { 0x124c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2561), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_131)
{
    // 124D  ; [.2562.0020.0002] 
    // ETHIOPIC SYLLABLE QWE

    uint32_t const cps[1] = { 0x124d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2562), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_132)
{
    // 1250  ; [.2563.0020.0002] 
    // ETHIOPIC SYLLABLE QHA

    uint32_t const cps[1] = { 0x1250 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2563), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_133)
{
    // 1251  ; [.2564.0020.0002] 
    // ETHIOPIC SYLLABLE QHU

    uint32_t const cps[1] = { 0x1251 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2564), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_134)
{
    // 1252  ; [.2565.0020.0002] 
    // ETHIOPIC SYLLABLE QHI

    uint32_t const cps[1] = { 0x1252 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2565), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_135)
{
    // 1253  ; [.2566.0020.0002] 
    // ETHIOPIC SYLLABLE QHAA

    uint32_t const cps[1] = { 0x1253 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2566), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_136)
{
    // 1254  ; [.2567.0020.0002] 
    // ETHIOPIC SYLLABLE QHEE

    uint32_t const cps[1] = { 0x1254 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2567), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_137)
{
    // 1255  ; [.2568.0020.0002] 
    // ETHIOPIC SYLLABLE QHE

    uint32_t const cps[1] = { 0x1255 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2568), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_138)
{
    // 1256  ; [.2569.0020.0002] 
    // ETHIOPIC SYLLABLE QHO

    uint32_t const cps[1] = { 0x1256 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2569), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_139)
{
    // 1258  ; [.256A.0020.0002] 
    // ETHIOPIC SYLLABLE QHWA

    uint32_t const cps[1] = { 0x1258 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x256a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_140)
{
    // 125A  ; [.256B.0020.0002] 
    // ETHIOPIC SYLLABLE QHWI

    uint32_t const cps[1] = { 0x125a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x256b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_141)
{
    // 125B  ; [.256C.0020.0002] 
    // ETHIOPIC SYLLABLE QHWAA

    uint32_t const cps[1] = { 0x125b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x256c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_142)
{
    // 125C  ; [.256D.0020.0002] 
    // ETHIOPIC SYLLABLE QHWEE

    uint32_t const cps[1] = { 0x125c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x256d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_143)
{
    // 125D  ; [.256E.0020.0002] 
    // ETHIOPIC SYLLABLE QHWE

    uint32_t const cps[1] = { 0x125d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x256e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_144)
{
    // 1260  ; [.256F.0020.0002] 
    // ETHIOPIC SYLLABLE BA

    uint32_t const cps[1] = { 0x1260 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x256f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_145)
{
    // 1261  ; [.2570.0020.0002] 
    // ETHIOPIC SYLLABLE BU

    uint32_t const cps[1] = { 0x1261 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2570), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_146)
{
    // 1262  ; [.2571.0020.0002] 
    // ETHIOPIC SYLLABLE BI

    uint32_t const cps[1] = { 0x1262 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2571), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_147)
{
    // 1263  ; [.2572.0020.0002] 
    // ETHIOPIC SYLLABLE BAA

    uint32_t const cps[1] = { 0x1263 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2572), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_148)
{
    // 1264  ; [.2573.0020.0002] 
    // ETHIOPIC SYLLABLE BEE

    uint32_t const cps[1] = { 0x1264 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2573), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_029_149)
{
    // 1265  ; [.2574.0020.0002] 
    // ETHIOPIC SYLLABLE BE

    uint32_t const cps[1] = { 0x1265 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2574), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

