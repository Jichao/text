// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_380_000)
{
    // 4894 003F;	
    // (䢔) CJK UNIFIED IDEOGRAPH-4894	[FB80 C894 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4894, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC894, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_001)
{
    // 4894 0061;	
    // (䢔) CJK UNIFIED IDEOGRAPH-4894	[FB80 C894 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4894, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_002)
{
    // 4894 0041;	
    // (䢔) CJK UNIFIED IDEOGRAPH-4894	[FB80 C894 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4894, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_003)
{
    // 4894 0062;	
    // (䢔) CJK UNIFIED IDEOGRAPH-4894	[FB80 C894 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4894, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC894, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_004)
{
    // 4895 0021;	
    // (䢕) CJK UNIFIED IDEOGRAPH-4895	[FB80 C895 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4895, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC895, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_005)
{
    // 4895 003F;	
    // (䢕) CJK UNIFIED IDEOGRAPH-4895	[FB80 C895 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4895, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC895, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_006)
{
    // 4895 0061;	
    // (䢕) CJK UNIFIED IDEOGRAPH-4895	[FB80 C895 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4895, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_007)
{
    // 4895 0041;	
    // (䢕) CJK UNIFIED IDEOGRAPH-4895	[FB80 C895 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4895, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_008)
{
    // 4895 0062;	
    // (䢕) CJK UNIFIED IDEOGRAPH-4895	[FB80 C895 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4895, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC895, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_009)
{
    // 4896 0021;	
    // (䢖) CJK UNIFIED IDEOGRAPH-4896	[FB80 C896 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4896, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC896, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_010)
{
    // 4896 003F;	
    // (䢖) CJK UNIFIED IDEOGRAPH-4896	[FB80 C896 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4896, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC896, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_011)
{
    // 4896 0061;	
    // (䢖) CJK UNIFIED IDEOGRAPH-4896	[FB80 C896 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4896, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_012)
{
    // 4896 0041;	
    // (䢖) CJK UNIFIED IDEOGRAPH-4896	[FB80 C896 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4896, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_013)
{
    // 4896 0062;	
    // (䢖) CJK UNIFIED IDEOGRAPH-4896	[FB80 C896 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4896, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC896, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_014)
{
    // 4897 0021;	
    // (䢗) CJK UNIFIED IDEOGRAPH-4897	[FB80 C897 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4897, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC897, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_015)
{
    // 4897 003F;	
    // (䢗) CJK UNIFIED IDEOGRAPH-4897	[FB80 C897 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4897, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC897, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_016)
{
    // 4897 0061;	
    // (䢗) CJK UNIFIED IDEOGRAPH-4897	[FB80 C897 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4897, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_017)
{
    // 4897 0041;	
    // (䢗) CJK UNIFIED IDEOGRAPH-4897	[FB80 C897 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4897, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_018)
{
    // 4897 0062;	
    // (䢗) CJK UNIFIED IDEOGRAPH-4897	[FB80 C897 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4897, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC897, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_019)
{
    // 4898 0021;	
    // (䢘) CJK UNIFIED IDEOGRAPH-4898	[FB80 C898 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4898, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC898, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_020)
{
    // 4898 003F;	
    // (䢘) CJK UNIFIED IDEOGRAPH-4898	[FB80 C898 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4898, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC898, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_021)
{
    // 4898 0061;	
    // (䢘) CJK UNIFIED IDEOGRAPH-4898	[FB80 C898 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4898, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_022)
{
    // 4898 0041;	
    // (䢘) CJK UNIFIED IDEOGRAPH-4898	[FB80 C898 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4898, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_023)
{
    // 4898 0062;	
    // (䢘) CJK UNIFIED IDEOGRAPH-4898	[FB80 C898 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4898, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC898, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_024)
{
    // 4899 0021;	
    // (䢙) CJK UNIFIED IDEOGRAPH-4899	[FB80 C899 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4899, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC899, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_025)
{
    // 4899 003F;	
    // (䢙) CJK UNIFIED IDEOGRAPH-4899	[FB80 C899 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4899, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC899, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_026)
{
    // 4899 0061;	
    // (䢙) CJK UNIFIED IDEOGRAPH-4899	[FB80 C899 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4899, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_027)
{
    // 4899 0041;	
    // (䢙) CJK UNIFIED IDEOGRAPH-4899	[FB80 C899 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4899, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_028)
{
    // 4899 0062;	
    // (䢙) CJK UNIFIED IDEOGRAPH-4899	[FB80 C899 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4899, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC899, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_029)
{
    // 489A 0021;	
    // (䢚) CJK UNIFIED IDEOGRAPH-489A	[FB80 C89A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC89A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_030)
{
    // 489A 003F;	
    // (䢚) CJK UNIFIED IDEOGRAPH-489A	[FB80 C89A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC89A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_031)
{
    // 489A 0061;	
    // (䢚) CJK UNIFIED IDEOGRAPH-489A	[FB80 C89A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC89A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_032)
{
    // 489A 0041;	
    // (䢚) CJK UNIFIED IDEOGRAPH-489A	[FB80 C89A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x489A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC89A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_033)
{
    // 489A 0062;	
    // (䢚) CJK UNIFIED IDEOGRAPH-489A	[FB80 C89A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC89A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_034)
{
    // 489B 0021;	
    // (䢛) CJK UNIFIED IDEOGRAPH-489B	[FB80 C89B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC89B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_035)
{
    // 489B 003F;	
    // (䢛) CJK UNIFIED IDEOGRAPH-489B	[FB80 C89B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC89B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_036)
{
    // 489B 0061;	
    // (䢛) CJK UNIFIED IDEOGRAPH-489B	[FB80 C89B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC89B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_037)
{
    // 489B 0041;	
    // (䢛) CJK UNIFIED IDEOGRAPH-489B	[FB80 C89B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x489B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC89B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_038)
{
    // 489B 0062;	
    // (䢛) CJK UNIFIED IDEOGRAPH-489B	[FB80 C89B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC89B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_039)
{
    // 489C 0021;	
    // (䢜) CJK UNIFIED IDEOGRAPH-489C	[FB80 C89C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC89C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_040)
{
    // 489C 003F;	
    // (䢜) CJK UNIFIED IDEOGRAPH-489C	[FB80 C89C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC89C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_041)
{
    // 489C 0061;	
    // (䢜) CJK UNIFIED IDEOGRAPH-489C	[FB80 C89C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC89C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_042)
{
    // 489C 0041;	
    // (䢜) CJK UNIFIED IDEOGRAPH-489C	[FB80 C89C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x489C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC89C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_043)
{
    // 489C 0062;	
    // (䢜) CJK UNIFIED IDEOGRAPH-489C	[FB80 C89C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC89C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_044)
{
    // 489D 0021;	
    // (䢝) CJK UNIFIED IDEOGRAPH-489D	[FB80 C89D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC89D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_045)
{
    // 489D 003F;	
    // (䢝) CJK UNIFIED IDEOGRAPH-489D	[FB80 C89D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC89D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_046)
{
    // 489D 0061;	
    // (䢝) CJK UNIFIED IDEOGRAPH-489D	[FB80 C89D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC89D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_047)
{
    // 489D 0041;	
    // (䢝) CJK UNIFIED IDEOGRAPH-489D	[FB80 C89D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x489D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC89D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_048)
{
    // 489D 0062;	
    // (䢝) CJK UNIFIED IDEOGRAPH-489D	[FB80 C89D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC89D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_049)
{
    // 489E 0021;	
    // (䢞) CJK UNIFIED IDEOGRAPH-489E	[FB80 C89E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC89E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_050)
{
    // 489E 003F;	
    // (䢞) CJK UNIFIED IDEOGRAPH-489E	[FB80 C89E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC89E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_051)
{
    // 489E 0061;	
    // (䢞) CJK UNIFIED IDEOGRAPH-489E	[FB80 C89E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC89E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_052)
{
    // 489E 0041;	
    // (䢞) CJK UNIFIED IDEOGRAPH-489E	[FB80 C89E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x489E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC89E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_053)
{
    // 489E 0062;	
    // (䢞) CJK UNIFIED IDEOGRAPH-489E	[FB80 C89E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC89E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_054)
{
    // 489F 0021;	
    // (䢟) CJK UNIFIED IDEOGRAPH-489F	[FB80 C89F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC89F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_055)
{
    // 489F 003F;	
    // (䢟) CJK UNIFIED IDEOGRAPH-489F	[FB80 C89F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC89F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_056)
{
    // 489F 0061;	
    // (䢟) CJK UNIFIED IDEOGRAPH-489F	[FB80 C89F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC89F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_057)
{
    // 489F 0041;	
    // (䢟) CJK UNIFIED IDEOGRAPH-489F	[FB80 C89F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x489F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC89F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_058)
{
    // 489F 0062;	
    // (䢟) CJK UNIFIED IDEOGRAPH-489F	[FB80 C89F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x489F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC89F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_059)
{
    // 48A0 0021;	
    // (䢠) CJK UNIFIED IDEOGRAPH-48A0	[FB80 C8A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_060)
{
    // 48A0 003F;	
    // (䢠) CJK UNIFIED IDEOGRAPH-48A0	[FB80 C8A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_061)
{
    // 48A0 0061;	
    // (䢠) CJK UNIFIED IDEOGRAPH-48A0	[FB80 C8A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_062)
{
    // 48A0 0041;	
    // (䢠) CJK UNIFIED IDEOGRAPH-48A0	[FB80 C8A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_063)
{
    // 48A0 0062;	
    // (䢠) CJK UNIFIED IDEOGRAPH-48A0	[FB80 C8A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_064)
{
    // 48A1 0021;	
    // (䢡) CJK UNIFIED IDEOGRAPH-48A1	[FB80 C8A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_065)
{
    // 48A1 003F;	
    // (䢡) CJK UNIFIED IDEOGRAPH-48A1	[FB80 C8A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_066)
{
    // 48A1 0061;	
    // (䢡) CJK UNIFIED IDEOGRAPH-48A1	[FB80 C8A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_067)
{
    // 48A1 0041;	
    // (䢡) CJK UNIFIED IDEOGRAPH-48A1	[FB80 C8A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_068)
{
    // 48A1 0062;	
    // (䢡) CJK UNIFIED IDEOGRAPH-48A1	[FB80 C8A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_069)
{
    // 48A2 0021;	
    // (䢢) CJK UNIFIED IDEOGRAPH-48A2	[FB80 C8A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_070)
{
    // 48A2 003F;	
    // (䢢) CJK UNIFIED IDEOGRAPH-48A2	[FB80 C8A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_071)
{
    // 48A2 0061;	
    // (䢢) CJK UNIFIED IDEOGRAPH-48A2	[FB80 C8A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_072)
{
    // 48A2 0041;	
    // (䢢) CJK UNIFIED IDEOGRAPH-48A2	[FB80 C8A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_073)
{
    // 48A2 0062;	
    // (䢢) CJK UNIFIED IDEOGRAPH-48A2	[FB80 C8A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_074)
{
    // 48A3 0021;	
    // (䢣) CJK UNIFIED IDEOGRAPH-48A3	[FB80 C8A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_075)
{
    // 48A3 003F;	
    // (䢣) CJK UNIFIED IDEOGRAPH-48A3	[FB80 C8A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_076)
{
    // 48A3 0061;	
    // (䢣) CJK UNIFIED IDEOGRAPH-48A3	[FB80 C8A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_077)
{
    // 48A3 0041;	
    // (䢣) CJK UNIFIED IDEOGRAPH-48A3	[FB80 C8A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_078)
{
    // 48A3 0062;	
    // (䢣) CJK UNIFIED IDEOGRAPH-48A3	[FB80 C8A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_079)
{
    // 48A4 0021;	
    // (䢤) CJK UNIFIED IDEOGRAPH-48A4	[FB80 C8A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_080)
{
    // 48A4 003F;	
    // (䢤) CJK UNIFIED IDEOGRAPH-48A4	[FB80 C8A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_081)
{
    // 48A4 0061;	
    // (䢤) CJK UNIFIED IDEOGRAPH-48A4	[FB80 C8A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_082)
{
    // 48A4 0041;	
    // (䢤) CJK UNIFIED IDEOGRAPH-48A4	[FB80 C8A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_083)
{
    // 48A4 0062;	
    // (䢤) CJK UNIFIED IDEOGRAPH-48A4	[FB80 C8A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_084)
{
    // 48A5 0021;	
    // (䢥) CJK UNIFIED IDEOGRAPH-48A5	[FB80 C8A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_085)
{
    // 48A5 003F;	
    // (䢥) CJK UNIFIED IDEOGRAPH-48A5	[FB80 C8A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_086)
{
    // 48A5 0061;	
    // (䢥) CJK UNIFIED IDEOGRAPH-48A5	[FB80 C8A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_087)
{
    // 48A5 0041;	
    // (䢥) CJK UNIFIED IDEOGRAPH-48A5	[FB80 C8A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_088)
{
    // 48A5 0062;	
    // (䢥) CJK UNIFIED IDEOGRAPH-48A5	[FB80 C8A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_089)
{
    // 48A6 0021;	
    // (䢦) CJK UNIFIED IDEOGRAPH-48A6	[FB80 C8A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_090)
{
    // 48A6 003F;	
    // (䢦) CJK UNIFIED IDEOGRAPH-48A6	[FB80 C8A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_091)
{
    // 48A6 0061;	
    // (䢦) CJK UNIFIED IDEOGRAPH-48A6	[FB80 C8A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_092)
{
    // 48A6 0041;	
    // (䢦) CJK UNIFIED IDEOGRAPH-48A6	[FB80 C8A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_093)
{
    // 48A6 0062;	
    // (䢦) CJK UNIFIED IDEOGRAPH-48A6	[FB80 C8A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_094)
{
    // 48A7 0021;	
    // (䢧) CJK UNIFIED IDEOGRAPH-48A7	[FB80 C8A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_095)
{
    // 48A7 003F;	
    // (䢧) CJK UNIFIED IDEOGRAPH-48A7	[FB80 C8A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_096)
{
    // 48A7 0061;	
    // (䢧) CJK UNIFIED IDEOGRAPH-48A7	[FB80 C8A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_097)
{
    // 48A7 0041;	
    // (䢧) CJK UNIFIED IDEOGRAPH-48A7	[FB80 C8A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_098)
{
    // 48A7 0062;	
    // (䢧) CJK UNIFIED IDEOGRAPH-48A7	[FB80 C8A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_099)
{
    // 48A8 0021;	
    // (䢨) CJK UNIFIED IDEOGRAPH-48A8	[FB80 C8A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_100)
{
    // 48A8 003F;	
    // (䢨) CJK UNIFIED IDEOGRAPH-48A8	[FB80 C8A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_101)
{
    // 48A8 0061;	
    // (䢨) CJK UNIFIED IDEOGRAPH-48A8	[FB80 C8A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_102)
{
    // 48A8 0041;	
    // (䢨) CJK UNIFIED IDEOGRAPH-48A8	[FB80 C8A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_103)
{
    // 48A8 0062;	
    // (䢨) CJK UNIFIED IDEOGRAPH-48A8	[FB80 C8A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_104)
{
    // 48A9 0021;	
    // (䢩) CJK UNIFIED IDEOGRAPH-48A9	[FB80 C8A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_105)
{
    // 48A9 003F;	
    // (䢩) CJK UNIFIED IDEOGRAPH-48A9	[FB80 C8A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_106)
{
    // 48A9 0061;	
    // (䢩) CJK UNIFIED IDEOGRAPH-48A9	[FB80 C8A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_107)
{
    // 48A9 0041;	
    // (䢩) CJK UNIFIED IDEOGRAPH-48A9	[FB80 C8A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_108)
{
    // 48A9 0062;	
    // (䢩) CJK UNIFIED IDEOGRAPH-48A9	[FB80 C8A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_109)
{
    // 48AA 0021;	
    // (䢪) CJK UNIFIED IDEOGRAPH-48AA	[FB80 C8AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_110)
{
    // 48AA 003F;	
    // (䢪) CJK UNIFIED IDEOGRAPH-48AA	[FB80 C8AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_111)
{
    // 48AA 0061;	
    // (䢪) CJK UNIFIED IDEOGRAPH-48AA	[FB80 C8AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_112)
{
    // 48AA 0041;	
    // (䢪) CJK UNIFIED IDEOGRAPH-48AA	[FB80 C8AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_113)
{
    // 48AA 0062;	
    // (䢪) CJK UNIFIED IDEOGRAPH-48AA	[FB80 C8AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_114)
{
    // 48AB 0021;	
    // (䢫) CJK UNIFIED IDEOGRAPH-48AB	[FB80 C8AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_115)
{
    // 48AB 003F;	
    // (䢫) CJK UNIFIED IDEOGRAPH-48AB	[FB80 C8AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_116)
{
    // 48AB 0061;	
    // (䢫) CJK UNIFIED IDEOGRAPH-48AB	[FB80 C8AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_117)
{
    // 48AB 0041;	
    // (䢫) CJK UNIFIED IDEOGRAPH-48AB	[FB80 C8AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_118)
{
    // 48AB 0062;	
    // (䢫) CJK UNIFIED IDEOGRAPH-48AB	[FB80 C8AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_119)
{
    // 48AC 0021;	
    // (䢬) CJK UNIFIED IDEOGRAPH-48AC	[FB80 C8AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_120)
{
    // 48AC 003F;	
    // (䢬) CJK UNIFIED IDEOGRAPH-48AC	[FB80 C8AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_121)
{
    // 48AC 0061;	
    // (䢬) CJK UNIFIED IDEOGRAPH-48AC	[FB80 C8AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_122)
{
    // 48AC 0041;	
    // (䢬) CJK UNIFIED IDEOGRAPH-48AC	[FB80 C8AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_123)
{
    // 48AC 0062;	
    // (䢬) CJK UNIFIED IDEOGRAPH-48AC	[FB80 C8AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_124)
{
    // 48AD 0021;	
    // (䢭) CJK UNIFIED IDEOGRAPH-48AD	[FB80 C8AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_125)
{
    // 48AD 003F;	
    // (䢭) CJK UNIFIED IDEOGRAPH-48AD	[FB80 C8AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_126)
{
    // 48AD 0061;	
    // (䢭) CJK UNIFIED IDEOGRAPH-48AD	[FB80 C8AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_127)
{
    // 48AD 0041;	
    // (䢭) CJK UNIFIED IDEOGRAPH-48AD	[FB80 C8AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_128)
{
    // 48AD 0062;	
    // (䢭) CJK UNIFIED IDEOGRAPH-48AD	[FB80 C8AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_129)
{
    // 48AE 0021;	
    // (䢮) CJK UNIFIED IDEOGRAPH-48AE	[FB80 C8AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_130)
{
    // 48AE 003F;	
    // (䢮) CJK UNIFIED IDEOGRAPH-48AE	[FB80 C8AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_131)
{
    // 48AE 0061;	
    // (䢮) CJK UNIFIED IDEOGRAPH-48AE	[FB80 C8AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_132)
{
    // 48AE 0041;	
    // (䢮) CJK UNIFIED IDEOGRAPH-48AE	[FB80 C8AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_133)
{
    // 48AE 0062;	
    // (䢮) CJK UNIFIED IDEOGRAPH-48AE	[FB80 C8AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_134)
{
    // 48AF 0021;	
    // (䢯) CJK UNIFIED IDEOGRAPH-48AF	[FB80 C8AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_135)
{
    // 48AF 003F;	
    // (䢯) CJK UNIFIED IDEOGRAPH-48AF	[FB80 C8AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_136)
{
    // 48AF 0061;	
    // (䢯) CJK UNIFIED IDEOGRAPH-48AF	[FB80 C8AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_137)
{
    // 48AF 0041;	
    // (䢯) CJK UNIFIED IDEOGRAPH-48AF	[FB80 C8AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_138)
{
    // 48AF 0062;	
    // (䢯) CJK UNIFIED IDEOGRAPH-48AF	[FB80 C8AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_139)
{
    // 48B0 0021;	
    // (䢰) CJK UNIFIED IDEOGRAPH-48B0	[FB80 C8B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_140)
{
    // 48B0 003F;	
    // (䢰) CJK UNIFIED IDEOGRAPH-48B0	[FB80 C8B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_141)
{
    // 48B0 0061;	
    // (䢰) CJK UNIFIED IDEOGRAPH-48B0	[FB80 C8B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_142)
{
    // 48B0 0041;	
    // (䢰) CJK UNIFIED IDEOGRAPH-48B0	[FB80 C8B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_143)
{
    // 48B0 0062;	
    // (䢰) CJK UNIFIED IDEOGRAPH-48B0	[FB80 C8B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_144)
{
    // 48B1 0021;	
    // (䢱) CJK UNIFIED IDEOGRAPH-48B1	[FB80 C8B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_145)
{
    // 48B1 003F;	
    // (䢱) CJK UNIFIED IDEOGRAPH-48B1	[FB80 C8B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_146)
{
    // 48B1 0061;	
    // (䢱) CJK UNIFIED IDEOGRAPH-48B1	[FB80 C8B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_147)
{
    // 48B1 0041;	
    // (䢱) CJK UNIFIED IDEOGRAPH-48B1	[FB80 C8B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_148)
{
    // 48B1 0062;	
    // (䢱) CJK UNIFIED IDEOGRAPH-48B1	[FB80 C8B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_149)
{
    // 48B2 0021;	
    // (䢲) CJK UNIFIED IDEOGRAPH-48B2	[FB80 C8B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_150)
{
    // 48B2 003F;	
    // (䢲) CJK UNIFIED IDEOGRAPH-48B2	[FB80 C8B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_151)
{
    // 48B2 0061;	
    // (䢲) CJK UNIFIED IDEOGRAPH-48B2	[FB80 C8B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_152)
{
    // 48B2 0041;	
    // (䢲) CJK UNIFIED IDEOGRAPH-48B2	[FB80 C8B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_153)
{
    // 48B2 0062;	
    // (䢲) CJK UNIFIED IDEOGRAPH-48B2	[FB80 C8B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_154)
{
    // 48B3 0021;	
    // (䢳) CJK UNIFIED IDEOGRAPH-48B3	[FB80 C8B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_155)
{
    // 48B3 003F;	
    // (䢳) CJK UNIFIED IDEOGRAPH-48B3	[FB80 C8B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_156)
{
    // 48B3 0061;	
    // (䢳) CJK UNIFIED IDEOGRAPH-48B3	[FB80 C8B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_157)
{
    // 48B3 0041;	
    // (䢳) CJK UNIFIED IDEOGRAPH-48B3	[FB80 C8B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_158)
{
    // 48B3 0062;	
    // (䢳) CJK UNIFIED IDEOGRAPH-48B3	[FB80 C8B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_159)
{
    // 48B4 0021;	
    // (䢴) CJK UNIFIED IDEOGRAPH-48B4	[FB80 C8B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_160)
{
    // 48B4 003F;	
    // (䢴) CJK UNIFIED IDEOGRAPH-48B4	[FB80 C8B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_161)
{
    // 48B4 0061;	
    // (䢴) CJK UNIFIED IDEOGRAPH-48B4	[FB80 C8B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_162)
{
    // 48B4 0041;	
    // (䢴) CJK UNIFIED IDEOGRAPH-48B4	[FB80 C8B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_163)
{
    // 48B4 0062;	
    // (䢴) CJK UNIFIED IDEOGRAPH-48B4	[FB80 C8B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_164)
{
    // 48B5 0021;	
    // (䢵) CJK UNIFIED IDEOGRAPH-48B5	[FB80 C8B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_165)
{
    // 48B5 003F;	
    // (䢵) CJK UNIFIED IDEOGRAPH-48B5	[FB80 C8B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_166)
{
    // 48B5 0061;	
    // (䢵) CJK UNIFIED IDEOGRAPH-48B5	[FB80 C8B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_167)
{
    // 48B5 0041;	
    // (䢵) CJK UNIFIED IDEOGRAPH-48B5	[FB80 C8B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_168)
{
    // 48B5 0062;	
    // (䢵) CJK UNIFIED IDEOGRAPH-48B5	[FB80 C8B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_169)
{
    // 48B6 0021;	
    // (䢶) CJK UNIFIED IDEOGRAPH-48B6	[FB80 C8B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_170)
{
    // 48B6 003F;	
    // (䢶) CJK UNIFIED IDEOGRAPH-48B6	[FB80 C8B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_171)
{
    // 48B6 0061;	
    // (䢶) CJK UNIFIED IDEOGRAPH-48B6	[FB80 C8B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_172)
{
    // 48B6 0041;	
    // (䢶) CJK UNIFIED IDEOGRAPH-48B6	[FB80 C8B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_173)
{
    // 48B6 0062;	
    // (䢶) CJK UNIFIED IDEOGRAPH-48B6	[FB80 C8B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_174)
{
    // 48B7 0021;	
    // (䢷) CJK UNIFIED IDEOGRAPH-48B7	[FB80 C8B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_175)
{
    // 48B7 003F;	
    // (䢷) CJK UNIFIED IDEOGRAPH-48B7	[FB80 C8B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_176)
{
    // 48B7 0061;	
    // (䢷) CJK UNIFIED IDEOGRAPH-48B7	[FB80 C8B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_177)
{
    // 48B7 0041;	
    // (䢷) CJK UNIFIED IDEOGRAPH-48B7	[FB80 C8B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_178)
{
    // 48B7 0062;	
    // (䢷) CJK UNIFIED IDEOGRAPH-48B7	[FB80 C8B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_179)
{
    // 48B8 0021;	
    // (䢸) CJK UNIFIED IDEOGRAPH-48B8	[FB80 C8B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_180)
{
    // 48B8 003F;	
    // (䢸) CJK UNIFIED IDEOGRAPH-48B8	[FB80 C8B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_181)
{
    // 48B8 0061;	
    // (䢸) CJK UNIFIED IDEOGRAPH-48B8	[FB80 C8B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_182)
{
    // 48B8 0041;	
    // (䢸) CJK UNIFIED IDEOGRAPH-48B8	[FB80 C8B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_183)
{
    // 48B8 0062;	
    // (䢸) CJK UNIFIED IDEOGRAPH-48B8	[FB80 C8B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_184)
{
    // 48B9 0021;	
    // (䢹) CJK UNIFIED IDEOGRAPH-48B9	[FB80 C8B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_185)
{
    // 48B9 003F;	
    // (䢹) CJK UNIFIED IDEOGRAPH-48B9	[FB80 C8B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_186)
{
    // 48B9 0061;	
    // (䢹) CJK UNIFIED IDEOGRAPH-48B9	[FB80 C8B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_187)
{
    // 48B9 0041;	
    // (䢹) CJK UNIFIED IDEOGRAPH-48B9	[FB80 C8B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_188)
{
    // 48B9 0062;	
    // (䢹) CJK UNIFIED IDEOGRAPH-48B9	[FB80 C8B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_189)
{
    // 48BA 0021;	
    // (䢺) CJK UNIFIED IDEOGRAPH-48BA	[FB80 C8BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_190)
{
    // 48BA 003F;	
    // (䢺) CJK UNIFIED IDEOGRAPH-48BA	[FB80 C8BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_191)
{
    // 48BA 0061;	
    // (䢺) CJK UNIFIED IDEOGRAPH-48BA	[FB80 C8BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_192)
{
    // 48BA 0041;	
    // (䢺) CJK UNIFIED IDEOGRAPH-48BA	[FB80 C8BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_193)
{
    // 48BA 0062;	
    // (䢺) CJK UNIFIED IDEOGRAPH-48BA	[FB80 C8BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_194)
{
    // 48BB 0021;	
    // (䢻) CJK UNIFIED IDEOGRAPH-48BB	[FB80 C8BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_195)
{
    // 48BB 003F;	
    // (䢻) CJK UNIFIED IDEOGRAPH-48BB	[FB80 C8BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_196)
{
    // 48BB 0061;	
    // (䢻) CJK UNIFIED IDEOGRAPH-48BB	[FB80 C8BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_197)
{
    // 48BB 0041;	
    // (䢻) CJK UNIFIED IDEOGRAPH-48BB	[FB80 C8BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_198)
{
    // 48BB 0062;	
    // (䢻) CJK UNIFIED IDEOGRAPH-48BB	[FB80 C8BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_199)
{
    // 48BC 0021;	
    // (䢼) CJK UNIFIED IDEOGRAPH-48BC	[FB80 C8BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_200)
{
    // 48BC 003F;	
    // (䢼) CJK UNIFIED IDEOGRAPH-48BC	[FB80 C8BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_201)
{
    // 48BC 0061;	
    // (䢼) CJK UNIFIED IDEOGRAPH-48BC	[FB80 C8BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_202)
{
    // 48BC 0041;	
    // (䢼) CJK UNIFIED IDEOGRAPH-48BC	[FB80 C8BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_203)
{
    // 48BC 0062;	
    // (䢼) CJK UNIFIED IDEOGRAPH-48BC	[FB80 C8BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_204)
{
    // 48BD 0021;	
    // (䢽) CJK UNIFIED IDEOGRAPH-48BD	[FB80 C8BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_205)
{
    // 48BD 003F;	
    // (䢽) CJK UNIFIED IDEOGRAPH-48BD	[FB80 C8BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_206)
{
    // 48BD 0061;	
    // (䢽) CJK UNIFIED IDEOGRAPH-48BD	[FB80 C8BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_207)
{
    // 48BD 0041;	
    // (䢽) CJK UNIFIED IDEOGRAPH-48BD	[FB80 C8BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_208)
{
    // 48BD 0062;	
    // (䢽) CJK UNIFIED IDEOGRAPH-48BD	[FB80 C8BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_209)
{
    // 48BE 0021;	
    // (䢾) CJK UNIFIED IDEOGRAPH-48BE	[FB80 C8BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_210)
{
    // 48BE 003F;	
    // (䢾) CJK UNIFIED IDEOGRAPH-48BE	[FB80 C8BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_211)
{
    // 48BE 0061;	
    // (䢾) CJK UNIFIED IDEOGRAPH-48BE	[FB80 C8BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_212)
{
    // 48BE 0041;	
    // (䢾) CJK UNIFIED IDEOGRAPH-48BE	[FB80 C8BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_213)
{
    // 48BE 0062;	
    // (䢾) CJK UNIFIED IDEOGRAPH-48BE	[FB80 C8BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_214)
{
    // 48BF 0021;	
    // (䢿) CJK UNIFIED IDEOGRAPH-48BF	[FB80 C8BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_215)
{
    // 48BF 003F;	
    // (䢿) CJK UNIFIED IDEOGRAPH-48BF	[FB80 C8BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_216)
{
    // 48BF 0061;	
    // (䢿) CJK UNIFIED IDEOGRAPH-48BF	[FB80 C8BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_217)
{
    // 48BF 0041;	
    // (䢿) CJK UNIFIED IDEOGRAPH-48BF	[FB80 C8BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_218)
{
    // 48BF 0062;	
    // (䢿) CJK UNIFIED IDEOGRAPH-48BF	[FB80 C8BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_219)
{
    // 48C0 0021;	
    // (䣀) CJK UNIFIED IDEOGRAPH-48C0	[FB80 C8C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_220)
{
    // 48C0 003F;	
    // (䣀) CJK UNIFIED IDEOGRAPH-48C0	[FB80 C8C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_221)
{
    // 48C0 0061;	
    // (䣀) CJK UNIFIED IDEOGRAPH-48C0	[FB80 C8C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_222)
{
    // 48C0 0041;	
    // (䣀) CJK UNIFIED IDEOGRAPH-48C0	[FB80 C8C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_223)
{
    // 48C0 0062;	
    // (䣀) CJK UNIFIED IDEOGRAPH-48C0	[FB80 C8C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_224)
{
    // 48C1 0021;	
    // (䣁) CJK UNIFIED IDEOGRAPH-48C1	[FB80 C8C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_225)
{
    // 48C1 003F;	
    // (䣁) CJK UNIFIED IDEOGRAPH-48C1	[FB80 C8C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_226)
{
    // 48C1 0061;	
    // (䣁) CJK UNIFIED IDEOGRAPH-48C1	[FB80 C8C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_227)
{
    // 48C1 0041;	
    // (䣁) CJK UNIFIED IDEOGRAPH-48C1	[FB80 C8C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_228)
{
    // 48C1 0062;	
    // (䣁) CJK UNIFIED IDEOGRAPH-48C1	[FB80 C8C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_229)
{
    // 48C2 0021;	
    // (䣂) CJK UNIFIED IDEOGRAPH-48C2	[FB80 C8C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_230)
{
    // 48C2 003F;	
    // (䣂) CJK UNIFIED IDEOGRAPH-48C2	[FB80 C8C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_231)
{
    // 48C2 0061;	
    // (䣂) CJK UNIFIED IDEOGRAPH-48C2	[FB80 C8C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_232)
{
    // 48C2 0041;	
    // (䣂) CJK UNIFIED IDEOGRAPH-48C2	[FB80 C8C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_233)
{
    // 48C2 0062;	
    // (䣂) CJK UNIFIED IDEOGRAPH-48C2	[FB80 C8C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_234)
{
    // 48C3 0021;	
    // (䣃) CJK UNIFIED IDEOGRAPH-48C3	[FB80 C8C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_235)
{
    // 48C3 003F;	
    // (䣃) CJK UNIFIED IDEOGRAPH-48C3	[FB80 C8C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_236)
{
    // 48C3 0061;	
    // (䣃) CJK UNIFIED IDEOGRAPH-48C3	[FB80 C8C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_237)
{
    // 48C3 0041;	
    // (䣃) CJK UNIFIED IDEOGRAPH-48C3	[FB80 C8C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_238)
{
    // 48C3 0062;	
    // (䣃) CJK UNIFIED IDEOGRAPH-48C3	[FB80 C8C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_239)
{
    // 48C4 0021;	
    // (䣄) CJK UNIFIED IDEOGRAPH-48C4	[FB80 C8C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_240)
{
    // 48C4 003F;	
    // (䣄) CJK UNIFIED IDEOGRAPH-48C4	[FB80 C8C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_241)
{
    // 48C4 0061;	
    // (䣄) CJK UNIFIED IDEOGRAPH-48C4	[FB80 C8C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_242)
{
    // 48C4 0041;	
    // (䣄) CJK UNIFIED IDEOGRAPH-48C4	[FB80 C8C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_243)
{
    // 48C4 0062;	
    // (䣄) CJK UNIFIED IDEOGRAPH-48C4	[FB80 C8C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_244)
{
    // 48C5 0021;	
    // (䣅) CJK UNIFIED IDEOGRAPH-48C5	[FB80 C8C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_245)
{
    // 48C5 003F;	
    // (䣅) CJK UNIFIED IDEOGRAPH-48C5	[FB80 C8C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_246)
{
    // 48C5 0061;	
    // (䣅) CJK UNIFIED IDEOGRAPH-48C5	[FB80 C8C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_247)
{
    // 48C5 0041;	
    // (䣅) CJK UNIFIED IDEOGRAPH-48C5	[FB80 C8C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_248)
{
    // 48C5 0062;	
    // (䣅) CJK UNIFIED IDEOGRAPH-48C5	[FB80 C8C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_249)
{
    // 48C6 0021;	
    // (䣆) CJK UNIFIED IDEOGRAPH-48C6	[FB80 C8C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_250)
{
    // 48C6 003F;	
    // (䣆) CJK UNIFIED IDEOGRAPH-48C6	[FB80 C8C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_251)
{
    // 48C6 0061;	
    // (䣆) CJK UNIFIED IDEOGRAPH-48C6	[FB80 C8C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_252)
{
    // 48C6 0041;	
    // (䣆) CJK UNIFIED IDEOGRAPH-48C6	[FB80 C8C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_253)
{
    // 48C6 0062;	
    // (䣆) CJK UNIFIED IDEOGRAPH-48C6	[FB80 C8C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_254)
{
    // 48C7 0021;	
    // (䣇) CJK UNIFIED IDEOGRAPH-48C7	[FB80 C8C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_255)
{
    // 48C7 003F;	
    // (䣇) CJK UNIFIED IDEOGRAPH-48C7	[FB80 C8C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_256)
{
    // 48C7 0061;	
    // (䣇) CJK UNIFIED IDEOGRAPH-48C7	[FB80 C8C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_257)
{
    // 48C7 0041;	
    // (䣇) CJK UNIFIED IDEOGRAPH-48C7	[FB80 C8C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_258)
{
    // 48C7 0062;	
    // (䣇) CJK UNIFIED IDEOGRAPH-48C7	[FB80 C8C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_259)
{
    // 48C8 0021;	
    // (䣈) CJK UNIFIED IDEOGRAPH-48C8	[FB80 C8C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_260)
{
    // 48C8 003F;	
    // (䣈) CJK UNIFIED IDEOGRAPH-48C8	[FB80 C8C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_261)
{
    // 48C8 0061;	
    // (䣈) CJK UNIFIED IDEOGRAPH-48C8	[FB80 C8C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_262)
{
    // 48C8 0041;	
    // (䣈) CJK UNIFIED IDEOGRAPH-48C8	[FB80 C8C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_263)
{
    // 48C8 0062;	
    // (䣈) CJK UNIFIED IDEOGRAPH-48C8	[FB80 C8C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_264)
{
    // 48C9 0021;	
    // (䣉) CJK UNIFIED IDEOGRAPH-48C9	[FB80 C8C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_265)
{
    // 48C9 003F;	
    // (䣉) CJK UNIFIED IDEOGRAPH-48C9	[FB80 C8C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_266)
{
    // 48C9 0061;	
    // (䣉) CJK UNIFIED IDEOGRAPH-48C9	[FB80 C8C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_267)
{
    // 48C9 0041;	
    // (䣉) CJK UNIFIED IDEOGRAPH-48C9	[FB80 C8C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_268)
{
    // 48C9 0062;	
    // (䣉) CJK UNIFIED IDEOGRAPH-48C9	[FB80 C8C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_269)
{
    // 48CA 0021;	
    // (䣊) CJK UNIFIED IDEOGRAPH-48CA	[FB80 C8CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_270)
{
    // 48CA 003F;	
    // (䣊) CJK UNIFIED IDEOGRAPH-48CA	[FB80 C8CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_271)
{
    // 48CA 0061;	
    // (䣊) CJK UNIFIED IDEOGRAPH-48CA	[FB80 C8CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_272)
{
    // 48CA 0041;	
    // (䣊) CJK UNIFIED IDEOGRAPH-48CA	[FB80 C8CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_273)
{
    // 48CA 0062;	
    // (䣊) CJK UNIFIED IDEOGRAPH-48CA	[FB80 C8CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_274)
{
    // 48CB 0021;	
    // (䣋) CJK UNIFIED IDEOGRAPH-48CB	[FB80 C8CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_275)
{
    // 48CB 003F;	
    // (䣋) CJK UNIFIED IDEOGRAPH-48CB	[FB80 C8CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_276)
{
    // 48CB 0061;	
    // (䣋) CJK UNIFIED IDEOGRAPH-48CB	[FB80 C8CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_277)
{
    // 48CB 0041;	
    // (䣋) CJK UNIFIED IDEOGRAPH-48CB	[FB80 C8CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_278)
{
    // 48CB 0062;	
    // (䣋) CJK UNIFIED IDEOGRAPH-48CB	[FB80 C8CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_279)
{
    // 48CC 0021;	
    // (䣌) CJK UNIFIED IDEOGRAPH-48CC	[FB80 C8CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_280)
{
    // 48CC 003F;	
    // (䣌) CJK UNIFIED IDEOGRAPH-48CC	[FB80 C8CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_281)
{
    // 48CC 0061;	
    // (䣌) CJK UNIFIED IDEOGRAPH-48CC	[FB80 C8CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_282)
{
    // 48CC 0041;	
    // (䣌) CJK UNIFIED IDEOGRAPH-48CC	[FB80 C8CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_283)
{
    // 48CC 0062;	
    // (䣌) CJK UNIFIED IDEOGRAPH-48CC	[FB80 C8CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_284)
{
    // 48CD 0021;	
    // (䣍) CJK UNIFIED IDEOGRAPH-48CD	[FB80 C8CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_285)
{
    // 48CD 003F;	
    // (䣍) CJK UNIFIED IDEOGRAPH-48CD	[FB80 C8CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_286)
{
    // 48CD 0061;	
    // (䣍) CJK UNIFIED IDEOGRAPH-48CD	[FB80 C8CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_287)
{
    // 48CD 0041;	
    // (䣍) CJK UNIFIED IDEOGRAPH-48CD	[FB80 C8CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_288)
{
    // 48CD 0062;	
    // (䣍) CJK UNIFIED IDEOGRAPH-48CD	[FB80 C8CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_289)
{
    // 48CE 0021;	
    // (䣎) CJK UNIFIED IDEOGRAPH-48CE	[FB80 C8CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_290)
{
    // 48CE 003F;	
    // (䣎) CJK UNIFIED IDEOGRAPH-48CE	[FB80 C8CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_291)
{
    // 48CE 0061;	
    // (䣎) CJK UNIFIED IDEOGRAPH-48CE	[FB80 C8CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_292)
{
    // 48CE 0041;	
    // (䣎) CJK UNIFIED IDEOGRAPH-48CE	[FB80 C8CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_293)
{
    // 48CE 0062;	
    // (䣎) CJK UNIFIED IDEOGRAPH-48CE	[FB80 C8CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_294)
{
    // 48CF 0021;	
    // (䣏) CJK UNIFIED IDEOGRAPH-48CF	[FB80 C8CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_295)
{
    // 48CF 003F;	
    // (䣏) CJK UNIFIED IDEOGRAPH-48CF	[FB80 C8CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_296)
{
    // 48CF 0061;	
    // (䣏) CJK UNIFIED IDEOGRAPH-48CF	[FB80 C8CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_297)
{
    // 48CF 0041;	
    // (䣏) CJK UNIFIED IDEOGRAPH-48CF	[FB80 C8CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_298)
{
    // 48CF 0062;	
    // (䣏) CJK UNIFIED IDEOGRAPH-48CF	[FB80 C8CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_299)
{
    // 48D0 0021;	
    // (䣐) CJK UNIFIED IDEOGRAPH-48D0	[FB80 C8D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_300)
{
    // 48D0 003F;	
    // (䣐) CJK UNIFIED IDEOGRAPH-48D0	[FB80 C8D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_301)
{
    // 48D0 0061;	
    // (䣐) CJK UNIFIED IDEOGRAPH-48D0	[FB80 C8D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_302)
{
    // 48D0 0041;	
    // (䣐) CJK UNIFIED IDEOGRAPH-48D0	[FB80 C8D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_303)
{
    // 48D0 0062;	
    // (䣐) CJK UNIFIED IDEOGRAPH-48D0	[FB80 C8D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_304)
{
    // 48D1 0021;	
    // (䣑) CJK UNIFIED IDEOGRAPH-48D1	[FB80 C8D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_305)
{
    // 48D1 003F;	
    // (䣑) CJK UNIFIED IDEOGRAPH-48D1	[FB80 C8D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_306)
{
    // 48D1 0061;	
    // (䣑) CJK UNIFIED IDEOGRAPH-48D1	[FB80 C8D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_307)
{
    // 48D1 0041;	
    // (䣑) CJK UNIFIED IDEOGRAPH-48D1	[FB80 C8D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_308)
{
    // 48D1 0062;	
    // (䣑) CJK UNIFIED IDEOGRAPH-48D1	[FB80 C8D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_309)
{
    // 48D2 0021;	
    // (䣒) CJK UNIFIED IDEOGRAPH-48D2	[FB80 C8D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_310)
{
    // 48D2 003F;	
    // (䣒) CJK UNIFIED IDEOGRAPH-48D2	[FB80 C8D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_311)
{
    // 48D2 0061;	
    // (䣒) CJK UNIFIED IDEOGRAPH-48D2	[FB80 C8D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_312)
{
    // 48D2 0041;	
    // (䣒) CJK UNIFIED IDEOGRAPH-48D2	[FB80 C8D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_313)
{
    // 48D2 0062;	
    // (䣒) CJK UNIFIED IDEOGRAPH-48D2	[FB80 C8D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_314)
{
    // 48D3 0021;	
    // (䣓) CJK UNIFIED IDEOGRAPH-48D3	[FB80 C8D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_315)
{
    // 48D3 003F;	
    // (䣓) CJK UNIFIED IDEOGRAPH-48D3	[FB80 C8D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_316)
{
    // 48D3 0061;	
    // (䣓) CJK UNIFIED IDEOGRAPH-48D3	[FB80 C8D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_317)
{
    // 48D3 0041;	
    // (䣓) CJK UNIFIED IDEOGRAPH-48D3	[FB80 C8D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_318)
{
    // 48D3 0062;	
    // (䣓) CJK UNIFIED IDEOGRAPH-48D3	[FB80 C8D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_319)
{
    // 48D4 0021;	
    // (䣔) CJK UNIFIED IDEOGRAPH-48D4	[FB80 C8D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_320)
{
    // 48D4 003F;	
    // (䣔) CJK UNIFIED IDEOGRAPH-48D4	[FB80 C8D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_321)
{
    // 48D4 0061;	
    // (䣔) CJK UNIFIED IDEOGRAPH-48D4	[FB80 C8D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_322)
{
    // 48D4 0041;	
    // (䣔) CJK UNIFIED IDEOGRAPH-48D4	[FB80 C8D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_323)
{
    // 48D4 0062;	
    // (䣔) CJK UNIFIED IDEOGRAPH-48D4	[FB80 C8D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_324)
{
    // 48D5 0021;	
    // (䣕) CJK UNIFIED IDEOGRAPH-48D5	[FB80 C8D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_325)
{
    // 48D5 003F;	
    // (䣕) CJK UNIFIED IDEOGRAPH-48D5	[FB80 C8D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_326)
{
    // 48D5 0061;	
    // (䣕) CJK UNIFIED IDEOGRAPH-48D5	[FB80 C8D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_327)
{
    // 48D5 0041;	
    // (䣕) CJK UNIFIED IDEOGRAPH-48D5	[FB80 C8D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_328)
{
    // 48D5 0062;	
    // (䣕) CJK UNIFIED IDEOGRAPH-48D5	[FB80 C8D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_329)
{
    // 48D6 0021;	
    // (䣖) CJK UNIFIED IDEOGRAPH-48D6	[FB80 C8D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_330)
{
    // 48D6 003F;	
    // (䣖) CJK UNIFIED IDEOGRAPH-48D6	[FB80 C8D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_331)
{
    // 48D6 0061;	
    // (䣖) CJK UNIFIED IDEOGRAPH-48D6	[FB80 C8D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_332)
{
    // 48D6 0041;	
    // (䣖) CJK UNIFIED IDEOGRAPH-48D6	[FB80 C8D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_333)
{
    // 48D6 0062;	
    // (䣖) CJK UNIFIED IDEOGRAPH-48D6	[FB80 C8D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_334)
{
    // 48D7 0021;	
    // (䣗) CJK UNIFIED IDEOGRAPH-48D7	[FB80 C8D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_335)
{
    // 48D7 003F;	
    // (䣗) CJK UNIFIED IDEOGRAPH-48D7	[FB80 C8D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_336)
{
    // 48D7 0061;	
    // (䣗) CJK UNIFIED IDEOGRAPH-48D7	[FB80 C8D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_337)
{
    // 48D7 0041;	
    // (䣗) CJK UNIFIED IDEOGRAPH-48D7	[FB80 C8D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_338)
{
    // 48D7 0062;	
    // (䣗) CJK UNIFIED IDEOGRAPH-48D7	[FB80 C8D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_339)
{
    // 48D8 0021;	
    // (䣘) CJK UNIFIED IDEOGRAPH-48D8	[FB80 C8D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_340)
{
    // 48D8 003F;	
    // (䣘) CJK UNIFIED IDEOGRAPH-48D8	[FB80 C8D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_341)
{
    // 48D8 0061;	
    // (䣘) CJK UNIFIED IDEOGRAPH-48D8	[FB80 C8D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_342)
{
    // 48D8 0041;	
    // (䣘) CJK UNIFIED IDEOGRAPH-48D8	[FB80 C8D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_343)
{
    // 48D8 0062;	
    // (䣘) CJK UNIFIED IDEOGRAPH-48D8	[FB80 C8D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_344)
{
    // 48D9 0021;	
    // (䣙) CJK UNIFIED IDEOGRAPH-48D9	[FB80 C8D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_345)
{
    // 48D9 003F;	
    // (䣙) CJK UNIFIED IDEOGRAPH-48D9	[FB80 C8D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_346)
{
    // 48D9 0061;	
    // (䣙) CJK UNIFIED IDEOGRAPH-48D9	[FB80 C8D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_347)
{
    // 48D9 0041;	
    // (䣙) CJK UNIFIED IDEOGRAPH-48D9	[FB80 C8D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_348)
{
    // 48D9 0062;	
    // (䣙) CJK UNIFIED IDEOGRAPH-48D9	[FB80 C8D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_349)
{
    // 48DA 0021;	
    // (䣚) CJK UNIFIED IDEOGRAPH-48DA	[FB80 C8DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_350)
{
    // 48DA 003F;	
    // (䣚) CJK UNIFIED IDEOGRAPH-48DA	[FB80 C8DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_351)
{
    // 48DA 0061;	
    // (䣚) CJK UNIFIED IDEOGRAPH-48DA	[FB80 C8DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_352)
{
    // 48DA 0041;	
    // (䣚) CJK UNIFIED IDEOGRAPH-48DA	[FB80 C8DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_353)
{
    // 48DA 0062;	
    // (䣚) CJK UNIFIED IDEOGRAPH-48DA	[FB80 C8DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_354)
{
    // 48DB 0021;	
    // (䣛) CJK UNIFIED IDEOGRAPH-48DB	[FB80 C8DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_355)
{
    // 48DB 003F;	
    // (䣛) CJK UNIFIED IDEOGRAPH-48DB	[FB80 C8DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_356)
{
    // 48DB 0061;	
    // (䣛) CJK UNIFIED IDEOGRAPH-48DB	[FB80 C8DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_357)
{
    // 48DB 0041;	
    // (䣛) CJK UNIFIED IDEOGRAPH-48DB	[FB80 C8DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_358)
{
    // 48DB 0062;	
    // (䣛) CJK UNIFIED IDEOGRAPH-48DB	[FB80 C8DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_359)
{
    // 48DC 0021;	
    // (䣜) CJK UNIFIED IDEOGRAPH-48DC	[FB80 C8DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_360)
{
    // 48DC 003F;	
    // (䣜) CJK UNIFIED IDEOGRAPH-48DC	[FB80 C8DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_361)
{
    // 48DC 0061;	
    // (䣜) CJK UNIFIED IDEOGRAPH-48DC	[FB80 C8DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_362)
{
    // 48DC 0041;	
    // (䣜) CJK UNIFIED IDEOGRAPH-48DC	[FB80 C8DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_363)
{
    // 48DC 0062;	
    // (䣜) CJK UNIFIED IDEOGRAPH-48DC	[FB80 C8DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_364)
{
    // 48DD 0021;	
    // (䣝) CJK UNIFIED IDEOGRAPH-48DD	[FB80 C8DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_365)
{
    // 48DD 003F;	
    // (䣝) CJK UNIFIED IDEOGRAPH-48DD	[FB80 C8DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_366)
{
    // 48DD 0061;	
    // (䣝) CJK UNIFIED IDEOGRAPH-48DD	[FB80 C8DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_367)
{
    // 48DD 0041;	
    // (䣝) CJK UNIFIED IDEOGRAPH-48DD	[FB80 C8DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_368)
{
    // 48DD 0062;	
    // (䣝) CJK UNIFIED IDEOGRAPH-48DD	[FB80 C8DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_369)
{
    // 48DE 0021;	
    // (䣞) CJK UNIFIED IDEOGRAPH-48DE	[FB80 C8DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_370)
{
    // 48DE 003F;	
    // (䣞) CJK UNIFIED IDEOGRAPH-48DE	[FB80 C8DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_371)
{
    // 48DE 0061;	
    // (䣞) CJK UNIFIED IDEOGRAPH-48DE	[FB80 C8DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_372)
{
    // 48DE 0041;	
    // (䣞) CJK UNIFIED IDEOGRAPH-48DE	[FB80 C8DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_373)
{
    // 48DE 0062;	
    // (䣞) CJK UNIFIED IDEOGRAPH-48DE	[FB80 C8DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_374)
{
    // 48DF 0021;	
    // (䣟) CJK UNIFIED IDEOGRAPH-48DF	[FB80 C8DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_375)
{
    // 48DF 003F;	
    // (䣟) CJK UNIFIED IDEOGRAPH-48DF	[FB80 C8DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_376)
{
    // 48DF 0061;	
    // (䣟) CJK UNIFIED IDEOGRAPH-48DF	[FB80 C8DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_377)
{
    // 48DF 0041;	
    // (䣟) CJK UNIFIED IDEOGRAPH-48DF	[FB80 C8DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_378)
{
    // 48DF 0062;	
    // (䣟) CJK UNIFIED IDEOGRAPH-48DF	[FB80 C8DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_379)
{
    // 48E0 0021;	
    // (䣠) CJK UNIFIED IDEOGRAPH-48E0	[FB80 C8E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_380)
{
    // 48E0 003F;	
    // (䣠) CJK UNIFIED IDEOGRAPH-48E0	[FB80 C8E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_381)
{
    // 48E0 0061;	
    // (䣠) CJK UNIFIED IDEOGRAPH-48E0	[FB80 C8E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_382)
{
    // 48E0 0041;	
    // (䣠) CJK UNIFIED IDEOGRAPH-48E0	[FB80 C8E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_383)
{
    // 48E0 0062;	
    // (䣠) CJK UNIFIED IDEOGRAPH-48E0	[FB80 C8E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_384)
{
    // 48E1 0021;	
    // (䣡) CJK UNIFIED IDEOGRAPH-48E1	[FB80 C8E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_385)
{
    // 48E1 003F;	
    // (䣡) CJK UNIFIED IDEOGRAPH-48E1	[FB80 C8E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_386)
{
    // 48E1 0061;	
    // (䣡) CJK UNIFIED IDEOGRAPH-48E1	[FB80 C8E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_387)
{
    // 48E1 0041;	
    // (䣡) CJK UNIFIED IDEOGRAPH-48E1	[FB80 C8E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_388)
{
    // 48E1 0062;	
    // (䣡) CJK UNIFIED IDEOGRAPH-48E1	[FB80 C8E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_389)
{
    // 48E2 0021;	
    // (䣢) CJK UNIFIED IDEOGRAPH-48E2	[FB80 C8E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_390)
{
    // 48E2 003F;	
    // (䣢) CJK UNIFIED IDEOGRAPH-48E2	[FB80 C8E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_391)
{
    // 48E2 0061;	
    // (䣢) CJK UNIFIED IDEOGRAPH-48E2	[FB80 C8E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_392)
{
    // 48E2 0041;	
    // (䣢) CJK UNIFIED IDEOGRAPH-48E2	[FB80 C8E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_393)
{
    // 48E2 0062;	
    // (䣢) CJK UNIFIED IDEOGRAPH-48E2	[FB80 C8E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_394)
{
    // 48E3 0021;	
    // (䣣) CJK UNIFIED IDEOGRAPH-48E3	[FB80 C8E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_395)
{
    // 48E3 003F;	
    // (䣣) CJK UNIFIED IDEOGRAPH-48E3	[FB80 C8E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_396)
{
    // 48E3 0061;	
    // (䣣) CJK UNIFIED IDEOGRAPH-48E3	[FB80 C8E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_397)
{
    // 48E3 0041;	
    // (䣣) CJK UNIFIED IDEOGRAPH-48E3	[FB80 C8E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_398)
{
    // 48E3 0062;	
    // (䣣) CJK UNIFIED IDEOGRAPH-48E3	[FB80 C8E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_399)
{
    // 48E4 0021;	
    // (䣤) CJK UNIFIED IDEOGRAPH-48E4	[FB80 C8E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_400)
{
    // 48E4 003F;	
    // (䣤) CJK UNIFIED IDEOGRAPH-48E4	[FB80 C8E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_401)
{
    // 48E4 0061;	
    // (䣤) CJK UNIFIED IDEOGRAPH-48E4	[FB80 C8E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_402)
{
    // 48E4 0041;	
    // (䣤) CJK UNIFIED IDEOGRAPH-48E4	[FB80 C8E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_403)
{
    // 48E4 0062;	
    // (䣤) CJK UNIFIED IDEOGRAPH-48E4	[FB80 C8E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_404)
{
    // 48E5 0021;	
    // (䣥) CJK UNIFIED IDEOGRAPH-48E5	[FB80 C8E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_405)
{
    // 48E5 003F;	
    // (䣥) CJK UNIFIED IDEOGRAPH-48E5	[FB80 C8E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_406)
{
    // 48E5 0061;	
    // (䣥) CJK UNIFIED IDEOGRAPH-48E5	[FB80 C8E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_407)
{
    // 48E5 0041;	
    // (䣥) CJK UNIFIED IDEOGRAPH-48E5	[FB80 C8E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_408)
{
    // 48E5 0062;	
    // (䣥) CJK UNIFIED IDEOGRAPH-48E5	[FB80 C8E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_409)
{
    // 48E6 0021;	
    // (䣦) CJK UNIFIED IDEOGRAPH-48E6	[FB80 C8E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_410)
{
    // 48E6 003F;	
    // (䣦) CJK UNIFIED IDEOGRAPH-48E6	[FB80 C8E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_411)
{
    // 48E6 0061;	
    // (䣦) CJK UNIFIED IDEOGRAPH-48E6	[FB80 C8E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_412)
{
    // 48E6 0041;	
    // (䣦) CJK UNIFIED IDEOGRAPH-48E6	[FB80 C8E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_413)
{
    // 48E6 0062;	
    // (䣦) CJK UNIFIED IDEOGRAPH-48E6	[FB80 C8E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_414)
{
    // 48E7 0021;	
    // (䣧) CJK UNIFIED IDEOGRAPH-48E7	[FB80 C8E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_415)
{
    // 48E7 003F;	
    // (䣧) CJK UNIFIED IDEOGRAPH-48E7	[FB80 C8E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_416)
{
    // 48E7 0061;	
    // (䣧) CJK UNIFIED IDEOGRAPH-48E7	[FB80 C8E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_417)
{
    // 48E7 0041;	
    // (䣧) CJK UNIFIED IDEOGRAPH-48E7	[FB80 C8E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_418)
{
    // 48E7 0062;	
    // (䣧) CJK UNIFIED IDEOGRAPH-48E7	[FB80 C8E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_419)
{
    // 48E8 0021;	
    // (䣨) CJK UNIFIED IDEOGRAPH-48E8	[FB80 C8E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_420)
{
    // 48E8 003F;	
    // (䣨) CJK UNIFIED IDEOGRAPH-48E8	[FB80 C8E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_421)
{
    // 48E8 0061;	
    // (䣨) CJK UNIFIED IDEOGRAPH-48E8	[FB80 C8E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_422)
{
    // 48E8 0041;	
    // (䣨) CJK UNIFIED IDEOGRAPH-48E8	[FB80 C8E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_423)
{
    // 48E8 0062;	
    // (䣨) CJK UNIFIED IDEOGRAPH-48E8	[FB80 C8E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_424)
{
    // 48E9 0021;	
    // (䣩) CJK UNIFIED IDEOGRAPH-48E9	[FB80 C8E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_425)
{
    // 48E9 003F;	
    // (䣩) CJK UNIFIED IDEOGRAPH-48E9	[FB80 C8E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_426)
{
    // 48E9 0061;	
    // (䣩) CJK UNIFIED IDEOGRAPH-48E9	[FB80 C8E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_427)
{
    // 48E9 0041;	
    // (䣩) CJK UNIFIED IDEOGRAPH-48E9	[FB80 C8E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_428)
{
    // 48E9 0062;	
    // (䣩) CJK UNIFIED IDEOGRAPH-48E9	[FB80 C8E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_429)
{
    // 48EA 0021;	
    // (䣪) CJK UNIFIED IDEOGRAPH-48EA	[FB80 C8EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_430)
{
    // 48EA 003F;	
    // (䣪) CJK UNIFIED IDEOGRAPH-48EA	[FB80 C8EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_431)
{
    // 48EA 0061;	
    // (䣪) CJK UNIFIED IDEOGRAPH-48EA	[FB80 C8EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_432)
{
    // 48EA 0041;	
    // (䣪) CJK UNIFIED IDEOGRAPH-48EA	[FB80 C8EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_433)
{
    // 48EA 0062;	
    // (䣪) CJK UNIFIED IDEOGRAPH-48EA	[FB80 C8EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_434)
{
    // 48EB 0021;	
    // (䣫) CJK UNIFIED IDEOGRAPH-48EB	[FB80 C8EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_435)
{
    // 48EB 003F;	
    // (䣫) CJK UNIFIED IDEOGRAPH-48EB	[FB80 C8EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_436)
{
    // 48EB 0061;	
    // (䣫) CJK UNIFIED IDEOGRAPH-48EB	[FB80 C8EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_437)
{
    // 48EB 0041;	
    // (䣫) CJK UNIFIED IDEOGRAPH-48EB	[FB80 C8EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_438)
{
    // 48EB 0062;	
    // (䣫) CJK UNIFIED IDEOGRAPH-48EB	[FB80 C8EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_439)
{
    // 48EC 0021;	
    // (䣬) CJK UNIFIED IDEOGRAPH-48EC	[FB80 C8EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_440)
{
    // 48EC 003F;	
    // (䣬) CJK UNIFIED IDEOGRAPH-48EC	[FB80 C8EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_441)
{
    // 48EC 0061;	
    // (䣬) CJK UNIFIED IDEOGRAPH-48EC	[FB80 C8EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_442)
{
    // 48EC 0041;	
    // (䣬) CJK UNIFIED IDEOGRAPH-48EC	[FB80 C8EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_443)
{
    // 48EC 0062;	
    // (䣬) CJK UNIFIED IDEOGRAPH-48EC	[FB80 C8EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_444)
{
    // 48ED 0021;	
    // (䣭) CJK UNIFIED IDEOGRAPH-48ED	[FB80 C8ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_445)
{
    // 48ED 003F;	
    // (䣭) CJK UNIFIED IDEOGRAPH-48ED	[FB80 C8ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_446)
{
    // 48ED 0061;	
    // (䣭) CJK UNIFIED IDEOGRAPH-48ED	[FB80 C8ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_447)
{
    // 48ED 0041;	
    // (䣭) CJK UNIFIED IDEOGRAPH-48ED	[FB80 C8ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_448)
{
    // 48ED 0062;	
    // (䣭) CJK UNIFIED IDEOGRAPH-48ED	[FB80 C8ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_449)
{
    // 48EE 0021;	
    // (䣮) CJK UNIFIED IDEOGRAPH-48EE	[FB80 C8EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_450)
{
    // 48EE 003F;	
    // (䣮) CJK UNIFIED IDEOGRAPH-48EE	[FB80 C8EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_451)
{
    // 48EE 0061;	
    // (䣮) CJK UNIFIED IDEOGRAPH-48EE	[FB80 C8EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_452)
{
    // 48EE 0041;	
    // (䣮) CJK UNIFIED IDEOGRAPH-48EE	[FB80 C8EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_453)
{
    // 48EE 0062;	
    // (䣮) CJK UNIFIED IDEOGRAPH-48EE	[FB80 C8EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_454)
{
    // 48EF 0021;	
    // (䣯) CJK UNIFIED IDEOGRAPH-48EF	[FB80 C8EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_455)
{
    // 48EF 003F;	
    // (䣯) CJK UNIFIED IDEOGRAPH-48EF	[FB80 C8EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_456)
{
    // 48EF 0061;	
    // (䣯) CJK UNIFIED IDEOGRAPH-48EF	[FB80 C8EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_457)
{
    // 48EF 0041;	
    // (䣯) CJK UNIFIED IDEOGRAPH-48EF	[FB80 C8EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_458)
{
    // 48EF 0062;	
    // (䣯) CJK UNIFIED IDEOGRAPH-48EF	[FB80 C8EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_459)
{
    // 48F0 0021;	
    // (䣰) CJK UNIFIED IDEOGRAPH-48F0	[FB80 C8F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_460)
{
    // 48F0 003F;	
    // (䣰) CJK UNIFIED IDEOGRAPH-48F0	[FB80 C8F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_461)
{
    // 48F0 0061;	
    // (䣰) CJK UNIFIED IDEOGRAPH-48F0	[FB80 C8F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_462)
{
    // 48F0 0041;	
    // (䣰) CJK UNIFIED IDEOGRAPH-48F0	[FB80 C8F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_463)
{
    // 48F0 0062;	
    // (䣰) CJK UNIFIED IDEOGRAPH-48F0	[FB80 C8F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_464)
{
    // 48F1 0021;	
    // (䣱) CJK UNIFIED IDEOGRAPH-48F1	[FB80 C8F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_465)
{
    // 48F1 003F;	
    // (䣱) CJK UNIFIED IDEOGRAPH-48F1	[FB80 C8F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_466)
{
    // 48F1 0061;	
    // (䣱) CJK UNIFIED IDEOGRAPH-48F1	[FB80 C8F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_467)
{
    // 48F1 0041;	
    // (䣱) CJK UNIFIED IDEOGRAPH-48F1	[FB80 C8F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_468)
{
    // 48F1 0062;	
    // (䣱) CJK UNIFIED IDEOGRAPH-48F1	[FB80 C8F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_469)
{
    // 48F2 0021;	
    // (䣲) CJK UNIFIED IDEOGRAPH-48F2	[FB80 C8F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_470)
{
    // 48F2 003F;	
    // (䣲) CJK UNIFIED IDEOGRAPH-48F2	[FB80 C8F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_471)
{
    // 48F2 0061;	
    // (䣲) CJK UNIFIED IDEOGRAPH-48F2	[FB80 C8F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_472)
{
    // 48F2 0041;	
    // (䣲) CJK UNIFIED IDEOGRAPH-48F2	[FB80 C8F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_473)
{
    // 48F2 0062;	
    // (䣲) CJK UNIFIED IDEOGRAPH-48F2	[FB80 C8F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_474)
{
    // 48F3 0021;	
    // (䣳) CJK UNIFIED IDEOGRAPH-48F3	[FB80 C8F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_475)
{
    // 48F3 003F;	
    // (䣳) CJK UNIFIED IDEOGRAPH-48F3	[FB80 C8F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_476)
{
    // 48F3 0061;	
    // (䣳) CJK UNIFIED IDEOGRAPH-48F3	[FB80 C8F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_477)
{
    // 48F3 0041;	
    // (䣳) CJK UNIFIED IDEOGRAPH-48F3	[FB80 C8F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_478)
{
    // 48F3 0062;	
    // (䣳) CJK UNIFIED IDEOGRAPH-48F3	[FB80 C8F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_479)
{
    // 48F4 0021;	
    // (䣴) CJK UNIFIED IDEOGRAPH-48F4	[FB80 C8F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_480)
{
    // 48F4 003F;	
    // (䣴) CJK UNIFIED IDEOGRAPH-48F4	[FB80 C8F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_481)
{
    // 48F4 0061;	
    // (䣴) CJK UNIFIED IDEOGRAPH-48F4	[FB80 C8F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_482)
{
    // 48F4 0041;	
    // (䣴) CJK UNIFIED IDEOGRAPH-48F4	[FB80 C8F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_483)
{
    // 48F4 0062;	
    // (䣴) CJK UNIFIED IDEOGRAPH-48F4	[FB80 C8F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_484)
{
    // 48F5 0021;	
    // (䣵) CJK UNIFIED IDEOGRAPH-48F5	[FB80 C8F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_485)
{
    // 48F5 003F;	
    // (䣵) CJK UNIFIED IDEOGRAPH-48F5	[FB80 C8F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_486)
{
    // 48F5 0061;	
    // (䣵) CJK UNIFIED IDEOGRAPH-48F5	[FB80 C8F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_487)
{
    // 48F5 0041;	
    // (䣵) CJK UNIFIED IDEOGRAPH-48F5	[FB80 C8F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_488)
{
    // 48F5 0062;	
    // (䣵) CJK UNIFIED IDEOGRAPH-48F5	[FB80 C8F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_489)
{
    // 48F6 0021;	
    // (䣶) CJK UNIFIED IDEOGRAPH-48F6	[FB80 C8F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_490)
{
    // 48F6 003F;	
    // (䣶) CJK UNIFIED IDEOGRAPH-48F6	[FB80 C8F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_491)
{
    // 48F6 0061;	
    // (䣶) CJK UNIFIED IDEOGRAPH-48F6	[FB80 C8F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_492)
{
    // 48F6 0041;	
    // (䣶) CJK UNIFIED IDEOGRAPH-48F6	[FB80 C8F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_493)
{
    // 48F6 0062;	
    // (䣶) CJK UNIFIED IDEOGRAPH-48F6	[FB80 C8F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_494)
{
    // 48F7 0021;	
    // (䣷) CJK UNIFIED IDEOGRAPH-48F7	[FB80 C8F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_495)
{
    // 48F7 003F;	
    // (䣷) CJK UNIFIED IDEOGRAPH-48F7	[FB80 C8F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_496)
{
    // 48F7 0061;	
    // (䣷) CJK UNIFIED IDEOGRAPH-48F7	[FB80 C8F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_497)
{
    // 48F7 0041;	
    // (䣷) CJK UNIFIED IDEOGRAPH-48F7	[FB80 C8F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_498)
{
    // 48F7 0062;	
    // (䣷) CJK UNIFIED IDEOGRAPH-48F7	[FB80 C8F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_380_499)
{
    // 48F8 0021;	
    // (䣸) CJK UNIFIED IDEOGRAPH-48F8	[FB80 C8F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

