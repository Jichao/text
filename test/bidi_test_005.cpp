// Warning! This file is autogenerated.
#include <boost/text/bidirectional.hpp>

#include "bidi_tests.hpp"

#include <gtest/gtest.h>

#include <algorithm>


std::vector<int> expected_levels;

TEST(bidi, bidi_005_000)
{
}

TEST(bidi, bidi_005_001)
{
}

TEST(bidi, bidi_005_002)
{
}

TEST(bidi, bidi_005_003)
{
}

TEST(bidi, bidi_005_004)
{
}

TEST(bidi, bidi_005_005)
{
}

TEST(bidi, bidi_005_006)
{
}

TEST(bidi, bidi_005_007)
{
}

TEST(bidi, bidi_005_008)
{
}

TEST(bidi, bidi_005_009)
{
}

TEST(bidi, bidi_005_010)
{
}

TEST(bidi, bidi_005_011)
{
}

TEST(bidi, bidi_005_012)
{
}

TEST(bidi, bidi_005_013)
{
}

TEST(bidi, bidi_005_014)
{
}

TEST(bidi, bidi_005_015)
{
}

TEST(bidi, bidi_005_016)
{
}

TEST(bidi, bidi_005_017)
{
}

TEST(bidi, bidi_005_018)
{
}

TEST(bidi, bidi_005_019)
{
}

TEST(bidi, bidi_005_020)
{
}

TEST(bidi, bidi_005_021)
{
}

TEST(bidi, bidi_005_022)
{
}

TEST(bidi, bidi_005_023)
{
}

TEST(bidi, bidi_005_024)
{
}

TEST(bidi, bidi_005_025)
{
}

TEST(bidi, bidi_005_026)
{
}

TEST(bidi, bidi_005_027)
{
}

TEST(bidi, bidi_005_028)
{
}

TEST(bidi, bidi_005_029)
{
}

TEST(bidi, bidi_005_030)
{
}

TEST(bidi, bidi_005_031)
{
}

TEST(bidi, bidi_005_032)
{
}

TEST(bidi, bidi_005_033)
{
}

TEST(bidi, bidi_005_034)
{
}

TEST(bidi, bidi_005_035)
{

    expected_levels = { 0, 0, -1 };

    {
        // L L LRE; 3 ('auto') (line 5885)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L LRE; 3 ('LTR') (line 5885)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L LRO; 3 ('auto') (line 5886)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L LRO; 3 ('LTR') (line 5886)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L RLE; 3 ('auto') (line 5887)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L RLE; 3 ('LTR') (line 5887)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L RLO; 3 ('auto') (line 5888)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L RLO; 3 ('LTR') (line 5888)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L PDF; 3 ('auto') (line 5889)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L PDF; 3 ('LTR') (line 5889)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L BN; 3 ('auto') (line 5890)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L BN; 3 ('LTR') (line 5890)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN LRE; 3 ('auto') (line 5891)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN LRE; 3 ('LTR') (line 5891)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN LRO; 3 ('auto') (line 5892)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN LRO; 3 ('LTR') (line 5892)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN RLE; 3 ('auto') (line 5893)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN RLE; 3 ('LTR') (line 5893)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN RLO; 3 ('auto') (line 5894)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN RLO; 3 ('LTR') (line 5894)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN PDF; 3 ('auto') (line 5895)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN PDF; 3 ('LTR') (line 5895)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN BN; 3 ('auto') (line 5896)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L EN BN; 3 ('LTR') (line 5896)
        std::vector<uint32_t> const cps = { 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES LRE; 3 ('auto') (line 5897)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES LRE; 3 ('LTR') (line 5897)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES LRO; 3 ('auto') (line 5898)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES LRO; 3 ('LTR') (line 5898)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES RLE; 3 ('auto') (line 5899)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES RLE; 3 ('LTR') (line 5899)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES RLO; 3 ('auto') (line 5900)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES RLO; 3 ('LTR') (line 5900)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES PDF; 3 ('auto') (line 5901)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES PDF; 3 ('LTR') (line 5901)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES BN; 3 ('auto') (line 5902)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ES BN; 3 ('LTR') (line 5902)
        std::vector<uint32_t> const cps = { 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET LRE; 3 ('auto') (line 5903)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET LRE; 3 ('LTR') (line 5903)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET LRO; 3 ('auto') (line 5904)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET LRO; 3 ('LTR') (line 5904)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET RLE; 3 ('auto') (line 5905)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET RLE; 3 ('LTR') (line 5905)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_005_036)
{

    expected_levels = { 0, 0, -1 };

    {
        // L ET RLO; 3 ('auto') (line 5906)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET RLO; 3 ('LTR') (line 5906)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET PDF; 3 ('auto') (line 5907)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET PDF; 3 ('LTR') (line 5907)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET BN; 3 ('auto') (line 5908)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ET BN; 3 ('LTR') (line 5908)
        std::vector<uint32_t> const cps = { 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS LRE; 3 ('auto') (line 5909)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS LRE; 3 ('LTR') (line 5909)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS LRO; 3 ('auto') (line 5910)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS LRO; 3 ('LTR') (line 5910)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS RLE; 3 ('auto') (line 5911)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS RLE; 3 ('LTR') (line 5911)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS RLO; 3 ('auto') (line 5912)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS RLO; 3 ('LTR') (line 5912)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS PDF; 3 ('auto') (line 5913)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS PDF; 3 ('LTR') (line 5913)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS BN; 3 ('auto') (line 5914)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L CS BN; 3 ('LTR') (line 5914)
        std::vector<uint32_t> const cps = { 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM LRE; 3 ('auto') (line 5915)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM LRE; 3 ('LTR') (line 5915)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM LRO; 3 ('auto') (line 5916)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM LRO; 3 ('LTR') (line 5916)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM RLE; 3 ('auto') (line 5917)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM RLE; 3 ('LTR') (line 5917)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM RLO; 3 ('auto') (line 5918)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM RLO; 3 ('LTR') (line 5918)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM PDF; 3 ('auto') (line 5919)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM PDF; 3 ('LTR') (line 5919)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM BN; 3 ('auto') (line 5920)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L NSM BN; 3 ('LTR') (line 5920)
        std::vector<uint32_t> const cps = { 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S LRE; 3 ('auto') (line 5921)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S LRE; 3 ('LTR') (line 5921)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S LRO; 3 ('auto') (line 5922)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S LRO; 3 ('LTR') (line 5922)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S RLE; 3 ('auto') (line 5923)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S RLE; 3 ('LTR') (line 5923)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S RLO; 3 ('auto') (line 5924)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S RLO; 3 ('LTR') (line 5924)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S PDF; 3 ('auto') (line 5925)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S PDF; 3 ('LTR') (line 5925)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S BN; 3 ('auto') (line 5926)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L S BN; 3 ('LTR') (line 5926)
        std::vector<uint32_t> const cps = { 0x0041, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS LRE; 3 ('auto') (line 5927)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS LRE; 3 ('LTR') (line 5927)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS LRO; 3 ('auto') (line 5928)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS LRO; 3 ('LTR') (line 5928)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS RLE; 3 ('auto') (line 5929)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS RLE; 3 ('LTR') (line 5929)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS RLO; 3 ('auto') (line 5930)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS RLO; 3 ('LTR') (line 5930)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_005_037)
{

    expected_levels = { 0, 0, -1 };

    {
        // L WS PDF; 3 ('auto') (line 5931)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS PDF; 3 ('LTR') (line 5931)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS BN; 3 ('auto') (line 5932)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS BN; 3 ('LTR') (line 5932)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON LRE; 3 ('auto') (line 5933)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON LRE; 3 ('LTR') (line 5933)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON LRO; 3 ('auto') (line 5934)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON LRO; 3 ('LTR') (line 5934)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON RLE; 3 ('auto') (line 5935)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON RLE; 3 ('LTR') (line 5935)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON RLO; 3 ('auto') (line 5936)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON RLO; 3 ('LTR') (line 5936)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON PDF; 3 ('auto') (line 5937)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON PDF; 3 ('LTR') (line 5937)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON BN; 3 ('auto') (line 5938)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON BN; 3 ('LTR') (line 5938)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI LRE; 3 ('auto') (line 5939)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI LRE; 3 ('LTR') (line 5939)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI LRO; 3 ('auto') (line 5940)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI LRO; 3 ('LTR') (line 5940)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI RLE; 3 ('auto') (line 5941)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI RLE; 3 ('LTR') (line 5941)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI RLO; 3 ('auto') (line 5942)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI RLO; 3 ('LTR') (line 5942)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI PDF; 3 ('auto') (line 5943)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI PDF; 3 ('LTR') (line 5943)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI BN; 3 ('auto') (line 5944)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRI BN; 3 ('LTR') (line 5944)
        std::vector<uint32_t> const cps = { 0x0041, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI LRE; 3 ('auto') (line 5945)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI LRE; 3 ('LTR') (line 5945)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI LRO; 3 ('auto') (line 5946)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI LRO; 3 ('LTR') (line 5946)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI RLE; 3 ('auto') (line 5947)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI RLE; 3 ('LTR') (line 5947)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI RLO; 3 ('auto') (line 5948)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI RLO; 3 ('LTR') (line 5948)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI PDF; 3 ('auto') (line 5949)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI PDF; 3 ('LTR') (line 5949)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI BN; 3 ('auto') (line 5950)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLI BN; 3 ('LTR') (line 5950)
        std::vector<uint32_t> const cps = { 0x0041, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI LRE; 3 ('auto') (line 5951)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI LRE; 3 ('LTR') (line 5951)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI LRO; 3 ('auto') (line 5952)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI LRO; 3 ('LTR') (line 5952)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI RLE; 3 ('auto') (line 5953)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI RLE; 3 ('LTR') (line 5953)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI RLO; 3 ('auto') (line 5954)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI RLO; 3 ('LTR') (line 5954)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI PDF; 3 ('auto') (line 5955)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI PDF; 3 ('LTR') (line 5955)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_005_038)
{

    expected_levels = { 0, 0, -1 };

    {
        // L FSI BN; 3 ('auto') (line 5956)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI BN; 3 ('LTR') (line 5956)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI LRE; 3 ('auto') (line 5957)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI LRE; 3 ('LTR') (line 5957)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI LRO; 3 ('auto') (line 5958)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI LRO; 3 ('LTR') (line 5958)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI RLE; 3 ('auto') (line 5959)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI RLE; 3 ('LTR') (line 5959)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI RLO; 3 ('auto') (line 5960)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI RLO; 3 ('LTR') (line 5960)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI PDF; 3 ('auto') (line 5961)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI PDF; 3 ('LTR') (line 5961)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI BN; 3 ('auto') (line 5962)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDI BN; 3 ('LTR') (line 5962)
        std::vector<uint32_t> const cps = { 0x0041, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L LRE; 3 ('auto') (line 5963)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L LRE; 3 ('LTR') (line 5963)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L LRO; 3 ('auto') (line 5964)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L LRO; 3 ('LTR') (line 5964)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L RLE; 3 ('auto') (line 5965)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L RLE; 3 ('LTR') (line 5965)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L RLO; 3 ('auto') (line 5966)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L RLO; 3 ('LTR') (line 5966)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L PDF; 3 ('auto') (line 5967)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L PDF; 3 ('LTR') (line 5967)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L BN; 3 ('auto') (line 5968)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN L BN; 3 ('LTR') (line 5968)
        std::vector<uint32_t> const cps = { 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN LRE; 3 ('auto') (line 5969)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN LRE; 3 ('LTR') (line 5969)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN LRO; 3 ('auto') (line 5970)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN LRO; 3 ('LTR') (line 5970)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN RLE; 3 ('auto') (line 5971)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN RLE; 3 ('LTR') (line 5971)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN RLO; 3 ('auto') (line 5972)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN RLO; 3 ('LTR') (line 5972)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN PDF; 3 ('auto') (line 5973)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN PDF; 3 ('LTR') (line 5973)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN BN; 3 ('auto') (line 5974)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN EN BN; 3 ('LTR') (line 5974)
        std::vector<uint32_t> const cps = { 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES LRE; 3 ('auto') (line 5975)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES LRE; 3 ('LTR') (line 5975)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES LRO; 3 ('auto') (line 5976)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES LRO; 3 ('LTR') (line 5976)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES RLE; 3 ('auto') (line 5977)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES RLE; 3 ('LTR') (line 5977)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES RLO; 3 ('auto') (line 5978)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES RLO; 3 ('LTR') (line 5978)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES PDF; 3 ('auto') (line 5979)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES PDF; 3 ('LTR') (line 5979)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES BN; 3 ('auto') (line 5980)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES BN; 3 ('LTR') (line 5980)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_005_039)
{

    expected_levels = { 0, 0, -1 };

    {
        // EN ET LRE; 3 ('auto') (line 5981)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET LRE; 3 ('LTR') (line 5981)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET LRO; 3 ('auto') (line 5982)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET LRO; 3 ('LTR') (line 5982)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET RLE; 3 ('auto') (line 5983)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET RLE; 3 ('LTR') (line 5983)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET RLO; 3 ('auto') (line 5984)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET RLO; 3 ('LTR') (line 5984)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET PDF; 3 ('auto') (line 5985)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET PDF; 3 ('LTR') (line 5985)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET BN; 3 ('auto') (line 5986)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ET BN; 3 ('LTR') (line 5986)
        std::vector<uint32_t> const cps = { 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS LRE; 3 ('auto') (line 5987)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS LRE; 3 ('LTR') (line 5987)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS LRO; 3 ('auto') (line 5988)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS LRO; 3 ('LTR') (line 5988)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS RLE; 3 ('auto') (line 5989)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS RLE; 3 ('LTR') (line 5989)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS RLO; 3 ('auto') (line 5990)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS RLO; 3 ('LTR') (line 5990)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS PDF; 3 ('auto') (line 5991)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS PDF; 3 ('LTR') (line 5991)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS BN; 3 ('auto') (line 5992)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN CS BN; 3 ('LTR') (line 5992)
        std::vector<uint32_t> const cps = { 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM LRE; 3 ('auto') (line 5993)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM LRE; 3 ('LTR') (line 5993)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM LRO; 3 ('auto') (line 5994)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM LRO; 3 ('LTR') (line 5994)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM RLE; 3 ('auto') (line 5995)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM RLE; 3 ('LTR') (line 5995)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM RLO; 3 ('auto') (line 5996)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM RLO; 3 ('LTR') (line 5996)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM PDF; 3 ('auto') (line 5997)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM PDF; 3 ('LTR') (line 5997)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM BN; 3 ('auto') (line 5998)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN NSM BN; 3 ('LTR') (line 5998)
        std::vector<uint32_t> const cps = { 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN S LRE; 3 ('auto') (line 5999)
        std::vector<uint32_t> const cps = { 0x0030, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN S LRE; 3 ('LTR') (line 5999)
        std::vector<uint32_t> const cps = { 0x0030, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN S LRO; 3 ('auto') (line 6000)
        std::vector<uint32_t> const cps = { 0x0030, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN S LRO; 3 ('LTR') (line 6000)
        std::vector<uint32_t> const cps = { 0x0030, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

}
