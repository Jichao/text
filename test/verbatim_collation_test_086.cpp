// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_086_000)
{
    uint32_t const cps[2] = { 0x1243E, 0x0021 };

    // 1243E 0021;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243E 0021;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_001)
{
    uint32_t const cps[2] = { 0x1243F, 0x0021 };

    // 1243F 0021;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243F 0021;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_002)
{
    uint32_t const cps[2] = { 0x1244C, 0x0021 };

    // 1244C 0021;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1244C 0021;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_003)
{
    uint32_t const cps[2] = { 0x12452, 0x0021 };

    // 12452 0021;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12452 0021;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_004)
{
    uint32_t const cps[2] = { 0x12453, 0x0021 };

    // 12453 0021;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12453 0021;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_005)
{
    uint32_t const cps[2] = { 0x12469, 0x0021 };

    // 12469 0021;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12469 0021;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_006)
{
    uint32_t const cps[2] = { 0x16A64, 0x0021 };

    // 16A64 0021;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16A64 0021;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_007)
{
    uint32_t const cps[2] = { 0x16B54, 0x0021 };

    // 16B54 0021;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16B54 0021;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_008)
{
    uint32_t const cps[2] = { 0x1D363, 0x0021 };

    // 1D363 0021;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D363 0021;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_009)
{
    uint32_t const cps[2] = { 0x1E8CA, 0x0021 };

    // 1E8CA 0021;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8CA 0021;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_010)
{
    uint32_t const cps[2] = { 0x1E954, 0x0021 };

    // 1E954 0021;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E954 0021;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_011)
{
    uint32_t const cps[2] = { 0xFF14, 0x0021 };

    // FF14 0021;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF14 0021;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 | 0020 | 0003 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0003, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_012)
{
    uint32_t const cps[2] = { 0x0F2D, 0x0021 };

    // 0F2D 0021;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 0261 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F2D 0021;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 | 0020 | 0004 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_013)
{
    uint32_t const cps[2] = { 0x1D7D2, 0x0021 };

    // 1D7D2 0021;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7D2 0021;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_014)
{
    uint32_t const cps[2] = { 0x1D7DC, 0x0021 };

    // 1D7DC 0021;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7DC 0021;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_015)
{
    uint32_t const cps[2] = { 0x1D7E6, 0x0021 };

    // 1D7E6 0021;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E6 0021;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_016)
{
    uint32_t const cps[2] = { 0x1D7F0, 0x0021 };

    // 1D7F0 0021;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F0 0021;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_017)
{
    uint32_t const cps[2] = { 0x1D7FA, 0x0021 };

    // 1D7FA 0021;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7FA 0021;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_018)
{
    uint32_t const cps[2] = { 0x2463, 0x0021 };

    // 2463 0021;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2463 0021;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_019)
{
    uint32_t const cps[2] = { 0x24F8, 0x0021 };

    // 24F8 0021;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24F8 0021;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_020)
{
    uint32_t const cps[2] = { 0x2779, 0x0021 };

    // 2779 0021;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2779 0021;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_021)
{
    uint32_t const cps[2] = { 0x2783, 0x0021 };

    // 2783 0021;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2783 0021;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_022)
{
    uint32_t const cps[2] = { 0x278D, 0x0021 };

    // 278D 0021;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 278D 0021;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_023)
{
    uint32_t const cps[2] = { 0x2074, 0x0021 };

    // 2074 0021;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2074 0021;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_024)
{
    uint32_t const cps[2] = { 0x2084, 0x0021 };

    // 2084 0021;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 0261 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2084 0021;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 | 0020 | 0015 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0015, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_025)
{
    uint32_t const cps[2] = { 0x0034, 0x003F };

    // 0034 003F;	
    // (4) DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0034 003F;	
    // (4) DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_026)
{
    uint32_t const cps[2] = { 0x0664, 0x003F };

    // 0664 003F;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0664 003F;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_027)
{
    uint32_t const cps[2] = { 0x06F4, 0x003F };

    // 06F4 003F;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06F4 003F;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_028)
{
    uint32_t const cps[2] = { 0x07C4, 0x003F };

    // 07C4 003F;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 07C4 003F;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_029)
{
    uint32_t const cps[2] = { 0x096A, 0x003F };

    // 096A 003F;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 096A 003F;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_030)
{
    uint32_t const cps[2] = { 0x09EA, 0x003F };

    // 09EA 003F;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 09EA 003F;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_031)
{
    uint32_t const cps[2] = { 0x0A6A, 0x003F };

    // 0A6A 003F;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0A6A 003F;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_032)
{
    uint32_t const cps[2] = { 0x0AEA, 0x003F };

    // 0AEA 003F;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0AEA 003F;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_033)
{
    uint32_t const cps[2] = { 0x0B6A, 0x003F };

    // 0B6A 003F;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0B6A 003F;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_034)
{
    uint32_t const cps[2] = { 0x0BEA, 0x003F };

    // 0BEA 003F;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0BEA 003F;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_035)
{
    uint32_t const cps[2] = { 0x0C6A, 0x003F };

    // 0C6A 003F;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0C6A 003F;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_036)
{
    uint32_t const cps[2] = { 0x0CEA, 0x003F };

    // 0CEA 003F;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0CEA 003F;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_037)
{
    uint32_t const cps[2] = { 0x0D6A, 0x003F };

    // 0D6A 003F;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0D6A 003F;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_038)
{
    uint32_t const cps[2] = { 0x0DEA, 0x003F };

    // 0DEA 003F;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0DEA 003F;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_039)
{
    uint32_t const cps[2] = { 0x0E54, 0x003F };

    // 0E54 003F;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E54 003F;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_040)
{
    uint32_t const cps[2] = { 0x0ED4, 0x003F };

    // 0ED4 003F;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0ED4 003F;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_041)
{
    uint32_t const cps[2] = { 0x0F24, 0x003F };

    // 0F24 003F;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F24 003F;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_042)
{
    uint32_t const cps[2] = { 0x1044, 0x003F };

    // 1044 003F;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1044 003F;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_043)
{
    uint32_t const cps[2] = { 0x1094, 0x003F };

    // 1094 003F;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1094 003F;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_044)
{
    uint32_t const cps[2] = { 0x136C, 0x003F };

    // 136C 003F;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 136C 003F;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_045)
{
    uint32_t const cps[2] = { 0x17E4, 0x003F };

    // 17E4 003F;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17E4 003F;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_046)
{
    uint32_t const cps[2] = { 0x17F4, 0x003F };

    // 17F4 003F;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17F4 003F;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_047)
{
    uint32_t const cps[2] = { 0x1814, 0x003F };

    // 1814 003F;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1814 003F;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_048)
{
    uint32_t const cps[2] = { 0x194A, 0x003F };

    // 194A 003F;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 194A 003F;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_049)
{
    uint32_t const cps[2] = { 0x19D4, 0x003F };

    // 19D4 003F;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 19D4 003F;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_050)
{
    uint32_t const cps[2] = { 0x1A84, 0x003F };

    // 1A84 003F;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A84 003F;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_051)
{
    uint32_t const cps[2] = { 0x1A94, 0x003F };

    // 1A94 003F;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A94 003F;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_052)
{
    uint32_t const cps[2] = { 0x1B54, 0x003F };

    // 1B54 003F;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B54 003F;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_053)
{
    uint32_t const cps[2] = { 0x1BB4, 0x003F };

    // 1BB4 003F;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BB4 003F;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_054)
{
    uint32_t const cps[2] = { 0x1C44, 0x003F };

    // 1C44 003F;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C44 003F;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_055)
{
    uint32_t const cps[2] = { 0x1C54, 0x003F };

    // 1C54 003F;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C54 003F;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_056)
{
    uint32_t const cps[2] = { 0x3024, 0x003F };

    // 3024 003F;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3024 003F;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_057)
{
    uint32_t const cps[2] = { 0xA624, 0x003F };

    // A624 003F;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A624 003F;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_058)
{
    uint32_t const cps[2] = { 0xA8D4, 0x003F };

    // A8D4 003F;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8D4 003F;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_059)
{
    uint32_t const cps[2] = { 0xA904, 0x003F };

    // A904 003F;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A904 003F;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_060)
{
    uint32_t const cps[2] = { 0xA9D4, 0x003F };

    // A9D4 003F;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9D4 003F;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_061)
{
    uint32_t const cps[2] = { 0xA9F4, 0x003F };

    // A9F4 003F;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9F4 003F;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_062)
{
    uint32_t const cps[2] = { 0xAA54, 0x003F };

    // AA54 003F;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA54 003F;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_063)
{
    uint32_t const cps[2] = { 0xABF4, 0x003F };

    // ABF4 003F;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // ABF4 003F;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_064)
{
    uint32_t const cps[2] = { 0x1010A, 0x003F };

    // 1010A 003F;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1010A 003F;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_065)
{
    uint32_t const cps[2] = { 0x102E4, 0x003F };

    // 102E4 003F;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 102E4 003F;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_066)
{
    uint32_t const cps[2] = { 0x104A4, 0x003F };

    // 104A4 003F;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 104A4 003F;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_067)
{
    uint32_t const cps[2] = { 0x1087C, 0x003F };

    // 1087C 003F;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1087C 003F;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_068)
{
    uint32_t const cps[2] = { 0x108AA, 0x003F };

    // 108AA 003F;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AA 003F;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_069)
{
    uint32_t const cps[2] = { 0x108AB, 0x003F };

    // 108AB 003F;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AB 003F;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_070)
{
    uint32_t const cps[2] = { 0x109C3, 0x003F };

    // 109C3 003F;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 109C3 003F;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_071)
{
    uint32_t const cps[2] = { 0x10A43, 0x003F };

    // 10A43 003F;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10A43 003F;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_072)
{
    uint32_t const cps[2] = { 0x10B5B, 0x003F };

    // 10B5B 003F;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B5B 003F;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_073)
{
    uint32_t const cps[2] = { 0x10B7B, 0x003F };

    // 10B7B 003F;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B7B 003F;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_074)
{
    uint32_t const cps[2] = { 0x10BAC, 0x003F };

    // 10BAC 003F;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10BAC 003F;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_075)
{
    uint32_t const cps[2] = { 0x10E63, 0x003F };

    // 10E63 003F;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10E63 003F;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_076)
{
    uint32_t const cps[2] = { 0x11055, 0x003F };

    // 11055 003F;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11055 003F;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_077)
{
    uint32_t const cps[2] = { 0x1106A, 0x003F };

    // 1106A 003F;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1106A 003F;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_078)
{
    uint32_t const cps[2] = { 0x110F4, 0x003F };

    // 110F4 003F;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 110F4 003F;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_079)
{
    uint32_t const cps[2] = { 0x1113A, 0x003F };

    // 1113A 003F;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1113A 003F;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_080)
{
    uint32_t const cps[2] = { 0x111D4, 0x003F };

    // 111D4 003F;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111D4 003F;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_081)
{
    uint32_t const cps[2] = { 0x111E4, 0x003F };

    // 111E4 003F;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111E4 003F;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_082)
{
    uint32_t const cps[2] = { 0x112F4, 0x003F };

    // 112F4 003F;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 112F4 003F;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_083)
{
    uint32_t const cps[2] = { 0x11454, 0x003F };

    // 11454 003F;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11454 003F;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_084)
{
    uint32_t const cps[2] = { 0x114D4, 0x003F };

    // 114D4 003F;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 114D4 003F;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_085)
{
    uint32_t const cps[2] = { 0x11654, 0x003F };

    // 11654 003F;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11654 003F;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_086)
{
    uint32_t const cps[2] = { 0x116C4, 0x003F };

    // 116C4 003F;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 116C4 003F;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_087)
{
    uint32_t const cps[2] = { 0x11734, 0x003F };

    // 11734 003F;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11734 003F;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_088)
{
    uint32_t const cps[2] = { 0x118E4, 0x003F };

    // 118E4 003F;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 118E4 003F;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_089)
{
    uint32_t const cps[2] = { 0x11C54, 0x003F };

    // 11C54 003F;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C54 003F;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_090)
{
    uint32_t const cps[2] = { 0x11C5D, 0x003F };

    // 11C5D 003F;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C5D 003F;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_091)
{
    uint32_t const cps[2] = { 0x11D54, 0x003F };

    // 11D54 003F;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11D54 003F;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_092)
{
    uint32_t const cps[2] = { 0x12402, 0x003F };

    // 12402 003F;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12402 003F;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_093)
{
    uint32_t const cps[2] = { 0x12409, 0x003F };

    // 12409 003F;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12409 003F;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_094)
{
    uint32_t const cps[2] = { 0x1240F, 0x003F };

    // 1240F 003F;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1240F 003F;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_095)
{
    uint32_t const cps[2] = { 0x12418, 0x003F };

    // 12418 003F;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12418 003F;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_096)
{
    uint32_t const cps[2] = { 0x12421, 0x003F };

    // 12421 003F;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12421 003F;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_097)
{
    uint32_t const cps[2] = { 0x12426, 0x003F };

    // 12426 003F;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12426 003F;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_098)
{
    uint32_t const cps[2] = { 0x12430, 0x003F };

    // 12430 003F;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12430 003F;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_099)
{
    uint32_t const cps[2] = { 0x12438, 0x003F };

    // 12438 003F;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12438 003F;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_100)
{
    uint32_t const cps[2] = { 0x1243C, 0x003F };

    // 1243C 003F;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243C 003F;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_101)
{
    uint32_t const cps[2] = { 0x1243D, 0x003F };

    // 1243D 003F;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243D 003F;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_102)
{
    uint32_t const cps[2] = { 0x1243E, 0x003F };

    // 1243E 003F;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243E 003F;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_103)
{
    uint32_t const cps[2] = { 0x1243F, 0x003F };

    // 1243F 003F;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243F 003F;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_104)
{
    uint32_t const cps[2] = { 0x1244C, 0x003F };

    // 1244C 003F;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1244C 003F;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_105)
{
    uint32_t const cps[2] = { 0x12452, 0x003F };

    // 12452 003F;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12452 003F;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_106)
{
    uint32_t const cps[2] = { 0x12453, 0x003F };

    // 12453 003F;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12453 003F;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_107)
{
    uint32_t const cps[2] = { 0x12469, 0x003F };

    // 12469 003F;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12469 003F;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_108)
{
    uint32_t const cps[2] = { 0x16A64, 0x003F };

    // 16A64 003F;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16A64 003F;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_109)
{
    uint32_t const cps[2] = { 0x16B54, 0x003F };

    // 16B54 003F;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16B54 003F;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_110)
{
    uint32_t const cps[2] = { 0x1D363, 0x003F };

    // 1D363 003F;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D363 003F;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_111)
{
    uint32_t const cps[2] = { 0x1E8CA, 0x003F };

    // 1E8CA 003F;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8CA 003F;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_112)
{
    uint32_t const cps[2] = { 0x1E954, 0x003F };

    // 1E954 003F;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E954 003F;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_113)
{
    uint32_t const cps[2] = { 0xFF14, 0x003F };

    // FF14 003F;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF14 003F;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 | 0020 | 0003 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0003, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_114)
{
    uint32_t const cps[2] = { 0x0F2D, 0x003F };

    // 0F2D 003F;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 0267 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F2D 003F;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 | 0020 | 0004 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_115)
{
    uint32_t const cps[2] = { 0x1D7D2, 0x003F };

    // 1D7D2 003F;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7D2 003F;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_116)
{
    uint32_t const cps[2] = { 0x1D7DC, 0x003F };

    // 1D7DC 003F;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7DC 003F;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_117)
{
    uint32_t const cps[2] = { 0x1D7E6, 0x003F };

    // 1D7E6 003F;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E6 003F;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_118)
{
    uint32_t const cps[2] = { 0x1D7F0, 0x003F };

    // 1D7F0 003F;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F0 003F;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_119)
{
    uint32_t const cps[2] = { 0x1D7FA, 0x003F };

    // 1D7FA 003F;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7FA 003F;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_120)
{
    uint32_t const cps[2] = { 0x2463, 0x003F };

    // 2463 003F;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2463 003F;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_121)
{
    uint32_t const cps[2] = { 0x24F8, 0x003F };

    // 24F8 003F;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24F8 003F;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_122)
{
    uint32_t const cps[2] = { 0x2779, 0x003F };

    // 2779 003F;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2779 003F;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_123)
{
    uint32_t const cps[2] = { 0x2783, 0x003F };

    // 2783 003F;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2783 003F;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_124)
{
    uint32_t const cps[2] = { 0x278D, 0x003F };

    // 278D 003F;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 0267 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 278D 003F;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 | 0020 | 0006 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_125)
{
    uint32_t const cps[2] = { 0x2074, 0x003F };

    // 2074 003F;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2074 003F;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_126)
{
    uint32_t const cps[2] = { 0x2084, 0x003F };

    // 2084 003F;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 0267 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2084 003F;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 | 0020 | 0015 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0015, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_127)
{
    uint32_t const cps[2] = { 0x248B, 0x0021 };

    // 248B 0021;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 248B 0021;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 | 0020 | 0004 | FFFF 0278 0261 |]
    uint32_t const ces_shifted[9] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0278, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_128)
{
    uint32_t const cps[2] = { 0x248B, 0x003F };

    // 248B 003F;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 248B 003F;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 | 0020 | 0004 | FFFF 0278 0267 |]
    uint32_t const ces_shifted[9] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0278, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_129)
{
    uint32_t const cps[2] = { 0x248B, 0x0061 };

    // 248B 0061;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 248B 0061;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 1CAD | 0020 0020 | 0004 0002 | FFFF 0278 FFFF |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0x0278, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_130)
{
    uint32_t const cps[2] = { 0x248B, 0x0041 };

    // 248B 0041;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 248B 0041;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 1CAD | 0020 0020 | 0004 0008 | FFFF 0278 FFFF |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0xFFFF, 0x0278, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_131)
{
    uint32_t const cps[2] = { 0x248B, 0x0062 };

    // 248B 0062;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 248B 0062;	
    // (‚íã) DIGIT FOUR FULL STOP	[1CA7 1CC6 | 0020 0020 | 0004 0002 | FFFF 0278 FFFF |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0x0278, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_132)
{
    uint32_t const cps[2] = { 0x2158, 0x0021 };

    // 2158 0021;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 063C 1CA8 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CA7, 0x063C, 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2158 0021;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 1CA8 | 0020 0020 | 001E 001E | FFFF 063C FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1CA7, 0x1CA8, 0x0000, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x0000, 0xFFFF, 0x063C, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_133)
{
    uint32_t const cps[2] = { 0x2158, 0x003F };

    // 2158 003F;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 063C 1CA8 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CA7, 0x063C, 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2158 003F;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 1CA8 | 0020 0020 | 001E 001E | FFFF 063C FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1CA7, 0x1CA8, 0x0000, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x0000, 0xFFFF, 0x063C, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_134)
{
    uint32_t const cps[2] = { 0x2158, 0x0061 };

    // 2158 0061;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 063C 1CA8 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CA7, 0x063C, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2158 0061;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 1CA8 1CAD | 0020 0020 0020 | 001E 001E 0002 | FFFF 063C FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1CA7, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x0002, 0x0000, 0xFFFF, 0x063C, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_135)
{
    uint32_t const cps[2] = { 0x2158, 0x0041 };

    // 2158 0041;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 063C 1CA8 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CA7, 0x063C, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2158 0041;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 1CA8 1CAD | 0020 0020 0020 | 001E 001E 0008 | FFFF 063C FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1CA7, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x0008, 0x0000, 0xFFFF, 0x063C, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_136)
{
    uint32_t const cps[2] = { 0x2158, 0x0062 };

    // 2158 0062;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 063C 1CA8 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CA7, 0x063C, 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2158 0062;	
    // (‚Öò) VULGAR FRACTION FOUR FIFTHS	[1CA7 1CA8 1CC6 | 0020 0020 0020 | 001E 001E 0002 | FFFF 063C FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1CA7, 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x0002, 0x0000, 0xFFFF, 0x063C, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_137)
{
    uint32_t const cps[2] = { 0x324B, 0x0021 };

    // 324B 0021;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 324B 0021;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_138)
{
    uint32_t const cps[2] = { 0x32B5, 0x0021 };

    // 32B5 0021;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B5 0021;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_139)
{
    uint32_t const cps[2] = { 0x324B, 0x003F };

    // 324B 003F;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 324B 003F;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_140)
{
    uint32_t const cps[2] = { 0x32B5, 0x003F };

    // 32B5 003F;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B5 003F;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_141)
{
    uint32_t const cps[2] = { 0x324B, 0x0061 };

    // 324B 0061;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 324B 0061;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_142)
{
    uint32_t const cps[2] = { 0x32B5, 0x0061 };

    // 32B5 0061;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B5 0061;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_143)
{
    uint32_t const cps[2] = { 0x324B, 0x0041 };

    // 324B 0041;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 324B 0041;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_144)
{
    uint32_t const cps[2] = { 0x32B5, 0x0041 };

    // 32B5 0041;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B5 0041;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_145)
{
    uint32_t const cps[2] = { 0x324B, 0x0062 };

    // 324B 0062;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 324B 0062;	
    // („âã) CIRCLED NUMBER FORTY ON BLACK SQUARE	[1CA7 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_146)
{
    uint32_t const cps[2] = { 0x32B5, 0x0062 };

    // 32B5 0062;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B5 0062;	
    // („äµ) CIRCLED NUMBER FORTY	[1CA7 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_147)
{
    uint32_t const cps[2] = { 0x32B6, 0x0021 };

    // 32B6 0021;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B6 0021;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA4, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_148)
{
    uint32_t const cps[2] = { 0x32B6, 0x003F };

    // 32B6 003F;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B6 003F;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA4, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_149)
{
    uint32_t const cps[2] = { 0x32B6, 0x0061 };

    // 32B6 0061;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B6 0061;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_150)
{
    uint32_t const cps[2] = { 0x32B6, 0x0041 };

    // 32B6 0041;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B6 0041;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_151)
{
    uint32_t const cps[2] = { 0x32B6, 0x0062 };

    // 32B6 0062;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B6 0062;	
    // („ä∂) CIRCLED NUMBER FORTY ONE	[1CA7 1CA4 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_152)
{
    uint32_t const cps[2] = { 0x32B7, 0x0021 };

    // 32B7 0021;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B7 0021;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA5, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_153)
{
    uint32_t const cps[2] = { 0x32B7, 0x003F };

    // 32B7 003F;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B7 003F;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA5, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_154)
{
    uint32_t const cps[2] = { 0x32B7, 0x0061 };

    // 32B7 0061;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B7 0061;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_155)
{
    uint32_t const cps[2] = { 0x32B7, 0x0041 };

    // 32B7 0041;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B7 0041;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_156)
{
    uint32_t const cps[2] = { 0x32B7, 0x0062 };

    // 32B7 0062;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B7 0062;	
    // („ä∑) CIRCLED NUMBER FORTY TWO	[1CA7 1CA5 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_157)
{
    uint32_t const cps[2] = { 0x32B8, 0x0021 };

    // 32B8 0021;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B8 0021;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_158)
{
    uint32_t const cps[2] = { 0x32B8, 0x003F };

    // 32B8 003F;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B8 003F;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_159)
{
    uint32_t const cps[2] = { 0x32B8, 0x0061 };

    // 32B8 0061;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B8 0061;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_160)
{
    uint32_t const cps[2] = { 0x32B8, 0x0041 };

    // 32B8 0041;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B8 0041;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_161)
{
    uint32_t const cps[2] = { 0x32B8, 0x0062 };

    // 32B8 0062;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B8 0062;	
    // („ä∏) CIRCLED NUMBER FORTY THREE	[1CA7 1CA6 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_162)
{
    uint32_t const cps[2] = { 0x32B9, 0x0021 };

    // 32B9 0021;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B9 0021;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA7, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_163)
{
    uint32_t const cps[2] = { 0x32B9, 0x003F };

    // 32B9 003F;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B9 003F;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA7, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_164)
{
    uint32_t const cps[2] = { 0x32B9, 0x0061 };

    // 32B9 0061;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B9 0061;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_165)
{
    uint32_t const cps[2] = { 0x32B9, 0x0041 };

    // 32B9 0041;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B9 0041;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_166)
{
    uint32_t const cps[2] = { 0x32B9, 0x0062 };

    // 32B9 0062;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32B9 0062;	
    // („äπ) CIRCLED NUMBER FORTY FOUR	[1CA7 1CA7 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_167)
{
    uint32_t const cps[2] = { 0x32BA, 0x0021 };

    // 32BA 0021;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BA 0021;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA8, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_168)
{
    uint32_t const cps[2] = { 0x32BA, 0x003F };

    // 32BA 003F;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BA 003F;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA8, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_169)
{
    uint32_t const cps[2] = { 0x32BA, 0x0061 };

    // 32BA 0061;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BA 0061;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_170)
{
    uint32_t const cps[2] = { 0x32BA, 0x0041 };

    // 32BA 0041;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BA 0041;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_171)
{
    uint32_t const cps[2] = { 0x32BA, 0x0062 };

    // 32BA 0062;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BA 0062;	
    // („ä∫) CIRCLED NUMBER FORTY FIVE	[1CA7 1CA8 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_172)
{
    uint32_t const cps[2] = { 0x32BB, 0x0021 };

    // 32BB 0021;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BB 0021;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA9, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_173)
{
    uint32_t const cps[2] = { 0x32BB, 0x003F };

    // 32BB 003F;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BB 003F;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CA9, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_174)
{
    uint32_t const cps[2] = { 0x32BB, 0x0061 };

    // 32BB 0061;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BB 0061;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_175)
{
    uint32_t const cps[2] = { 0x32BB, 0x0041 };

    // 32BB 0041;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BB 0041;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_176)
{
    uint32_t const cps[2] = { 0x32BB, 0x0062 };

    // 32BB 0062;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BB 0062;	
    // („äª) CIRCLED NUMBER FORTY SIX	[1CA7 1CA9 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_177)
{
    uint32_t const cps[2] = { 0x32BC, 0x0021 };

    // 32BC 0021;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BC 0021;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAA, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_178)
{
    uint32_t const cps[2] = { 0x32BC, 0x003F };

    // 32BC 003F;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BC 003F;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAA, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_179)
{
    uint32_t const cps[2] = { 0x32BC, 0x0061 };

    // 32BC 0061;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BC 0061;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_180)
{
    uint32_t const cps[2] = { 0x32BC, 0x0041 };

    // 32BC 0041;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BC 0041;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_181)
{
    uint32_t const cps[2] = { 0x32BC, 0x0062 };

    // 32BC 0062;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BC 0062;	
    // („äº) CIRCLED NUMBER FORTY SEVEN	[1CA7 1CAA 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_182)
{
    uint32_t const cps[2] = { 0x32BD, 0x0021 };

    // 32BD 0021;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BD 0021;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAB, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_183)
{
    uint32_t const cps[2] = { 0x32BD, 0x003F };

    // 32BD 003F;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BD 003F;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAB, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_184)
{
    uint32_t const cps[2] = { 0x32BD, 0x0061 };

    // 32BD 0061;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BD 0061;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_185)
{
    uint32_t const cps[2] = { 0x32BD, 0x0041 };

    // 32BD 0041;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BD 0041;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_186)
{
    uint32_t const cps[2] = { 0x32BD, 0x0062 };

    // 32BD 0062;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BD 0062;	
    // („äΩ) CIRCLED NUMBER FORTY EIGHT	[1CA7 1CAB 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_187)
{
    uint32_t const cps[2] = { 0x32BE, 0x0021 };

    // 32BE 0021;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 0261 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BE 0021;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC | 0020 0020 | 0006 0006 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_188)
{
    uint32_t const cps[2] = { 0x32BE, 0x003F };

    // 32BE 003F;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 0267 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BE 003F;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC | 0020 0020 | 0006 0006 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1CAC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_189)
{
    uint32_t const cps[2] = { 0x32BE, 0x0061 };

    // 32BE 0061;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 1CAD | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BE 0061;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 1CAD | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_190)
{
    uint32_t const cps[2] = { 0x32BE, 0x0041 };

    // 32BE 0041;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 1CAD | 0020 0020 0020 | 0006 0006 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BE 0041;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 1CAD | 0020 0020 0020 | 0006 0006 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_191)
{
    uint32_t const cps[2] = { 0x32BE, 0x0062 };

    // 32BE 0062;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32BE 0062;	
    // („äæ) CIRCLED NUMBER FORTY NINE	[1CA7 1CAC 1CC6 | 0020 0020 0020 | 0006 0006 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CA7, 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_192)
{
    uint32_t const cps[2] = { 0x0034, 0x0061 };

    // 0034 0061;	
    // (4) DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0034 0061;	
    // (4) DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_193)
{
    uint32_t const cps[2] = { 0x0664, 0x0061 };

    // 0664 0061;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0664 0061;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_194)
{
    uint32_t const cps[2] = { 0x06F4, 0x0061 };

    // 06F4 0061;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06F4 0061;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_195)
{
    uint32_t const cps[2] = { 0x07C4, 0x0061 };

    // 07C4 0061;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 07C4 0061;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_196)
{
    uint32_t const cps[2] = { 0x096A, 0x0061 };

    // 096A 0061;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 096A 0061;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_197)
{
    uint32_t const cps[2] = { 0x09EA, 0x0061 };

    // 09EA 0061;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 09EA 0061;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_198)
{
    uint32_t const cps[2] = { 0x0A6A, 0x0061 };

    // 0A6A 0061;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0A6A 0061;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_199)
{
    uint32_t const cps[2] = { 0x0AEA, 0x0061 };

    // 0AEA 0061;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0AEA 0061;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_200)
{
    uint32_t const cps[2] = { 0x0B6A, 0x0061 };

    // 0B6A 0061;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0B6A 0061;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_201)
{
    uint32_t const cps[2] = { 0x0BEA, 0x0061 };

    // 0BEA 0061;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0BEA 0061;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_202)
{
    uint32_t const cps[2] = { 0x0C6A, 0x0061 };

    // 0C6A 0061;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0C6A 0061;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_203)
{
    uint32_t const cps[2] = { 0x0CEA, 0x0061 };

    // 0CEA 0061;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0CEA 0061;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_204)
{
    uint32_t const cps[2] = { 0x0D6A, 0x0061 };

    // 0D6A 0061;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0D6A 0061;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_205)
{
    uint32_t const cps[2] = { 0x0DEA, 0x0061 };

    // 0DEA 0061;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0DEA 0061;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_206)
{
    uint32_t const cps[2] = { 0x0E54, 0x0061 };

    // 0E54 0061;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E54 0061;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_207)
{
    uint32_t const cps[2] = { 0x0ED4, 0x0061 };

    // 0ED4 0061;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0ED4 0061;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_208)
{
    uint32_t const cps[2] = { 0x0F24, 0x0061 };

    // 0F24 0061;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F24 0061;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_209)
{
    uint32_t const cps[2] = { 0x1044, 0x0061 };

    // 1044 0061;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1044 0061;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_210)
{
    uint32_t const cps[2] = { 0x1094, 0x0061 };

    // 1094 0061;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1094 0061;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_211)
{
    uint32_t const cps[2] = { 0x136C, 0x0061 };

    // 136C 0061;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 136C 0061;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_212)
{
    uint32_t const cps[2] = { 0x17E4, 0x0061 };

    // 17E4 0061;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17E4 0061;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_213)
{
    uint32_t const cps[2] = { 0x17F4, 0x0061 };

    // 17F4 0061;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17F4 0061;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_214)
{
    uint32_t const cps[2] = { 0x1814, 0x0061 };

    // 1814 0061;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1814 0061;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_215)
{
    uint32_t const cps[2] = { 0x194A, 0x0061 };

    // 194A 0061;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 194A 0061;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_216)
{
    uint32_t const cps[2] = { 0x19D4, 0x0061 };

    // 19D4 0061;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 19D4 0061;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_217)
{
    uint32_t const cps[2] = { 0x1A84, 0x0061 };

    // 1A84 0061;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A84 0061;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_218)
{
    uint32_t const cps[2] = { 0x1A94, 0x0061 };

    // 1A94 0061;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A94 0061;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_219)
{
    uint32_t const cps[2] = { 0x1B54, 0x0061 };

    // 1B54 0061;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B54 0061;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_220)
{
    uint32_t const cps[2] = { 0x1BB4, 0x0061 };

    // 1BB4 0061;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BB4 0061;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_221)
{
    uint32_t const cps[2] = { 0x1C44, 0x0061 };

    // 1C44 0061;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C44 0061;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_222)
{
    uint32_t const cps[2] = { 0x1C54, 0x0061 };

    // 1C54 0061;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C54 0061;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_223)
{
    uint32_t const cps[2] = { 0x3024, 0x0061 };

    // 3024 0061;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3024 0061;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_224)
{
    uint32_t const cps[2] = { 0xA624, 0x0061 };

    // A624 0061;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A624 0061;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_225)
{
    uint32_t const cps[2] = { 0xA8D4, 0x0061 };

    // A8D4 0061;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8D4 0061;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_226)
{
    uint32_t const cps[2] = { 0xA904, 0x0061 };

    // A904 0061;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A904 0061;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_227)
{
    uint32_t const cps[2] = { 0xA9D4, 0x0061 };

    // A9D4 0061;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9D4 0061;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_228)
{
    uint32_t const cps[2] = { 0xA9F4, 0x0061 };

    // A9F4 0061;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9F4 0061;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_229)
{
    uint32_t const cps[2] = { 0xAA54, 0x0061 };

    // AA54 0061;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA54 0061;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_230)
{
    uint32_t const cps[2] = { 0xABF4, 0x0061 };

    // ABF4 0061;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // ABF4 0061;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_231)
{
    uint32_t const cps[2] = { 0x1010A, 0x0061 };

    // 1010A 0061;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1010A 0061;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_232)
{
    uint32_t const cps[2] = { 0x102E4, 0x0061 };

    // 102E4 0061;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 102E4 0061;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_233)
{
    uint32_t const cps[2] = { 0x104A4, 0x0061 };

    // 104A4 0061;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 104A4 0061;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_234)
{
    uint32_t const cps[2] = { 0x1087C, 0x0061 };

    // 1087C 0061;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1087C 0061;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_235)
{
    uint32_t const cps[2] = { 0x108AA, 0x0061 };

    // 108AA 0061;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AA 0061;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_236)
{
    uint32_t const cps[2] = { 0x108AB, 0x0061 };

    // 108AB 0061;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AB 0061;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_237)
{
    uint32_t const cps[2] = { 0x109C3, 0x0061 };

    // 109C3 0061;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 109C3 0061;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_238)
{
    uint32_t const cps[2] = { 0x10A43, 0x0061 };

    // 10A43 0061;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10A43 0061;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_239)
{
    uint32_t const cps[2] = { 0x10B5B, 0x0061 };

    // 10B5B 0061;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B5B 0061;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_240)
{
    uint32_t const cps[2] = { 0x10B7B, 0x0061 };

    // 10B7B 0061;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B7B 0061;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_241)
{
    uint32_t const cps[2] = { 0x10BAC, 0x0061 };

    // 10BAC 0061;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10BAC 0061;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_242)
{
    uint32_t const cps[2] = { 0x10E63, 0x0061 };

    // 10E63 0061;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10E63 0061;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_243)
{
    uint32_t const cps[2] = { 0x11055, 0x0061 };

    // 11055 0061;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11055 0061;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_244)
{
    uint32_t const cps[2] = { 0x1106A, 0x0061 };

    // 1106A 0061;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1106A 0061;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_245)
{
    uint32_t const cps[2] = { 0x110F4, 0x0061 };

    // 110F4 0061;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 110F4 0061;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_246)
{
    uint32_t const cps[2] = { 0x1113A, 0x0061 };

    // 1113A 0061;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1113A 0061;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_247)
{
    uint32_t const cps[2] = { 0x111D4, 0x0061 };

    // 111D4 0061;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111D4 0061;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_248)
{
    uint32_t const cps[2] = { 0x111E4, 0x0061 };

    // 111E4 0061;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111E4 0061;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_249)
{
    uint32_t const cps[2] = { 0x112F4, 0x0061 };

    // 112F4 0061;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 112F4 0061;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_250)
{
    uint32_t const cps[2] = { 0x11454, 0x0061 };

    // 11454 0061;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11454 0061;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_251)
{
    uint32_t const cps[2] = { 0x114D4, 0x0061 };

    // 114D4 0061;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 114D4 0061;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_252)
{
    uint32_t const cps[2] = { 0x11654, 0x0061 };

    // 11654 0061;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11654 0061;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_253)
{
    uint32_t const cps[2] = { 0x116C4, 0x0061 };

    // 116C4 0061;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 116C4 0061;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_254)
{
    uint32_t const cps[2] = { 0x11734, 0x0061 };

    // 11734 0061;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11734 0061;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_255)
{
    uint32_t const cps[2] = { 0x118E4, 0x0061 };

    // 118E4 0061;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 118E4 0061;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_256)
{
    uint32_t const cps[2] = { 0x11C54, 0x0061 };

    // 11C54 0061;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C54 0061;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_257)
{
    uint32_t const cps[2] = { 0x11C5D, 0x0061 };

    // 11C5D 0061;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C5D 0061;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_258)
{
    uint32_t const cps[2] = { 0x11D54, 0x0061 };

    // 11D54 0061;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11D54 0061;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_259)
{
    uint32_t const cps[2] = { 0x12402, 0x0061 };

    // 12402 0061;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12402 0061;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_260)
{
    uint32_t const cps[2] = { 0x12409, 0x0061 };

    // 12409 0061;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12409 0061;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_261)
{
    uint32_t const cps[2] = { 0x1240F, 0x0061 };

    // 1240F 0061;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1240F 0061;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_262)
{
    uint32_t const cps[2] = { 0x12418, 0x0061 };

    // 12418 0061;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12418 0061;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_263)
{
    uint32_t const cps[2] = { 0x12421, 0x0061 };

    // 12421 0061;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12421 0061;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_264)
{
    uint32_t const cps[2] = { 0x12426, 0x0061 };

    // 12426 0061;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12426 0061;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_265)
{
    uint32_t const cps[2] = { 0x12430, 0x0061 };

    // 12430 0061;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12430 0061;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_266)
{
    uint32_t const cps[2] = { 0x12438, 0x0061 };

    // 12438 0061;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12438 0061;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_267)
{
    uint32_t const cps[2] = { 0x1243C, 0x0061 };

    // 1243C 0061;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243C 0061;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_268)
{
    uint32_t const cps[2] = { 0x1243D, 0x0061 };

    // 1243D 0061;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243D 0061;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_269)
{
    uint32_t const cps[2] = { 0x1243E, 0x0061 };

    // 1243E 0061;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243E 0061;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_270)
{
    uint32_t const cps[2] = { 0x1243F, 0x0061 };

    // 1243F 0061;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243F 0061;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_271)
{
    uint32_t const cps[2] = { 0x1244C, 0x0061 };

    // 1244C 0061;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1244C 0061;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_272)
{
    uint32_t const cps[2] = { 0x12452, 0x0061 };

    // 12452 0061;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12452 0061;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_273)
{
    uint32_t const cps[2] = { 0x12453, 0x0061 };

    // 12453 0061;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12453 0061;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_274)
{
    uint32_t const cps[2] = { 0x12469, 0x0061 };

    // 12469 0061;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12469 0061;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_275)
{
    uint32_t const cps[2] = { 0x16A64, 0x0061 };

    // 16A64 0061;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16A64 0061;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_276)
{
    uint32_t const cps[2] = { 0x16B54, 0x0061 };

    // 16B54 0061;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16B54 0061;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_277)
{
    uint32_t const cps[2] = { 0x1D363, 0x0061 };

    // 1D363 0061;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D363 0061;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_278)
{
    uint32_t const cps[2] = { 0x1E8CA, 0x0061 };

    // 1E8CA 0061;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8CA 0061;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_279)
{
    uint32_t const cps[2] = { 0x1E954, 0x0061 };

    // 1E954 0061;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E954 0061;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_280)
{
    uint32_t const cps[2] = { 0x0034, 0x0041 };

    // 0034 0041;	
    // (4) DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0034 0041;	
    // (4) DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_281)
{
    uint32_t const cps[2] = { 0x0664, 0x0041 };

    // 0664 0041;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0664 0041;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_282)
{
    uint32_t const cps[2] = { 0x06F4, 0x0041 };

    // 06F4 0041;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06F4 0041;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_283)
{
    uint32_t const cps[2] = { 0x07C4, 0x0041 };

    // 07C4 0041;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 07C4 0041;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_284)
{
    uint32_t const cps[2] = { 0x096A, 0x0041 };

    // 096A 0041;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 096A 0041;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_285)
{
    uint32_t const cps[2] = { 0x09EA, 0x0041 };

    // 09EA 0041;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 09EA 0041;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_286)
{
    uint32_t const cps[2] = { 0x0A6A, 0x0041 };

    // 0A6A 0041;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0A6A 0041;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_287)
{
    uint32_t const cps[2] = { 0x0AEA, 0x0041 };

    // 0AEA 0041;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0AEA 0041;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_288)
{
    uint32_t const cps[2] = { 0x0B6A, 0x0041 };

    // 0B6A 0041;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0B6A 0041;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_289)
{
    uint32_t const cps[2] = { 0x0BEA, 0x0041 };

    // 0BEA 0041;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0BEA 0041;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_290)
{
    uint32_t const cps[2] = { 0x0C6A, 0x0041 };

    // 0C6A 0041;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0C6A 0041;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_291)
{
    uint32_t const cps[2] = { 0x0CEA, 0x0041 };

    // 0CEA 0041;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0CEA 0041;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_292)
{
    uint32_t const cps[2] = { 0x0D6A, 0x0041 };

    // 0D6A 0041;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0D6A 0041;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_293)
{
    uint32_t const cps[2] = { 0x0DEA, 0x0041 };

    // 0DEA 0041;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0DEA 0041;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_294)
{
    uint32_t const cps[2] = { 0x0E54, 0x0041 };

    // 0E54 0041;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E54 0041;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_295)
{
    uint32_t const cps[2] = { 0x0ED4, 0x0041 };

    // 0ED4 0041;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0ED4 0041;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_296)
{
    uint32_t const cps[2] = { 0x0F24, 0x0041 };

    // 0F24 0041;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F24 0041;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_297)
{
    uint32_t const cps[2] = { 0x1044, 0x0041 };

    // 1044 0041;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1044 0041;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_298)
{
    uint32_t const cps[2] = { 0x1094, 0x0041 };

    // 1094 0041;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1094 0041;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_299)
{
    uint32_t const cps[2] = { 0x136C, 0x0041 };

    // 136C 0041;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 136C 0041;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_300)
{
    uint32_t const cps[2] = { 0x17E4, 0x0041 };

    // 17E4 0041;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17E4 0041;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_301)
{
    uint32_t const cps[2] = { 0x17F4, 0x0041 };

    // 17F4 0041;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17F4 0041;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_302)
{
    uint32_t const cps[2] = { 0x1814, 0x0041 };

    // 1814 0041;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1814 0041;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_303)
{
    uint32_t const cps[2] = { 0x194A, 0x0041 };

    // 194A 0041;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 194A 0041;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_304)
{
    uint32_t const cps[2] = { 0x19D4, 0x0041 };

    // 19D4 0041;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 19D4 0041;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_305)
{
    uint32_t const cps[2] = { 0x1A84, 0x0041 };

    // 1A84 0041;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A84 0041;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_306)
{
    uint32_t const cps[2] = { 0x1A94, 0x0041 };

    // 1A94 0041;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A94 0041;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_307)
{
    uint32_t const cps[2] = { 0x1B54, 0x0041 };

    // 1B54 0041;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B54 0041;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_308)
{
    uint32_t const cps[2] = { 0x1BB4, 0x0041 };

    // 1BB4 0041;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BB4 0041;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_309)
{
    uint32_t const cps[2] = { 0x1C44, 0x0041 };

    // 1C44 0041;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C44 0041;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_310)
{
    uint32_t const cps[2] = { 0x1C54, 0x0041 };

    // 1C54 0041;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C54 0041;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_311)
{
    uint32_t const cps[2] = { 0x3024, 0x0041 };

    // 3024 0041;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3024 0041;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_312)
{
    uint32_t const cps[2] = { 0xA624, 0x0041 };

    // A624 0041;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A624 0041;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_313)
{
    uint32_t const cps[2] = { 0xA8D4, 0x0041 };

    // A8D4 0041;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8D4 0041;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_314)
{
    uint32_t const cps[2] = { 0xA904, 0x0041 };

    // A904 0041;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A904 0041;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_315)
{
    uint32_t const cps[2] = { 0xA9D4, 0x0041 };

    // A9D4 0041;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9D4 0041;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_316)
{
    uint32_t const cps[2] = { 0xA9F4, 0x0041 };

    // A9F4 0041;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9F4 0041;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_317)
{
    uint32_t const cps[2] = { 0xAA54, 0x0041 };

    // AA54 0041;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA54 0041;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_318)
{
    uint32_t const cps[2] = { 0xABF4, 0x0041 };

    // ABF4 0041;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // ABF4 0041;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_319)
{
    uint32_t const cps[2] = { 0x1010A, 0x0041 };

    // 1010A 0041;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1010A 0041;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_320)
{
    uint32_t const cps[2] = { 0x102E4, 0x0041 };

    // 102E4 0041;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 102E4 0041;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_321)
{
    uint32_t const cps[2] = { 0x104A4, 0x0041 };

    // 104A4 0041;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 104A4 0041;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_322)
{
    uint32_t const cps[2] = { 0x1087C, 0x0041 };

    // 1087C 0041;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1087C 0041;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_323)
{
    uint32_t const cps[2] = { 0x108AA, 0x0041 };

    // 108AA 0041;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AA 0041;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_324)
{
    uint32_t const cps[2] = { 0x108AB, 0x0041 };

    // 108AB 0041;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AB 0041;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_325)
{
    uint32_t const cps[2] = { 0x109C3, 0x0041 };

    // 109C3 0041;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 109C3 0041;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_326)
{
    uint32_t const cps[2] = { 0x10A43, 0x0041 };

    // 10A43 0041;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10A43 0041;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_327)
{
    uint32_t const cps[2] = { 0x10B5B, 0x0041 };

    // 10B5B 0041;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B5B 0041;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_328)
{
    uint32_t const cps[2] = { 0x10B7B, 0x0041 };

    // 10B7B 0041;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B7B 0041;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_329)
{
    uint32_t const cps[2] = { 0x10BAC, 0x0041 };

    // 10BAC 0041;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10BAC 0041;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_330)
{
    uint32_t const cps[2] = { 0x10E63, 0x0041 };

    // 10E63 0041;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10E63 0041;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_331)
{
    uint32_t const cps[2] = { 0x11055, 0x0041 };

    // 11055 0041;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11055 0041;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_332)
{
    uint32_t const cps[2] = { 0x1106A, 0x0041 };

    // 1106A 0041;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1106A 0041;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_333)
{
    uint32_t const cps[2] = { 0x110F4, 0x0041 };

    // 110F4 0041;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 110F4 0041;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_334)
{
    uint32_t const cps[2] = { 0x1113A, 0x0041 };

    // 1113A 0041;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1113A 0041;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_335)
{
    uint32_t const cps[2] = { 0x111D4, 0x0041 };

    // 111D4 0041;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111D4 0041;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_336)
{
    uint32_t const cps[2] = { 0x111E4, 0x0041 };

    // 111E4 0041;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111E4 0041;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_337)
{
    uint32_t const cps[2] = { 0x112F4, 0x0041 };

    // 112F4 0041;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 112F4 0041;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_338)
{
    uint32_t const cps[2] = { 0x11454, 0x0041 };

    // 11454 0041;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11454 0041;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_339)
{
    uint32_t const cps[2] = { 0x114D4, 0x0041 };

    // 114D4 0041;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 114D4 0041;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_340)
{
    uint32_t const cps[2] = { 0x11654, 0x0041 };

    // 11654 0041;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11654 0041;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_341)
{
    uint32_t const cps[2] = { 0x116C4, 0x0041 };

    // 116C4 0041;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 116C4 0041;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_342)
{
    uint32_t const cps[2] = { 0x11734, 0x0041 };

    // 11734 0041;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11734 0041;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_343)
{
    uint32_t const cps[2] = { 0x118E4, 0x0041 };

    // 118E4 0041;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 118E4 0041;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_344)
{
    uint32_t const cps[2] = { 0x11C54, 0x0041 };

    // 11C54 0041;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C54 0041;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_345)
{
    uint32_t const cps[2] = { 0x11C5D, 0x0041 };

    // 11C5D 0041;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C5D 0041;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_346)
{
    uint32_t const cps[2] = { 0x11D54, 0x0041 };

    // 11D54 0041;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11D54 0041;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_347)
{
    uint32_t const cps[2] = { 0x12402, 0x0041 };

    // 12402 0041;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12402 0041;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_348)
{
    uint32_t const cps[2] = { 0x12409, 0x0041 };

    // 12409 0041;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12409 0041;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_349)
{
    uint32_t const cps[2] = { 0x1240F, 0x0041 };

    // 1240F 0041;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1240F 0041;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_350)
{
    uint32_t const cps[2] = { 0x12418, 0x0041 };

    // 12418 0041;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12418 0041;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_351)
{
    uint32_t const cps[2] = { 0x12421, 0x0041 };

    // 12421 0041;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12421 0041;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_352)
{
    uint32_t const cps[2] = { 0x12426, 0x0041 };

    // 12426 0041;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12426 0041;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_353)
{
    uint32_t const cps[2] = { 0x12430, 0x0041 };

    // 12430 0041;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12430 0041;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_354)
{
    uint32_t const cps[2] = { 0x12438, 0x0041 };

    // 12438 0041;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12438 0041;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_355)
{
    uint32_t const cps[2] = { 0x1243C, 0x0041 };

    // 1243C 0041;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243C 0041;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_356)
{
    uint32_t const cps[2] = { 0x1243D, 0x0041 };

    // 1243D 0041;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243D 0041;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_357)
{
    uint32_t const cps[2] = { 0x1243E, 0x0041 };

    // 1243E 0041;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243E 0041;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_358)
{
    uint32_t const cps[2] = { 0x1243F, 0x0041 };

    // 1243F 0041;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243F 0041;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_359)
{
    uint32_t const cps[2] = { 0x1244C, 0x0041 };

    // 1244C 0041;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1244C 0041;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_360)
{
    uint32_t const cps[2] = { 0x12452, 0x0041 };

    // 12452 0041;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12452 0041;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_361)
{
    uint32_t const cps[2] = { 0x12453, 0x0041 };

    // 12453 0041;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12453 0041;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_362)
{
    uint32_t const cps[2] = { 0x12469, 0x0041 };

    // 12469 0041;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12469 0041;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_363)
{
    uint32_t const cps[2] = { 0x16A64, 0x0041 };

    // 16A64 0041;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16A64 0041;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_364)
{
    uint32_t const cps[2] = { 0x16B54, 0x0041 };

    // 16B54 0041;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16B54 0041;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_365)
{
    uint32_t const cps[2] = { 0x1D363, 0x0041 };

    // 1D363 0041;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D363 0041;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_366)
{
    uint32_t const cps[2] = { 0x1E8CA, 0x0041 };

    // 1E8CA 0041;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8CA 0041;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_367)
{
    uint32_t const cps[2] = { 0x1E954, 0x0041 };

    // 1E954 0041;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E954 0041;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_368)
{
    uint32_t const cps[2] = { 0xFF14, 0x0061 };

    // FF14 0061;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF14 0061;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0003 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_369)
{
    uint32_t const cps[2] = { 0xFF14, 0x0041 };

    // FF14 0041;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF14 0041;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0003 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_370)
{
    uint32_t const cps[2] = { 0x0F2D, 0x0061 };

    // 0F2D 0061;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 1CAD | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F2D 0061;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 1CAD | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_371)
{
    uint32_t const cps[2] = { 0x0F2D, 0x0041 };

    // 0F2D 0041;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 1CAD | 0020 0020 | 0004 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F2D 0041;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 1CAD | 0020 0020 | 0004 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_372)
{
    uint32_t const cps[2] = { 0x1D7D2, 0x0061 };

    // 1D7D2 0061;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7D2 0061;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_373)
{
    uint32_t const cps[2] = { 0x1D7DC, 0x0061 };

    // 1D7DC 0061;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7DC 0061;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_374)
{
    uint32_t const cps[2] = { 0x1D7E6, 0x0061 };

    // 1D7E6 0061;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E6 0061;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_375)
{
    uint32_t const cps[2] = { 0x1D7F0, 0x0061 };

    // 1D7F0 0061;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F0 0061;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_376)
{
    uint32_t const cps[2] = { 0x1D7FA, 0x0061 };

    // 1D7FA 0061;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7FA 0061;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_377)
{
    uint32_t const cps[2] = { 0x1D7D2, 0x0041 };

    // 1D7D2 0041;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7D2 0041;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_378)
{
    uint32_t const cps[2] = { 0x1D7DC, 0x0041 };

    // 1D7DC 0041;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7DC 0041;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_379)
{
    uint32_t const cps[2] = { 0x1D7E6, 0x0041 };

    // 1D7E6 0041;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E6 0041;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_380)
{
    uint32_t const cps[2] = { 0x1D7F0, 0x0041 };

    // 1D7F0 0041;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F0 0041;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_381)
{
    uint32_t const cps[2] = { 0x1D7FA, 0x0041 };

    // 1D7FA 0041;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7FA 0041;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_382)
{
    uint32_t const cps[2] = { 0x2463, 0x0061 };

    // 2463 0061;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2463 0061;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_383)
{
    uint32_t const cps[2] = { 0x24F8, 0x0061 };

    // 24F8 0061;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24F8 0061;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_384)
{
    uint32_t const cps[2] = { 0x2779, 0x0061 };

    // 2779 0061;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2779 0061;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_385)
{
    uint32_t const cps[2] = { 0x2783, 0x0061 };

    // 2783 0061;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2783 0061;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_386)
{
    uint32_t const cps[2] = { 0x278D, 0x0061 };

    // 278D 0061;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 278D 0061;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_387)
{
    uint32_t const cps[2] = { 0x2463, 0x0041 };

    // 2463 0041;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2463 0041;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_388)
{
    uint32_t const cps[2] = { 0x24F8, 0x0041 };

    // 24F8 0041;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24F8 0041;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_389)
{
    uint32_t const cps[2] = { 0x2779, 0x0041 };

    // 2779 0041;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2779 0041;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_390)
{
    uint32_t const cps[2] = { 0x2783, 0x0041 };

    // 2783 0041;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2783 0041;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_391)
{
    uint32_t const cps[2] = { 0x278D, 0x0041 };

    // 278D 0041;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 278D 0041;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0006 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_392)
{
    uint32_t const cps[2] = { 0x2074, 0x0061 };

    // 2074 0061;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2074 0061;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_393)
{
    uint32_t const cps[2] = { 0x2074, 0x0041 };

    // 2074 0041;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2074 0041;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_394)
{
    uint32_t const cps[2] = { 0x2084, 0x0061 };

    // 2084 0061;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2084 0061;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0015 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_395)
{
    uint32_t const cps[2] = { 0x2084, 0x0041 };

    // 2084 0041;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0015 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2084 0041;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 1CAD | 0020 0020 | 0015 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_396)
{
    uint32_t const cps[2] = { 0x0034, 0x0062 };

    // 0034 0062;	
    // (4) DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0034 0062;	
    // (4) DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_397)
{
    uint32_t const cps[2] = { 0x0664, 0x0062 };

    // 0664 0062;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0664 0062;	
    // (‚ÄéŸ§‚Äé) ARABIC-INDIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_398)
{
    uint32_t const cps[2] = { 0x06F4, 0x0062 };

    // 06F4 0062;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06F4 0062;	
    // (€¥) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_399)
{
    uint32_t const cps[2] = { 0x07C4, 0x0062 };

    // 07C4 0062;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 07C4 0062;	
    // (‚Äé‚ÄéﬂÑ‚Äé‚Äé) NKO DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_400)
{
    uint32_t const cps[2] = { 0x096A, 0x0062 };

    // 096A 0062;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 096A 0062;	
    // (‡•™) DEVANAGARI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_401)
{
    uint32_t const cps[2] = { 0x09EA, 0x0062 };

    // 09EA 0062;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 09EA 0062;	
    // (‡ß™) BENGALI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_402)
{
    uint32_t const cps[2] = { 0x0A6A, 0x0062 };

    // 0A6A 0062;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0A6A 0062;	
    // (‡©™) GURMUKHI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_403)
{
    uint32_t const cps[2] = { 0x0AEA, 0x0062 };

    // 0AEA 0062;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0AEA 0062;	
    // (‡´™) GUJARATI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_404)
{
    uint32_t const cps[2] = { 0x0B6A, 0x0062 };

    // 0B6A 0062;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0B6A 0062;	
    // (‡≠™) ORIYA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_405)
{
    uint32_t const cps[2] = { 0x0BEA, 0x0062 };

    // 0BEA 0062;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0BEA 0062;	
    // (‡Ø™) TAMIL DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_406)
{
    uint32_t const cps[2] = { 0x0C6A, 0x0062 };

    // 0C6A 0062;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0C6A 0062;	
    // (‡±™) TELUGU DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_407)
{
    uint32_t const cps[2] = { 0x0CEA, 0x0062 };

    // 0CEA 0062;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0CEA 0062;	
    // (‡≥™) KANNADA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_408)
{
    uint32_t const cps[2] = { 0x0D6A, 0x0062 };

    // 0D6A 0062;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0D6A 0062;	
    // (‡µ™) MALAYALAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_409)
{
    uint32_t const cps[2] = { 0x0DEA, 0x0062 };

    // 0DEA 0062;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0DEA 0062;	
    // (‡∑™) SINHALA LITH DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_410)
{
    uint32_t const cps[2] = { 0x0E54, 0x0062 };

    // 0E54 0062;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E54 0062;	
    // (‡πî) THAI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_411)
{
    uint32_t const cps[2] = { 0x0ED4, 0x0062 };

    // 0ED4 0062;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0ED4 0062;	
    // (‡ªî) LAO DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_412)
{
    uint32_t const cps[2] = { 0x0F24, 0x0062 };

    // 0F24 0062;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F24 0062;	
    // (‡º§) TIBETAN DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_413)
{
    uint32_t const cps[2] = { 0x1044, 0x0062 };

    // 1044 0062;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1044 0062;	
    // (·ÅÑ) MYANMAR DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_414)
{
    uint32_t const cps[2] = { 0x1094, 0x0062 };

    // 1094 0062;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1094 0062;	
    // (·Çî) MYANMAR SHAN DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_415)
{
    uint32_t const cps[2] = { 0x136C, 0x0062 };

    // 136C 0062;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 136C 0062;	
    // (·ç¨) ETHIOPIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_416)
{
    uint32_t const cps[2] = { 0x17E4, 0x0062 };

    // 17E4 0062;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17E4 0062;	
    // (·ü§) KHMER DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_417)
{
    uint32_t const cps[2] = { 0x17F4, 0x0062 };

    // 17F4 0062;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17F4 0062;	
    // (·ü¥) KHMER SYMBOL LEK ATTAK BUON	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_418)
{
    uint32_t const cps[2] = { 0x1814, 0x0062 };

    // 1814 0062;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1814 0062;	
    // (·†î) MONGOLIAN DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_419)
{
    uint32_t const cps[2] = { 0x194A, 0x0062 };

    // 194A 0062;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 194A 0062;	
    // (·•ä) LIMBU DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_420)
{
    uint32_t const cps[2] = { 0x19D4, 0x0062 };

    // 19D4 0062;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 19D4 0062;	
    // (·ßî) NEW TAI LUE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_421)
{
    uint32_t const cps[2] = { 0x1A84, 0x0062 };

    // 1A84 0062;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A84 0062;	
    // (·™Ñ) TAI THAM HORA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_422)
{
    uint32_t const cps[2] = { 0x1A94, 0x0062 };

    // 1A94 0062;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A94 0062;	
    // (·™î) TAI THAM THAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_423)
{
    uint32_t const cps[2] = { 0x1B54, 0x0062 };

    // 1B54 0062;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B54 0062;	
    // (·≠î) BALINESE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_424)
{
    uint32_t const cps[2] = { 0x1BB4, 0x0062 };

    // 1BB4 0062;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BB4 0062;	
    // (·Æ¥) SUNDANESE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_425)
{
    uint32_t const cps[2] = { 0x1C44, 0x0062 };

    // 1C44 0062;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C44 0062;	
    // (·±Ñ) LEPCHA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_426)
{
    uint32_t const cps[2] = { 0x1C54, 0x0062 };

    // 1C54 0062;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1C54 0062;	
    // (·±î) OL CHIKI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_427)
{
    uint32_t const cps[2] = { 0x3024, 0x0062 };

    // 3024 0062;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3024 0062;	
    // („Ä§) HANGZHOU NUMERAL FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_428)
{
    uint32_t const cps[2] = { 0xA624, 0x0062 };

    // A624 0062;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A624 0062;	
    // (Íò§) VAI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_429)
{
    uint32_t const cps[2] = { 0xA8D4, 0x0062 };

    // A8D4 0062;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8D4 0062;	
    // (Í£î) SAURASHTRA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_430)
{
    uint32_t const cps[2] = { 0xA904, 0x0062 };

    // A904 0062;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A904 0062;	
    // (Í§Ñ) KAYAH LI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_431)
{
    uint32_t const cps[2] = { 0xA9D4, 0x0062 };

    // A9D4 0062;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9D4 0062;	
    // (Íßî) JAVANESE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_432)
{
    uint32_t const cps[2] = { 0xA9F4, 0x0062 };

    // A9F4 0062;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A9F4 0062;	
    // (Íß¥) MYANMAR TAI LAING DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_433)
{
    uint32_t const cps[2] = { 0xAA54, 0x0062 };

    // AA54 0062;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA54 0062;	
    // (Í©î) CHAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_434)
{
    uint32_t const cps[2] = { 0xABF4, 0x0062 };

    // ABF4 0062;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // ABF4 0062;	
    // (ÍØ¥) MEETEI MAYEK DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_435)
{
    uint32_t const cps[2] = { 0x1010A, 0x0062 };

    // 1010A 0062;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1010A 0062;	
    // (êÑä) AEGEAN NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_436)
{
    uint32_t const cps[2] = { 0x102E4, 0x0062 };

    // 102E4 0062;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 102E4 0062;	
    // (êã§) COPTIC EPACT DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_437)
{
    uint32_t const cps[2] = { 0x104A4, 0x0062 };

    // 104A4 0062;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 104A4 0062;	
    // (êí§) OSMANYA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_438)
{
    uint32_t const cps[2] = { 0x1087C, 0x0062 };

    // 1087C 0062;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1087C 0062;	
    // (‚Äé‚Äéê°º‚Äé‚Äé) PALMYRENE NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_439)
{
    uint32_t const cps[2] = { 0x108AA, 0x0062 };

    // 108AA 0062;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AA 0062;	
    // (‚Äé‚Äéê¢™‚Äé‚Äé) NABATAEAN NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_440)
{
    uint32_t const cps[2] = { 0x108AB, 0x0062 };

    // 108AB 0062;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 108AB 0062;	
    // (‚Äé‚Äéê¢´‚Äé‚Äé) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_441)
{
    uint32_t const cps[2] = { 0x109C3, 0x0062 };

    // 109C3 0062;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 109C3 0062;	
    // (‚Äé‚ÄéêßÉ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_442)
{
    uint32_t const cps[2] = { 0x10A43, 0x0062 };

    // 10A43 0062;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10A43 0062;	
    // (‚Äé‚Äéê©É‚Äé‚Äé) KHAROSHTHI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_443)
{
    uint32_t const cps[2] = { 0x10B5B, 0x0062 };

    // 10B5B 0062;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B5B 0062;	
    // (‚Äé‚Äéê≠õ‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_444)
{
    uint32_t const cps[2] = { 0x10B7B, 0x0062 };

    // 10B7B 0062;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10B7B 0062;	
    // (‚Äé‚Äéê≠ª‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_445)
{
    uint32_t const cps[2] = { 0x10BAC, 0x0062 };

    // 10BAC 0062;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10BAC 0062;	
    // (‚Äé‚ÄéêÆ¨‚Äé‚Äé) PSALTER PAHLAVI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_446)
{
    uint32_t const cps[2] = { 0x10E63, 0x0062 };

    // 10E63 0062;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10E63 0062;	
    // (‚Äéêπ£‚Äé) RUMI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_447)
{
    uint32_t const cps[2] = { 0x11055, 0x0062 };

    // 11055 0062;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11055 0062;	
    // (ëÅï) BRAHMI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_448)
{
    uint32_t const cps[2] = { 0x1106A, 0x0062 };

    // 1106A 0062;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1106A 0062;	
    // (ëÅ™) BRAHMI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_449)
{
    uint32_t const cps[2] = { 0x110F4, 0x0062 };

    // 110F4 0062;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 110F4 0062;	
    // (ëÉ¥) SORA SOMPENG DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_450)
{
    uint32_t const cps[2] = { 0x1113A, 0x0062 };

    // 1113A 0062;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1113A 0062;	
    // (ëÑ∫) CHAKMA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_451)
{
    uint32_t const cps[2] = { 0x111D4, 0x0062 };

    // 111D4 0062;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111D4 0062;	
    // (ëáî) SHARADA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_452)
{
    uint32_t const cps[2] = { 0x111E4, 0x0062 };

    // 111E4 0062;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 111E4 0062;	
    // (ëá§) SINHALA ARCHAIC DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_453)
{
    uint32_t const cps[2] = { 0x112F4, 0x0062 };

    // 112F4 0062;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 112F4 0062;	
    // (ëã¥) KHUDAWADI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_454)
{
    uint32_t const cps[2] = { 0x11454, 0x0062 };

    // 11454 0062;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11454 0062;	
    // (ëëî) NEWA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_455)
{
    uint32_t const cps[2] = { 0x114D4, 0x0062 };

    // 114D4 0062;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 114D4 0062;	
    // (ëìî) TIRHUTA DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_456)
{
    uint32_t const cps[2] = { 0x11654, 0x0062 };

    // 11654 0062;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11654 0062;	
    // (ëôî) MODI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_457)
{
    uint32_t const cps[2] = { 0x116C4, 0x0062 };

    // 116C4 0062;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 116C4 0062;	
    // (ëõÑ) TAKRI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_458)
{
    uint32_t const cps[2] = { 0x11734, 0x0062 };

    // 11734 0062;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11734 0062;	
    // (ëú¥) AHOM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_459)
{
    uint32_t const cps[2] = { 0x118E4, 0x0062 };

    // 118E4 0062;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 118E4 0062;	
    // (ë£§) WARANG CITI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_460)
{
    uint32_t const cps[2] = { 0x11C54, 0x0062 };

    // 11C54 0062;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C54 0062;	
    // (ë±î) BHAIKSUKI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_461)
{
    uint32_t const cps[2] = { 0x11C5D, 0x0062 };

    // 11C5D 0062;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11C5D 0062;	
    // (ë±ù) BHAIKSUKI NUMBER FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_462)
{
    uint32_t const cps[2] = { 0x11D54, 0x0062 };

    // 11D54 0062;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11D54 0062;	
    // (ëµî) MASARAM GONDI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_463)
{
    uint32_t const cps[2] = { 0x12402, 0x0062 };

    // 12402 0062;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12402 0062;	
    // (íêÇ) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_464)
{
    uint32_t const cps[2] = { 0x12409, 0x0062 };

    // 12409 0062;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12409 0062;	
    // (íêâ) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_465)
{
    uint32_t const cps[2] = { 0x1240F, 0x0062 };

    // 1240F 0062;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1240F 0062;	
    // (íêè) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_466)
{
    uint32_t const cps[2] = { 0x12418, 0x0062 };

    // 12418 0062;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12418 0062;	
    // (íêò) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_467)
{
    uint32_t const cps[2] = { 0x12421, 0x0062 };

    // 12421 0062;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12421 0062;	
    // (íê°) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_468)
{
    uint32_t const cps[2] = { 0x12426, 0x0062 };

    // 12426 0062;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12426 0062;	
    // (íê¶) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_469)
{
    uint32_t const cps[2] = { 0x12430, 0x0062 };

    // 12430 0062;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12430 0062;	
    // (íê∞) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_470)
{
    uint32_t const cps[2] = { 0x12438, 0x0062 };

    // 12438 0062;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12438 0062;	
    // (íê∏) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_471)
{
    uint32_t const cps[2] = { 0x1243C, 0x0062 };

    // 1243C 0062;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243C 0062;	
    // (íêº) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_472)
{
    uint32_t const cps[2] = { 0x1243D, 0x0062 };

    // 1243D 0062;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243D 0062;	
    // (íêΩ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_473)
{
    uint32_t const cps[2] = { 0x1243E, 0x0062 };

    // 1243E 0062;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243E 0062;	
    // (íêæ) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_474)
{
    uint32_t const cps[2] = { 0x1243F, 0x0062 };

    // 1243F 0062;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1243F 0062;	
    // (íêø) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_475)
{
    uint32_t const cps[2] = { 0x1244C, 0x0062 };

    // 1244C 0062;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1244C 0062;	
    // (íëå) CUNEIFORM NUMERIC SIGN FOUR ASH TENU	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_476)
{
    uint32_t const cps[2] = { 0x12452, 0x0062 };

    // 12452 0062;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12452 0062;	
    // (íëí) CUNEIFORM NUMERIC SIGN FOUR BAN2	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_477)
{
    uint32_t const cps[2] = { 0x12453, 0x0062 };

    // 12453 0062;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12453 0062;	
    // (íëì) CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_478)
{
    uint32_t const cps[2] = { 0x12469, 0x0062 };

    // 12469 0062;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12469 0062;	
    // (íë©) CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_479)
{
    uint32_t const cps[2] = { 0x16A64, 0x0062 };

    // 16A64 0062;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16A64 0062;	
    // (ñ©§) MRO DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_480)
{
    uint32_t const cps[2] = { 0x16B54, 0x0062 };

    // 16B54 0062;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 16B54 0062;	
    // (ñ≠î) PAHAWH HMONG DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_481)
{
    uint32_t const cps[2] = { 0x1D363, 0x0062 };

    // 1D363 0062;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D363 0062;	
    // (ùç£) COUNTING ROD UNIT DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_482)
{
    uint32_t const cps[2] = { 0x1E8CA, 0x0062 };

    // 1E8CA 0062;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8CA 0062;	
    // (‚Äé‚Äéû£ä‚Äé‚Äé) MENDE KIKAKUI DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_483)
{
    uint32_t const cps[2] = { 0x1E954, 0x0062 };

    // 1E954 0062;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E954 0062;	
    // (‚Äé‚Äéû•î‚Äé‚Äé) ADLAM DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_484)
{
    uint32_t const cps[2] = { 0xFF14, 0x0062 };

    // FF14 0062;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF14 0062;	
    // (Ôºî) FULLWIDTH DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0003 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_485)
{
    uint32_t const cps[2] = { 0x0F2D, 0x0062 };

    // 0F2D 0062;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 1CC6 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F2D 0062;	
    // (‡º≠) TIBETAN DIGIT HALF FOUR	[1CA7 1CC6 | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_486)
{
    uint32_t const cps[2] = { 0x1D7D2, 0x0062 };

    // 1D7D2 0062;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7D2 0062;	
    // (ùüí) MATHEMATICAL BOLD DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_487)
{
    uint32_t const cps[2] = { 0x1D7DC, 0x0062 };

    // 1D7DC 0062;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7DC 0062;	
    // (ùüú) MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_488)
{
    uint32_t const cps[2] = { 0x1D7E6, 0x0062 };

    // 1D7E6 0062;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E6 0062;	
    // (ùü¶) MATHEMATICAL SANS-SERIF DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_489)
{
    uint32_t const cps[2] = { 0x1D7F0, 0x0062 };

    // 1D7F0 0062;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F0 0062;	
    // (ùü∞) MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_490)
{
    uint32_t const cps[2] = { 0x1D7FA, 0x0062 };

    // 1D7FA 0062;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7FA 0062;	
    // (ùü∫) MATHEMATICAL MONOSPACE DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_491)
{
    uint32_t const cps[2] = { 0x2463, 0x0062 };

    // 2463 0062;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2463 0062;	
    // (‚ë£) CIRCLED DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_492)
{
    uint32_t const cps[2] = { 0x24F8, 0x0062 };

    // 24F8 0062;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24F8 0062;	
    // (‚ì∏) DOUBLE CIRCLED DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_493)
{
    uint32_t const cps[2] = { 0x2779, 0x0062 };

    // 2779 0062;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2779 0062;	
    // (‚ùπ) DINGBAT NEGATIVE CIRCLED DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_494)
{
    uint32_t const cps[2] = { 0x2783, 0x0062 };

    // 2783 0062;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2783 0062;	
    // (‚ûÉ) DINGBAT CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_495)
{
    uint32_t const cps[2] = { 0x278D, 0x0062 };

    // 278D 0062;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 278D 0062;	
    // (‚ûç) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_496)
{
    uint32_t const cps[2] = { 0x2074, 0x0062 };

    // 2074 0062;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2074 0062;	
    // (‚Å¥) SUPERSCRIPT FOUR	[1CA7 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_497)
{
    uint32_t const cps[2] = { 0x2084, 0x0062 };

    // 2084 0062;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 1CC6 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2084 0062;	
    // (‚ÇÑ) SUBSCRIPT FOUR	[1CA7 1CC6 | 0020 0020 | 0015 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_498)
{
    uint32_t const cps[2] = { 0x1F19E, 0x0021 };

    // 1F19E 0021;	
    // (üÜû) SQUARED FOUR K	[1CA7 1DCB 0261 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1DCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F19E 0021;	
    // (üÜû) SQUARED FOUR K	[1CA7 1DCB | 0020 0020 | 001C 001D | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1DCB, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_086_499)
{
    uint32_t const cps[2] = { 0x1F19E, 0x003F };

    // 1F19E 003F;	
    // (üÜû) SQUARED FOUR K	[1CA7 1DCB 0267 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CA7, 0x1DCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F19E 003F;	
    // (üÜû) SQUARED FOUR K	[1CA7 1DCB | 0020 0020 | 001C 001D | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CA7, 0x1DCB, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

