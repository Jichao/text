// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_371_000)
{
    // 4519 003F;	
    // (䔙) CJK UNIFIED IDEOGRAPH-4519	[FB80 C519 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4519, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC519, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_001)
{
    // 4519 0061;	
    // (䔙) CJK UNIFIED IDEOGRAPH-4519	[FB80 C519 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4519, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_002)
{
    // 4519 0041;	
    // (䔙) CJK UNIFIED IDEOGRAPH-4519	[FB80 C519 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4519, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_003)
{
    // 4519 0062;	
    // (䔙) CJK UNIFIED IDEOGRAPH-4519	[FB80 C519 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4519, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC519, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_004)
{
    // 451A 0021;	
    // (䔚) CJK UNIFIED IDEOGRAPH-451A	[FB80 C51A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC51A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_005)
{
    // 451A 003F;	
    // (䔚) CJK UNIFIED IDEOGRAPH-451A	[FB80 C51A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC51A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_006)
{
    // 451A 0061;	
    // (䔚) CJK UNIFIED IDEOGRAPH-451A	[FB80 C51A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC51A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_007)
{
    // 451A 0041;	
    // (䔚) CJK UNIFIED IDEOGRAPH-451A	[FB80 C51A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x451A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC51A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_008)
{
    // 451A 0062;	
    // (䔚) CJK UNIFIED IDEOGRAPH-451A	[FB80 C51A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC51A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_009)
{
    // 451B 0021;	
    // (䔛) CJK UNIFIED IDEOGRAPH-451B	[FB80 C51B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC51B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_010)
{
    // 451B 003F;	
    // (䔛) CJK UNIFIED IDEOGRAPH-451B	[FB80 C51B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC51B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_011)
{
    // 451B 0061;	
    // (䔛) CJK UNIFIED IDEOGRAPH-451B	[FB80 C51B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC51B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_012)
{
    // 451B 0041;	
    // (䔛) CJK UNIFIED IDEOGRAPH-451B	[FB80 C51B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x451B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC51B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_013)
{
    // 451B 0062;	
    // (䔛) CJK UNIFIED IDEOGRAPH-451B	[FB80 C51B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC51B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_014)
{
    // 451C 0021;	
    // (䔜) CJK UNIFIED IDEOGRAPH-451C	[FB80 C51C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC51C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_015)
{
    // 451C 003F;	
    // (䔜) CJK UNIFIED IDEOGRAPH-451C	[FB80 C51C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC51C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_016)
{
    // 451C 0061;	
    // (䔜) CJK UNIFIED IDEOGRAPH-451C	[FB80 C51C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC51C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_017)
{
    // 451C 0041;	
    // (䔜) CJK UNIFIED IDEOGRAPH-451C	[FB80 C51C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x451C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC51C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_018)
{
    // 451C 0062;	
    // (䔜) CJK UNIFIED IDEOGRAPH-451C	[FB80 C51C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC51C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_019)
{
    // 451D 0021;	
    // (䔝) CJK UNIFIED IDEOGRAPH-451D	[FB80 C51D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC51D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_020)
{
    // 451D 003F;	
    // (䔝) CJK UNIFIED IDEOGRAPH-451D	[FB80 C51D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC51D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_021)
{
    // 451D 0061;	
    // (䔝) CJK UNIFIED IDEOGRAPH-451D	[FB80 C51D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC51D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_022)
{
    // 451D 0041;	
    // (䔝) CJK UNIFIED IDEOGRAPH-451D	[FB80 C51D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x451D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC51D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_023)
{
    // 451D 0062;	
    // (䔝) CJK UNIFIED IDEOGRAPH-451D	[FB80 C51D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC51D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_024)
{
    // 451E 0021;	
    // (䔞) CJK UNIFIED IDEOGRAPH-451E	[FB80 C51E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC51E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_025)
{
    // 451E 003F;	
    // (䔞) CJK UNIFIED IDEOGRAPH-451E	[FB80 C51E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC51E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_026)
{
    // 451E 0061;	
    // (䔞) CJK UNIFIED IDEOGRAPH-451E	[FB80 C51E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC51E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_027)
{
    // 451E 0041;	
    // (䔞) CJK UNIFIED IDEOGRAPH-451E	[FB80 C51E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x451E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC51E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_028)
{
    // 451E 0062;	
    // (䔞) CJK UNIFIED IDEOGRAPH-451E	[FB80 C51E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC51E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_029)
{
    // 451F 0021;	
    // (䔟) CJK UNIFIED IDEOGRAPH-451F	[FB80 C51F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC51F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_030)
{
    // 451F 003F;	
    // (䔟) CJK UNIFIED IDEOGRAPH-451F	[FB80 C51F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC51F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_031)
{
    // 451F 0061;	
    // (䔟) CJK UNIFIED IDEOGRAPH-451F	[FB80 C51F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_032)
{
    // 451F 0041;	
    // (䔟) CJK UNIFIED IDEOGRAPH-451F	[FB80 C51F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x451F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_033)
{
    // 451F 0062;	
    // (䔟) CJK UNIFIED IDEOGRAPH-451F	[FB80 C51F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x451F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC51F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_034)
{
    // 4520 0021;	
    // (䔠) CJK UNIFIED IDEOGRAPH-4520	[FB80 C520 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4520, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC520, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_035)
{
    // 4520 003F;	
    // (䔠) CJK UNIFIED IDEOGRAPH-4520	[FB80 C520 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4520, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC520, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_036)
{
    // 4520 0061;	
    // (䔠) CJK UNIFIED IDEOGRAPH-4520	[FB80 C520 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4520, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_037)
{
    // 4520 0041;	
    // (䔠) CJK UNIFIED IDEOGRAPH-4520	[FB80 C520 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4520, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_038)
{
    // 4520 0062;	
    // (䔠) CJK UNIFIED IDEOGRAPH-4520	[FB80 C520 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4520, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC520, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_039)
{
    // 4521 0021;	
    // (䔡) CJK UNIFIED IDEOGRAPH-4521	[FB80 C521 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4521, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC521, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_040)
{
    // 4521 003F;	
    // (䔡) CJK UNIFIED IDEOGRAPH-4521	[FB80 C521 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4521, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC521, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_041)
{
    // 4521 0061;	
    // (䔡) CJK UNIFIED IDEOGRAPH-4521	[FB80 C521 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4521, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_042)
{
    // 4521 0041;	
    // (䔡) CJK UNIFIED IDEOGRAPH-4521	[FB80 C521 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4521, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_043)
{
    // 4521 0062;	
    // (䔡) CJK UNIFIED IDEOGRAPH-4521	[FB80 C521 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4521, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC521, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_044)
{
    // 4522 0021;	
    // (䔢) CJK UNIFIED IDEOGRAPH-4522	[FB80 C522 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4522, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC522, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_045)
{
    // 4522 003F;	
    // (䔢) CJK UNIFIED IDEOGRAPH-4522	[FB80 C522 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4522, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC522, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_046)
{
    // 4522 0061;	
    // (䔢) CJK UNIFIED IDEOGRAPH-4522	[FB80 C522 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4522, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_047)
{
    // 4522 0041;	
    // (䔢) CJK UNIFIED IDEOGRAPH-4522	[FB80 C522 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4522, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_048)
{
    // 4522 0062;	
    // (䔢) CJK UNIFIED IDEOGRAPH-4522	[FB80 C522 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4522, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC522, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_049)
{
    // 4523 0021;	
    // (䔣) CJK UNIFIED IDEOGRAPH-4523	[FB80 C523 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4523, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC523, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_050)
{
    // 4523 003F;	
    // (䔣) CJK UNIFIED IDEOGRAPH-4523	[FB80 C523 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4523, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC523, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_051)
{
    // 4523 0061;	
    // (䔣) CJK UNIFIED IDEOGRAPH-4523	[FB80 C523 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4523, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_052)
{
    // 4523 0041;	
    // (䔣) CJK UNIFIED IDEOGRAPH-4523	[FB80 C523 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4523, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_053)
{
    // 4523 0062;	
    // (䔣) CJK UNIFIED IDEOGRAPH-4523	[FB80 C523 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4523, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_054)
{
    // 4524 0021;	
    // (䔤) CJK UNIFIED IDEOGRAPH-4524	[FB80 C524 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4524, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC524, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_055)
{
    // 4524 003F;	
    // (䔤) CJK UNIFIED IDEOGRAPH-4524	[FB80 C524 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4524, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC524, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_056)
{
    // 4524 0061;	
    // (䔤) CJK UNIFIED IDEOGRAPH-4524	[FB80 C524 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4524, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_057)
{
    // 4524 0041;	
    // (䔤) CJK UNIFIED IDEOGRAPH-4524	[FB80 C524 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4524, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_058)
{
    // 4524 0062;	
    // (䔤) CJK UNIFIED IDEOGRAPH-4524	[FB80 C524 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4524, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC524, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_059)
{
    // 4525 0021;	
    // (䔥) CJK UNIFIED IDEOGRAPH-4525	[FB80 C525 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4525, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC525, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_060)
{
    // 4525 003F;	
    // (䔥) CJK UNIFIED IDEOGRAPH-4525	[FB80 C525 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4525, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC525, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_061)
{
    // 4525 0061;	
    // (䔥) CJK UNIFIED IDEOGRAPH-4525	[FB80 C525 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4525, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_062)
{
    // 4525 0041;	
    // (䔥) CJK UNIFIED IDEOGRAPH-4525	[FB80 C525 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4525, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_063)
{
    // 4525 0062;	
    // (䔥) CJK UNIFIED IDEOGRAPH-4525	[FB80 C525 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4525, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC525, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_064)
{
    // 4526 0021;	
    // (䔦) CJK UNIFIED IDEOGRAPH-4526	[FB80 C526 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4526, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC526, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_065)
{
    // 4526 003F;	
    // (䔦) CJK UNIFIED IDEOGRAPH-4526	[FB80 C526 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4526, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC526, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_066)
{
    // 4526 0061;	
    // (䔦) CJK UNIFIED IDEOGRAPH-4526	[FB80 C526 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4526, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_067)
{
    // 4526 0041;	
    // (䔦) CJK UNIFIED IDEOGRAPH-4526	[FB80 C526 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4526, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_068)
{
    // 4526 0062;	
    // (䔦) CJK UNIFIED IDEOGRAPH-4526	[FB80 C526 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4526, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC526, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_069)
{
    // 4527 0021;	
    // (䔧) CJK UNIFIED IDEOGRAPH-4527	[FB80 C527 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4527, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC527, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_070)
{
    // 4527 003F;	
    // (䔧) CJK UNIFIED IDEOGRAPH-4527	[FB80 C527 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4527, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC527, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_071)
{
    // 4527 0061;	
    // (䔧) CJK UNIFIED IDEOGRAPH-4527	[FB80 C527 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4527, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_072)
{
    // 4527 0041;	
    // (䔧) CJK UNIFIED IDEOGRAPH-4527	[FB80 C527 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4527, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_073)
{
    // 4527 0062;	
    // (䔧) CJK UNIFIED IDEOGRAPH-4527	[FB80 C527 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4527, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC527, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_074)
{
    // 4528 0021;	
    // (䔨) CJK UNIFIED IDEOGRAPH-4528	[FB80 C528 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4528, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC528, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_075)
{
    // 4528 003F;	
    // (䔨) CJK UNIFIED IDEOGRAPH-4528	[FB80 C528 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4528, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC528, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_076)
{
    // 4528 0061;	
    // (䔨) CJK UNIFIED IDEOGRAPH-4528	[FB80 C528 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4528, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_077)
{
    // 4528 0041;	
    // (䔨) CJK UNIFIED IDEOGRAPH-4528	[FB80 C528 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4528, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_078)
{
    // 4528 0062;	
    // (䔨) CJK UNIFIED IDEOGRAPH-4528	[FB80 C528 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4528, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC528, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_079)
{
    // 4529 0021;	
    // (䔩) CJK UNIFIED IDEOGRAPH-4529	[FB80 C529 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4529, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC529, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_080)
{
    // 4529 003F;	
    // (䔩) CJK UNIFIED IDEOGRAPH-4529	[FB80 C529 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4529, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC529, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_081)
{
    // 4529 0061;	
    // (䔩) CJK UNIFIED IDEOGRAPH-4529	[FB80 C529 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4529, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_082)
{
    // 4529 0041;	
    // (䔩) CJK UNIFIED IDEOGRAPH-4529	[FB80 C529 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4529, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_083)
{
    // 4529 0062;	
    // (䔩) CJK UNIFIED IDEOGRAPH-4529	[FB80 C529 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4529, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC529, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_084)
{
    // 452A 0021;	
    // (䔪) CJK UNIFIED IDEOGRAPH-452A	[FB80 C52A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC52A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_085)
{
    // 452A 003F;	
    // (䔪) CJK UNIFIED IDEOGRAPH-452A	[FB80 C52A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC52A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_086)
{
    // 452A 0061;	
    // (䔪) CJK UNIFIED IDEOGRAPH-452A	[FB80 C52A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC52A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_087)
{
    // 452A 0041;	
    // (䔪) CJK UNIFIED IDEOGRAPH-452A	[FB80 C52A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x452A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC52A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_088)
{
    // 452A 0062;	
    // (䔪) CJK UNIFIED IDEOGRAPH-452A	[FB80 C52A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC52A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_089)
{
    // 452B 0021;	
    // (䔫) CJK UNIFIED IDEOGRAPH-452B	[FB80 C52B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_090)
{
    // 2F9A7 0021;	
    // (䔫) CJK COMPATIBILITY IDEOGRAPH-2F9A7	[FB80 C52B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_091)
{
    // 452B 003F;	
    // (䔫) CJK UNIFIED IDEOGRAPH-452B	[FB80 C52B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_092)
{
    // 2F9A7 003F;	
    // (䔫) CJK COMPATIBILITY IDEOGRAPH-2F9A7	[FB80 C52B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_093)
{
    // 452B 0061;	
    // (䔫) CJK UNIFIED IDEOGRAPH-452B	[FB80 C52B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_094)
{
    // 2F9A7 0061;	
    // (䔫) CJK COMPATIBILITY IDEOGRAPH-2F9A7	[FB80 C52B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_095)
{
    // 452B 0041;	
    // (䔫) CJK UNIFIED IDEOGRAPH-452B	[FB80 C52B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x452B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_096)
{
    // 2F9A7 0041;	
    // (䔫) CJK COMPATIBILITY IDEOGRAPH-2F9A7	[FB80 C52B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_097)
{
    // 452B 0062;	
    // (䔫) CJK UNIFIED IDEOGRAPH-452B	[FB80 C52B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_098)
{
    // 2F9A7 0062;	
    // (䔫) CJK COMPATIBILITY IDEOGRAPH-2F9A7	[FB80 C52B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC52B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_099)
{
    // 452C 0021;	
    // (䔬) CJK UNIFIED IDEOGRAPH-452C	[FB80 C52C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC52C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_100)
{
    // 452C 003F;	
    // (䔬) CJK UNIFIED IDEOGRAPH-452C	[FB80 C52C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC52C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_101)
{
    // 452C 0061;	
    // (䔬) CJK UNIFIED IDEOGRAPH-452C	[FB80 C52C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC52C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_102)
{
    // 452C 0041;	
    // (䔬) CJK UNIFIED IDEOGRAPH-452C	[FB80 C52C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x452C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC52C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_103)
{
    // 452C 0062;	
    // (䔬) CJK UNIFIED IDEOGRAPH-452C	[FB80 C52C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC52C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_104)
{
    // 452D 0021;	
    // (䔭) CJK UNIFIED IDEOGRAPH-452D	[FB80 C52D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC52D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_105)
{
    // 452D 003F;	
    // (䔭) CJK UNIFIED IDEOGRAPH-452D	[FB80 C52D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC52D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_106)
{
    // 452D 0061;	
    // (䔭) CJK UNIFIED IDEOGRAPH-452D	[FB80 C52D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC52D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_107)
{
    // 452D 0041;	
    // (䔭) CJK UNIFIED IDEOGRAPH-452D	[FB80 C52D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x452D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC52D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_108)
{
    // 452D 0062;	
    // (䔭) CJK UNIFIED IDEOGRAPH-452D	[FB80 C52D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC52D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_109)
{
    // 452E 0021;	
    // (䔮) CJK UNIFIED IDEOGRAPH-452E	[FB80 C52E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC52E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_110)
{
    // 452E 003F;	
    // (䔮) CJK UNIFIED IDEOGRAPH-452E	[FB80 C52E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC52E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_111)
{
    // 452E 0061;	
    // (䔮) CJK UNIFIED IDEOGRAPH-452E	[FB80 C52E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC52E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_112)
{
    // 452E 0041;	
    // (䔮) CJK UNIFIED IDEOGRAPH-452E	[FB80 C52E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x452E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC52E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_113)
{
    // 452E 0062;	
    // (䔮) CJK UNIFIED IDEOGRAPH-452E	[FB80 C52E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC52E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_114)
{
    // 452F 0021;	
    // (䔯) CJK UNIFIED IDEOGRAPH-452F	[FB80 C52F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC52F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_115)
{
    // 452F 003F;	
    // (䔯) CJK UNIFIED IDEOGRAPH-452F	[FB80 C52F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC52F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_116)
{
    // 452F 0061;	
    // (䔯) CJK UNIFIED IDEOGRAPH-452F	[FB80 C52F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC52F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_117)
{
    // 452F 0041;	
    // (䔯) CJK UNIFIED IDEOGRAPH-452F	[FB80 C52F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x452F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC52F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_118)
{
    // 452F 0062;	
    // (䔯) CJK UNIFIED IDEOGRAPH-452F	[FB80 C52F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x452F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC52F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_119)
{
    // 4530 0021;	
    // (䔰) CJK UNIFIED IDEOGRAPH-4530	[FB80 C530 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4530, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC530, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_120)
{
    // 4530 003F;	
    // (䔰) CJK UNIFIED IDEOGRAPH-4530	[FB80 C530 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4530, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC530, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_121)
{
    // 4530 0061;	
    // (䔰) CJK UNIFIED IDEOGRAPH-4530	[FB80 C530 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4530, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_122)
{
    // 4530 0041;	
    // (䔰) CJK UNIFIED IDEOGRAPH-4530	[FB80 C530 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4530, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_123)
{
    // 4530 0062;	
    // (䔰) CJK UNIFIED IDEOGRAPH-4530	[FB80 C530 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4530, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC530, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_124)
{
    // 4531 0021;	
    // (䔱) CJK UNIFIED IDEOGRAPH-4531	[FB80 C531 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4531, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC531, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_125)
{
    // 4531 003F;	
    // (䔱) CJK UNIFIED IDEOGRAPH-4531	[FB80 C531 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4531, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC531, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_126)
{
    // 4531 0061;	
    // (䔱) CJK UNIFIED IDEOGRAPH-4531	[FB80 C531 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4531, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_127)
{
    // 4531 0041;	
    // (䔱) CJK UNIFIED IDEOGRAPH-4531	[FB80 C531 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4531, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_128)
{
    // 4531 0062;	
    // (䔱) CJK UNIFIED IDEOGRAPH-4531	[FB80 C531 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4531, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC531, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_129)
{
    // 4532 0021;	
    // (䔲) CJK UNIFIED IDEOGRAPH-4532	[FB80 C532 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4532, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC532, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_130)
{
    // 4532 003F;	
    // (䔲) CJK UNIFIED IDEOGRAPH-4532	[FB80 C532 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4532, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC532, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_131)
{
    // 4532 0061;	
    // (䔲) CJK UNIFIED IDEOGRAPH-4532	[FB80 C532 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4532, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_132)
{
    // 4532 0041;	
    // (䔲) CJK UNIFIED IDEOGRAPH-4532	[FB80 C532 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4532, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_133)
{
    // 4532 0062;	
    // (䔲) CJK UNIFIED IDEOGRAPH-4532	[FB80 C532 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4532, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC532, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_134)
{
    // 4533 0021;	
    // (䔳) CJK UNIFIED IDEOGRAPH-4533	[FB80 C533 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4533, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC533, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_135)
{
    // 4533 003F;	
    // (䔳) CJK UNIFIED IDEOGRAPH-4533	[FB80 C533 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4533, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC533, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_136)
{
    // 4533 0061;	
    // (䔳) CJK UNIFIED IDEOGRAPH-4533	[FB80 C533 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4533, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_137)
{
    // 4533 0041;	
    // (䔳) CJK UNIFIED IDEOGRAPH-4533	[FB80 C533 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4533, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_138)
{
    // 4533 0062;	
    // (䔳) CJK UNIFIED IDEOGRAPH-4533	[FB80 C533 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4533, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC533, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_139)
{
    // 4534 0021;	
    // (䔴) CJK UNIFIED IDEOGRAPH-4534	[FB80 C534 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4534, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC534, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_140)
{
    // 4534 003F;	
    // (䔴) CJK UNIFIED IDEOGRAPH-4534	[FB80 C534 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4534, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC534, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_141)
{
    // 4534 0061;	
    // (䔴) CJK UNIFIED IDEOGRAPH-4534	[FB80 C534 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4534, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_142)
{
    // 4534 0041;	
    // (䔴) CJK UNIFIED IDEOGRAPH-4534	[FB80 C534 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4534, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_143)
{
    // 4534 0062;	
    // (䔴) CJK UNIFIED IDEOGRAPH-4534	[FB80 C534 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4534, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC534, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_144)
{
    // 4535 0021;	
    // (䔵) CJK UNIFIED IDEOGRAPH-4535	[FB80 C535 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4535, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC535, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_145)
{
    // 4535 003F;	
    // (䔵) CJK UNIFIED IDEOGRAPH-4535	[FB80 C535 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4535, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC535, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_146)
{
    // 4535 0061;	
    // (䔵) CJK UNIFIED IDEOGRAPH-4535	[FB80 C535 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4535, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_147)
{
    // 4535 0041;	
    // (䔵) CJK UNIFIED IDEOGRAPH-4535	[FB80 C535 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4535, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_148)
{
    // 4535 0062;	
    // (䔵) CJK UNIFIED IDEOGRAPH-4535	[FB80 C535 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4535, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC535, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_149)
{
    // 4536 0021;	
    // (䔶) CJK UNIFIED IDEOGRAPH-4536	[FB80 C536 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4536, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC536, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_150)
{
    // 4536 003F;	
    // (䔶) CJK UNIFIED IDEOGRAPH-4536	[FB80 C536 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4536, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC536, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_151)
{
    // 4536 0061;	
    // (䔶) CJK UNIFIED IDEOGRAPH-4536	[FB80 C536 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4536, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_152)
{
    // 4536 0041;	
    // (䔶) CJK UNIFIED IDEOGRAPH-4536	[FB80 C536 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4536, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_153)
{
    // 4536 0062;	
    // (䔶) CJK UNIFIED IDEOGRAPH-4536	[FB80 C536 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4536, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC536, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_154)
{
    // 4537 0021;	
    // (䔷) CJK UNIFIED IDEOGRAPH-4537	[FB80 C537 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4537, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC537, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_155)
{
    // 4537 003F;	
    // (䔷) CJK UNIFIED IDEOGRAPH-4537	[FB80 C537 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4537, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC537, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_156)
{
    // 4537 0061;	
    // (䔷) CJK UNIFIED IDEOGRAPH-4537	[FB80 C537 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4537, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_157)
{
    // 4537 0041;	
    // (䔷) CJK UNIFIED IDEOGRAPH-4537	[FB80 C537 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4537, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_158)
{
    // 4537 0062;	
    // (䔷) CJK UNIFIED IDEOGRAPH-4537	[FB80 C537 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4537, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC537, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_159)
{
    // 4538 0021;	
    // (䔸) CJK UNIFIED IDEOGRAPH-4538	[FB80 C538 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4538, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC538, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_160)
{
    // 4538 003F;	
    // (䔸) CJK UNIFIED IDEOGRAPH-4538	[FB80 C538 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4538, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC538, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_161)
{
    // 4538 0061;	
    // (䔸) CJK UNIFIED IDEOGRAPH-4538	[FB80 C538 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4538, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_162)
{
    // 4538 0041;	
    // (䔸) CJK UNIFIED IDEOGRAPH-4538	[FB80 C538 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4538, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_163)
{
    // 4538 0062;	
    // (䔸) CJK UNIFIED IDEOGRAPH-4538	[FB80 C538 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4538, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC538, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_164)
{
    // 4539 0021;	
    // (䔹) CJK UNIFIED IDEOGRAPH-4539	[FB80 C539 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4539, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC539, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_165)
{
    // 4539 003F;	
    // (䔹) CJK UNIFIED IDEOGRAPH-4539	[FB80 C539 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4539, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC539, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_166)
{
    // 4539 0061;	
    // (䔹) CJK UNIFIED IDEOGRAPH-4539	[FB80 C539 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4539, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_167)
{
    // 4539 0041;	
    // (䔹) CJK UNIFIED IDEOGRAPH-4539	[FB80 C539 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4539, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_168)
{
    // 4539 0062;	
    // (䔹) CJK UNIFIED IDEOGRAPH-4539	[FB80 C539 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4539, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC539, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_169)
{
    // 453A 0021;	
    // (䔺) CJK UNIFIED IDEOGRAPH-453A	[FB80 C53A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC53A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_170)
{
    // 453A 003F;	
    // (䔺) CJK UNIFIED IDEOGRAPH-453A	[FB80 C53A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC53A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_171)
{
    // 453A 0061;	
    // (䔺) CJK UNIFIED IDEOGRAPH-453A	[FB80 C53A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC53A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_172)
{
    // 453A 0041;	
    // (䔺) CJK UNIFIED IDEOGRAPH-453A	[FB80 C53A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x453A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC53A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_173)
{
    // 453A 0062;	
    // (䔺) CJK UNIFIED IDEOGRAPH-453A	[FB80 C53A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC53A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_174)
{
    // 453B 0021;	
    // (䔻) CJK UNIFIED IDEOGRAPH-453B	[FB80 C53B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC53B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_175)
{
    // 453B 003F;	
    // (䔻) CJK UNIFIED IDEOGRAPH-453B	[FB80 C53B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC53B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_176)
{
    // 453B 0061;	
    // (䔻) CJK UNIFIED IDEOGRAPH-453B	[FB80 C53B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC53B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_177)
{
    // 453B 0041;	
    // (䔻) CJK UNIFIED IDEOGRAPH-453B	[FB80 C53B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x453B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC53B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_178)
{
    // 453B 0062;	
    // (䔻) CJK UNIFIED IDEOGRAPH-453B	[FB80 C53B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC53B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_179)
{
    // 453C 0021;	
    // (䔼) CJK UNIFIED IDEOGRAPH-453C	[FB80 C53C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC53C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_180)
{
    // 453C 003F;	
    // (䔼) CJK UNIFIED IDEOGRAPH-453C	[FB80 C53C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC53C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_181)
{
    // 453C 0061;	
    // (䔼) CJK UNIFIED IDEOGRAPH-453C	[FB80 C53C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC53C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_182)
{
    // 453C 0041;	
    // (䔼) CJK UNIFIED IDEOGRAPH-453C	[FB80 C53C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x453C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC53C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_183)
{
    // 453C 0062;	
    // (䔼) CJK UNIFIED IDEOGRAPH-453C	[FB80 C53C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC53C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_184)
{
    // 453D 0021;	
    // (䔽) CJK UNIFIED IDEOGRAPH-453D	[FB80 C53D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC53D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_185)
{
    // 453D 003F;	
    // (䔽) CJK UNIFIED IDEOGRAPH-453D	[FB80 C53D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC53D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_186)
{
    // 453D 0061;	
    // (䔽) CJK UNIFIED IDEOGRAPH-453D	[FB80 C53D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC53D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_187)
{
    // 453D 0041;	
    // (䔽) CJK UNIFIED IDEOGRAPH-453D	[FB80 C53D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x453D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC53D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_188)
{
    // 453D 0062;	
    // (䔽) CJK UNIFIED IDEOGRAPH-453D	[FB80 C53D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC53D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_189)
{
    // 453E 0021;	
    // (䔾) CJK UNIFIED IDEOGRAPH-453E	[FB80 C53E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC53E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_190)
{
    // 453E 003F;	
    // (䔾) CJK UNIFIED IDEOGRAPH-453E	[FB80 C53E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC53E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_191)
{
    // 453E 0061;	
    // (䔾) CJK UNIFIED IDEOGRAPH-453E	[FB80 C53E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC53E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_192)
{
    // 453E 0041;	
    // (䔾) CJK UNIFIED IDEOGRAPH-453E	[FB80 C53E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x453E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC53E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_193)
{
    // 453E 0062;	
    // (䔾) CJK UNIFIED IDEOGRAPH-453E	[FB80 C53E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC53E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_194)
{
    // 453F 0021;	
    // (䔿) CJK UNIFIED IDEOGRAPH-453F	[FB80 C53F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC53F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_195)
{
    // 453F 003F;	
    // (䔿) CJK UNIFIED IDEOGRAPH-453F	[FB80 C53F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC53F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_196)
{
    // 453F 0061;	
    // (䔿) CJK UNIFIED IDEOGRAPH-453F	[FB80 C53F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC53F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_197)
{
    // 453F 0041;	
    // (䔿) CJK UNIFIED IDEOGRAPH-453F	[FB80 C53F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x453F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC53F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_198)
{
    // 453F 0062;	
    // (䔿) CJK UNIFIED IDEOGRAPH-453F	[FB80 C53F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x453F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC53F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_199)
{
    // 4540 0021;	
    // (䕀) CJK UNIFIED IDEOGRAPH-4540	[FB80 C540 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4540, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC540, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_200)
{
    // 4540 003F;	
    // (䕀) CJK UNIFIED IDEOGRAPH-4540	[FB80 C540 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4540, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC540, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_201)
{
    // 4540 0061;	
    // (䕀) CJK UNIFIED IDEOGRAPH-4540	[FB80 C540 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4540, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_202)
{
    // 4540 0041;	
    // (䕀) CJK UNIFIED IDEOGRAPH-4540	[FB80 C540 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4540, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_203)
{
    // 4540 0062;	
    // (䕀) CJK UNIFIED IDEOGRAPH-4540	[FB80 C540 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4540, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC540, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_204)
{
    // 4541 0021;	
    // (䕁) CJK UNIFIED IDEOGRAPH-4541	[FB80 C541 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4541, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC541, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_205)
{
    // 4541 003F;	
    // (䕁) CJK UNIFIED IDEOGRAPH-4541	[FB80 C541 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4541, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC541, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_206)
{
    // 4541 0061;	
    // (䕁) CJK UNIFIED IDEOGRAPH-4541	[FB80 C541 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4541, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_207)
{
    // 4541 0041;	
    // (䕁) CJK UNIFIED IDEOGRAPH-4541	[FB80 C541 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4541, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_208)
{
    // 4541 0062;	
    // (䕁) CJK UNIFIED IDEOGRAPH-4541	[FB80 C541 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4541, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC541, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_209)
{
    // 4542 0021;	
    // (䕂) CJK UNIFIED IDEOGRAPH-4542	[FB80 C542 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4542, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC542, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_210)
{
    // 4542 003F;	
    // (䕂) CJK UNIFIED IDEOGRAPH-4542	[FB80 C542 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4542, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC542, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_211)
{
    // 4542 0061;	
    // (䕂) CJK UNIFIED IDEOGRAPH-4542	[FB80 C542 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4542, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_212)
{
    // 4542 0041;	
    // (䕂) CJK UNIFIED IDEOGRAPH-4542	[FB80 C542 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4542, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_213)
{
    // 4542 0062;	
    // (䕂) CJK UNIFIED IDEOGRAPH-4542	[FB80 C542 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4542, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC542, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_214)
{
    // 4543 0021;	
    // (䕃) CJK UNIFIED IDEOGRAPH-4543	[FB80 C543 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4543, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC543, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_215)
{
    // 4543 003F;	
    // (䕃) CJK UNIFIED IDEOGRAPH-4543	[FB80 C543 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4543, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC543, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_216)
{
    // 4543 0061;	
    // (䕃) CJK UNIFIED IDEOGRAPH-4543	[FB80 C543 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4543, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_217)
{
    // 4543 0041;	
    // (䕃) CJK UNIFIED IDEOGRAPH-4543	[FB80 C543 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4543, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_218)
{
    // 4543 0062;	
    // (䕃) CJK UNIFIED IDEOGRAPH-4543	[FB80 C543 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4543, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC543, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_219)
{
    // 4544 0021;	
    // (䕄) CJK UNIFIED IDEOGRAPH-4544	[FB80 C544 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4544, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC544, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_220)
{
    // 4544 003F;	
    // (䕄) CJK UNIFIED IDEOGRAPH-4544	[FB80 C544 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4544, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC544, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_221)
{
    // 4544 0061;	
    // (䕄) CJK UNIFIED IDEOGRAPH-4544	[FB80 C544 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4544, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_222)
{
    // 4544 0041;	
    // (䕄) CJK UNIFIED IDEOGRAPH-4544	[FB80 C544 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4544, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_223)
{
    // 4544 0062;	
    // (䕄) CJK UNIFIED IDEOGRAPH-4544	[FB80 C544 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4544, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC544, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_224)
{
    // 4545 0021;	
    // (䕅) CJK UNIFIED IDEOGRAPH-4545	[FB80 C545 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4545, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC545, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_225)
{
    // 4545 003F;	
    // (䕅) CJK UNIFIED IDEOGRAPH-4545	[FB80 C545 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4545, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC545, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_226)
{
    // 4545 0061;	
    // (䕅) CJK UNIFIED IDEOGRAPH-4545	[FB80 C545 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4545, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_227)
{
    // 4545 0041;	
    // (䕅) CJK UNIFIED IDEOGRAPH-4545	[FB80 C545 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4545, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_228)
{
    // 4545 0062;	
    // (䕅) CJK UNIFIED IDEOGRAPH-4545	[FB80 C545 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4545, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC545, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_229)
{
    // 4546 0021;	
    // (䕆) CJK UNIFIED IDEOGRAPH-4546	[FB80 C546 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4546, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC546, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_230)
{
    // 4546 003F;	
    // (䕆) CJK UNIFIED IDEOGRAPH-4546	[FB80 C546 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4546, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC546, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_231)
{
    // 4546 0061;	
    // (䕆) CJK UNIFIED IDEOGRAPH-4546	[FB80 C546 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4546, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_232)
{
    // 4546 0041;	
    // (䕆) CJK UNIFIED IDEOGRAPH-4546	[FB80 C546 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4546, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_233)
{
    // 4546 0062;	
    // (䕆) CJK UNIFIED IDEOGRAPH-4546	[FB80 C546 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4546, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC546, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_234)
{
    // 4547 0021;	
    // (䕇) CJK UNIFIED IDEOGRAPH-4547	[FB80 C547 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4547, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC547, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_235)
{
    // 4547 003F;	
    // (䕇) CJK UNIFIED IDEOGRAPH-4547	[FB80 C547 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4547, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC547, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_236)
{
    // 4547 0061;	
    // (䕇) CJK UNIFIED IDEOGRAPH-4547	[FB80 C547 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4547, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_237)
{
    // 4547 0041;	
    // (䕇) CJK UNIFIED IDEOGRAPH-4547	[FB80 C547 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4547, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_238)
{
    // 4547 0062;	
    // (䕇) CJK UNIFIED IDEOGRAPH-4547	[FB80 C547 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4547, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC547, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_239)
{
    // 4548 0021;	
    // (䕈) CJK UNIFIED IDEOGRAPH-4548	[FB80 C548 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4548, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC548, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_240)
{
    // 4548 003F;	
    // (䕈) CJK UNIFIED IDEOGRAPH-4548	[FB80 C548 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4548, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC548, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_241)
{
    // 4548 0061;	
    // (䕈) CJK UNIFIED IDEOGRAPH-4548	[FB80 C548 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4548, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_242)
{
    // 4548 0041;	
    // (䕈) CJK UNIFIED IDEOGRAPH-4548	[FB80 C548 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4548, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_243)
{
    // 4548 0062;	
    // (䕈) CJK UNIFIED IDEOGRAPH-4548	[FB80 C548 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4548, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC548, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_244)
{
    // 4549 0021;	
    // (䕉) CJK UNIFIED IDEOGRAPH-4549	[FB80 C549 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4549, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC549, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_245)
{
    // 4549 003F;	
    // (䕉) CJK UNIFIED IDEOGRAPH-4549	[FB80 C549 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4549, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC549, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_246)
{
    // 4549 0061;	
    // (䕉) CJK UNIFIED IDEOGRAPH-4549	[FB80 C549 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4549, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_247)
{
    // 4549 0041;	
    // (䕉) CJK UNIFIED IDEOGRAPH-4549	[FB80 C549 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4549, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_248)
{
    // 4549 0062;	
    // (䕉) CJK UNIFIED IDEOGRAPH-4549	[FB80 C549 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4549, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC549, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_249)
{
    // 454A 0021;	
    // (䕊) CJK UNIFIED IDEOGRAPH-454A	[FB80 C54A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC54A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_250)
{
    // 454A 003F;	
    // (䕊) CJK UNIFIED IDEOGRAPH-454A	[FB80 C54A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC54A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_251)
{
    // 454A 0061;	
    // (䕊) CJK UNIFIED IDEOGRAPH-454A	[FB80 C54A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC54A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_252)
{
    // 454A 0041;	
    // (䕊) CJK UNIFIED IDEOGRAPH-454A	[FB80 C54A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x454A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC54A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_253)
{
    // 454A 0062;	
    // (䕊) CJK UNIFIED IDEOGRAPH-454A	[FB80 C54A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC54A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_254)
{
    // 454B 0021;	
    // (䕋) CJK UNIFIED IDEOGRAPH-454B	[FB80 C54B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC54B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_255)
{
    // 454B 003F;	
    // (䕋) CJK UNIFIED IDEOGRAPH-454B	[FB80 C54B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC54B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_256)
{
    // 454B 0061;	
    // (䕋) CJK UNIFIED IDEOGRAPH-454B	[FB80 C54B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC54B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_257)
{
    // 454B 0041;	
    // (䕋) CJK UNIFIED IDEOGRAPH-454B	[FB80 C54B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x454B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC54B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_258)
{
    // 454B 0062;	
    // (䕋) CJK UNIFIED IDEOGRAPH-454B	[FB80 C54B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC54B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_259)
{
    // 454C 0021;	
    // (䕌) CJK UNIFIED IDEOGRAPH-454C	[FB80 C54C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC54C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_260)
{
    // 454C 003F;	
    // (䕌) CJK UNIFIED IDEOGRAPH-454C	[FB80 C54C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC54C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_261)
{
    // 454C 0061;	
    // (䕌) CJK UNIFIED IDEOGRAPH-454C	[FB80 C54C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC54C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_262)
{
    // 454C 0041;	
    // (䕌) CJK UNIFIED IDEOGRAPH-454C	[FB80 C54C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x454C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC54C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_263)
{
    // 454C 0062;	
    // (䕌) CJK UNIFIED IDEOGRAPH-454C	[FB80 C54C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC54C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_264)
{
    // 454D 0021;	
    // (䕍) CJK UNIFIED IDEOGRAPH-454D	[FB80 C54D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC54D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_265)
{
    // 454D 003F;	
    // (䕍) CJK UNIFIED IDEOGRAPH-454D	[FB80 C54D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC54D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_266)
{
    // 454D 0061;	
    // (䕍) CJK UNIFIED IDEOGRAPH-454D	[FB80 C54D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC54D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_267)
{
    // 454D 0041;	
    // (䕍) CJK UNIFIED IDEOGRAPH-454D	[FB80 C54D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x454D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC54D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_268)
{
    // 454D 0062;	
    // (䕍) CJK UNIFIED IDEOGRAPH-454D	[FB80 C54D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC54D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_269)
{
    // 454E 0021;	
    // (䕎) CJK UNIFIED IDEOGRAPH-454E	[FB80 C54E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC54E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_270)
{
    // 454E 003F;	
    // (䕎) CJK UNIFIED IDEOGRAPH-454E	[FB80 C54E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC54E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_271)
{
    // 454E 0061;	
    // (䕎) CJK UNIFIED IDEOGRAPH-454E	[FB80 C54E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC54E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_272)
{
    // 454E 0041;	
    // (䕎) CJK UNIFIED IDEOGRAPH-454E	[FB80 C54E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x454E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC54E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_273)
{
    // 454E 0062;	
    // (䕎) CJK UNIFIED IDEOGRAPH-454E	[FB80 C54E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC54E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_274)
{
    // 454F 0021;	
    // (䕏) CJK UNIFIED IDEOGRAPH-454F	[FB80 C54F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC54F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_275)
{
    // 454F 003F;	
    // (䕏) CJK UNIFIED IDEOGRAPH-454F	[FB80 C54F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC54F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_276)
{
    // 454F 0061;	
    // (䕏) CJK UNIFIED IDEOGRAPH-454F	[FB80 C54F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_277)
{
    // 454F 0041;	
    // (䕏) CJK UNIFIED IDEOGRAPH-454F	[FB80 C54F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x454F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_278)
{
    // 454F 0062;	
    // (䕏) CJK UNIFIED IDEOGRAPH-454F	[FB80 C54F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x454F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC54F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_279)
{
    // 4550 0021;	
    // (䕐) CJK UNIFIED IDEOGRAPH-4550	[FB80 C550 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4550, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC550, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_280)
{
    // 4550 003F;	
    // (䕐) CJK UNIFIED IDEOGRAPH-4550	[FB80 C550 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4550, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC550, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_281)
{
    // 4550 0061;	
    // (䕐) CJK UNIFIED IDEOGRAPH-4550	[FB80 C550 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4550, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_282)
{
    // 4550 0041;	
    // (䕐) CJK UNIFIED IDEOGRAPH-4550	[FB80 C550 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4550, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_283)
{
    // 4550 0062;	
    // (䕐) CJK UNIFIED IDEOGRAPH-4550	[FB80 C550 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4550, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC550, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_284)
{
    // 4551 0021;	
    // (䕑) CJK UNIFIED IDEOGRAPH-4551	[FB80 C551 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4551, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC551, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_285)
{
    // 4551 003F;	
    // (䕑) CJK UNIFIED IDEOGRAPH-4551	[FB80 C551 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4551, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC551, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_286)
{
    // 4551 0061;	
    // (䕑) CJK UNIFIED IDEOGRAPH-4551	[FB80 C551 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4551, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_287)
{
    // 4551 0041;	
    // (䕑) CJK UNIFIED IDEOGRAPH-4551	[FB80 C551 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4551, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_288)
{
    // 4551 0062;	
    // (䕑) CJK UNIFIED IDEOGRAPH-4551	[FB80 C551 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4551, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC551, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_289)
{
    // 4552 0021;	
    // (䕒) CJK UNIFIED IDEOGRAPH-4552	[FB80 C552 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4552, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC552, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_290)
{
    // 4552 003F;	
    // (䕒) CJK UNIFIED IDEOGRAPH-4552	[FB80 C552 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4552, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC552, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_291)
{
    // 4552 0061;	
    // (䕒) CJK UNIFIED IDEOGRAPH-4552	[FB80 C552 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4552, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_292)
{
    // 4552 0041;	
    // (䕒) CJK UNIFIED IDEOGRAPH-4552	[FB80 C552 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4552, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_293)
{
    // 4552 0062;	
    // (䕒) CJK UNIFIED IDEOGRAPH-4552	[FB80 C552 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4552, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC552, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_294)
{
    // 4553 0021;	
    // (䕓) CJK UNIFIED IDEOGRAPH-4553	[FB80 C553 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4553, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC553, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_295)
{
    // 4553 003F;	
    // (䕓) CJK UNIFIED IDEOGRAPH-4553	[FB80 C553 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4553, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC553, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_296)
{
    // 4553 0061;	
    // (䕓) CJK UNIFIED IDEOGRAPH-4553	[FB80 C553 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4553, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_297)
{
    // 4553 0041;	
    // (䕓) CJK UNIFIED IDEOGRAPH-4553	[FB80 C553 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4553, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_298)
{
    // 4553 0062;	
    // (䕓) CJK UNIFIED IDEOGRAPH-4553	[FB80 C553 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4553, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC553, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_299)
{
    // 4554 0021;	
    // (䕔) CJK UNIFIED IDEOGRAPH-4554	[FB80 C554 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4554, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC554, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_300)
{
    // 4554 003F;	
    // (䕔) CJK UNIFIED IDEOGRAPH-4554	[FB80 C554 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4554, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC554, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_301)
{
    // 4554 0061;	
    // (䕔) CJK UNIFIED IDEOGRAPH-4554	[FB80 C554 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4554, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_302)
{
    // 4554 0041;	
    // (䕔) CJK UNIFIED IDEOGRAPH-4554	[FB80 C554 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4554, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_303)
{
    // 4554 0062;	
    // (䕔) CJK UNIFIED IDEOGRAPH-4554	[FB80 C554 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4554, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC554, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_304)
{
    // 4555 0021;	
    // (䕕) CJK UNIFIED IDEOGRAPH-4555	[FB80 C555 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4555, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC555, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_305)
{
    // 4555 003F;	
    // (䕕) CJK UNIFIED IDEOGRAPH-4555	[FB80 C555 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4555, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC555, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_306)
{
    // 4555 0061;	
    // (䕕) CJK UNIFIED IDEOGRAPH-4555	[FB80 C555 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4555, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_307)
{
    // 4555 0041;	
    // (䕕) CJK UNIFIED IDEOGRAPH-4555	[FB80 C555 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4555, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_308)
{
    // 4555 0062;	
    // (䕕) CJK UNIFIED IDEOGRAPH-4555	[FB80 C555 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4555, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC555, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_309)
{
    // 4556 0021;	
    // (䕖) CJK UNIFIED IDEOGRAPH-4556	[FB80 C556 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4556, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC556, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_310)
{
    // 4556 003F;	
    // (䕖) CJK UNIFIED IDEOGRAPH-4556	[FB80 C556 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4556, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC556, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_311)
{
    // 4556 0061;	
    // (䕖) CJK UNIFIED IDEOGRAPH-4556	[FB80 C556 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4556, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_312)
{
    // 4556 0041;	
    // (䕖) CJK UNIFIED IDEOGRAPH-4556	[FB80 C556 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4556, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_313)
{
    // 4556 0062;	
    // (䕖) CJK UNIFIED IDEOGRAPH-4556	[FB80 C556 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4556, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC556, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_314)
{
    // 4557 0021;	
    // (䕗) CJK UNIFIED IDEOGRAPH-4557	[FB80 C557 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4557, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC557, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_315)
{
    // 4557 003F;	
    // (䕗) CJK UNIFIED IDEOGRAPH-4557	[FB80 C557 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4557, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC557, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_316)
{
    // 4557 0061;	
    // (䕗) CJK UNIFIED IDEOGRAPH-4557	[FB80 C557 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4557, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_317)
{
    // 4557 0041;	
    // (䕗) CJK UNIFIED IDEOGRAPH-4557	[FB80 C557 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4557, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_318)
{
    // 4557 0062;	
    // (䕗) CJK UNIFIED IDEOGRAPH-4557	[FB80 C557 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4557, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC557, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_319)
{
    // 4558 0021;	
    // (䕘) CJK UNIFIED IDEOGRAPH-4558	[FB80 C558 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4558, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC558, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_320)
{
    // 4558 003F;	
    // (䕘) CJK UNIFIED IDEOGRAPH-4558	[FB80 C558 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4558, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC558, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_321)
{
    // 4558 0061;	
    // (䕘) CJK UNIFIED IDEOGRAPH-4558	[FB80 C558 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4558, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_322)
{
    // 4558 0041;	
    // (䕘) CJK UNIFIED IDEOGRAPH-4558	[FB80 C558 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4558, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_323)
{
    // 4558 0062;	
    // (䕘) CJK UNIFIED IDEOGRAPH-4558	[FB80 C558 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4558, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC558, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_324)
{
    // 4559 0021;	
    // (䕙) CJK UNIFIED IDEOGRAPH-4559	[FB80 C559 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4559, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC559, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_325)
{
    // 4559 003F;	
    // (䕙) CJK UNIFIED IDEOGRAPH-4559	[FB80 C559 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4559, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC559, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_326)
{
    // 4559 0061;	
    // (䕙) CJK UNIFIED IDEOGRAPH-4559	[FB80 C559 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4559, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_327)
{
    // 4559 0041;	
    // (䕙) CJK UNIFIED IDEOGRAPH-4559	[FB80 C559 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4559, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_328)
{
    // 4559 0062;	
    // (䕙) CJK UNIFIED IDEOGRAPH-4559	[FB80 C559 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4559, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC559, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_329)
{
    // 455A 0021;	
    // (䕚) CJK UNIFIED IDEOGRAPH-455A	[FB80 C55A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC55A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_330)
{
    // 455A 003F;	
    // (䕚) CJK UNIFIED IDEOGRAPH-455A	[FB80 C55A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC55A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_331)
{
    // 455A 0061;	
    // (䕚) CJK UNIFIED IDEOGRAPH-455A	[FB80 C55A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC55A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_332)
{
    // 455A 0041;	
    // (䕚) CJK UNIFIED IDEOGRAPH-455A	[FB80 C55A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x455A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC55A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_333)
{
    // 455A 0062;	
    // (䕚) CJK UNIFIED IDEOGRAPH-455A	[FB80 C55A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC55A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_334)
{
    // 455B 0021;	
    // (䕛) CJK UNIFIED IDEOGRAPH-455B	[FB80 C55B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC55B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_335)
{
    // 455B 003F;	
    // (䕛) CJK UNIFIED IDEOGRAPH-455B	[FB80 C55B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC55B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_336)
{
    // 455B 0061;	
    // (䕛) CJK UNIFIED IDEOGRAPH-455B	[FB80 C55B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC55B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_337)
{
    // 455B 0041;	
    // (䕛) CJK UNIFIED IDEOGRAPH-455B	[FB80 C55B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x455B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC55B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_338)
{
    // 455B 0062;	
    // (䕛) CJK UNIFIED IDEOGRAPH-455B	[FB80 C55B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC55B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_339)
{
    // 455C 0021;	
    // (䕜) CJK UNIFIED IDEOGRAPH-455C	[FB80 C55C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC55C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_340)
{
    // 455C 003F;	
    // (䕜) CJK UNIFIED IDEOGRAPH-455C	[FB80 C55C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC55C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_341)
{
    // 455C 0061;	
    // (䕜) CJK UNIFIED IDEOGRAPH-455C	[FB80 C55C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC55C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_342)
{
    // 455C 0041;	
    // (䕜) CJK UNIFIED IDEOGRAPH-455C	[FB80 C55C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x455C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC55C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_343)
{
    // 455C 0062;	
    // (䕜) CJK UNIFIED IDEOGRAPH-455C	[FB80 C55C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC55C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_344)
{
    // 455D 0021;	
    // (䕝) CJK UNIFIED IDEOGRAPH-455D	[FB80 C55D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_345)
{
    // 2F9AE 0021;	
    // (䕝) CJK COMPATIBILITY IDEOGRAPH-2F9AE	[FB80 C55D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_346)
{
    // 455D 003F;	
    // (䕝) CJK UNIFIED IDEOGRAPH-455D	[FB80 C55D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_347)
{
    // 2F9AE 003F;	
    // (䕝) CJK COMPATIBILITY IDEOGRAPH-2F9AE	[FB80 C55D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_348)
{
    // 455D 0061;	
    // (䕝) CJK UNIFIED IDEOGRAPH-455D	[FB80 C55D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_349)
{
    // 2F9AE 0061;	
    // (䕝) CJK COMPATIBILITY IDEOGRAPH-2F9AE	[FB80 C55D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_350)
{
    // 455D 0041;	
    // (䕝) CJK UNIFIED IDEOGRAPH-455D	[FB80 C55D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x455D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_351)
{
    // 2F9AE 0041;	
    // (䕝) CJK COMPATIBILITY IDEOGRAPH-2F9AE	[FB80 C55D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_352)
{
    // 455D 0062;	
    // (䕝) CJK UNIFIED IDEOGRAPH-455D	[FB80 C55D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_353)
{
    // 2F9AE 0062;	
    // (䕝) CJK COMPATIBILITY IDEOGRAPH-2F9AE	[FB80 C55D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC55D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_354)
{
    // 455E 0021;	
    // (䕞) CJK UNIFIED IDEOGRAPH-455E	[FB80 C55E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC55E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_355)
{
    // 455E 003F;	
    // (䕞) CJK UNIFIED IDEOGRAPH-455E	[FB80 C55E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC55E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_356)
{
    // 455E 0061;	
    // (䕞) CJK UNIFIED IDEOGRAPH-455E	[FB80 C55E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC55E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_357)
{
    // 455E 0041;	
    // (䕞) CJK UNIFIED IDEOGRAPH-455E	[FB80 C55E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x455E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC55E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_358)
{
    // 455E 0062;	
    // (䕞) CJK UNIFIED IDEOGRAPH-455E	[FB80 C55E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC55E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_359)
{
    // 455F 0021;	
    // (䕟) CJK UNIFIED IDEOGRAPH-455F	[FB80 C55F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC55F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_360)
{
    // 455F 003F;	
    // (䕟) CJK UNIFIED IDEOGRAPH-455F	[FB80 C55F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC55F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_361)
{
    // 455F 0061;	
    // (䕟) CJK UNIFIED IDEOGRAPH-455F	[FB80 C55F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC55F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_362)
{
    // 455F 0041;	
    // (䕟) CJK UNIFIED IDEOGRAPH-455F	[FB80 C55F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x455F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC55F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_363)
{
    // 455F 0062;	
    // (䕟) CJK UNIFIED IDEOGRAPH-455F	[FB80 C55F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x455F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC55F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_364)
{
    // 4560 0021;	
    // (䕠) CJK UNIFIED IDEOGRAPH-4560	[FB80 C560 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4560, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC560, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_365)
{
    // 4560 003F;	
    // (䕠) CJK UNIFIED IDEOGRAPH-4560	[FB80 C560 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4560, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC560, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_366)
{
    // 4560 0061;	
    // (䕠) CJK UNIFIED IDEOGRAPH-4560	[FB80 C560 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4560, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_367)
{
    // 4560 0041;	
    // (䕠) CJK UNIFIED IDEOGRAPH-4560	[FB80 C560 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4560, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_368)
{
    // 4560 0062;	
    // (䕠) CJK UNIFIED IDEOGRAPH-4560	[FB80 C560 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4560, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC560, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_369)
{
    // 4561 0021;	
    // (䕡) CJK UNIFIED IDEOGRAPH-4561	[FB80 C561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4561, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_370)
{
    // 2F9AF 0021;	
    // (䕡) CJK COMPATIBILITY IDEOGRAPH-2F9AF	[FB80 C561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_371)
{
    // 4561 003F;	
    // (䕡) CJK UNIFIED IDEOGRAPH-4561	[FB80 C561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4561, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_372)
{
    // 2F9AF 003F;	
    // (䕡) CJK COMPATIBILITY IDEOGRAPH-2F9AF	[FB80 C561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_373)
{
    // 4561 0061;	
    // (䕡) CJK UNIFIED IDEOGRAPH-4561	[FB80 C561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4561, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_374)
{
    // 2F9AF 0061;	
    // (䕡) CJK COMPATIBILITY IDEOGRAPH-2F9AF	[FB80 C561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_375)
{
    // 4561 0041;	
    // (䕡) CJK UNIFIED IDEOGRAPH-4561	[FB80 C561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4561, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_376)
{
    // 2F9AF 0041;	
    // (䕡) CJK COMPATIBILITY IDEOGRAPH-2F9AF	[FB80 C561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_377)
{
    // 4561 0062;	
    // (䕡) CJK UNIFIED IDEOGRAPH-4561	[FB80 C561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4561, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_378)
{
    // 2F9AF 0062;	
    // (䕡) CJK COMPATIBILITY IDEOGRAPH-2F9AF	[FB80 C561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_379)
{
    // 4562 0021;	
    // (䕢) CJK UNIFIED IDEOGRAPH-4562	[FB80 C562 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4562, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC562, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_380)
{
    // 4562 003F;	
    // (䕢) CJK UNIFIED IDEOGRAPH-4562	[FB80 C562 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4562, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC562, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_381)
{
    // 4562 0061;	
    // (䕢) CJK UNIFIED IDEOGRAPH-4562	[FB80 C562 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4562, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_382)
{
    // 4562 0041;	
    // (䕢) CJK UNIFIED IDEOGRAPH-4562	[FB80 C562 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4562, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_383)
{
    // 4562 0062;	
    // (䕢) CJK UNIFIED IDEOGRAPH-4562	[FB80 C562 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4562, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC562, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_384)
{
    // 4563 0021;	
    // (䕣) CJK UNIFIED IDEOGRAPH-4563	[FB80 C563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4563, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_385)
{
    // 4563 003F;	
    // (䕣) CJK UNIFIED IDEOGRAPH-4563	[FB80 C563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4563, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_386)
{
    // 4563 0061;	
    // (䕣) CJK UNIFIED IDEOGRAPH-4563	[FB80 C563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4563, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_387)
{
    // 4563 0041;	
    // (䕣) CJK UNIFIED IDEOGRAPH-4563	[FB80 C563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4563, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_388)
{
    // 4563 0062;	
    // (䕣) CJK UNIFIED IDEOGRAPH-4563	[FB80 C563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4563, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_389)
{
    // 4564 0021;	
    // (䕤) CJK UNIFIED IDEOGRAPH-4564	[FB80 C564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4564, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_390)
{
    // 4564 003F;	
    // (䕤) CJK UNIFIED IDEOGRAPH-4564	[FB80 C564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4564, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_391)
{
    // 4564 0061;	
    // (䕤) CJK UNIFIED IDEOGRAPH-4564	[FB80 C564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4564, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_392)
{
    // 4564 0041;	
    // (䕤) CJK UNIFIED IDEOGRAPH-4564	[FB80 C564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4564, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_393)
{
    // 4564 0062;	
    // (䕤) CJK UNIFIED IDEOGRAPH-4564	[FB80 C564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4564, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_394)
{
    // 4565 0021;	
    // (䕥) CJK UNIFIED IDEOGRAPH-4565	[FB80 C565 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4565, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC565, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_395)
{
    // 4565 003F;	
    // (䕥) CJK UNIFIED IDEOGRAPH-4565	[FB80 C565 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4565, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC565, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_396)
{
    // 4565 0061;	
    // (䕥) CJK UNIFIED IDEOGRAPH-4565	[FB80 C565 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4565, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_397)
{
    // 4565 0041;	
    // (䕥) CJK UNIFIED IDEOGRAPH-4565	[FB80 C565 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4565, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_398)
{
    // 4565 0062;	
    // (䕥) CJK UNIFIED IDEOGRAPH-4565	[FB80 C565 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4565, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC565, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_399)
{
    // 4566 0021;	
    // (䕦) CJK UNIFIED IDEOGRAPH-4566	[FB80 C566 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4566, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC566, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_400)
{
    // 4566 003F;	
    // (䕦) CJK UNIFIED IDEOGRAPH-4566	[FB80 C566 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4566, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC566, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_401)
{
    // 4566 0061;	
    // (䕦) CJK UNIFIED IDEOGRAPH-4566	[FB80 C566 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4566, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_402)
{
    // 4566 0041;	
    // (䕦) CJK UNIFIED IDEOGRAPH-4566	[FB80 C566 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4566, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_403)
{
    // 4566 0062;	
    // (䕦) CJK UNIFIED IDEOGRAPH-4566	[FB80 C566 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4566, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC566, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_404)
{
    // 4567 0021;	
    // (䕧) CJK UNIFIED IDEOGRAPH-4567	[FB80 C567 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4567, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC567, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_405)
{
    // 4567 003F;	
    // (䕧) CJK UNIFIED IDEOGRAPH-4567	[FB80 C567 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4567, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC567, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_406)
{
    // 4567 0061;	
    // (䕧) CJK UNIFIED IDEOGRAPH-4567	[FB80 C567 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4567, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_407)
{
    // 4567 0041;	
    // (䕧) CJK UNIFIED IDEOGRAPH-4567	[FB80 C567 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4567, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_408)
{
    // 4567 0062;	
    // (䕧) CJK UNIFIED IDEOGRAPH-4567	[FB80 C567 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4567, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC567, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_409)
{
    // 4568 0021;	
    // (䕨) CJK UNIFIED IDEOGRAPH-4568	[FB80 C568 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4568, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC568, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_410)
{
    // 4568 003F;	
    // (䕨) CJK UNIFIED IDEOGRAPH-4568	[FB80 C568 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4568, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC568, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_411)
{
    // 4568 0061;	
    // (䕨) CJK UNIFIED IDEOGRAPH-4568	[FB80 C568 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4568, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_412)
{
    // 4568 0041;	
    // (䕨) CJK UNIFIED IDEOGRAPH-4568	[FB80 C568 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4568, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_413)
{
    // 4568 0062;	
    // (䕨) CJK UNIFIED IDEOGRAPH-4568	[FB80 C568 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4568, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC568, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_414)
{
    // 4569 0021;	
    // (䕩) CJK UNIFIED IDEOGRAPH-4569	[FB80 C569 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4569, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC569, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_415)
{
    // 4569 003F;	
    // (䕩) CJK UNIFIED IDEOGRAPH-4569	[FB80 C569 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4569, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC569, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_416)
{
    // 4569 0061;	
    // (䕩) CJK UNIFIED IDEOGRAPH-4569	[FB80 C569 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4569, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_417)
{
    // 4569 0041;	
    // (䕩) CJK UNIFIED IDEOGRAPH-4569	[FB80 C569 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4569, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_418)
{
    // 4569 0062;	
    // (䕩) CJK UNIFIED IDEOGRAPH-4569	[FB80 C569 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4569, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC569, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_419)
{
    // 456A 0021;	
    // (䕪) CJK UNIFIED IDEOGRAPH-456A	[FB80 C56A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC56A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_420)
{
    // 456A 003F;	
    // (䕪) CJK UNIFIED IDEOGRAPH-456A	[FB80 C56A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC56A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_421)
{
    // 456A 0061;	
    // (䕪) CJK UNIFIED IDEOGRAPH-456A	[FB80 C56A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC56A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_422)
{
    // 456A 0041;	
    // (䕪) CJK UNIFIED IDEOGRAPH-456A	[FB80 C56A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x456A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC56A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_423)
{
    // 456A 0062;	
    // (䕪) CJK UNIFIED IDEOGRAPH-456A	[FB80 C56A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC56A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_424)
{
    // 456B 0021;	
    // (䕫) CJK UNIFIED IDEOGRAPH-456B	[FB80 C56B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_425)
{
    // 2F9B2 0021;	
    // (䕫) CJK COMPATIBILITY IDEOGRAPH-2F9B2	[FB80 C56B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_426)
{
    // 456B 003F;	
    // (䕫) CJK UNIFIED IDEOGRAPH-456B	[FB80 C56B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_427)
{
    // 2F9B2 003F;	
    // (䕫) CJK COMPATIBILITY IDEOGRAPH-2F9B2	[FB80 C56B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_428)
{
    // 456B 0061;	
    // (䕫) CJK UNIFIED IDEOGRAPH-456B	[FB80 C56B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_429)
{
    // 2F9B2 0061;	
    // (䕫) CJK COMPATIBILITY IDEOGRAPH-2F9B2	[FB80 C56B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_430)
{
    // 456B 0041;	
    // (䕫) CJK UNIFIED IDEOGRAPH-456B	[FB80 C56B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x456B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_431)
{
    // 2F9B2 0041;	
    // (䕫) CJK COMPATIBILITY IDEOGRAPH-2F9B2	[FB80 C56B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_432)
{
    // 456B 0062;	
    // (䕫) CJK UNIFIED IDEOGRAPH-456B	[FB80 C56B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_433)
{
    // 2F9B2 0062;	
    // (䕫) CJK COMPATIBILITY IDEOGRAPH-2F9B2	[FB80 C56B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC56B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_434)
{
    // 456C 0021;	
    // (䕬) CJK UNIFIED IDEOGRAPH-456C	[FB80 C56C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC56C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_435)
{
    // 456C 003F;	
    // (䕬) CJK UNIFIED IDEOGRAPH-456C	[FB80 C56C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC56C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_436)
{
    // 456C 0061;	
    // (䕬) CJK UNIFIED IDEOGRAPH-456C	[FB80 C56C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC56C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_437)
{
    // 456C 0041;	
    // (䕬) CJK UNIFIED IDEOGRAPH-456C	[FB80 C56C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x456C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC56C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_438)
{
    // 456C 0062;	
    // (䕬) CJK UNIFIED IDEOGRAPH-456C	[FB80 C56C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC56C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_439)
{
    // 456D 0021;	
    // (䕭) CJK UNIFIED IDEOGRAPH-456D	[FB80 C56D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC56D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_440)
{
    // 456D 003F;	
    // (䕭) CJK UNIFIED IDEOGRAPH-456D	[FB80 C56D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC56D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_441)
{
    // 456D 0061;	
    // (䕭) CJK UNIFIED IDEOGRAPH-456D	[FB80 C56D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC56D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_442)
{
    // 456D 0041;	
    // (䕭) CJK UNIFIED IDEOGRAPH-456D	[FB80 C56D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x456D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC56D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_443)
{
    // 456D 0062;	
    // (䕭) CJK UNIFIED IDEOGRAPH-456D	[FB80 C56D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC56D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_444)
{
    // 456E 0021;	
    // (䕮) CJK UNIFIED IDEOGRAPH-456E	[FB80 C56E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC56E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_445)
{
    // 456E 003F;	
    // (䕮) CJK UNIFIED IDEOGRAPH-456E	[FB80 C56E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC56E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_446)
{
    // 456E 0061;	
    // (䕮) CJK UNIFIED IDEOGRAPH-456E	[FB80 C56E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC56E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_447)
{
    // 456E 0041;	
    // (䕮) CJK UNIFIED IDEOGRAPH-456E	[FB80 C56E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x456E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC56E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_448)
{
    // 456E 0062;	
    // (䕮) CJK UNIFIED IDEOGRAPH-456E	[FB80 C56E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC56E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_449)
{
    // 456F 0021;	
    // (䕯) CJK UNIFIED IDEOGRAPH-456F	[FB80 C56F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC56F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_450)
{
    // 456F 003F;	
    // (䕯) CJK UNIFIED IDEOGRAPH-456F	[FB80 C56F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC56F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_451)
{
    // 456F 0061;	
    // (䕯) CJK UNIFIED IDEOGRAPH-456F	[FB80 C56F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC56F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_452)
{
    // 456F 0041;	
    // (䕯) CJK UNIFIED IDEOGRAPH-456F	[FB80 C56F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x456F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC56F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_453)
{
    // 456F 0062;	
    // (䕯) CJK UNIFIED IDEOGRAPH-456F	[FB80 C56F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x456F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC56F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_454)
{
    // 4570 0021;	
    // (䕰) CJK UNIFIED IDEOGRAPH-4570	[FB80 C570 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4570, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC570, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_455)
{
    // 4570 003F;	
    // (䕰) CJK UNIFIED IDEOGRAPH-4570	[FB80 C570 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4570, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC570, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_456)
{
    // 4570 0061;	
    // (䕰) CJK UNIFIED IDEOGRAPH-4570	[FB80 C570 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4570, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_457)
{
    // 4570 0041;	
    // (䕰) CJK UNIFIED IDEOGRAPH-4570	[FB80 C570 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4570, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_458)
{
    // 4570 0062;	
    // (䕰) CJK UNIFIED IDEOGRAPH-4570	[FB80 C570 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4570, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC570, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_459)
{
    // 4571 0021;	
    // (䕱) CJK UNIFIED IDEOGRAPH-4571	[FB80 C571 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4571, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC571, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_460)
{
    // 4571 003F;	
    // (䕱) CJK UNIFIED IDEOGRAPH-4571	[FB80 C571 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4571, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC571, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_461)
{
    // 4571 0061;	
    // (䕱) CJK UNIFIED IDEOGRAPH-4571	[FB80 C571 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4571, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_462)
{
    // 4571 0041;	
    // (䕱) CJK UNIFIED IDEOGRAPH-4571	[FB80 C571 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4571, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_463)
{
    // 4571 0062;	
    // (䕱) CJK UNIFIED IDEOGRAPH-4571	[FB80 C571 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4571, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC571, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_464)
{
    // 4572 0021;	
    // (䕲) CJK UNIFIED IDEOGRAPH-4572	[FB80 C572 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4572, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC572, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_465)
{
    // 4572 003F;	
    // (䕲) CJK UNIFIED IDEOGRAPH-4572	[FB80 C572 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4572, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC572, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_466)
{
    // 4572 0061;	
    // (䕲) CJK UNIFIED IDEOGRAPH-4572	[FB80 C572 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4572, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_467)
{
    // 4572 0041;	
    // (䕲) CJK UNIFIED IDEOGRAPH-4572	[FB80 C572 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4572, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_468)
{
    // 4572 0062;	
    // (䕲) CJK UNIFIED IDEOGRAPH-4572	[FB80 C572 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4572, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC572, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_469)
{
    // 4573 0021;	
    // (䕳) CJK UNIFIED IDEOGRAPH-4573	[FB80 C573 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4573, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC573, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_470)
{
    // 4573 003F;	
    // (䕳) CJK UNIFIED IDEOGRAPH-4573	[FB80 C573 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4573, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC573, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_471)
{
    // 4573 0061;	
    // (䕳) CJK UNIFIED IDEOGRAPH-4573	[FB80 C573 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4573, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_472)
{
    // 4573 0041;	
    // (䕳) CJK UNIFIED IDEOGRAPH-4573	[FB80 C573 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4573, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_473)
{
    // 4573 0062;	
    // (䕳) CJK UNIFIED IDEOGRAPH-4573	[FB80 C573 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4573, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC573, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_474)
{
    // 4574 0021;	
    // (䕴) CJK UNIFIED IDEOGRAPH-4574	[FB80 C574 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4574, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC574, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_475)
{
    // 4574 003F;	
    // (䕴) CJK UNIFIED IDEOGRAPH-4574	[FB80 C574 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4574, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC574, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_476)
{
    // 4574 0061;	
    // (䕴) CJK UNIFIED IDEOGRAPH-4574	[FB80 C574 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4574, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_477)
{
    // 4574 0041;	
    // (䕴) CJK UNIFIED IDEOGRAPH-4574	[FB80 C574 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4574, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_478)
{
    // 4574 0062;	
    // (䕴) CJK UNIFIED IDEOGRAPH-4574	[FB80 C574 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4574, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC574, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_479)
{
    // 4575 0021;	
    // (䕵) CJK UNIFIED IDEOGRAPH-4575	[FB80 C575 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4575, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC575, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_480)
{
    // 4575 003F;	
    // (䕵) CJK UNIFIED IDEOGRAPH-4575	[FB80 C575 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4575, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC575, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_481)
{
    // 4575 0061;	
    // (䕵) CJK UNIFIED IDEOGRAPH-4575	[FB80 C575 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4575, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_482)
{
    // 4575 0041;	
    // (䕵) CJK UNIFIED IDEOGRAPH-4575	[FB80 C575 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4575, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_483)
{
    // 4575 0062;	
    // (䕵) CJK UNIFIED IDEOGRAPH-4575	[FB80 C575 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4575, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC575, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_484)
{
    // 4576 0021;	
    // (䕶) CJK UNIFIED IDEOGRAPH-4576	[FB80 C576 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4576, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC576, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_485)
{
    // 4576 003F;	
    // (䕶) CJK UNIFIED IDEOGRAPH-4576	[FB80 C576 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4576, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC576, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_486)
{
    // 4576 0061;	
    // (䕶) CJK UNIFIED IDEOGRAPH-4576	[FB80 C576 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4576, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_487)
{
    // 4576 0041;	
    // (䕶) CJK UNIFIED IDEOGRAPH-4576	[FB80 C576 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4576, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_488)
{
    // 4576 0062;	
    // (䕶) CJK UNIFIED IDEOGRAPH-4576	[FB80 C576 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4576, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC576, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_489)
{
    // 4577 0021;	
    // (䕷) CJK UNIFIED IDEOGRAPH-4577	[FB80 C577 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4577, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC577, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_490)
{
    // 4577 003F;	
    // (䕷) CJK UNIFIED IDEOGRAPH-4577	[FB80 C577 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4577, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC577, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_491)
{
    // 4577 0061;	
    // (䕷) CJK UNIFIED IDEOGRAPH-4577	[FB80 C577 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4577, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_492)
{
    // 4577 0041;	
    // (䕷) CJK UNIFIED IDEOGRAPH-4577	[FB80 C577 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4577, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_493)
{
    // 4577 0062;	
    // (䕷) CJK UNIFIED IDEOGRAPH-4577	[FB80 C577 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4577, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC577, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_494)
{
    // 4578 0021;	
    // (䕸) CJK UNIFIED IDEOGRAPH-4578	[FB80 C578 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4578, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC578, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_495)
{
    // 4578 003F;	
    // (䕸) CJK UNIFIED IDEOGRAPH-4578	[FB80 C578 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4578, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC578, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_496)
{
    // 4578 0061;	
    // (䕸) CJK UNIFIED IDEOGRAPH-4578	[FB80 C578 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4578, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_497)
{
    // 4578 0041;	
    // (䕸) CJK UNIFIED IDEOGRAPH-4578	[FB80 C578 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4578, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_498)
{
    // 4578 0062;	
    // (䕸) CJK UNIFIED IDEOGRAPH-4578	[FB80 C578 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4578, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC578, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_371_499)
{
    // 4579 0021;	
    // (䕹) CJK UNIFIED IDEOGRAPH-4579	[FB80 C579 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4579, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC579, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

