// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_115_000)
{
    // 004F 0302 0334 0309;	
    // (Ô̴) LATIN CAPITAL LETTER O, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0302, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_001)
{
    // 00D4 0334 0309;	
    // (Ô̴) LATIN CAPITAL LETTER O WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D4, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_002)
{
    // 1ED4 0334;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED4, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_003)
{
    // 006F 030C 0334;	
    // (ǒ) LATIN SMALL LETTER O, COMBINING CARON	[1E43 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_004)
{
    // 006F 0334 030C;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_005)
{
    // 01D2 0334;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D2, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_006)
{
    // 004F 030C 0334;	
    // (Ǒ) LATIN CAPITAL LETTER O, COMBINING CARON	[1E43 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_007)
{
    // 004F 0334 030C;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_008)
{
    // 01D1 0334;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01D1, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_009)
{
    // 006F 0308 0334;	
    // (ö) LATIN SMALL LETTER O, COMBINING DIAERESIS	[1E43 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_010)
{
    // 006F 0334 0308;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_011)
{
    // 00F6 0334;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F6, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_012)
{
    // 004F 0308 0334;	
    // (Ö) LATIN CAPITAL LETTER O, COMBINING DIAERESIS	[1E43 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_013)
{
    // 004F 0334 0308;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_014)
{
    // 00D6 0334;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D6, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_015)
{
    // 006F 0308 0304 0334;	
    // (ȫ) LATIN SMALL LETTER O, COMBINING DIAERESIS, COMBINING MACRON	[1E43 | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0308, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_016)
{
    // 006F 0308 0334 0304;	
    // (ö̴) LATIN SMALL LETTER O, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0308, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_017)
{
    // 00F6 0304 0334;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS, COMBINING MACRON	[1E43 | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F6, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_018)
{
    // 00F6 0334 0304;	
    // (ö̴) LATIN SMALL LETTER O WITH DIAERESIS, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F6, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_019)
{
    // 004F 0308 0334 0304;	
    // (Ö̴) LATIN CAPITAL LETTER O, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0308, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_020)
{
    // 004F 0334 0308 0304;	
    // (Ö̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING DIAERESIS	[1E43 | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0308, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_021)
{
    // 00D6 0304 0334;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS, COMBINING MACRON	[1E43 | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D6, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_022)
{
    // 00D6 0334 0304;	
    // (Ö̴) LATIN CAPITAL LETTER O WITH DIAERESIS, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D6, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_023)
{
    // 006F 030B 0334;	
    // (ő) LATIN SMALL LETTER O, COMBINING DOUBLE ACUTE ACCENT	[1E43 | 0020 004A 002C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x030B, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_024)
{
    // 006F 0334 030B;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x030B };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_025)
{
    // 0151 0334;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 | 0020 004A 002C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0151, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_026)
{
    // 004F 030B 0334;	
    // (Ő) LATIN CAPITAL LETTER O, COMBINING DOUBLE ACUTE ACCENT	[1E43 | 0020 004A 002C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x030B, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_027)
{
    // 004F 0334 030B;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x030B };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_028)
{
    // 0150 0334;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 | 0020 004A 002C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0150, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_029)
{
    // 006F 0303 0334;	
    // (õ) LATIN SMALL LETTER O, COMBINING TILDE	[1E43 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_030)
{
    // 006F 0334 0303;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_031)
{
    // 00F5 0334;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F5, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_032)
{
    // 004F 0303 0334;	
    // (Õ) LATIN CAPITAL LETTER O, COMBINING TILDE	[1E43 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_033)
{
    // 004F 0334 0303;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_034)
{
    // 00D5 0334;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D5, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_035)
{
    // 006F 0303 0301 0334;	
    // (ṍ) LATIN SMALL LETTER O, COMBINING TILDE, COMBINING ACUTE ACCENT	[1E43 | 0020 004A 002D 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0303, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_036)
{
    // 00F5 0334 0301;	
    // (õ̴) LATIN SMALL LETTER O WITH TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F5, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_037)
{
    // 00F5 0334 0341;	
    // (õ̴) LATIN SMALL LETTER O WITH TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F5, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_038)
{
    // 1E4D 0334;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 | 0020 004A 002D 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4D, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_039)
{
    // 004F 0334 0303 0301;	
    // (Õ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING TILDE	[1E43 | 0020 004A 002D 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0303, 0x0301 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_040)
{
    // 004F 0334 0303 0341;	
    // (Õ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING TILDE	[1E43 | 0020 004A 002D 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0303, 0x0341 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_041)
{
    // 00D5 0334 0301;	
    // (Õ̴) LATIN CAPITAL LETTER O WITH TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D5, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_042)
{
    // 00D5 0334 0341;	
    // (Õ̴) LATIN CAPITAL LETTER O WITH TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D5, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_043)
{
    // 006F 0303 0334 0308;	
    // (õ̴) LATIN SMALL LETTER O, COMBINING TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 002B | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0303, 0x0334, 0x0308 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_044)
{
    // 006F 0334 0303 0308;	
    // (õ̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING TILDE	[1E43 | 0020 004A 002D 002B | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0303, 0x0308 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_045)
{
    // 00F5 0308 0334;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE, COMBINING DIAERESIS	[1E43 | 0020 004A 002D 002B | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F5, 0x0308, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_046)
{
    // 1E4F 0334;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 | 0020 004A 002D 002B | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4F, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_047)
{
    // 004F 0303 0334 0308;	
    // (Õ̴) LATIN CAPITAL LETTER O, COMBINING TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 002B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0303, 0x0334, 0x0308 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_048)
{
    // 004F 0334 0303 0308;	
    // (Õ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING TILDE	[1E43 | 0020 004A 002D 002B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0303, 0x0308 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_049)
{
    // 00D5 0308 0334;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE, COMBINING DIAERESIS	[1E43 | 0020 004A 002D 002B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D5, 0x0308, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_050)
{
    // 1E4E 0334;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 | 0020 004A 002D 002B | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4E, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_051)
{
    // 006F 0334 0303 0304;	
    // (õ̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING TILDE	[1E43 | 0020 004A 002D 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0303, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_052)
{
    // 00F5 0304 0334;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE, COMBINING MACRON	[1E43 | 0020 004A 002D 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F5, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_053)
{
    // 00F5 0334 0304;	
    // (õ̴) LATIN SMALL LETTER O WITH TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F5, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_054)
{
    // 022D 0334;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 | 0020 004A 002D 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022D, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_055)
{
    // 004F 0334 0303 0304;	
    // (Õ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING TILDE	[1E43 | 0020 004A 002D 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0303, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_056)
{
    // 00D5 0304 0334;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE, COMBINING MACRON	[1E43 | 0020 004A 002D 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D5, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_057)
{
    // 00D5 0334 0304;	
    // (Õ̴) LATIN CAPITAL LETTER O WITH TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002D 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D5, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_058)
{
    // 022C 0334;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 | 0020 004A 002D 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022C, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002D, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_059)
{
    // 006F 0307 0334;	
    // (ȯ) LATIN SMALL LETTER O, COMBINING DOT ABOVE	[1E43 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_060)
{
    // 006F 0334 0307;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_061)
{
    // 022F 0334;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022F, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_062)
{
    // 004F 0307 0334;	
    // (Ȯ) LATIN CAPITAL LETTER O, COMBINING DOT ABOVE	[1E43 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_063)
{
    // 004F 0334 0307;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_064)
{
    // 022E 0334;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x022E, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_065)
{
    // 006F 0307 0304 0334;	
    // (ȱ) LATIN SMALL LETTER O, COMBINING DOT ABOVE, COMBINING MACRON	[1E43 | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0307, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_066)
{
    // 006F 0307 0334 0304;	
    // (ȯ̴) LATIN SMALL LETTER O, COMBINING DOT ABOVE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0307, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_067)
{
    // 022F 0334 0304;	
    // (ȯ̴) LATIN SMALL LETTER O WITH DOT ABOVE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x022F, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_068)
{
    // 0231 0334;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0231, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_069)
{
    // 004F 0334 0307 0304;	
    // (Ȯ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING DOT ABOVE	[1E43 | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0307, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_070)
{
    // 022E 0304 0334;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE, COMBINING MACRON	[1E43 | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x022E, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_071)
{
    // 022E 0334 0304;	
    // (Ȯ̴) LATIN CAPITAL LETTER O WITH DOT ABOVE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x022E, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_072)
{
    // 0230 0334;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0230, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_073)
{
    // 006F 0328 0334;	
    // (ǫ) LATIN SMALL LETTER O, COMBINING OGONEK	[1E43 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_074)
{
    // 006F 0334 0328;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_075)
{
    // 01EB 0334;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EB, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_076)
{
    // 004F 0328 0334;	
    // (Ǫ) LATIN CAPITAL LETTER O, COMBINING OGONEK	[1E43 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_077)
{
    // 004F 0334 0328;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_078)
{
    // 01EA 0334;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EA, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_079)
{
    // 006F 0304 0334 0328;	
    // (ō̴) LATIN SMALL LETTER O, COMBINING MACRON, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0031 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0304, 0x0334, 0x0328 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_080)
{
    // 006F 0334 0304 0328;	
    // (ō̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING MACRON	[1E43 | 0020 004A 0031 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0304, 0x0328 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_081)
{
    // 014D 0334 0328;	
    // (ō̴) LATIN SMALL LETTER O WITH MACRON, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0031 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014D, 0x0334, 0x0328 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_082)
{
    // 01ED 0334;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 | 0020 004A 0031 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01ED, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_083)
{
    // 004F 0304 0334 0328;	
    // (Ō̴) LATIN CAPITAL LETTER O, COMBINING MACRON, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0031 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0304, 0x0334, 0x0328 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_084)
{
    // 004F 0334 0328 0304;	
    // (Ǫ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING OGONEK	[1E43 | 0020 004A 0031 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0328, 0x0304 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_085)
{
    // 014C 0334 0328;	
    // (Ō̴) LATIN CAPITAL LETTER O WITH MACRON, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0031 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014C, 0x0334, 0x0328 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_086)
{
    // 01EC 0334;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 | 0020 004A 0031 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EC, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0031, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_087)
{
    // 006F 0304 0334;	
    // (ō) LATIN SMALL LETTER O, COMBINING MACRON	[1E43 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_088)
{
    // 006F 0334 0304;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_089)
{
    // 014D 0334;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x014D, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_090)
{
    // 004F 0304 0334;	
    // (Ō) LATIN CAPITAL LETTER O, COMBINING MACRON	[1E43 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_091)
{
    // 004F 0334 0304;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_092)
{
    // 014C 0334;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x014C, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_093)
{
    // 006F 0304 0301 0334;	
    // (ṓ) LATIN SMALL LETTER O, COMBINING MACRON, COMBINING ACUTE ACCENT	[1E43 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0304, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_094)
{
    // 014D 0301 0334;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON, COMBINING ACUTE ACCENT	[1E43 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014D, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_095)
{
    // 014D 0341 0334;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON, COMBINING ACUTE TONE MARK	[1E43 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014D, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_096)
{
    // 1E53 0334;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E53, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_097)
{
    // 004F 0304 0301 0334;	
    // (Ṓ) LATIN CAPITAL LETTER O, COMBINING MACRON, COMBINING ACUTE ACCENT	[1E43 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0304, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_098)
{
    // 004F 0334 0304 0301;	
    // (Ō̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING MACRON	[1E43 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0304, 0x0301 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_099)
{
    // 004F 0334 0304 0341;	
    // (Ō̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING MACRON	[1E43 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0304, 0x0341 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_100)
{
    // 1E52 0334;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E52, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_101)
{
    // 006F 0304 0300 0334;	
    // (ṑ) LATIN SMALL LETTER O, COMBINING MACRON, COMBINING GRAVE ACCENT	[1E43 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0304, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_102)
{
    // 014D 0300 0334;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON, COMBINING GRAVE ACCENT	[1E43 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014D, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_103)
{
    // 014D 0340 0334;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON, COMBINING GRAVE TONE MARK	[1E43 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014D, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_104)
{
    // 1E51 0334;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E51, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_105)
{
    // 004F 0334 0304 0300;	
    // (Ō̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING MACRON	[1E43 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0304, 0x0300 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_106)
{
    // 004F 0334 0304 0340;	
    // (Ō̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING MACRON	[1E43 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0304, 0x0340 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_107)
{
    // 014C 0300 0334;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON, COMBINING GRAVE ACCENT	[1E43 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014C, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_108)
{
    // 014C 0340 0334;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON, COMBINING GRAVE TONE MARK	[1E43 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x014C, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_109)
{
    // 006F 0309 0334;	
    // (ỏ) LATIN SMALL LETTER O, COMBINING HOOK ABOVE	[1E43 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_110)
{
    // 006F 0334 0309;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_111)
{
    // 1ECF 0334;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECF, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_112)
{
    // 004F 0309 0334;	
    // (Ỏ) LATIN CAPITAL LETTER O, COMBINING HOOK ABOVE	[1E43 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_113)
{
    // 004F 0334 0309;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_114)
{
    // 1ECE 0334;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECE, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_115)
{
    // 006F 030F 0334;	
    // (ȍ) LATIN SMALL LETTER O, COMBINING DOUBLE GRAVE ACCENT	[1E43 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_116)
{
    // 006F 0334 030F;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_117)
{
    // 020D 0334;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020D, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_118)
{
    // 004F 030F 0334;	
    // (Ȍ) LATIN CAPITAL LETTER O, COMBINING DOUBLE GRAVE ACCENT	[1E43 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_119)
{
    // 004F 0334 030F;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_120)
{
    // 020C 0334;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020C, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_121)
{
    // 006F 0311 0334;	
    // (ȏ) LATIN SMALL LETTER O, COMBINING INVERTED BREVE	[1E43 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_122)
{
    // 006F 0334 0311;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_123)
{
    // 020F 0334;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020F, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_124)
{
    // 004F 0311 0334;	
    // (Ȏ) LATIN CAPITAL LETTER O, COMBINING INVERTED BREVE	[1E43 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_125)
{
    // 004F 0334 0311;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_126)
{
    // 020E 0334;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020E, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_127)
{
    // 006F 031B 0334;	
    // (ơ) LATIN SMALL LETTER O, COMBINING HORN	[1E43 | 0020 004A 003F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x031B, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_128)
{
    // 006F 0334 031B;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x031B };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_129)
{
    // 01A1 0334;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 | 0020 004A 003F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01A1, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_130)
{
    // 004F 031B 0334;	
    // (Ơ) LATIN CAPITAL LETTER O, COMBINING HORN	[1E43 | 0020 004A 003F | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x031B, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_131)
{
    // 004F 0334 031B;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x031B };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_132)
{
    // 01A0 0334;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 | 0020 004A 003F | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01A0, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_133)
{
    // 006F 031B 0301 0334;	
    // (ớ) LATIN SMALL LETTER O, COMBINING HORN, COMBINING ACUTE ACCENT	[1E43 | 0020 004A 003F 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x031B, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_134)
{
    // 006F 031B 0341 0334;	
    // (ớ) LATIN SMALL LETTER O, COMBINING HORN, COMBINING ACUTE TONE MARK	[1E43 | 0020 004A 003F 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x031B, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_135)
{
    // 006F 0334 0301 031B;	
    // (ó̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING ACUTE ACCENT	[1E43 | 0020 004A 003F 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0301, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_136)
{
    // 006F 0334 0341 031B;	
    // (ó̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING ACUTE TONE MARK	[1E43 | 0020 004A 003F 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0341, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_137)
{
    // 004F 0301 031B 0334;	
    // (Ớ) LATIN CAPITAL LETTER O, COMBINING ACUTE ACCENT, COMBINING HORN	[1E43 | 0020 004A 003F 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0301, 0x031B, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_138)
{
    // 004F 0341 0334 031B;	
    // (Ó̴) LATIN CAPITAL LETTER O, COMBINING ACUTE TONE MARK, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0341, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_139)
{
    // 01A0 0334 0301;	
    // (Ơ̴) LATIN CAPITAL LETTER O WITH HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x01A0, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_140)
{
    // 01A0 0334 0341;	
    // (Ơ̴) LATIN CAPITAL LETTER O WITH HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x01A0, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_141)
{
    // 006F 0300 0334 031B;	
    // (ò̴) LATIN SMALL LETTER O, COMBINING GRAVE ACCENT, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0300, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_142)
{
    // 006F 031B 0334 0300;	
    // (ơ̴) LATIN SMALL LETTER O, COMBINING HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x031B, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_143)
{
    // 006F 031B 0334 0340;	
    // (ơ̴) LATIN SMALL LETTER O, COMBINING HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x031B, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_144)
{
    // 006F 0340 0334 031B;	
    // (ò̴) LATIN SMALL LETTER O, COMBINING GRAVE TONE MARK, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0340, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_145)
{
    // 004F 0300 031B 0334;	
    // (Ờ) LATIN CAPITAL LETTER O, COMBINING GRAVE ACCENT, COMBINING HORN	[1E43 | 0020 004A 003F 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0300, 0x031B, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_146)
{
    // 004F 0340 0334 031B;	
    // (Ò̴) LATIN CAPITAL LETTER O, COMBINING GRAVE TONE MARK, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0340, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_147)
{
    // 00D2 031B 0334;	
    // (Ờ) LATIN CAPITAL LETTER O WITH GRAVE, COMBINING HORN	[1E43 | 0020 004A 003F 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D2, 0x031B, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_148)
{
    // 01A0 0334 0300;	
    // (Ơ̴) LATIN CAPITAL LETTER O WITH HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x01A0, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_149)
{
    // 006F 031B 0303 0334;	
    // (ỡ) LATIN SMALL LETTER O, COMBINING HORN, COMBINING TILDE	[1E43 | 0020 004A 003F 002D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x031B, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_150)
{
    // 006F 0334 0303 031B;	
    // (õ̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING TILDE	[1E43 | 0020 004A 003F 002D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0303, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_151)
{
    // 006F 0334 031B 0303;	
    // (ơ̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING HORN	[1E43 | 0020 004A 003F 002D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x031B, 0x0303 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_152)
{
    // 1EE1 0334;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 | 0020 004A 003F 002D | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE1, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_153)
{
    // 004F 0303 031B 0334;	
    // (Ỡ) LATIN CAPITAL LETTER O, COMBINING TILDE, COMBINING HORN	[1E43 | 0020 004A 003F 002D | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0303, 0x031B, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_154)
{
    // 004F 0303 0334 031B;	
    // (Õ̴) LATIN CAPITAL LETTER O, COMBINING TILDE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 002D | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0303, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_155)
{
    // 004F 031B 0303 0334;	
    // (Ỡ) LATIN CAPITAL LETTER O, COMBINING HORN, COMBINING TILDE	[1E43 | 0020 004A 003F 002D | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x031B, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_156)
{
    // 004F 031B 0334 0303;	
    // (Ơ̴) LATIN CAPITAL LETTER O, COMBINING HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 002D | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x031B, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_157)
{
    // 006F 0334 0309 031B;	
    // (ỏ̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING HOOK ABOVE	[1E43 | 0020 004A 003F 003B | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0309, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_158)
{
    // 01A1 0334 0309;	
    // (ơ̴) LATIN SMALL LETTER O WITH HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 003B | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x01A1, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_159)
{
    // 1ECF 0334 031B;	
    // (ỏ̴) LATIN SMALL LETTER O WITH HOOK ABOVE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 003B | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1ECF, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_160)
{
    // 1EDF 0334;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 | 0020 004A 003F 003B | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDF, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_161)
{
    // 004F 0334 031B 0309;	
    // (Ơ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING HORN	[1E43 | 0020 004A 003F 003B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x031B, 0x0309 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_162)
{
    // 01A0 0334 0309;	
    // (Ơ̴) LATIN CAPITAL LETTER O WITH HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x01A0, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_163)
{
    // 1ECE 031B 0334;	
    // (Ở) LATIN CAPITAL LETTER O WITH HOOK ABOVE, COMBINING HORN	[1E43 | 0020 004A 003F 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1ECE, 0x031B, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_164)
{
    // 1ECE 0334 031B;	
    // (Ỏ̴) LATIN CAPITAL LETTER O WITH HOOK ABOVE, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1ECE, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_165)
{
    // 006F 0334 0323 031B;	
    // (ọ̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING DOT BELOW	[1E43 | 0020 004A 003F 0042 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0323, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_166)
{
    // 1ECD 031B 0334;	
    // (ợ) LATIN SMALL LETTER O WITH DOT BELOW, COMBINING HORN	[1E43 | 0020 004A 003F 0042 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1ECD, 0x031B, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_167)
{
    // 1ECD 0334 031B;	
    // (ọ̴) LATIN SMALL LETTER O WITH DOT BELOW, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0042 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1ECD, 0x0334, 0x031B };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_168)
{
    // 1EE3 0334;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 | 0020 004A 003F 0042 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE3, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_169)
{
    // 004F 031B 0323 0334;	
    // (Ợ) LATIN CAPITAL LETTER O, COMBINING HORN, COMBINING DOT BELOW	[1E43 | 0020 004A 003F 0042 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x031B, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_170)
{
    // 004F 031B 0334 0323;	
    // (Ơ̴) LATIN CAPITAL LETTER O, COMBINING HORN, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 003F 0042 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x031B, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_171)
{
    // 1ECC 031B 0334;	
    // (Ợ) LATIN CAPITAL LETTER O WITH DOT BELOW, COMBINING HORN	[1E43 | 0020 004A 003F 0042 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1ECC, 0x031B, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_172)
{
    // 1EE2 0334;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 | 0020 004A 003F 0042 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE2, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x003F, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_173)
{
    // 006F 0323 0334;	
    // (ọ) LATIN SMALL LETTER O, COMBINING DOT BELOW	[1E43 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_174)
{
    // 006F 0334 0323;	
    // (o̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006F, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_175)
{
    // 1ECD 0334;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECD, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_176)
{
    // 004F 0323 0334;	
    // (Ọ) LATIN CAPITAL LETTER O, COMBINING DOT BELOW	[1E43 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_177)
{
    // 004F 0334 0323;	
    // (O̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004F, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_178)
{
    // 1ECC 0334;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECC, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_179)
{
    // 006F 0334 0302 0323;	
    // (ô̴) LATIN SMALL LETTER O, COMBINING TILDE OVERLAY, COMBINING CIRCUMFLEX ACCENT	[1E43 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x006F, 0x0334, 0x0302, 0x0323 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_180)
{
    // 00F4 0323 0334;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX, COMBINING DOT BELOW	[1E43 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F4, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_181)
{
    // 00F4 0334 0323;	
    // (ô̴) LATIN SMALL LETTER O WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00F4, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_182)
{
    // 1ED9 0334;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED9, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_183)
{
    // 004F 0323 0334 0302;	
    // (Ọ̴) LATIN CAPITAL LETTER O, COMBINING DOT BELOW, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0323, 0x0334, 0x0302 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_184)
{
    // 004F 0334 0323 0302;	
    // (Ọ̴) LATIN CAPITAL LETTER O, COMBINING TILDE OVERLAY, COMBINING DOT BELOW	[1E43 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x004F, 0x0334, 0x0323, 0x0302 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_185)
{
    // 00D4 0323 0334;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX, COMBINING DOT BELOW	[1E43 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D4, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_186)
{
    // 00D4 0334 0323;	
    // (Ô̴) LATIN CAPITAL LETTER O WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1E43 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00D4, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1E43, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_187)
{
    // 0334 0366;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x0366 };
    uint32_t const ces[8] = { 0x1E43, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_188)
{
    // 0366 0334;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0366, 0x0334 };
    uint32_t const ces[8] = { 0x1E43, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_189)
{
    // 0334 1DF3;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 | 004A 0020 002B | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DF3 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x004A, 0x0020, 0x002B, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_190)
{
    // 1DF3 0334;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 | 004A 0020 002B | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x1DF3, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x004A, 0x0020, 0x002B, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_191)
{
    // 0334 1DED;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 | 004A 0020 0034 | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DED };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x004A, 0x0020, 0x0034, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_192)
{
    // 1DED 0334;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 | 004A 0020 0034 | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x1DED, 0x0334 };
    uint32_t const ces[10] = { 0x1E43, 0x0000, 0x004A, 0x0020, 0x0034, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_193)
{
    // 006F 0021;	
    // (o) LATIN SMALL LETTER O	[1E43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x006F, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_194)
{
    // FF4F 0021;	
    // (ｏ) FULLWIDTH LATIN SMALL LETTER O	[1E43 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF4F, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_195)
{
    // 0366 0021;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0366, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_196)
{
    // 2134 0021;	
    // (ℴ) SCRIPT SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2134, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_197)
{
    // 1D428 0021;	
    // (𝐨) MATHEMATICAL BOLD SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D428, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_198)
{
    // 1D45C 0021;	
    // (𝑜) MATHEMATICAL ITALIC SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45C, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_199)
{
    // 1D490 0021;	
    // (𝒐) MATHEMATICAL BOLD ITALIC SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D490, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_200)
{
    // 1D4F8 0021;	
    // (𝓸) MATHEMATICAL BOLD SCRIPT SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F8, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_201)
{
    // 1D52C 0021;	
    // (𝔬) MATHEMATICAL FRAKTUR SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52C, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_202)
{
    // 1D560 0021;	
    // (𝕠) MATHEMATICAL DOUBLE-STRUCK SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D560, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_203)
{
    // 1D594 0021;	
    // (𝖔) MATHEMATICAL BOLD FRAKTUR SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D594, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_204)
{
    // 1D5C8 0021;	
    // (𝗈) MATHEMATICAL SANS-SERIF SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C8, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_205)
{
    // 1D5FC 0021;	
    // (𝗼) MATHEMATICAL SANS-SERIF BOLD SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FC, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_206)
{
    // 1D630 0021;	
    // (𝘰) MATHEMATICAL SANS-SERIF ITALIC SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D630, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_207)
{
    // 1D664 0021;	
    // (𝙤) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D664, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_208)
{
    // 1D698 0021;	
    // (𝚘) MATHEMATICAL MONOSPACE SMALL O	[1E43 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D698, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_209)
{
    // 24DE 0021;	
    // (ⓞ) CIRCLED LATIN SMALL LETTER O	[1E43 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DE, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_210)
{
    // 004F 0021;	
    // (O) LATIN CAPITAL LETTER O	[1E43 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004F, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_211)
{
    // FF2F 0021;	
    // (Ｏ) FULLWIDTH LATIN CAPITAL LETTER O	[1E43 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2F, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_212)
{
    // 1D40E 0021;	
    // (𝐎) MATHEMATICAL BOLD CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40E, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_213)
{
    // 1D442 0021;	
    // (𝑂) MATHEMATICAL ITALIC CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D442, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_214)
{
    // 1D476 0021;	
    // (𝑶) MATHEMATICAL BOLD ITALIC CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D476, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_215)
{
    // 1D4AA 0021;	
    // (𝒪) MATHEMATICAL SCRIPT CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AA, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_216)
{
    // 1D4DE 0021;	
    // (𝓞) MATHEMATICAL BOLD SCRIPT CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DE, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_217)
{
    // 1D512 0021;	
    // (𝔒) MATHEMATICAL FRAKTUR CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D512, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_218)
{
    // 1D546 0021;	
    // (𝕆) MATHEMATICAL DOUBLE-STRUCK CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D546, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_219)
{
    // 1D57A 0021;	
    // (𝕺) MATHEMATICAL BOLD FRAKTUR CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57A, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_220)
{
    // 1D5AE 0021;	
    // (𝖮) MATHEMATICAL SANS-SERIF CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AE, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_221)
{
    // 1D5E2 0021;	
    // (𝗢) MATHEMATICAL SANS-SERIF BOLD CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E2, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_222)
{
    // 1D616 0021;	
    // (𝘖) MATHEMATICAL SANS-SERIF ITALIC CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D616, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_223)
{
    // 1D64A 0021;	
    // (𝙊) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64A, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_224)
{
    // 1D67E 0021;	
    // (𝙾) MATHEMATICAL MONOSPACE CAPITAL O	[1E43 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67E, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_225)
{
    // 24C4 0021;	
    // (Ⓞ) CIRCLED LATIN CAPITAL LETTER O	[1E43 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C4, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_226)
{
    // 1F15E 0021;	
    // (🅞) NEGATIVE CIRCLED LATIN CAPITAL LETTER O	[1E43 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15E, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_227)
{
    // 00BA 0021;	
    // (º) MASCULINE ORDINAL INDICATOR	[1E43 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00BA, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_228)
{
    // 1D52 0021;	
    // (ᵒ) MODIFIER LETTER SMALL O	[1E43 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D52, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_229)
{
    // 2092 0021;	
    // (ₒ) LATIN SUBSCRIPT SMALL LETTER O	[1E43 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2092, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_230)
{
    // 1D3C 0021;	
    // (ᴼ) MODIFIER LETTER CAPITAL O	[1E43 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3C, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_231)
{
    // 1F13E 0021;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13E, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_232)
{
    // 1F17E 0021;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17E, 0x0021 };
    uint32_t const ces[9] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_233)
{
    // 00F3 0021;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F3, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_234)
{
    // 00D3 0021;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D3, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_235)
{
    // 00F2 0021;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F2, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_236)
{
    // 00D2 0021;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D2, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_237)
{
    // 014F 0021;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x014F, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_238)
{
    // 014E 0021;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x014E, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_239)
{
    // 00F4 0021;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F4, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_240)
{
    // 00D4 0021;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D4, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_241)
{
    // 1ED1 0021;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 0261 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED1, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_242)
{
    // 1ED0 0021;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 0261 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED0, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_243)
{
    // 1ED3 0021;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 0261 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED3, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_244)
{
    // 1ED2 0021;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 0261 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED2, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_245)
{
    // 1ED7 0021;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 0261 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED7, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_246)
{
    // 1ED6 0021;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 0261 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED6, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_247)
{
    // 1ED5 0021;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 0261 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED5, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_248)
{
    // 1ED4 0021;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 0261 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED4, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_249)
{
    // 01D2 0021;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D2, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_250)
{
    // 01D1 0021;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01D1, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_251)
{
    // 00F6 0021;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F6, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_252)
{
    // 1DF3 0021;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 0261 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF3, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_253)
{
    // A79D 0021;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 0261 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79D, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_254)
{
    // 00D6 0021;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D6, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_255)
{
    // A79C 0021;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 0261 | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79C, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_256)
{
    // 022B 0021;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 0261 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022B, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_257)
{
    // 022A 0021;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 0261 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022A, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_258)
{
    // 0151 0021;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 0261 | 0020 002C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0151, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_259)
{
    // 0150 0021;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 0261 | 0020 002C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0150, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_260)
{
    // 00F5 0021;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 0261 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F5, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_261)
{
    // 00D5 0021;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 0261 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D5, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_262)
{
    // 1E4D 0021;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 0261 | 0020 002D 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4D, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_263)
{
    // 1E4C 0021;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 0261 | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4C, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_264)
{
    // 1E4F 0021;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 0261 | 0020 002D 002B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4F, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_265)
{
    // 1E4E 0021;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 0261 | 0020 002D 002B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4E, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_266)
{
    // 022D 0021;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 0261 | 0020 002D 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022D, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_267)
{
    // 022C 0021;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 0261 | 0020 002D 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022C, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_268)
{
    // 022F 0021;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022F, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_269)
{
    // 022E 0021;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x022E, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_270)
{
    // 0231 0021;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 0261 | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0231, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_271)
{
    // 0230 0021;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 0261 | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0230, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_272)
{
    // 00F8 0021;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F8, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_273)
{
    // 00D8 0021;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 0261 | 0020 002F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D8, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_274)
{
    // 01FF 0021;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 0261 | 0020 002F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FF, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_275)
{
    // 01FE 0021;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 0261 | 0020 002F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FE, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_276)
{
    // 01EB 0021;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 0261 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EB, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_277)
{
    // 01EA 0021;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 0261 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EA, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_278)
{
    // 01ED 0021;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 0261 | 0020 0031 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01ED, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_279)
{
    // 01EC 0021;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 0261 | 0020 0031 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EC, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_280)
{
    // 014D 0021;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x014D, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_281)
{
    // 014C 0021;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x014C, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_282)
{
    // 1E53 0021;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 0261 | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E53, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_283)
{
    // 1E52 0021;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 0261 | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E52, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_284)
{
    // 1E51 0021;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 0261 | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E51, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_285)
{
    // 1E50 0021;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 0261 | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E50, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_286)
{
    // 1DED 0021;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 0261 | 0020 0034 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DED, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_287)
{
    // 1ECF 0021;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 0261 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECF, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_288)
{
    // 1ECE 0021;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 0261 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECE, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_289)
{
    // 020D 0021;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 0261 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020D, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_290)
{
    // 020C 0021;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 0261 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020C, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_291)
{
    // 020F 0021;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 0261 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020F, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_292)
{
    // 020E 0021;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 0261 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020E, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_293)
{
    // 01A1 0021;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 0261 | 0020 003F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01A1, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_294)
{
    // 01A0 0021;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 0261 | 0020 003F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01A0, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_295)
{
    // 1EDB 0021;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 0261 | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDB, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_296)
{
    // 1EDA 0021;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 0261 | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDA, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_297)
{
    // 1EDD 0021;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 0261 | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDD, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_298)
{
    // 1EDC 0021;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 0261 | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDC, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_299)
{
    // 1EE1 0021;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 0261 | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE1, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_300)
{
    // 1EE0 0021;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 0261 | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE0, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_301)
{
    // 1EDF 0021;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 0261 | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDF, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_302)
{
    // 1EDE 0021;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 0261 | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDE, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_303)
{
    // 1EE3 0021;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 0261 | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE3, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_304)
{
    // 1EE2 0021;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 0261 | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE2, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_305)
{
    // 1ECD 0021;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECD, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_306)
{
    // 1ECC 0021;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECC, 0x0021 };
    uint32_t const ces[11] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_307)
{
    // 1ED9 0021;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 0261 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED9, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_308)
{
    // 1ED8 0021;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 0261 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED8, 0x0021 };
    uint32_t const ces[13] = { 0x1E43, 0x0261, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_309)
{
    // 006F 003F;	
    // (o) LATIN SMALL LETTER O	[1E43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x006F, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_310)
{
    // FF4F 003F;	
    // (ｏ) FULLWIDTH LATIN SMALL LETTER O	[1E43 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF4F, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_311)
{
    // 0366 003F;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0366, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_312)
{
    // 2134 003F;	
    // (ℴ) SCRIPT SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2134, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_313)
{
    // 1D428 003F;	
    // (𝐨) MATHEMATICAL BOLD SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D428, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_314)
{
    // 1D45C 003F;	
    // (𝑜) MATHEMATICAL ITALIC SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45C, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_315)
{
    // 1D490 003F;	
    // (𝒐) MATHEMATICAL BOLD ITALIC SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D490, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_316)
{
    // 1D4F8 003F;	
    // (𝓸) MATHEMATICAL BOLD SCRIPT SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F8, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_317)
{
    // 1D52C 003F;	
    // (𝔬) MATHEMATICAL FRAKTUR SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52C, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_318)
{
    // 1D560 003F;	
    // (𝕠) MATHEMATICAL DOUBLE-STRUCK SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D560, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_319)
{
    // 1D594 003F;	
    // (𝖔) MATHEMATICAL BOLD FRAKTUR SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D594, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_320)
{
    // 1D5C8 003F;	
    // (𝗈) MATHEMATICAL SANS-SERIF SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C8, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_321)
{
    // 1D5FC 003F;	
    // (𝗼) MATHEMATICAL SANS-SERIF BOLD SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FC, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_322)
{
    // 1D630 003F;	
    // (𝘰) MATHEMATICAL SANS-SERIF ITALIC SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D630, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_323)
{
    // 1D664 003F;	
    // (𝙤) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D664, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_324)
{
    // 1D698 003F;	
    // (𝚘) MATHEMATICAL MONOSPACE SMALL O	[1E43 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D698, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_325)
{
    // 24DE 003F;	
    // (ⓞ) CIRCLED LATIN SMALL LETTER O	[1E43 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DE, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_326)
{
    // 004F 003F;	
    // (O) LATIN CAPITAL LETTER O	[1E43 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004F, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_327)
{
    // FF2F 003F;	
    // (Ｏ) FULLWIDTH LATIN CAPITAL LETTER O	[1E43 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2F, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_328)
{
    // 1D40E 003F;	
    // (𝐎) MATHEMATICAL BOLD CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40E, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_329)
{
    // 1D442 003F;	
    // (𝑂) MATHEMATICAL ITALIC CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D442, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_330)
{
    // 1D476 003F;	
    // (𝑶) MATHEMATICAL BOLD ITALIC CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D476, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_331)
{
    // 1D4AA 003F;	
    // (𝒪) MATHEMATICAL SCRIPT CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AA, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_332)
{
    // 1D4DE 003F;	
    // (𝓞) MATHEMATICAL BOLD SCRIPT CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DE, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_333)
{
    // 1D512 003F;	
    // (𝔒) MATHEMATICAL FRAKTUR CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D512, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_334)
{
    // 1D546 003F;	
    // (𝕆) MATHEMATICAL DOUBLE-STRUCK CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D546, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_335)
{
    // 1D57A 003F;	
    // (𝕺) MATHEMATICAL BOLD FRAKTUR CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57A, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_336)
{
    // 1D5AE 003F;	
    // (𝖮) MATHEMATICAL SANS-SERIF CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AE, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_337)
{
    // 1D5E2 003F;	
    // (𝗢) MATHEMATICAL SANS-SERIF BOLD CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E2, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_338)
{
    // 1D616 003F;	
    // (𝘖) MATHEMATICAL SANS-SERIF ITALIC CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D616, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_339)
{
    // 1D64A 003F;	
    // (𝙊) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64A, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_340)
{
    // 1D67E 003F;	
    // (𝙾) MATHEMATICAL MONOSPACE CAPITAL O	[1E43 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67E, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_341)
{
    // 24C4 003F;	
    // (Ⓞ) CIRCLED LATIN CAPITAL LETTER O	[1E43 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C4, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_342)
{
    // 1F15E 003F;	
    // (🅞) NEGATIVE CIRCLED LATIN CAPITAL LETTER O	[1E43 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15E, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_343)
{
    // 00BA 003F;	
    // (º) MASCULINE ORDINAL INDICATOR	[1E43 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00BA, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_344)
{
    // 1D52 003F;	
    // (ᵒ) MODIFIER LETTER SMALL O	[1E43 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D52, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_345)
{
    // 2092 003F;	
    // (ₒ) LATIN SUBSCRIPT SMALL LETTER O	[1E43 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2092, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_346)
{
    // 1D3C 003F;	
    // (ᴼ) MODIFIER LETTER CAPITAL O	[1E43 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3C, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_347)
{
    // 1F13E 003F;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13E, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_348)
{
    // 1F17E 003F;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17E, 0x003F };
    uint32_t const ces[9] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_349)
{
    // 00F3 003F;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F3, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_350)
{
    // 00D3 003F;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D3, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_351)
{
    // 00F2 003F;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F2, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_352)
{
    // 00D2 003F;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D2, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_353)
{
    // 014F 003F;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x014F, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_354)
{
    // 014E 003F;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x014E, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_355)
{
    // 00F4 003F;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F4, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_356)
{
    // 00D4 003F;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D4, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_357)
{
    // 1ED1 003F;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 0267 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED1, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_358)
{
    // 1ED0 003F;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 0267 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED0, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_359)
{
    // 1ED3 003F;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 0267 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED3, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_360)
{
    // 1ED2 003F;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 0267 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED2, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_361)
{
    // 1ED7 003F;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 0267 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED7, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_362)
{
    // 1ED6 003F;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 0267 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED6, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_363)
{
    // 1ED5 003F;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 0267 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED5, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_364)
{
    // 1ED4 003F;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 0267 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED4, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_365)
{
    // 01D2 003F;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D2, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_366)
{
    // 01D1 003F;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01D1, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_367)
{
    // 00F6 003F;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F6, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_368)
{
    // 1DF3 003F;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 0267 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF3, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_369)
{
    // A79D 003F;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 0267 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79D, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_370)
{
    // 00D6 003F;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D6, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_371)
{
    // A79C 003F;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 0267 | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79C, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_372)
{
    // 022B 003F;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 0267 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022B, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_373)
{
    // 022A 003F;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 0267 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022A, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_374)
{
    // 0151 003F;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 0267 | 0020 002C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0151, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_375)
{
    // 0150 003F;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 0267 | 0020 002C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0150, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_376)
{
    // 00F5 003F;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 0267 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F5, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_377)
{
    // 00D5 003F;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 0267 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D5, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_378)
{
    // 1E4D 003F;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 0267 | 0020 002D 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4D, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_379)
{
    // 1E4C 003F;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 0267 | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4C, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_380)
{
    // 1E4F 003F;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 0267 | 0020 002D 002B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4F, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_381)
{
    // 1E4E 003F;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 0267 | 0020 002D 002B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4E, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_382)
{
    // 022D 003F;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 0267 | 0020 002D 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022D, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_383)
{
    // 022C 003F;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 0267 | 0020 002D 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022C, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_384)
{
    // 022F 003F;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x022F, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_385)
{
    // 022E 003F;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x022E, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_386)
{
    // 0231 003F;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 0267 | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0231, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_387)
{
    // 0230 003F;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 0267 | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0230, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_388)
{
    // 00F8 003F;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F8, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_389)
{
    // 00D8 003F;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 0267 | 0020 002F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D8, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_390)
{
    // 01FF 003F;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 0267 | 0020 002F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FF, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_391)
{
    // 01FE 003F;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 0267 | 0020 002F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FE, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_392)
{
    // 01EB 003F;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 0267 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EB, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_393)
{
    // 01EA 003F;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 0267 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EA, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_394)
{
    // 01ED 003F;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 0267 | 0020 0031 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01ED, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_395)
{
    // 01EC 003F;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 0267 | 0020 0031 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EC, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_396)
{
    // 014D 003F;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x014D, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_397)
{
    // 014C 003F;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x014C, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_398)
{
    // 1E53 003F;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 0267 | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E53, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_399)
{
    // 1E52 003F;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 0267 | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E52, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_400)
{
    // 1E51 003F;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 0267 | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E51, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_401)
{
    // 1E50 003F;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 0267 | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E50, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_402)
{
    // 1DED 003F;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 0267 | 0020 0034 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DED, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_403)
{
    // 1ECF 003F;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 0267 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECF, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_404)
{
    // 1ECE 003F;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 0267 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECE, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_405)
{
    // 020D 003F;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 0267 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020D, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_406)
{
    // 020C 003F;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 0267 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020C, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_407)
{
    // 020F 003F;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 0267 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020F, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_408)
{
    // 020E 003F;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 0267 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020E, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_409)
{
    // 01A1 003F;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 0267 | 0020 003F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01A1, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_410)
{
    // 01A0 003F;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 0267 | 0020 003F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01A0, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_411)
{
    // 1EDB 003F;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 0267 | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDB, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_412)
{
    // 1EDA 003F;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 0267 | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDA, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_413)
{
    // 1EDD 003F;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 0267 | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDD, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_414)
{
    // 1EDC 003F;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 0267 | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDC, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_415)
{
    // 1EE1 003F;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 0267 | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE1, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_416)
{
    // 1EE0 003F;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 0267 | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE0, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_417)
{
    // 1EDF 003F;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 0267 | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDF, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_418)
{
    // 1EDE 003F;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 0267 | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EDE, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_419)
{
    // 1EE3 003F;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 0267 | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE3, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_420)
{
    // 1EE2 003F;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 0267 | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE2, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_421)
{
    // 1ECD 003F;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECD, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_422)
{
    // 1ECC 003F;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECC, 0x003F };
    uint32_t const ces[11] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_423)
{
    // 1ED9 003F;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 0267 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED9, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_424)
{
    // 1ED8 003F;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 0267 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ED8, 0x003F };
    uint32_t const ces[13] = { 0x1E43, 0x0267, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_425)
{
    // 006F 0061;	
    // (o) LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x006F, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_426)
{
    // 006F 0041;	
    // (o) LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x006F, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_427)
{
    // FF4F 0061;	
    // (ｏ) FULLWIDTH LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF4F, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_428)
{
    // FF4F 0041;	
    // (ｏ) FULLWIDTH LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF4F, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_429)
{
    // 0366 0061;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0366, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_430)
{
    // 0366 0041;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0366, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_431)
{
    // 2134 0061;	
    // (ℴ) SCRIPT SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2134, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_432)
{
    // 1D428 0061;	
    // (𝐨) MATHEMATICAL BOLD SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D428, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_433)
{
    // 1D45C 0061;	
    // (𝑜) MATHEMATICAL ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45C, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_434)
{
    // 1D490 0061;	
    // (𝒐) MATHEMATICAL BOLD ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D490, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_435)
{
    // 1D4F8 0061;	
    // (𝓸) MATHEMATICAL BOLD SCRIPT SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F8, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_436)
{
    // 1D52C 0061;	
    // (𝔬) MATHEMATICAL FRAKTUR SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52C, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_437)
{
    // 1D560 0061;	
    // (𝕠) MATHEMATICAL DOUBLE-STRUCK SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D560, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_438)
{
    // 1D594 0061;	
    // (𝖔) MATHEMATICAL BOLD FRAKTUR SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D594, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_439)
{
    // 1D5C8 0061;	
    // (𝗈) MATHEMATICAL SANS-SERIF SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C8, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_440)
{
    // 1D5FC 0061;	
    // (𝗼) MATHEMATICAL SANS-SERIF BOLD SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FC, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_441)
{
    // 1D630 0061;	
    // (𝘰) MATHEMATICAL SANS-SERIF ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D630, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_442)
{
    // 1D664 0061;	
    // (𝙤) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D664, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_443)
{
    // 1D698 0061;	
    // (𝚘) MATHEMATICAL MONOSPACE SMALL O	[1E43 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D698, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_444)
{
    // 2134 0041;	
    // (ℴ) SCRIPT SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x2134, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_445)
{
    // 1D428 0041;	
    // (𝐨) MATHEMATICAL BOLD SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D428, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_446)
{
    // 1D45C 0041;	
    // (𝑜) MATHEMATICAL ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D45C, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_447)
{
    // 1D490 0041;	
    // (𝒐) MATHEMATICAL BOLD ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D490, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_448)
{
    // 1D4F8 0041;	
    // (𝓸) MATHEMATICAL BOLD SCRIPT SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4F8, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_449)
{
    // 1D52C 0041;	
    // (𝔬) MATHEMATICAL FRAKTUR SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D52C, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_450)
{
    // 1D560 0041;	
    // (𝕠) MATHEMATICAL DOUBLE-STRUCK SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D560, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_451)
{
    // 1D594 0041;	
    // (𝖔) MATHEMATICAL BOLD FRAKTUR SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D594, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_452)
{
    // 1D5C8 0041;	
    // (𝗈) MATHEMATICAL SANS-SERIF SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5C8, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_453)
{
    // 1D5FC 0041;	
    // (𝗼) MATHEMATICAL SANS-SERIF BOLD SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5FC, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_454)
{
    // 1D630 0041;	
    // (𝘰) MATHEMATICAL SANS-SERIF ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D630, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_455)
{
    // 1D664 0041;	
    // (𝙤) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D664, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_456)
{
    // 1D698 0041;	
    // (𝚘) MATHEMATICAL MONOSPACE SMALL O	[1E43 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D698, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_457)
{
    // 24DE 0061;	
    // (ⓞ) CIRCLED LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DE, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_458)
{
    // 24DE 0041;	
    // (ⓞ) CIRCLED LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24DE, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_459)
{
    // 004F 0061;	
    // (O) LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004F, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_460)
{
    // 004F 0041;	
    // (O) LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x004F, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_461)
{
    // FF2F 0061;	
    // (Ｏ) FULLWIDTH LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2F, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_462)
{
    // FF2F 0041;	
    // (Ｏ) FULLWIDTH LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF2F, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_463)
{
    // 1D40E 0061;	
    // (𝐎) MATHEMATICAL BOLD CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40E, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_464)
{
    // 1D442 0061;	
    // (𝑂) MATHEMATICAL ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D442, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_465)
{
    // 1D476 0061;	
    // (𝑶) MATHEMATICAL BOLD ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D476, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_466)
{
    // 1D4AA 0061;	
    // (𝒪) MATHEMATICAL SCRIPT CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AA, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_467)
{
    // 1D4DE 0061;	
    // (𝓞) MATHEMATICAL BOLD SCRIPT CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DE, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_468)
{
    // 1D512 0061;	
    // (𝔒) MATHEMATICAL FRAKTUR CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D512, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_469)
{
    // 1D546 0061;	
    // (𝕆) MATHEMATICAL DOUBLE-STRUCK CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D546, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_470)
{
    // 1D57A 0061;	
    // (𝕺) MATHEMATICAL BOLD FRAKTUR CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57A, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_471)
{
    // 1D5AE 0061;	
    // (𝖮) MATHEMATICAL SANS-SERIF CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AE, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_472)
{
    // 1D5E2 0061;	
    // (𝗢) MATHEMATICAL SANS-SERIF BOLD CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E2, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_473)
{
    // 1D616 0061;	
    // (𝘖) MATHEMATICAL SANS-SERIF ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D616, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_474)
{
    // 1D64A 0061;	
    // (𝙊) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64A, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_475)
{
    // 1D67E 0061;	
    // (𝙾) MATHEMATICAL MONOSPACE CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67E, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_476)
{
    // 1D40E 0041;	
    // (𝐎) MATHEMATICAL BOLD CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D40E, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_477)
{
    // 1D442 0041;	
    // (𝑂) MATHEMATICAL ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D442, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_478)
{
    // 1D476 0041;	
    // (𝑶) MATHEMATICAL BOLD ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D476, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_479)
{
    // 1D4AA 0041;	
    // (𝒪) MATHEMATICAL SCRIPT CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4AA, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_480)
{
    // 1D4DE 0041;	
    // (𝓞) MATHEMATICAL BOLD SCRIPT CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4DE, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_481)
{
    // 1D512 0041;	
    // (𝔒) MATHEMATICAL FRAKTUR CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D512, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_482)
{
    // 1D546 0041;	
    // (𝕆) MATHEMATICAL DOUBLE-STRUCK CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D546, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_483)
{
    // 1D57A 0041;	
    // (𝕺) MATHEMATICAL BOLD FRAKTUR CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D57A, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_484)
{
    // 1D5AE 0041;	
    // (𝖮) MATHEMATICAL SANS-SERIF CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5AE, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_485)
{
    // 1D5E2 0041;	
    // (𝗢) MATHEMATICAL SANS-SERIF BOLD CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5E2, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_486)
{
    // 1D616 0041;	
    // (𝘖) MATHEMATICAL SANS-SERIF ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D616, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_487)
{
    // 1D64A 0041;	
    // (𝙊) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D64A, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_488)
{
    // 1D67E 0041;	
    // (𝙾) MATHEMATICAL MONOSPACE CAPITAL O	[1E43 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D67E, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_489)
{
    // 24C4 0061;	
    // (Ⓞ) CIRCLED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C4, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_490)
{
    // 1F15E 0061;	
    // (🅞) NEGATIVE CIRCLED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15E, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_491)
{
    // 24C4 0041;	
    // (Ⓞ) CIRCLED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24C4, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_492)
{
    // 1F15E 0041;	
    // (🅞) NEGATIVE CIRCLED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F15E, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_493)
{
    // 00BA 0061;	
    // (º) MASCULINE ORDINAL INDICATOR	[1E43 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00BA, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_494)
{
    // 1D52 0061;	
    // (ᵒ) MODIFIER LETTER SMALL O	[1E43 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D52, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_495)
{
    // 00BA 0041;	
    // (º) MASCULINE ORDINAL INDICATOR	[1E43 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x00BA, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_496)
{
    // 1D52 0041;	
    // (ᵒ) MODIFIER LETTER SMALL O	[1E43 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D52, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_497)
{
    // 2092 0061;	
    // (ₒ) LATIN SUBSCRIPT SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2092, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_498)
{
    // 2092 0041;	
    // (ₒ) LATIN SUBSCRIPT SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2092, 0x0041 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_115_499)
{
    // 1D3C 0061;	
    // (ᴼ) MODIFIER LETTER CAPITAL O	[1E43 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3C, 0x0061 };
    uint32_t const ces[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

