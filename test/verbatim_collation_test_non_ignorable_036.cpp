// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_036_000)
{
    // 295A 0041;	
    // (⥚) LEFTWARDS HARPOON WITH BARB UP FROM BAR	[0B5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x295A, 0x0041 };
    uint32_t const ces[9] = { 0x0B5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_001)
{
    // 295A 0062;	
    // (⥚) LEFTWARDS HARPOON WITH BARB UP FROM BAR	[0B5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295A, 0x0062 };
    uint32_t const ces[9] = { 0x0B5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_002)
{
    // 295B 0021;	
    // (⥛) RIGHTWARDS HARPOON WITH BARB UP FROM BAR	[0B5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295B, 0x0021 };
    uint32_t const ces[9] = { 0x0B5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_003)
{
    // 295B 003F;	
    // (⥛) RIGHTWARDS HARPOON WITH BARB UP FROM BAR	[0B5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295B, 0x003F };
    uint32_t const ces[9] = { 0x0B5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_004)
{
    // 295B 0061;	
    // (⥛) RIGHTWARDS HARPOON WITH BARB UP FROM BAR	[0B5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295B, 0x0061 };
    uint32_t const ces[9] = { 0x0B5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_005)
{
    // 295B 0041;	
    // (⥛) RIGHTWARDS HARPOON WITH BARB UP FROM BAR	[0B5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x295B, 0x0041 };
    uint32_t const ces[9] = { 0x0B5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_006)
{
    // 295B 0062;	
    // (⥛) RIGHTWARDS HARPOON WITH BARB UP FROM BAR	[0B5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295B, 0x0062 };
    uint32_t const ces[9] = { 0x0B5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_007)
{
    // 295C 0021;	
    // (⥜) UPWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295C, 0x0021 };
    uint32_t const ces[9] = { 0x0B5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_008)
{
    // 295C 003F;	
    // (⥜) UPWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295C, 0x003F };
    uint32_t const ces[9] = { 0x0B5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_009)
{
    // 295C 0061;	
    // (⥜) UPWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295C, 0x0061 };
    uint32_t const ces[9] = { 0x0B5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_010)
{
    // 295C 0041;	
    // (⥜) UPWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x295C, 0x0041 };
    uint32_t const ces[9] = { 0x0B5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_011)
{
    // 295C 0062;	
    // (⥜) UPWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295C, 0x0062 };
    uint32_t const ces[9] = { 0x0B5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_012)
{
    // 295D 0021;	
    // (⥝) DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295D, 0x0021 };
    uint32_t const ces[9] = { 0x0B5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_013)
{
    // 295D 003F;	
    // (⥝) DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295D, 0x003F };
    uint32_t const ces[9] = { 0x0B5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_014)
{
    // 295D 0061;	
    // (⥝) DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295D, 0x0061 };
    uint32_t const ces[9] = { 0x0B5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_015)
{
    // 295D 0041;	
    // (⥝) DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x295D, 0x0041 };
    uint32_t const ces[9] = { 0x0B5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_016)
{
    // 295D 0062;	
    // (⥝) DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR	[0B5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295D, 0x0062 };
    uint32_t const ces[9] = { 0x0B5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_017)
{
    // 295E 0021;	
    // (⥞) LEFTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295E, 0x0021 };
    uint32_t const ces[9] = { 0x0B5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_018)
{
    // 295E 003F;	
    // (⥞) LEFTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295E, 0x003F };
    uint32_t const ces[9] = { 0x0B5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_019)
{
    // 295E 0061;	
    // (⥞) LEFTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295E, 0x0061 };
    uint32_t const ces[9] = { 0x0B5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_020)
{
    // 295E 0041;	
    // (⥞) LEFTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x295E, 0x0041 };
    uint32_t const ces[9] = { 0x0B5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_021)
{
    // 295E 0062;	
    // (⥞) LEFTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295E, 0x0062 };
    uint32_t const ces[9] = { 0x0B5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_022)
{
    // 295F 0021;	
    // (⥟) RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295F, 0x0021 };
    uint32_t const ces[9] = { 0x0B5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_023)
{
    // 295F 003F;	
    // (⥟) RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295F, 0x003F };
    uint32_t const ces[9] = { 0x0B5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_024)
{
    // 295F 0061;	
    // (⥟) RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295F, 0x0061 };
    uint32_t const ces[9] = { 0x0B5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_025)
{
    // 295F 0041;	
    // (⥟) RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x295F, 0x0041 };
    uint32_t const ces[9] = { 0x0B5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_026)
{
    // 295F 0062;	
    // (⥟) RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR	[0B5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295F, 0x0062 };
    uint32_t const ces[9] = { 0x0B5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_027)
{
    // 2960 0021;	
    // (⥠) UPWARDS HARPOON WITH BARB LEFT FROM BAR	[0B60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2960, 0x0021 };
    uint32_t const ces[9] = { 0x0B60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_028)
{
    // 2960 003F;	
    // (⥠) UPWARDS HARPOON WITH BARB LEFT FROM BAR	[0B60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2960, 0x003F };
    uint32_t const ces[9] = { 0x0B60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_029)
{
    // 2960 0061;	
    // (⥠) UPWARDS HARPOON WITH BARB LEFT FROM BAR	[0B60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2960, 0x0061 };
    uint32_t const ces[9] = { 0x0B60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_030)
{
    // 2960 0041;	
    // (⥠) UPWARDS HARPOON WITH BARB LEFT FROM BAR	[0B60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2960, 0x0041 };
    uint32_t const ces[9] = { 0x0B60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_031)
{
    // 2960 0062;	
    // (⥠) UPWARDS HARPOON WITH BARB LEFT FROM BAR	[0B60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2960, 0x0062 };
    uint32_t const ces[9] = { 0x0B60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_032)
{
    // 2961 0021;	
    // (⥡) DOWNWARDS HARPOON WITH BARB LEFT FROM BAR	[0B61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2961, 0x0021 };
    uint32_t const ces[9] = { 0x0B61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_033)
{
    // 2961 003F;	
    // (⥡) DOWNWARDS HARPOON WITH BARB LEFT FROM BAR	[0B61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2961, 0x003F };
    uint32_t const ces[9] = { 0x0B61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_034)
{
    // 2961 0061;	
    // (⥡) DOWNWARDS HARPOON WITH BARB LEFT FROM BAR	[0B61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2961, 0x0061 };
    uint32_t const ces[9] = { 0x0B61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_035)
{
    // 2961 0041;	
    // (⥡) DOWNWARDS HARPOON WITH BARB LEFT FROM BAR	[0B61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2961, 0x0041 };
    uint32_t const ces[9] = { 0x0B61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_036)
{
    // 2961 0062;	
    // (⥡) DOWNWARDS HARPOON WITH BARB LEFT FROM BAR	[0B61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2961, 0x0062 };
    uint32_t const ces[9] = { 0x0B61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_037)
{
    // 2962 0021;	
    // (⥢) LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2962, 0x0021 };
    uint32_t const ces[9] = { 0x0B62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_038)
{
    // 2962 003F;	
    // (⥢) LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2962, 0x003F };
    uint32_t const ces[9] = { 0x0B62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_039)
{
    // 2962 0061;	
    // (⥢) LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2962, 0x0061 };
    uint32_t const ces[9] = { 0x0B62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_040)
{
    // 2962 0041;	
    // (⥢) LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2962, 0x0041 };
    uint32_t const ces[9] = { 0x0B62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_041)
{
    // 2962 0062;	
    // (⥢) LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2962, 0x0062 };
    uint32_t const ces[9] = { 0x0B62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_042)
{
    // 2963 0021;	
    // (⥣) UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2963, 0x0021 };
    uint32_t const ces[9] = { 0x0B63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_043)
{
    // 2963 003F;	
    // (⥣) UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2963, 0x003F };
    uint32_t const ces[9] = { 0x0B63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_044)
{
    // 2963 0061;	
    // (⥣) UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2963, 0x0061 };
    uint32_t const ces[9] = { 0x0B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_045)
{
    // 2963 0041;	
    // (⥣) UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2963, 0x0041 };
    uint32_t const ces[9] = { 0x0B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_046)
{
    // 2963 0062;	
    // (⥣) UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2963, 0x0062 };
    uint32_t const ces[9] = { 0x0B63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_047)
{
    // 2964 0021;	
    // (⥤) RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2964, 0x0021 };
    uint32_t const ces[9] = { 0x0B64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_048)
{
    // 2964 003F;	
    // (⥤) RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2964, 0x003F };
    uint32_t const ces[9] = { 0x0B64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_049)
{
    // 2964 0061;	
    // (⥤) RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2964, 0x0061 };
    uint32_t const ces[9] = { 0x0B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_050)
{
    // 2964 0041;	
    // (⥤) RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2964, 0x0041 };
    uint32_t const ces[9] = { 0x0B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_051)
{
    // 2964 0062;	
    // (⥤) RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2964, 0x0062 };
    uint32_t const ces[9] = { 0x0B64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_052)
{
    // 2965 0021;	
    // (⥥) DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2965, 0x0021 };
    uint32_t const ces[9] = { 0x0B65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_053)
{
    // 2965 003F;	
    // (⥥) DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2965, 0x003F };
    uint32_t const ces[9] = { 0x0B65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_054)
{
    // 2965 0061;	
    // (⥥) DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2965, 0x0061 };
    uint32_t const ces[9] = { 0x0B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_055)
{
    // 2965 0041;	
    // (⥥) DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2965, 0x0041 };
    uint32_t const ces[9] = { 0x0B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_056)
{
    // 2965 0062;	
    // (⥥) DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2965, 0x0062 };
    uint32_t const ces[9] = { 0x0B65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_057)
{
    // 2966 0021;	
    // (⥦) LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP	[0B66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2966, 0x0021 };
    uint32_t const ces[9] = { 0x0B66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_058)
{
    // 2966 003F;	
    // (⥦) LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP	[0B66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2966, 0x003F };
    uint32_t const ces[9] = { 0x0B66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_059)
{
    // 2966 0061;	
    // (⥦) LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP	[0B66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2966, 0x0061 };
    uint32_t const ces[9] = { 0x0B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_060)
{
    // 2966 0041;	
    // (⥦) LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP	[0B66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2966, 0x0041 };
    uint32_t const ces[9] = { 0x0B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_061)
{
    // 2966 0062;	
    // (⥦) LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP	[0B66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2966, 0x0062 };
    uint32_t const ces[9] = { 0x0B66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_062)
{
    // 2967 0021;	
    // (⥧) LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2967, 0x0021 };
    uint32_t const ces[9] = { 0x0B67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_063)
{
    // 2967 003F;	
    // (⥧) LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2967, 0x003F };
    uint32_t const ces[9] = { 0x0B67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_064)
{
    // 2967 0061;	
    // (⥧) LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2967, 0x0061 };
    uint32_t const ces[9] = { 0x0B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_065)
{
    // 2967 0041;	
    // (⥧) LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2967, 0x0041 };
    uint32_t const ces[9] = { 0x0B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_066)
{
    // 2967 0062;	
    // (⥧) LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN	[0B67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2967, 0x0062 };
    uint32_t const ces[9] = { 0x0B67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_067)
{
    // 2968 0021;	
    // (⥨) RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP	[0B68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2968, 0x0021 };
    uint32_t const ces[9] = { 0x0B68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_068)
{
    // 2968 003F;	
    // (⥨) RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP	[0B68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2968, 0x003F };
    uint32_t const ces[9] = { 0x0B68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_069)
{
    // 2968 0061;	
    // (⥨) RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP	[0B68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2968, 0x0061 };
    uint32_t const ces[9] = { 0x0B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_070)
{
    // 2968 0041;	
    // (⥨) RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP	[0B68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2968, 0x0041 };
    uint32_t const ces[9] = { 0x0B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_071)
{
    // 2968 0062;	
    // (⥨) RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP	[0B68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2968, 0x0062 };
    uint32_t const ces[9] = { 0x0B68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_072)
{
    // 2969 0021;	
    // (⥩) RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2969, 0x0021 };
    uint32_t const ces[9] = { 0x0B69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_073)
{
    // 2969 003F;	
    // (⥩) RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2969, 0x003F };
    uint32_t const ces[9] = { 0x0B69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_074)
{
    // 2969 0061;	
    // (⥩) RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2969, 0x0061 };
    uint32_t const ces[9] = { 0x0B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_075)
{
    // 2969 0041;	
    // (⥩) RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2969, 0x0041 };
    uint32_t const ces[9] = { 0x0B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_076)
{
    // 2969 0062;	
    // (⥩) RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN	[0B69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2969, 0x0062 };
    uint32_t const ces[9] = { 0x0B69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_077)
{
    // 296A 0021;	
    // (⥪) LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296A, 0x0021 };
    uint32_t const ces[9] = { 0x0B6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_078)
{
    // 296A 003F;	
    // (⥪) LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296A, 0x003F };
    uint32_t const ces[9] = { 0x0B6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_079)
{
    // 296A 0061;	
    // (⥪) LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296A, 0x0061 };
    uint32_t const ces[9] = { 0x0B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_080)
{
    // 296A 0041;	
    // (⥪) LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x296A, 0x0041 };
    uint32_t const ces[9] = { 0x0B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_081)
{
    // 296A 0062;	
    // (⥪) LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296A, 0x0062 };
    uint32_t const ces[9] = { 0x0B6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_082)
{
    // 296B 0021;	
    // (⥫) LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296B, 0x0021 };
    uint32_t const ces[9] = { 0x0B6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_083)
{
    // 296B 003F;	
    // (⥫) LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296B, 0x003F };
    uint32_t const ces[9] = { 0x0B6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_084)
{
    // 296B 0061;	
    // (⥫) LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296B, 0x0061 };
    uint32_t const ces[9] = { 0x0B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_085)
{
    // 296B 0041;	
    // (⥫) LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x296B, 0x0041 };
    uint32_t const ces[9] = { 0x0B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_086)
{
    // 296B 0062;	
    // (⥫) LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296B, 0x0062 };
    uint32_t const ces[9] = { 0x0B6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_087)
{
    // 296C 0021;	
    // (⥬) RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296C, 0x0021 };
    uint32_t const ces[9] = { 0x0B6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_088)
{
    // 296C 003F;	
    // (⥬) RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296C, 0x003F };
    uint32_t const ces[9] = { 0x0B6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_089)
{
    // 296C 0061;	
    // (⥬) RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296C, 0x0061 };
    uint32_t const ces[9] = { 0x0B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_090)
{
    // 296C 0041;	
    // (⥬) RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x296C, 0x0041 };
    uint32_t const ces[9] = { 0x0B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_091)
{
    // 296C 0062;	
    // (⥬) RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH	[0B6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296C, 0x0062 };
    uint32_t const ces[9] = { 0x0B6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_092)
{
    // 296D 0021;	
    // (⥭) RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296D, 0x0021 };
    uint32_t const ces[9] = { 0x0B6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_093)
{
    // 296D 003F;	
    // (⥭) RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296D, 0x003F };
    uint32_t const ces[9] = { 0x0B6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_094)
{
    // 296D 0061;	
    // (⥭) RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296D, 0x0061 };
    uint32_t const ces[9] = { 0x0B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_095)
{
    // 296D 0041;	
    // (⥭) RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x296D, 0x0041 };
    uint32_t const ces[9] = { 0x0B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_096)
{
    // 296D 0062;	
    // (⥭) RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH	[0B6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296D, 0x0062 };
    uint32_t const ces[9] = { 0x0B6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_097)
{
    // 296E 0021;	
    // (⥮) UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296E, 0x0021 };
    uint32_t const ces[9] = { 0x0B6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_098)
{
    // 296E 003F;	
    // (⥮) UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296E, 0x003F };
    uint32_t const ces[9] = { 0x0B6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_099)
{
    // 296E 0061;	
    // (⥮) UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296E, 0x0061 };
    uint32_t const ces[9] = { 0x0B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_100)
{
    // 296E 0041;	
    // (⥮) UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x296E, 0x0041 };
    uint32_t const ces[9] = { 0x0B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_101)
{
    // 296E 0062;	
    // (⥮) UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT	[0B6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296E, 0x0062 };
    uint32_t const ces[9] = { 0x0B6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_102)
{
    // 296F 0021;	
    // (⥯) DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296F, 0x0021 };
    uint32_t const ces[9] = { 0x0B6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_103)
{
    // 296F 003F;	
    // (⥯) DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296F, 0x003F };
    uint32_t const ces[9] = { 0x0B6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_104)
{
    // 296F 0061;	
    // (⥯) DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296F, 0x0061 };
    uint32_t const ces[9] = { 0x0B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_105)
{
    // 296F 0041;	
    // (⥯) DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x296F, 0x0041 };
    uint32_t const ces[9] = { 0x0B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_106)
{
    // 296F 0062;	
    // (⥯) DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT	[0B6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x296F, 0x0062 };
    uint32_t const ces[9] = { 0x0B6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_107)
{
    // 2970 0021;	
    // (⥰) RIGHT DOUBLE ARROW WITH ROUNDED HEAD	[0B70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2970, 0x0021 };
    uint32_t const ces[9] = { 0x0B70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_108)
{
    // 2970 003F;	
    // (⥰) RIGHT DOUBLE ARROW WITH ROUNDED HEAD	[0B70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2970, 0x003F };
    uint32_t const ces[9] = { 0x0B70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_109)
{
    // 2970 0061;	
    // (⥰) RIGHT DOUBLE ARROW WITH ROUNDED HEAD	[0B70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2970, 0x0061 };
    uint32_t const ces[9] = { 0x0B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_110)
{
    // 2970 0041;	
    // (⥰) RIGHT DOUBLE ARROW WITH ROUNDED HEAD	[0B70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2970, 0x0041 };
    uint32_t const ces[9] = { 0x0B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_111)
{
    // 2970 0062;	
    // (⥰) RIGHT DOUBLE ARROW WITH ROUNDED HEAD	[0B70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2970, 0x0062 };
    uint32_t const ces[9] = { 0x0B70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_112)
{
    // 2971 0021;	
    // (⥱) EQUALS SIGN ABOVE RIGHTWARDS ARROW	[0B71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2971, 0x0021 };
    uint32_t const ces[9] = { 0x0B71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_113)
{
    // 2971 003F;	
    // (⥱) EQUALS SIGN ABOVE RIGHTWARDS ARROW	[0B71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2971, 0x003F };
    uint32_t const ces[9] = { 0x0B71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_114)
{
    // 2971 0061;	
    // (⥱) EQUALS SIGN ABOVE RIGHTWARDS ARROW	[0B71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2971, 0x0061 };
    uint32_t const ces[9] = { 0x0B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_115)
{
    // 2971 0041;	
    // (⥱) EQUALS SIGN ABOVE RIGHTWARDS ARROW	[0B71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2971, 0x0041 };
    uint32_t const ces[9] = { 0x0B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_116)
{
    // 2971 0062;	
    // (⥱) EQUALS SIGN ABOVE RIGHTWARDS ARROW	[0B71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2971, 0x0062 };
    uint32_t const ces[9] = { 0x0B71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_117)
{
    // 2972 0021;	
    // (⥲) TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0B72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2972, 0x0021 };
    uint32_t const ces[9] = { 0x0B72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_118)
{
    // 2972 003F;	
    // (⥲) TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0B72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2972, 0x003F };
    uint32_t const ces[9] = { 0x0B72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_119)
{
    // 2972 0061;	
    // (⥲) TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0B72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2972, 0x0061 };
    uint32_t const ces[9] = { 0x0B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_120)
{
    // 2972 0041;	
    // (⥲) TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0B72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2972, 0x0041 };
    uint32_t const ces[9] = { 0x0B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_121)
{
    // 2972 0062;	
    // (⥲) TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0B72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2972, 0x0062 };
    uint32_t const ces[9] = { 0x0B72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_122)
{
    // 2973 0021;	
    // (⥳) LEFTWARDS ARROW ABOVE TILDE OPERATOR	[0B73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2973, 0x0021 };
    uint32_t const ces[9] = { 0x0B73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_123)
{
    // 2973 003F;	
    // (⥳) LEFTWARDS ARROW ABOVE TILDE OPERATOR	[0B73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2973, 0x003F };
    uint32_t const ces[9] = { 0x0B73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_124)
{
    // 2973 0061;	
    // (⥳) LEFTWARDS ARROW ABOVE TILDE OPERATOR	[0B73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2973, 0x0061 };
    uint32_t const ces[9] = { 0x0B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_125)
{
    // 2973 0041;	
    // (⥳) LEFTWARDS ARROW ABOVE TILDE OPERATOR	[0B73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2973, 0x0041 };
    uint32_t const ces[9] = { 0x0B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_126)
{
    // 2973 0062;	
    // (⥳) LEFTWARDS ARROW ABOVE TILDE OPERATOR	[0B73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2973, 0x0062 };
    uint32_t const ces[9] = { 0x0B73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_127)
{
    // 2974 0021;	
    // (⥴) RIGHTWARDS ARROW ABOVE TILDE OPERATOR	[0B74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2974, 0x0021 };
    uint32_t const ces[9] = { 0x0B74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_128)
{
    // 2974 003F;	
    // (⥴) RIGHTWARDS ARROW ABOVE TILDE OPERATOR	[0B74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2974, 0x003F };
    uint32_t const ces[9] = { 0x0B74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_129)
{
    // 2974 0061;	
    // (⥴) RIGHTWARDS ARROW ABOVE TILDE OPERATOR	[0B74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2974, 0x0061 };
    uint32_t const ces[9] = { 0x0B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_130)
{
    // 2974 0041;	
    // (⥴) RIGHTWARDS ARROW ABOVE TILDE OPERATOR	[0B74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2974, 0x0041 };
    uint32_t const ces[9] = { 0x0B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_131)
{
    // 2974 0062;	
    // (⥴) RIGHTWARDS ARROW ABOVE TILDE OPERATOR	[0B74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2974, 0x0062 };
    uint32_t const ces[9] = { 0x0B74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_132)
{
    // 2975 0021;	
    // (⥵) RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO	[0B75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2975, 0x0021 };
    uint32_t const ces[9] = { 0x0B75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_133)
{
    // 2975 003F;	
    // (⥵) RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO	[0B75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2975, 0x003F };
    uint32_t const ces[9] = { 0x0B75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_134)
{
    // 2975 0061;	
    // (⥵) RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO	[0B75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2975, 0x0061 };
    uint32_t const ces[9] = { 0x0B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_135)
{
    // 2975 0041;	
    // (⥵) RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO	[0B75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2975, 0x0041 };
    uint32_t const ces[9] = { 0x0B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_136)
{
    // 2975 0062;	
    // (⥵) RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO	[0B75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2975, 0x0062 };
    uint32_t const ces[9] = { 0x0B75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_137)
{
    // 2976 0021;	
    // (⥶) LESS-THAN ABOVE LEFTWARDS ARROW	[0B76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2976, 0x0021 };
    uint32_t const ces[9] = { 0x0B76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_138)
{
    // 2976 003F;	
    // (⥶) LESS-THAN ABOVE LEFTWARDS ARROW	[0B76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2976, 0x003F };
    uint32_t const ces[9] = { 0x0B76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_139)
{
    // 2976 0061;	
    // (⥶) LESS-THAN ABOVE LEFTWARDS ARROW	[0B76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2976, 0x0061 };
    uint32_t const ces[9] = { 0x0B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_140)
{
    // 2976 0041;	
    // (⥶) LESS-THAN ABOVE LEFTWARDS ARROW	[0B76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2976, 0x0041 };
    uint32_t const ces[9] = { 0x0B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_141)
{
    // 2976 0062;	
    // (⥶) LESS-THAN ABOVE LEFTWARDS ARROW	[0B76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2976, 0x0062 };
    uint32_t const ces[9] = { 0x0B76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_142)
{
    // 2977 0021;	
    // (⥷) LEFTWARDS ARROW THROUGH LESS-THAN	[0B77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2977, 0x0021 };
    uint32_t const ces[9] = { 0x0B77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_143)
{
    // 2977 003F;	
    // (⥷) LEFTWARDS ARROW THROUGH LESS-THAN	[0B77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2977, 0x003F };
    uint32_t const ces[9] = { 0x0B77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_144)
{
    // 2977 0061;	
    // (⥷) LEFTWARDS ARROW THROUGH LESS-THAN	[0B77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2977, 0x0061 };
    uint32_t const ces[9] = { 0x0B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_145)
{
    // 2977 0041;	
    // (⥷) LEFTWARDS ARROW THROUGH LESS-THAN	[0B77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2977, 0x0041 };
    uint32_t const ces[9] = { 0x0B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_146)
{
    // 2977 0062;	
    // (⥷) LEFTWARDS ARROW THROUGH LESS-THAN	[0B77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2977, 0x0062 };
    uint32_t const ces[9] = { 0x0B77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_147)
{
    // 2978 0021;	
    // (⥸) GREATER-THAN ABOVE RIGHTWARDS ARROW	[0B78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2978, 0x0021 };
    uint32_t const ces[9] = { 0x0B78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_148)
{
    // 2978 003F;	
    // (⥸) GREATER-THAN ABOVE RIGHTWARDS ARROW	[0B78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2978, 0x003F };
    uint32_t const ces[9] = { 0x0B78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_149)
{
    // 2978 0061;	
    // (⥸) GREATER-THAN ABOVE RIGHTWARDS ARROW	[0B78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2978, 0x0061 };
    uint32_t const ces[9] = { 0x0B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_150)
{
    // 2978 0041;	
    // (⥸) GREATER-THAN ABOVE RIGHTWARDS ARROW	[0B78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2978, 0x0041 };
    uint32_t const ces[9] = { 0x0B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_151)
{
    // 2978 0062;	
    // (⥸) GREATER-THAN ABOVE RIGHTWARDS ARROW	[0B78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2978, 0x0062 };
    uint32_t const ces[9] = { 0x0B78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_152)
{
    // 2979 0021;	
    // (⥹) SUBSET ABOVE RIGHTWARDS ARROW	[0B79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2979, 0x0021 };
    uint32_t const ces[9] = { 0x0B79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_153)
{
    // 2979 003F;	
    // (⥹) SUBSET ABOVE RIGHTWARDS ARROW	[0B79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2979, 0x003F };
    uint32_t const ces[9] = { 0x0B79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_154)
{
    // 2979 0061;	
    // (⥹) SUBSET ABOVE RIGHTWARDS ARROW	[0B79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2979, 0x0061 };
    uint32_t const ces[9] = { 0x0B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_155)
{
    // 2979 0041;	
    // (⥹) SUBSET ABOVE RIGHTWARDS ARROW	[0B79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2979, 0x0041 };
    uint32_t const ces[9] = { 0x0B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_156)
{
    // 2979 0062;	
    // (⥹) SUBSET ABOVE RIGHTWARDS ARROW	[0B79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2979, 0x0062 };
    uint32_t const ces[9] = { 0x0B79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_157)
{
    // 297A 0021;	
    // (⥺) LEFTWARDS ARROW THROUGH SUBSET	[0B7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297A, 0x0021 };
    uint32_t const ces[9] = { 0x0B7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_158)
{
    // 297A 003F;	
    // (⥺) LEFTWARDS ARROW THROUGH SUBSET	[0B7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297A, 0x003F };
    uint32_t const ces[9] = { 0x0B7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_159)
{
    // 297A 0061;	
    // (⥺) LEFTWARDS ARROW THROUGH SUBSET	[0B7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297A, 0x0061 };
    uint32_t const ces[9] = { 0x0B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_160)
{
    // 297A 0041;	
    // (⥺) LEFTWARDS ARROW THROUGH SUBSET	[0B7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x297A, 0x0041 };
    uint32_t const ces[9] = { 0x0B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_161)
{
    // 297A 0062;	
    // (⥺) LEFTWARDS ARROW THROUGH SUBSET	[0B7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297A, 0x0062 };
    uint32_t const ces[9] = { 0x0B7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_162)
{
    // 297B 0021;	
    // (⥻) SUPERSET ABOVE LEFTWARDS ARROW	[0B7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297B, 0x0021 };
    uint32_t const ces[9] = { 0x0B7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_163)
{
    // 297B 003F;	
    // (⥻) SUPERSET ABOVE LEFTWARDS ARROW	[0B7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297B, 0x003F };
    uint32_t const ces[9] = { 0x0B7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_164)
{
    // 297B 0061;	
    // (⥻) SUPERSET ABOVE LEFTWARDS ARROW	[0B7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297B, 0x0061 };
    uint32_t const ces[9] = { 0x0B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_165)
{
    // 297B 0041;	
    // (⥻) SUPERSET ABOVE LEFTWARDS ARROW	[0B7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x297B, 0x0041 };
    uint32_t const ces[9] = { 0x0B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_166)
{
    // 297B 0062;	
    // (⥻) SUPERSET ABOVE LEFTWARDS ARROW	[0B7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297B, 0x0062 };
    uint32_t const ces[9] = { 0x0B7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_167)
{
    // 297C 0021;	
    // (⥼) LEFT FISH TAIL	[0B7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297C, 0x0021 };
    uint32_t const ces[9] = { 0x0B7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_168)
{
    // 297C 003F;	
    // (⥼) LEFT FISH TAIL	[0B7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297C, 0x003F };
    uint32_t const ces[9] = { 0x0B7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_169)
{
    // 297C 0061;	
    // (⥼) LEFT FISH TAIL	[0B7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297C, 0x0061 };
    uint32_t const ces[9] = { 0x0B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_170)
{
    // 297C 0041;	
    // (⥼) LEFT FISH TAIL	[0B7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x297C, 0x0041 };
    uint32_t const ces[9] = { 0x0B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_171)
{
    // 297C 0062;	
    // (⥼) LEFT FISH TAIL	[0B7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297C, 0x0062 };
    uint32_t const ces[9] = { 0x0B7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_172)
{
    // 297D 0021;	
    // (⥽) RIGHT FISH TAIL	[0B7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297D, 0x0021 };
    uint32_t const ces[9] = { 0x0B7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_173)
{
    // 297D 003F;	
    // (⥽) RIGHT FISH TAIL	[0B7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297D, 0x003F };
    uint32_t const ces[9] = { 0x0B7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_174)
{
    // 297D 0061;	
    // (⥽) RIGHT FISH TAIL	[0B7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297D, 0x0061 };
    uint32_t const ces[9] = { 0x0B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_175)
{
    // 297D 0041;	
    // (⥽) RIGHT FISH TAIL	[0B7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x297D, 0x0041 };
    uint32_t const ces[9] = { 0x0B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_176)
{
    // 297D 0062;	
    // (⥽) RIGHT FISH TAIL	[0B7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297D, 0x0062 };
    uint32_t const ces[9] = { 0x0B7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_177)
{
    // 297E 0021;	
    // (⥾) UP FISH TAIL	[0B7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297E, 0x0021 };
    uint32_t const ces[9] = { 0x0B7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_178)
{
    // 297E 003F;	
    // (⥾) UP FISH TAIL	[0B7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297E, 0x003F };
    uint32_t const ces[9] = { 0x0B7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_179)
{
    // 297E 0061;	
    // (⥾) UP FISH TAIL	[0B7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297E, 0x0061 };
    uint32_t const ces[9] = { 0x0B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_180)
{
    // 297E 0041;	
    // (⥾) UP FISH TAIL	[0B7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x297E, 0x0041 };
    uint32_t const ces[9] = { 0x0B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_181)
{
    // 297E 0062;	
    // (⥾) UP FISH TAIL	[0B7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297E, 0x0062 };
    uint32_t const ces[9] = { 0x0B7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_182)
{
    // 297F 0021;	
    // (⥿) DOWN FISH TAIL	[0B7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297F, 0x0021 };
    uint32_t const ces[9] = { 0x0B7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_183)
{
    // 297F 003F;	
    // (⥿) DOWN FISH TAIL	[0B7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297F, 0x003F };
    uint32_t const ces[9] = { 0x0B7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_184)
{
    // 297F 0061;	
    // (⥿) DOWN FISH TAIL	[0B7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297F, 0x0061 };
    uint32_t const ces[9] = { 0x0B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_185)
{
    // 297F 0041;	
    // (⥿) DOWN FISH TAIL	[0B7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x297F, 0x0041 };
    uint32_t const ces[9] = { 0x0B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_186)
{
    // 297F 0062;	
    // (⥿) DOWN FISH TAIL	[0B7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x297F, 0x0062 };
    uint32_t const ces[9] = { 0x0B7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_187)
{
    // 2980 0021;	
    // (⦀) TRIPLE VERTICAL BAR DELIMITER	[0B80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2980, 0x0021 };
    uint32_t const ces[9] = { 0x0B80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_188)
{
    // 2980 003F;	
    // (⦀) TRIPLE VERTICAL BAR DELIMITER	[0B80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2980, 0x003F };
    uint32_t const ces[9] = { 0x0B80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_189)
{
    // 2980 0061;	
    // (⦀) TRIPLE VERTICAL BAR DELIMITER	[0B80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2980, 0x0061 };
    uint32_t const ces[9] = { 0x0B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_190)
{
    // 2980 0041;	
    // (⦀) TRIPLE VERTICAL BAR DELIMITER	[0B80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2980, 0x0041 };
    uint32_t const ces[9] = { 0x0B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_191)
{
    // 2980 0062;	
    // (⦀) TRIPLE VERTICAL BAR DELIMITER	[0B80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2980, 0x0062 };
    uint32_t const ces[9] = { 0x0B80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_192)
{
    // 2981 0021;	
    // (⦁) Z NOTATION SPOT	[0B81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2981, 0x0021 };
    uint32_t const ces[9] = { 0x0B81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_193)
{
    // 2981 003F;	
    // (⦁) Z NOTATION SPOT	[0B81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2981, 0x003F };
    uint32_t const ces[9] = { 0x0B81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_194)
{
    // 2981 0061;	
    // (⦁) Z NOTATION SPOT	[0B81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2981, 0x0061 };
    uint32_t const ces[9] = { 0x0B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_195)
{
    // 2981 0041;	
    // (⦁) Z NOTATION SPOT	[0B81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2981, 0x0041 };
    uint32_t const ces[9] = { 0x0B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_196)
{
    // 2981 0062;	
    // (⦁) Z NOTATION SPOT	[0B81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2981, 0x0062 };
    uint32_t const ces[9] = { 0x0B81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_197)
{
    // 2982 0021;	
    // (⦂) Z NOTATION TYPE COLON	[0B82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2982, 0x0021 };
    uint32_t const ces[9] = { 0x0B82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_198)
{
    // 2982 003F;	
    // (⦂) Z NOTATION TYPE COLON	[0B82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2982, 0x003F };
    uint32_t const ces[9] = { 0x0B82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_199)
{
    // 2982 0061;	
    // (⦂) Z NOTATION TYPE COLON	[0B82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2982, 0x0061 };
    uint32_t const ces[9] = { 0x0B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_200)
{
    // 2982 0041;	
    // (⦂) Z NOTATION TYPE COLON	[0B82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2982, 0x0041 };
    uint32_t const ces[9] = { 0x0B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_201)
{
    // 2982 0062;	
    // (⦂) Z NOTATION TYPE COLON	[0B82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2982, 0x0062 };
    uint32_t const ces[9] = { 0x0B82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_202)
{
    // 2999 0021;	
    // (⦙) DOTTED FENCE	[0B83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2999, 0x0021 };
    uint32_t const ces[9] = { 0x0B83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_203)
{
    // 2999 003F;	
    // (⦙) DOTTED FENCE	[0B83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2999, 0x003F };
    uint32_t const ces[9] = { 0x0B83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_204)
{
    // 2999 0061;	
    // (⦙) DOTTED FENCE	[0B83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2999, 0x0061 };
    uint32_t const ces[9] = { 0x0B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_205)
{
    // 2999 0041;	
    // (⦙) DOTTED FENCE	[0B83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2999, 0x0041 };
    uint32_t const ces[9] = { 0x0B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_206)
{
    // 2999 0062;	
    // (⦙) DOTTED FENCE	[0B83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2999, 0x0062 };
    uint32_t const ces[9] = { 0x0B83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_207)
{
    // 299A 0021;	
    // (⦚) VERTICAL ZIGZAG LINE	[0B84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299A, 0x0021 };
    uint32_t const ces[9] = { 0x0B84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_208)
{
    // 299A 003F;	
    // (⦚) VERTICAL ZIGZAG LINE	[0B84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299A, 0x003F };
    uint32_t const ces[9] = { 0x0B84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_209)
{
    // 299A 0061;	
    // (⦚) VERTICAL ZIGZAG LINE	[0B84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299A, 0x0061 };
    uint32_t const ces[9] = { 0x0B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_210)
{
    // 299A 0041;	
    // (⦚) VERTICAL ZIGZAG LINE	[0B84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x299A, 0x0041 };
    uint32_t const ces[9] = { 0x0B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_211)
{
    // 299A 0062;	
    // (⦚) VERTICAL ZIGZAG LINE	[0B84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299A, 0x0062 };
    uint32_t const ces[9] = { 0x0B84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_212)
{
    // 299B 0021;	
    // (⦛) MEASURED ANGLE OPENING LEFT	[0B85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299B, 0x0021 };
    uint32_t const ces[9] = { 0x0B85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_213)
{
    // 299B 003F;	
    // (⦛) MEASURED ANGLE OPENING LEFT	[0B85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299B, 0x003F };
    uint32_t const ces[9] = { 0x0B85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_214)
{
    // 299B 0061;	
    // (⦛) MEASURED ANGLE OPENING LEFT	[0B85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299B, 0x0061 };
    uint32_t const ces[9] = { 0x0B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_215)
{
    // 299B 0041;	
    // (⦛) MEASURED ANGLE OPENING LEFT	[0B85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x299B, 0x0041 };
    uint32_t const ces[9] = { 0x0B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_216)
{
    // 299B 0062;	
    // (⦛) MEASURED ANGLE OPENING LEFT	[0B85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299B, 0x0062 };
    uint32_t const ces[9] = { 0x0B85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_217)
{
    // 299C 0021;	
    // (⦜) RIGHT ANGLE VARIANT WITH SQUARE	[0B86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299C, 0x0021 };
    uint32_t const ces[9] = { 0x0B86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_218)
{
    // 299C 003F;	
    // (⦜) RIGHT ANGLE VARIANT WITH SQUARE	[0B86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299C, 0x003F };
    uint32_t const ces[9] = { 0x0B86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_219)
{
    // 299C 0061;	
    // (⦜) RIGHT ANGLE VARIANT WITH SQUARE	[0B86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299C, 0x0061 };
    uint32_t const ces[9] = { 0x0B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_220)
{
    // 299C 0041;	
    // (⦜) RIGHT ANGLE VARIANT WITH SQUARE	[0B86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x299C, 0x0041 };
    uint32_t const ces[9] = { 0x0B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_221)
{
    // 299C 0062;	
    // (⦜) RIGHT ANGLE VARIANT WITH SQUARE	[0B86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299C, 0x0062 };
    uint32_t const ces[9] = { 0x0B86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_222)
{
    // 299D 0021;	
    // (⦝) MEASURED RIGHT ANGLE WITH DOT	[0B87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299D, 0x0021 };
    uint32_t const ces[9] = { 0x0B87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_223)
{
    // 299D 003F;	
    // (⦝) MEASURED RIGHT ANGLE WITH DOT	[0B87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299D, 0x003F };
    uint32_t const ces[9] = { 0x0B87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_224)
{
    // 299D 0061;	
    // (⦝) MEASURED RIGHT ANGLE WITH DOT	[0B87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299D, 0x0061 };
    uint32_t const ces[9] = { 0x0B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_225)
{
    // 299D 0041;	
    // (⦝) MEASURED RIGHT ANGLE WITH DOT	[0B87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x299D, 0x0041 };
    uint32_t const ces[9] = { 0x0B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_226)
{
    // 299D 0062;	
    // (⦝) MEASURED RIGHT ANGLE WITH DOT	[0B87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299D, 0x0062 };
    uint32_t const ces[9] = { 0x0B87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_227)
{
    // 299E 0021;	
    // (⦞) ANGLE WITH S INSIDE	[0B88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299E, 0x0021 };
    uint32_t const ces[9] = { 0x0B88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_228)
{
    // 299E 003F;	
    // (⦞) ANGLE WITH S INSIDE	[0B88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299E, 0x003F };
    uint32_t const ces[9] = { 0x0B88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_229)
{
    // 299E 0061;	
    // (⦞) ANGLE WITH S INSIDE	[0B88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299E, 0x0061 };
    uint32_t const ces[9] = { 0x0B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_230)
{
    // 299E 0041;	
    // (⦞) ANGLE WITH S INSIDE	[0B88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x299E, 0x0041 };
    uint32_t const ces[9] = { 0x0B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_231)
{
    // 299E 0062;	
    // (⦞) ANGLE WITH S INSIDE	[0B88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299E, 0x0062 };
    uint32_t const ces[9] = { 0x0B88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_232)
{
    // 299F 0021;	
    // (⦟) ACUTE ANGLE	[0B89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299F, 0x0021 };
    uint32_t const ces[9] = { 0x0B89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_233)
{
    // 299F 003F;	
    // (⦟) ACUTE ANGLE	[0B89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299F, 0x003F };
    uint32_t const ces[9] = { 0x0B89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_234)
{
    // 299F 0061;	
    // (⦟) ACUTE ANGLE	[0B89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299F, 0x0061 };
    uint32_t const ces[9] = { 0x0B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_235)
{
    // 299F 0041;	
    // (⦟) ACUTE ANGLE	[0B89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x299F, 0x0041 };
    uint32_t const ces[9] = { 0x0B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_236)
{
    // 299F 0062;	
    // (⦟) ACUTE ANGLE	[0B89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x299F, 0x0062 };
    uint32_t const ces[9] = { 0x0B89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_237)
{
    // 29A0 0021;	
    // (⦠) SPHERICAL ANGLE OPENING LEFT	[0B8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A0, 0x0021 };
    uint32_t const ces[9] = { 0x0B8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_238)
{
    // 29A0 003F;	
    // (⦠) SPHERICAL ANGLE OPENING LEFT	[0B8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A0, 0x003F };
    uint32_t const ces[9] = { 0x0B8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_239)
{
    // 29A0 0061;	
    // (⦠) SPHERICAL ANGLE OPENING LEFT	[0B8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A0, 0x0061 };
    uint32_t const ces[9] = { 0x0B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_240)
{
    // 29A0 0041;	
    // (⦠) SPHERICAL ANGLE OPENING LEFT	[0B8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A0, 0x0041 };
    uint32_t const ces[9] = { 0x0B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_241)
{
    // 29A0 0062;	
    // (⦠) SPHERICAL ANGLE OPENING LEFT	[0B8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A0, 0x0062 };
    uint32_t const ces[9] = { 0x0B8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_242)
{
    // 29A1 0021;	
    // (⦡) SPHERICAL ANGLE OPENING UP	[0B8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A1, 0x0021 };
    uint32_t const ces[9] = { 0x0B8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_243)
{
    // 29A1 003F;	
    // (⦡) SPHERICAL ANGLE OPENING UP	[0B8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A1, 0x003F };
    uint32_t const ces[9] = { 0x0B8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_244)
{
    // 29A1 0061;	
    // (⦡) SPHERICAL ANGLE OPENING UP	[0B8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A1, 0x0061 };
    uint32_t const ces[9] = { 0x0B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_245)
{
    // 29A1 0041;	
    // (⦡) SPHERICAL ANGLE OPENING UP	[0B8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A1, 0x0041 };
    uint32_t const ces[9] = { 0x0B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_246)
{
    // 29A1 0062;	
    // (⦡) SPHERICAL ANGLE OPENING UP	[0B8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A1, 0x0062 };
    uint32_t const ces[9] = { 0x0B8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_247)
{
    // 29A2 0021;	
    // (⦢) TURNED ANGLE	[0B8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A2, 0x0021 };
    uint32_t const ces[9] = { 0x0B8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_248)
{
    // 29A2 003F;	
    // (⦢) TURNED ANGLE	[0B8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A2, 0x003F };
    uint32_t const ces[9] = { 0x0B8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_249)
{
    // 29A2 0061;	
    // (⦢) TURNED ANGLE	[0B8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A2, 0x0061 };
    uint32_t const ces[9] = { 0x0B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_250)
{
    // 29A2 0041;	
    // (⦢) TURNED ANGLE	[0B8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A2, 0x0041 };
    uint32_t const ces[9] = { 0x0B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_251)
{
    // 29A2 0062;	
    // (⦢) TURNED ANGLE	[0B8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A2, 0x0062 };
    uint32_t const ces[9] = { 0x0B8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_252)
{
    // 29A3 0021;	
    // (⦣) REVERSED ANGLE	[0B8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A3, 0x0021 };
    uint32_t const ces[9] = { 0x0B8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_253)
{
    // 29A3 003F;	
    // (⦣) REVERSED ANGLE	[0B8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A3, 0x003F };
    uint32_t const ces[9] = { 0x0B8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_254)
{
    // 29A3 0061;	
    // (⦣) REVERSED ANGLE	[0B8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A3, 0x0061 };
    uint32_t const ces[9] = { 0x0B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_255)
{
    // 29A3 0041;	
    // (⦣) REVERSED ANGLE	[0B8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A3, 0x0041 };
    uint32_t const ces[9] = { 0x0B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_256)
{
    // 29A3 0062;	
    // (⦣) REVERSED ANGLE	[0B8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A3, 0x0062 };
    uint32_t const ces[9] = { 0x0B8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_257)
{
    // 29A4 0021;	
    // (⦤) ANGLE WITH UNDERBAR	[0B8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A4, 0x0021 };
    uint32_t const ces[9] = { 0x0B8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_258)
{
    // 29A4 003F;	
    // (⦤) ANGLE WITH UNDERBAR	[0B8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A4, 0x003F };
    uint32_t const ces[9] = { 0x0B8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_259)
{
    // 29A4 0061;	
    // (⦤) ANGLE WITH UNDERBAR	[0B8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A4, 0x0061 };
    uint32_t const ces[9] = { 0x0B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_260)
{
    // 29A4 0041;	
    // (⦤) ANGLE WITH UNDERBAR	[0B8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A4, 0x0041 };
    uint32_t const ces[9] = { 0x0B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_261)
{
    // 29A4 0062;	
    // (⦤) ANGLE WITH UNDERBAR	[0B8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A4, 0x0062 };
    uint32_t const ces[9] = { 0x0B8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_262)
{
    // 29A5 0021;	
    // (⦥) REVERSED ANGLE WITH UNDERBAR	[0B8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A5, 0x0021 };
    uint32_t const ces[9] = { 0x0B8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_263)
{
    // 29A5 003F;	
    // (⦥) REVERSED ANGLE WITH UNDERBAR	[0B8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A5, 0x003F };
    uint32_t const ces[9] = { 0x0B8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_264)
{
    // 29A5 0061;	
    // (⦥) REVERSED ANGLE WITH UNDERBAR	[0B8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A5, 0x0061 };
    uint32_t const ces[9] = { 0x0B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_265)
{
    // 29A5 0041;	
    // (⦥) REVERSED ANGLE WITH UNDERBAR	[0B8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A5, 0x0041 };
    uint32_t const ces[9] = { 0x0B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_266)
{
    // 29A5 0062;	
    // (⦥) REVERSED ANGLE WITH UNDERBAR	[0B8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A5, 0x0062 };
    uint32_t const ces[9] = { 0x0B8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_267)
{
    // 29A6 0021;	
    // (⦦) OBLIQUE ANGLE OPENING UP	[0B90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A6, 0x0021 };
    uint32_t const ces[9] = { 0x0B90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_268)
{
    // 29A6 003F;	
    // (⦦) OBLIQUE ANGLE OPENING UP	[0B90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A6, 0x003F };
    uint32_t const ces[9] = { 0x0B90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_269)
{
    // 29A6 0061;	
    // (⦦) OBLIQUE ANGLE OPENING UP	[0B90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A6, 0x0061 };
    uint32_t const ces[9] = { 0x0B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_270)
{
    // 29A6 0041;	
    // (⦦) OBLIQUE ANGLE OPENING UP	[0B90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A6, 0x0041 };
    uint32_t const ces[9] = { 0x0B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_271)
{
    // 29A6 0062;	
    // (⦦) OBLIQUE ANGLE OPENING UP	[0B90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A6, 0x0062 };
    uint32_t const ces[9] = { 0x0B90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_272)
{
    // 29A7 0021;	
    // (⦧) OBLIQUE ANGLE OPENING DOWN	[0B91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A7, 0x0021 };
    uint32_t const ces[9] = { 0x0B91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_273)
{
    // 29A7 003F;	
    // (⦧) OBLIQUE ANGLE OPENING DOWN	[0B91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A7, 0x003F };
    uint32_t const ces[9] = { 0x0B91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_274)
{
    // 29A7 0061;	
    // (⦧) OBLIQUE ANGLE OPENING DOWN	[0B91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A7, 0x0061 };
    uint32_t const ces[9] = { 0x0B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_275)
{
    // 29A7 0041;	
    // (⦧) OBLIQUE ANGLE OPENING DOWN	[0B91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A7, 0x0041 };
    uint32_t const ces[9] = { 0x0B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_276)
{
    // 29A7 0062;	
    // (⦧) OBLIQUE ANGLE OPENING DOWN	[0B91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A7, 0x0062 };
    uint32_t const ces[9] = { 0x0B91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_277)
{
    // 29A8 0021;	
    // (⦨) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT	[0B92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A8, 0x0021 };
    uint32_t const ces[9] = { 0x0B92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_278)
{
    // 29A8 003F;	
    // (⦨) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT	[0B92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A8, 0x003F };
    uint32_t const ces[9] = { 0x0B92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_279)
{
    // 29A8 0061;	
    // (⦨) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT	[0B92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A8, 0x0061 };
    uint32_t const ces[9] = { 0x0B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_280)
{
    // 29A8 0041;	
    // (⦨) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT	[0B92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A8, 0x0041 };
    uint32_t const ces[9] = { 0x0B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_281)
{
    // 29A8 0062;	
    // (⦨) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT	[0B92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A8, 0x0062 };
    uint32_t const ces[9] = { 0x0B92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_282)
{
    // 29A9 0021;	
    // (⦩) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT	[0B93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A9, 0x0021 };
    uint32_t const ces[9] = { 0x0B93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_283)
{
    // 29A9 003F;	
    // (⦩) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT	[0B93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A9, 0x003F };
    uint32_t const ces[9] = { 0x0B93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_284)
{
    // 29A9 0061;	
    // (⦩) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT	[0B93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A9, 0x0061 };
    uint32_t const ces[9] = { 0x0B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_285)
{
    // 29A9 0041;	
    // (⦩) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT	[0B93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29A9, 0x0041 };
    uint32_t const ces[9] = { 0x0B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_286)
{
    // 29A9 0062;	
    // (⦩) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT	[0B93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29A9, 0x0062 };
    uint32_t const ces[9] = { 0x0B93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_287)
{
    // 29AA 0021;	
    // (⦪) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT	[0B94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AA, 0x0021 };
    uint32_t const ces[9] = { 0x0B94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_288)
{
    // 29AA 003F;	
    // (⦪) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT	[0B94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AA, 0x003F };
    uint32_t const ces[9] = { 0x0B94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_289)
{
    // 29AA 0061;	
    // (⦪) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT	[0B94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AA, 0x0061 };
    uint32_t const ces[9] = { 0x0B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_290)
{
    // 29AA 0041;	
    // (⦪) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT	[0B94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29AA, 0x0041 };
    uint32_t const ces[9] = { 0x0B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_291)
{
    // 29AA 0062;	
    // (⦪) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT	[0B94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AA, 0x0062 };
    uint32_t const ces[9] = { 0x0B94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_292)
{
    // 29AB 0021;	
    // (⦫) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT	[0B95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AB, 0x0021 };
    uint32_t const ces[9] = { 0x0B95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_293)
{
    // 29AB 003F;	
    // (⦫) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT	[0B95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AB, 0x003F };
    uint32_t const ces[9] = { 0x0B95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_294)
{
    // 29AB 0061;	
    // (⦫) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT	[0B95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AB, 0x0061 };
    uint32_t const ces[9] = { 0x0B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_295)
{
    // 29AB 0041;	
    // (⦫) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT	[0B95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29AB, 0x0041 };
    uint32_t const ces[9] = { 0x0B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_296)
{
    // 29AB 0062;	
    // (⦫) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT	[0B95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AB, 0x0062 };
    uint32_t const ces[9] = { 0x0B95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_297)
{
    // 29AC 0021;	
    // (⦬) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP	[0B96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AC, 0x0021 };
    uint32_t const ces[9] = { 0x0B96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_298)
{
    // 29AC 003F;	
    // (⦬) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP	[0B96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AC, 0x003F };
    uint32_t const ces[9] = { 0x0B96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_299)
{
    // 29AC 0061;	
    // (⦬) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP	[0B96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AC, 0x0061 };
    uint32_t const ces[9] = { 0x0B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_300)
{
    // 29AC 0041;	
    // (⦬) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP	[0B96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29AC, 0x0041 };
    uint32_t const ces[9] = { 0x0B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_301)
{
    // 29AC 0062;	
    // (⦬) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP	[0B96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AC, 0x0062 };
    uint32_t const ces[9] = { 0x0B96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_302)
{
    // 29AD 0021;	
    // (⦭) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP	[0B97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AD, 0x0021 };
    uint32_t const ces[9] = { 0x0B97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_303)
{
    // 29AD 003F;	
    // (⦭) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP	[0B97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AD, 0x003F };
    uint32_t const ces[9] = { 0x0B97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_304)
{
    // 29AD 0061;	
    // (⦭) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP	[0B97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AD, 0x0061 };
    uint32_t const ces[9] = { 0x0B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_305)
{
    // 29AD 0041;	
    // (⦭) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP	[0B97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29AD, 0x0041 };
    uint32_t const ces[9] = { 0x0B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_306)
{
    // 29AD 0062;	
    // (⦭) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP	[0B97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AD, 0x0062 };
    uint32_t const ces[9] = { 0x0B97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_307)
{
    // 29AE 0021;	
    // (⦮) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN	[0B98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AE, 0x0021 };
    uint32_t const ces[9] = { 0x0B98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_308)
{
    // 29AE 003F;	
    // (⦮) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN	[0B98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AE, 0x003F };
    uint32_t const ces[9] = { 0x0B98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_309)
{
    // 29AE 0061;	
    // (⦮) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN	[0B98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AE, 0x0061 };
    uint32_t const ces[9] = { 0x0B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_310)
{
    // 29AE 0041;	
    // (⦮) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN	[0B98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29AE, 0x0041 };
    uint32_t const ces[9] = { 0x0B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_311)
{
    // 29AE 0062;	
    // (⦮) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN	[0B98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AE, 0x0062 };
    uint32_t const ces[9] = { 0x0B98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_312)
{
    // 29AF 0021;	
    // (⦯) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN	[0B99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AF, 0x0021 };
    uint32_t const ces[9] = { 0x0B99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_313)
{
    // 29AF 003F;	
    // (⦯) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN	[0B99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AF, 0x003F };
    uint32_t const ces[9] = { 0x0B99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_314)
{
    // 29AF 0061;	
    // (⦯) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN	[0B99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AF, 0x0061 };
    uint32_t const ces[9] = { 0x0B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_315)
{
    // 29AF 0041;	
    // (⦯) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN	[0B99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29AF, 0x0041 };
    uint32_t const ces[9] = { 0x0B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_316)
{
    // 29AF 0062;	
    // (⦯) MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN	[0B99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29AF, 0x0062 };
    uint32_t const ces[9] = { 0x0B99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_317)
{
    // 29B0 0021;	
    // (⦰) REVERSED EMPTY SET	[0B9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B0, 0x0021 };
    uint32_t const ces[9] = { 0x0B9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_318)
{
    // 29B0 003F;	
    // (⦰) REVERSED EMPTY SET	[0B9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B0, 0x003F };
    uint32_t const ces[9] = { 0x0B9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_319)
{
    // 29B0 0061;	
    // (⦰) REVERSED EMPTY SET	[0B9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B0, 0x0061 };
    uint32_t const ces[9] = { 0x0B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_320)
{
    // 29B0 0041;	
    // (⦰) REVERSED EMPTY SET	[0B9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B0, 0x0041 };
    uint32_t const ces[9] = { 0x0B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_321)
{
    // 29B0 0062;	
    // (⦰) REVERSED EMPTY SET	[0B9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B0, 0x0062 };
    uint32_t const ces[9] = { 0x0B9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_322)
{
    // 29B1 0021;	
    // (⦱) EMPTY SET WITH OVERBAR	[0B9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B1, 0x0021 };
    uint32_t const ces[9] = { 0x0B9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_323)
{
    // 29B1 003F;	
    // (⦱) EMPTY SET WITH OVERBAR	[0B9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B1, 0x003F };
    uint32_t const ces[9] = { 0x0B9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_324)
{
    // 29B1 0061;	
    // (⦱) EMPTY SET WITH OVERBAR	[0B9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B1, 0x0061 };
    uint32_t const ces[9] = { 0x0B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_325)
{
    // 29B1 0041;	
    // (⦱) EMPTY SET WITH OVERBAR	[0B9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B1, 0x0041 };
    uint32_t const ces[9] = { 0x0B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_326)
{
    // 29B1 0062;	
    // (⦱) EMPTY SET WITH OVERBAR	[0B9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B1, 0x0062 };
    uint32_t const ces[9] = { 0x0B9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_327)
{
    // 29B2 0021;	
    // (⦲) EMPTY SET WITH SMALL CIRCLE ABOVE	[0B9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B2, 0x0021 };
    uint32_t const ces[9] = { 0x0B9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_328)
{
    // 29B2 003F;	
    // (⦲) EMPTY SET WITH SMALL CIRCLE ABOVE	[0B9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B2, 0x003F };
    uint32_t const ces[9] = { 0x0B9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_329)
{
    // 29B2 0061;	
    // (⦲) EMPTY SET WITH SMALL CIRCLE ABOVE	[0B9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B2, 0x0061 };
    uint32_t const ces[9] = { 0x0B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_330)
{
    // 29B2 0041;	
    // (⦲) EMPTY SET WITH SMALL CIRCLE ABOVE	[0B9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B2, 0x0041 };
    uint32_t const ces[9] = { 0x0B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_331)
{
    // 29B2 0062;	
    // (⦲) EMPTY SET WITH SMALL CIRCLE ABOVE	[0B9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B2, 0x0062 };
    uint32_t const ces[9] = { 0x0B9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_332)
{
    // 29B3 0021;	
    // (⦳) EMPTY SET WITH RIGHT ARROW ABOVE	[0B9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B3, 0x0021 };
    uint32_t const ces[9] = { 0x0B9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_333)
{
    // 29B3 003F;	
    // (⦳) EMPTY SET WITH RIGHT ARROW ABOVE	[0B9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B3, 0x003F };
    uint32_t const ces[9] = { 0x0B9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_334)
{
    // 29B3 0061;	
    // (⦳) EMPTY SET WITH RIGHT ARROW ABOVE	[0B9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B3, 0x0061 };
    uint32_t const ces[9] = { 0x0B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_335)
{
    // 29B3 0041;	
    // (⦳) EMPTY SET WITH RIGHT ARROW ABOVE	[0B9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B3, 0x0041 };
    uint32_t const ces[9] = { 0x0B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_336)
{
    // 29B3 0062;	
    // (⦳) EMPTY SET WITH RIGHT ARROW ABOVE	[0B9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B3, 0x0062 };
    uint32_t const ces[9] = { 0x0B9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_337)
{
    // 29B4 0021;	
    // (⦴) EMPTY SET WITH LEFT ARROW ABOVE	[0B9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B4, 0x0021 };
    uint32_t const ces[9] = { 0x0B9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_338)
{
    // 29B4 003F;	
    // (⦴) EMPTY SET WITH LEFT ARROW ABOVE	[0B9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B4, 0x003F };
    uint32_t const ces[9] = { 0x0B9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_339)
{
    // 29B4 0061;	
    // (⦴) EMPTY SET WITH LEFT ARROW ABOVE	[0B9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B4, 0x0061 };
    uint32_t const ces[9] = { 0x0B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_340)
{
    // 29B4 0041;	
    // (⦴) EMPTY SET WITH LEFT ARROW ABOVE	[0B9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B4, 0x0041 };
    uint32_t const ces[9] = { 0x0B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_341)
{
    // 29B4 0062;	
    // (⦴) EMPTY SET WITH LEFT ARROW ABOVE	[0B9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B4, 0x0062 };
    uint32_t const ces[9] = { 0x0B9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_342)
{
    // 29B5 0021;	
    // (⦵) CIRCLE WITH HORIZONTAL BAR	[0B9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B5, 0x0021 };
    uint32_t const ces[9] = { 0x0B9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_343)
{
    // 29B5 003F;	
    // (⦵) CIRCLE WITH HORIZONTAL BAR	[0B9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B5, 0x003F };
    uint32_t const ces[9] = { 0x0B9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_344)
{
    // 29B5 0061;	
    // (⦵) CIRCLE WITH HORIZONTAL BAR	[0B9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B5, 0x0061 };
    uint32_t const ces[9] = { 0x0B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_345)
{
    // 29B5 0041;	
    // (⦵) CIRCLE WITH HORIZONTAL BAR	[0B9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B5, 0x0041 };
    uint32_t const ces[9] = { 0x0B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_346)
{
    // 29B5 0062;	
    // (⦵) CIRCLE WITH HORIZONTAL BAR	[0B9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B5, 0x0062 };
    uint32_t const ces[9] = { 0x0B9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_347)
{
    // 29B6 0021;	
    // (⦶) CIRCLED VERTICAL BAR	[0BA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B6, 0x0021 };
    uint32_t const ces[9] = { 0x0BA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_348)
{
    // 29B6 003F;	
    // (⦶) CIRCLED VERTICAL BAR	[0BA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B6, 0x003F };
    uint32_t const ces[9] = { 0x0BA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_349)
{
    // 29B6 0061;	
    // (⦶) CIRCLED VERTICAL BAR	[0BA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B6, 0x0061 };
    uint32_t const ces[9] = { 0x0BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_350)
{
    // 29B6 0041;	
    // (⦶) CIRCLED VERTICAL BAR	[0BA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B6, 0x0041 };
    uint32_t const ces[9] = { 0x0BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_351)
{
    // 29B6 0062;	
    // (⦶) CIRCLED VERTICAL BAR	[0BA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B6, 0x0062 };
    uint32_t const ces[9] = { 0x0BA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_352)
{
    // 29B7 0021;	
    // (⦷) CIRCLED PARALLEL	[0BA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B7, 0x0021 };
    uint32_t const ces[9] = { 0x0BA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_353)
{
    // 29B7 003F;	
    // (⦷) CIRCLED PARALLEL	[0BA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B7, 0x003F };
    uint32_t const ces[9] = { 0x0BA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_354)
{
    // 29B7 0061;	
    // (⦷) CIRCLED PARALLEL	[0BA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B7, 0x0061 };
    uint32_t const ces[9] = { 0x0BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_355)
{
    // 29B7 0041;	
    // (⦷) CIRCLED PARALLEL	[0BA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B7, 0x0041 };
    uint32_t const ces[9] = { 0x0BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_356)
{
    // 29B7 0062;	
    // (⦷) CIRCLED PARALLEL	[0BA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B7, 0x0062 };
    uint32_t const ces[9] = { 0x0BA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_357)
{
    // 29B8 0021;	
    // (⦸) CIRCLED REVERSE SOLIDUS	[0BA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B8, 0x0021 };
    uint32_t const ces[9] = { 0x0BA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_358)
{
    // 29B8 003F;	
    // (⦸) CIRCLED REVERSE SOLIDUS	[0BA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B8, 0x003F };
    uint32_t const ces[9] = { 0x0BA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_359)
{
    // 29B8 0061;	
    // (⦸) CIRCLED REVERSE SOLIDUS	[0BA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B8, 0x0061 };
    uint32_t const ces[9] = { 0x0BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_360)
{
    // 29B8 0041;	
    // (⦸) CIRCLED REVERSE SOLIDUS	[0BA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B8, 0x0041 };
    uint32_t const ces[9] = { 0x0BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_361)
{
    // 29B8 0062;	
    // (⦸) CIRCLED REVERSE SOLIDUS	[0BA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B8, 0x0062 };
    uint32_t const ces[9] = { 0x0BA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_362)
{
    // 29B9 0021;	
    // (⦹) CIRCLED PERPENDICULAR	[0BA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B9, 0x0021 };
    uint32_t const ces[9] = { 0x0BA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_363)
{
    // 29B9 003F;	
    // (⦹) CIRCLED PERPENDICULAR	[0BA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B9, 0x003F };
    uint32_t const ces[9] = { 0x0BA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_364)
{
    // 29B9 0061;	
    // (⦹) CIRCLED PERPENDICULAR	[0BA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B9, 0x0061 };
    uint32_t const ces[9] = { 0x0BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_365)
{
    // 29B9 0041;	
    // (⦹) CIRCLED PERPENDICULAR	[0BA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29B9, 0x0041 };
    uint32_t const ces[9] = { 0x0BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_366)
{
    // 29B9 0062;	
    // (⦹) CIRCLED PERPENDICULAR	[0BA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29B9, 0x0062 };
    uint32_t const ces[9] = { 0x0BA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_367)
{
    // 29BA 0021;	
    // (⦺) CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR	[0BA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BA, 0x0021 };
    uint32_t const ces[9] = { 0x0BA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_368)
{
    // 29BA 003F;	
    // (⦺) CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR	[0BA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BA, 0x003F };
    uint32_t const ces[9] = { 0x0BA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_369)
{
    // 29BA 0061;	
    // (⦺) CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR	[0BA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BA, 0x0061 };
    uint32_t const ces[9] = { 0x0BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_370)
{
    // 29BA 0041;	
    // (⦺) CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR	[0BA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29BA, 0x0041 };
    uint32_t const ces[9] = { 0x0BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_371)
{
    // 29BA 0062;	
    // (⦺) CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR	[0BA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BA, 0x0062 };
    uint32_t const ces[9] = { 0x0BA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_372)
{
    // 29BB 0021;	
    // (⦻) CIRCLE WITH SUPERIMPOSED X	[0BA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BB, 0x0021 };
    uint32_t const ces[9] = { 0x0BA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_373)
{
    // 29BB 003F;	
    // (⦻) CIRCLE WITH SUPERIMPOSED X	[0BA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BB, 0x003F };
    uint32_t const ces[9] = { 0x0BA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_374)
{
    // 29BB 0061;	
    // (⦻) CIRCLE WITH SUPERIMPOSED X	[0BA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BB, 0x0061 };
    uint32_t const ces[9] = { 0x0BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_375)
{
    // 29BB 0041;	
    // (⦻) CIRCLE WITH SUPERIMPOSED X	[0BA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29BB, 0x0041 };
    uint32_t const ces[9] = { 0x0BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_376)
{
    // 29BB 0062;	
    // (⦻) CIRCLE WITH SUPERIMPOSED X	[0BA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BB, 0x0062 };
    uint32_t const ces[9] = { 0x0BA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_377)
{
    // 29BC 0021;	
    // (⦼) CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN	[0BA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BC, 0x0021 };
    uint32_t const ces[9] = { 0x0BA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_378)
{
    // 29BC 003F;	
    // (⦼) CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN	[0BA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BC, 0x003F };
    uint32_t const ces[9] = { 0x0BA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_379)
{
    // 29BC 0061;	
    // (⦼) CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN	[0BA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BC, 0x0061 };
    uint32_t const ces[9] = { 0x0BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_380)
{
    // 29BC 0041;	
    // (⦼) CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN	[0BA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29BC, 0x0041 };
    uint32_t const ces[9] = { 0x0BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_381)
{
    // 29BC 0062;	
    // (⦼) CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN	[0BA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BC, 0x0062 };
    uint32_t const ces[9] = { 0x0BA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_382)
{
    // 29BD 0021;	
    // (⦽) UP ARROW THROUGH CIRCLE	[0BA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BD, 0x0021 };
    uint32_t const ces[9] = { 0x0BA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_383)
{
    // 29BD 003F;	
    // (⦽) UP ARROW THROUGH CIRCLE	[0BA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BD, 0x003F };
    uint32_t const ces[9] = { 0x0BA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_384)
{
    // 29BD 0061;	
    // (⦽) UP ARROW THROUGH CIRCLE	[0BA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BD, 0x0061 };
    uint32_t const ces[9] = { 0x0BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_385)
{
    // 29BD 0041;	
    // (⦽) UP ARROW THROUGH CIRCLE	[0BA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29BD, 0x0041 };
    uint32_t const ces[9] = { 0x0BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_386)
{
    // 29BD 0062;	
    // (⦽) UP ARROW THROUGH CIRCLE	[0BA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BD, 0x0062 };
    uint32_t const ces[9] = { 0x0BA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_387)
{
    // 29BE 0021;	
    // (⦾) CIRCLED WHITE BULLET	[0BA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BE, 0x0021 };
    uint32_t const ces[9] = { 0x0BA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_388)
{
    // 29BE 003F;	
    // (⦾) CIRCLED WHITE BULLET	[0BA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BE, 0x003F };
    uint32_t const ces[9] = { 0x0BA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_389)
{
    // 29BE 0061;	
    // (⦾) CIRCLED WHITE BULLET	[0BA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BE, 0x0061 };
    uint32_t const ces[9] = { 0x0BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_390)
{
    // 29BE 0041;	
    // (⦾) CIRCLED WHITE BULLET	[0BA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29BE, 0x0041 };
    uint32_t const ces[9] = { 0x0BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_391)
{
    // 29BE 0062;	
    // (⦾) CIRCLED WHITE BULLET	[0BA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BE, 0x0062 };
    uint32_t const ces[9] = { 0x0BA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_392)
{
    // 29BF 0021;	
    // (⦿) CIRCLED BULLET	[0BA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BF, 0x0021 };
    uint32_t const ces[9] = { 0x0BA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_393)
{
    // 29BF 003F;	
    // (⦿) CIRCLED BULLET	[0BA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BF, 0x003F };
    uint32_t const ces[9] = { 0x0BA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_394)
{
    // 29BF 0061;	
    // (⦿) CIRCLED BULLET	[0BA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BF, 0x0061 };
    uint32_t const ces[9] = { 0x0BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_395)
{
    // 29BF 0041;	
    // (⦿) CIRCLED BULLET	[0BA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29BF, 0x0041 };
    uint32_t const ces[9] = { 0x0BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_396)
{
    // 29BF 0062;	
    // (⦿) CIRCLED BULLET	[0BA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29BF, 0x0062 };
    uint32_t const ces[9] = { 0x0BA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_397)
{
    // 29C0 0021;	
    // (⧀) CIRCLED LESS-THAN	[0BAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C0, 0x0021 };
    uint32_t const ces[9] = { 0x0BAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_398)
{
    // 29C0 003F;	
    // (⧀) CIRCLED LESS-THAN	[0BAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C0, 0x003F };
    uint32_t const ces[9] = { 0x0BAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_399)
{
    // 29C0 0061;	
    // (⧀) CIRCLED LESS-THAN	[0BAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C0, 0x0061 };
    uint32_t const ces[9] = { 0x0BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_400)
{
    // 29C0 0041;	
    // (⧀) CIRCLED LESS-THAN	[0BAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C0, 0x0041 };
    uint32_t const ces[9] = { 0x0BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_401)
{
    // 29C0 0062;	
    // (⧀) CIRCLED LESS-THAN	[0BAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C0, 0x0062 };
    uint32_t const ces[9] = { 0x0BAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_402)
{
    // 29C1 0021;	
    // (⧁) CIRCLED GREATER-THAN	[0BAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C1, 0x0021 };
    uint32_t const ces[9] = { 0x0BAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_403)
{
    // 29C1 003F;	
    // (⧁) CIRCLED GREATER-THAN	[0BAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C1, 0x003F };
    uint32_t const ces[9] = { 0x0BAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_404)
{
    // 29C1 0061;	
    // (⧁) CIRCLED GREATER-THAN	[0BAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C1, 0x0061 };
    uint32_t const ces[9] = { 0x0BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_405)
{
    // 29C1 0041;	
    // (⧁) CIRCLED GREATER-THAN	[0BAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C1, 0x0041 };
    uint32_t const ces[9] = { 0x0BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_406)
{
    // 29C1 0062;	
    // (⧁) CIRCLED GREATER-THAN	[0BAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C1, 0x0062 };
    uint32_t const ces[9] = { 0x0BAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_407)
{
    // 29C2 0021;	
    // (⧂) CIRCLE WITH SMALL CIRCLE TO THE RIGHT	[0BAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C2, 0x0021 };
    uint32_t const ces[9] = { 0x0BAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_408)
{
    // 29C2 003F;	
    // (⧂) CIRCLE WITH SMALL CIRCLE TO THE RIGHT	[0BAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C2, 0x003F };
    uint32_t const ces[9] = { 0x0BAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_409)
{
    // 29C2 0061;	
    // (⧂) CIRCLE WITH SMALL CIRCLE TO THE RIGHT	[0BAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C2, 0x0061 };
    uint32_t const ces[9] = { 0x0BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_410)
{
    // 29C2 0041;	
    // (⧂) CIRCLE WITH SMALL CIRCLE TO THE RIGHT	[0BAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C2, 0x0041 };
    uint32_t const ces[9] = { 0x0BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_411)
{
    // 29C2 0062;	
    // (⧂) CIRCLE WITH SMALL CIRCLE TO THE RIGHT	[0BAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C2, 0x0062 };
    uint32_t const ces[9] = { 0x0BAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_412)
{
    // 29C3 0021;	
    // (⧃) CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT	[0BAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C3, 0x0021 };
    uint32_t const ces[9] = { 0x0BAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_413)
{
    // 29C3 003F;	
    // (⧃) CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT	[0BAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C3, 0x003F };
    uint32_t const ces[9] = { 0x0BAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_414)
{
    // 29C3 0061;	
    // (⧃) CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT	[0BAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C3, 0x0061 };
    uint32_t const ces[9] = { 0x0BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_415)
{
    // 29C3 0041;	
    // (⧃) CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT	[0BAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C3, 0x0041 };
    uint32_t const ces[9] = { 0x0BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_416)
{
    // 29C3 0062;	
    // (⧃) CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT	[0BAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C3, 0x0062 };
    uint32_t const ces[9] = { 0x0BAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_417)
{
    // 29C4 0021;	
    // (⧄) SQUARED RISING DIAGONAL SLASH	[0BAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C4, 0x0021 };
    uint32_t const ces[9] = { 0x0BAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_418)
{
    // 29C4 003F;	
    // (⧄) SQUARED RISING DIAGONAL SLASH	[0BAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C4, 0x003F };
    uint32_t const ces[9] = { 0x0BAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_419)
{
    // 29C4 0061;	
    // (⧄) SQUARED RISING DIAGONAL SLASH	[0BAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C4, 0x0061 };
    uint32_t const ces[9] = { 0x0BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_420)
{
    // 29C4 0041;	
    // (⧄) SQUARED RISING DIAGONAL SLASH	[0BAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C4, 0x0041 };
    uint32_t const ces[9] = { 0x0BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_421)
{
    // 29C4 0062;	
    // (⧄) SQUARED RISING DIAGONAL SLASH	[0BAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C4, 0x0062 };
    uint32_t const ces[9] = { 0x0BAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_422)
{
    // 29C5 0021;	
    // (⧅) SQUARED FALLING DIAGONAL SLASH	[0BAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C5, 0x0021 };
    uint32_t const ces[9] = { 0x0BAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_423)
{
    // 29C5 003F;	
    // (⧅) SQUARED FALLING DIAGONAL SLASH	[0BAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C5, 0x003F };
    uint32_t const ces[9] = { 0x0BAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_424)
{
    // 29C5 0061;	
    // (⧅) SQUARED FALLING DIAGONAL SLASH	[0BAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C5, 0x0061 };
    uint32_t const ces[9] = { 0x0BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_425)
{
    // 29C5 0041;	
    // (⧅) SQUARED FALLING DIAGONAL SLASH	[0BAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C5, 0x0041 };
    uint32_t const ces[9] = { 0x0BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_426)
{
    // 29C5 0062;	
    // (⧅) SQUARED FALLING DIAGONAL SLASH	[0BAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C5, 0x0062 };
    uint32_t const ces[9] = { 0x0BAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_427)
{
    // 29C6 0021;	
    // (⧆) SQUARED ASTERISK	[0BB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C6, 0x0021 };
    uint32_t const ces[9] = { 0x0BB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_428)
{
    // 29C6 003F;	
    // (⧆) SQUARED ASTERISK	[0BB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C6, 0x003F };
    uint32_t const ces[9] = { 0x0BB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_429)
{
    // 29C6 0061;	
    // (⧆) SQUARED ASTERISK	[0BB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C6, 0x0061 };
    uint32_t const ces[9] = { 0x0BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_430)
{
    // 29C6 0041;	
    // (⧆) SQUARED ASTERISK	[0BB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C6, 0x0041 };
    uint32_t const ces[9] = { 0x0BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_431)
{
    // 29C6 0062;	
    // (⧆) SQUARED ASTERISK	[0BB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C6, 0x0062 };
    uint32_t const ces[9] = { 0x0BB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_432)
{
    // 29C7 0021;	
    // (⧇) SQUARED SMALL CIRCLE	[0BB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C7, 0x0021 };
    uint32_t const ces[9] = { 0x0BB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_433)
{
    // 29C7 003F;	
    // (⧇) SQUARED SMALL CIRCLE	[0BB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C7, 0x003F };
    uint32_t const ces[9] = { 0x0BB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_434)
{
    // 29C7 0061;	
    // (⧇) SQUARED SMALL CIRCLE	[0BB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C7, 0x0061 };
    uint32_t const ces[9] = { 0x0BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_435)
{
    // 29C7 0041;	
    // (⧇) SQUARED SMALL CIRCLE	[0BB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C7, 0x0041 };
    uint32_t const ces[9] = { 0x0BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_436)
{
    // 29C7 0062;	
    // (⧇) SQUARED SMALL CIRCLE	[0BB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C7, 0x0062 };
    uint32_t const ces[9] = { 0x0BB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_437)
{
    // 29C8 0021;	
    // (⧈) SQUARED SQUARE	[0BB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C8, 0x0021 };
    uint32_t const ces[9] = { 0x0BB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_438)
{
    // 29C8 003F;	
    // (⧈) SQUARED SQUARE	[0BB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C8, 0x003F };
    uint32_t const ces[9] = { 0x0BB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_439)
{
    // 29C8 0061;	
    // (⧈) SQUARED SQUARE	[0BB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C8, 0x0061 };
    uint32_t const ces[9] = { 0x0BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_440)
{
    // 29C8 0041;	
    // (⧈) SQUARED SQUARE	[0BB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C8, 0x0041 };
    uint32_t const ces[9] = { 0x0BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_441)
{
    // 29C8 0062;	
    // (⧈) SQUARED SQUARE	[0BB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C8, 0x0062 };
    uint32_t const ces[9] = { 0x0BB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_442)
{
    // 29C9 0021;	
    // (⧉) TWO JOINED SQUARES	[0BB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C9, 0x0021 };
    uint32_t const ces[9] = { 0x0BB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_443)
{
    // 29C9 003F;	
    // (⧉) TWO JOINED SQUARES	[0BB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C9, 0x003F };
    uint32_t const ces[9] = { 0x0BB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_444)
{
    // 29C9 0061;	
    // (⧉) TWO JOINED SQUARES	[0BB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C9, 0x0061 };
    uint32_t const ces[9] = { 0x0BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_445)
{
    // 29C9 0041;	
    // (⧉) TWO JOINED SQUARES	[0BB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29C9, 0x0041 };
    uint32_t const ces[9] = { 0x0BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_446)
{
    // 29C9 0062;	
    // (⧉) TWO JOINED SQUARES	[0BB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29C9, 0x0062 };
    uint32_t const ces[9] = { 0x0BB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_447)
{
    // 29CA 0021;	
    // (⧊) TRIANGLE WITH DOT ABOVE	[0BB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CA, 0x0021 };
    uint32_t const ces[9] = { 0x0BB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_448)
{
    // 29CA 003F;	
    // (⧊) TRIANGLE WITH DOT ABOVE	[0BB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CA, 0x003F };
    uint32_t const ces[9] = { 0x0BB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_449)
{
    // 29CA 0061;	
    // (⧊) TRIANGLE WITH DOT ABOVE	[0BB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CA, 0x0061 };
    uint32_t const ces[9] = { 0x0BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_450)
{
    // 29CA 0041;	
    // (⧊) TRIANGLE WITH DOT ABOVE	[0BB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29CA, 0x0041 };
    uint32_t const ces[9] = { 0x0BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_451)
{
    // 29CA 0062;	
    // (⧊) TRIANGLE WITH DOT ABOVE	[0BB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CA, 0x0062 };
    uint32_t const ces[9] = { 0x0BB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_452)
{
    // 29CB 0021;	
    // (⧋) TRIANGLE WITH UNDERBAR	[0BB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CB, 0x0021 };
    uint32_t const ces[9] = { 0x0BB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_453)
{
    // 29CB 003F;	
    // (⧋) TRIANGLE WITH UNDERBAR	[0BB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CB, 0x003F };
    uint32_t const ces[9] = { 0x0BB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_454)
{
    // 29CB 0061;	
    // (⧋) TRIANGLE WITH UNDERBAR	[0BB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CB, 0x0061 };
    uint32_t const ces[9] = { 0x0BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_455)
{
    // 29CB 0041;	
    // (⧋) TRIANGLE WITH UNDERBAR	[0BB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29CB, 0x0041 };
    uint32_t const ces[9] = { 0x0BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_456)
{
    // 29CB 0062;	
    // (⧋) TRIANGLE WITH UNDERBAR	[0BB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CB, 0x0062 };
    uint32_t const ces[9] = { 0x0BB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_457)
{
    // 29CC 0021;	
    // (⧌) S IN TRIANGLE	[0BB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CC, 0x0021 };
    uint32_t const ces[9] = { 0x0BB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_458)
{
    // 29CC 003F;	
    // (⧌) S IN TRIANGLE	[0BB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CC, 0x003F };
    uint32_t const ces[9] = { 0x0BB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_459)
{
    // 29CC 0061;	
    // (⧌) S IN TRIANGLE	[0BB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CC, 0x0061 };
    uint32_t const ces[9] = { 0x0BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_460)
{
    // 29CC 0041;	
    // (⧌) S IN TRIANGLE	[0BB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29CC, 0x0041 };
    uint32_t const ces[9] = { 0x0BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_461)
{
    // 29CC 0062;	
    // (⧌) S IN TRIANGLE	[0BB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CC, 0x0062 };
    uint32_t const ces[9] = { 0x0BB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_462)
{
    // 29CD 0021;	
    // (⧍) TRIANGLE WITH SERIFS AT BOTTOM	[0BB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CD, 0x0021 };
    uint32_t const ces[9] = { 0x0BB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_463)
{
    // 29CD 003F;	
    // (⧍) TRIANGLE WITH SERIFS AT BOTTOM	[0BB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CD, 0x003F };
    uint32_t const ces[9] = { 0x0BB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_464)
{
    // 29CD 0061;	
    // (⧍) TRIANGLE WITH SERIFS AT BOTTOM	[0BB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CD, 0x0061 };
    uint32_t const ces[9] = { 0x0BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_465)
{
    // 29CD 0041;	
    // (⧍) TRIANGLE WITH SERIFS AT BOTTOM	[0BB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29CD, 0x0041 };
    uint32_t const ces[9] = { 0x0BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_466)
{
    // 29CD 0062;	
    // (⧍) TRIANGLE WITH SERIFS AT BOTTOM	[0BB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CD, 0x0062 };
    uint32_t const ces[9] = { 0x0BB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_467)
{
    // 29CE 0021;	
    // (⧎) RIGHT TRIANGLE ABOVE LEFT TRIANGLE	[0BB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CE, 0x0021 };
    uint32_t const ces[9] = { 0x0BB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_468)
{
    // 29CE 003F;	
    // (⧎) RIGHT TRIANGLE ABOVE LEFT TRIANGLE	[0BB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CE, 0x003F };
    uint32_t const ces[9] = { 0x0BB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_469)
{
    // 29CE 0061;	
    // (⧎) RIGHT TRIANGLE ABOVE LEFT TRIANGLE	[0BB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CE, 0x0061 };
    uint32_t const ces[9] = { 0x0BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_470)
{
    // 29CE 0041;	
    // (⧎) RIGHT TRIANGLE ABOVE LEFT TRIANGLE	[0BB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29CE, 0x0041 };
    uint32_t const ces[9] = { 0x0BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_471)
{
    // 29CE 0062;	
    // (⧎) RIGHT TRIANGLE ABOVE LEFT TRIANGLE	[0BB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CE, 0x0062 };
    uint32_t const ces[9] = { 0x0BB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_472)
{
    // 29CF 0021;	
    // (⧏) LEFT TRIANGLE BESIDE VERTICAL BAR	[0BB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CF, 0x0021 };
    uint32_t const ces[9] = { 0x0BB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_473)
{
    // 29CF 003F;	
    // (⧏) LEFT TRIANGLE BESIDE VERTICAL BAR	[0BB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CF, 0x003F };
    uint32_t const ces[9] = { 0x0BB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_474)
{
    // 29CF 0061;	
    // (⧏) LEFT TRIANGLE BESIDE VERTICAL BAR	[0BB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CF, 0x0061 };
    uint32_t const ces[9] = { 0x0BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_475)
{
    // 29CF 0041;	
    // (⧏) LEFT TRIANGLE BESIDE VERTICAL BAR	[0BB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29CF, 0x0041 };
    uint32_t const ces[9] = { 0x0BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_476)
{
    // 29CF 0062;	
    // (⧏) LEFT TRIANGLE BESIDE VERTICAL BAR	[0BB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29CF, 0x0062 };
    uint32_t const ces[9] = { 0x0BB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_477)
{
    // 29D0 0021;	
    // (⧐) VERTICAL BAR BESIDE RIGHT TRIANGLE	[0BBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D0, 0x0021 };
    uint32_t const ces[9] = { 0x0BBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_478)
{
    // 29D0 003F;	
    // (⧐) VERTICAL BAR BESIDE RIGHT TRIANGLE	[0BBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D0, 0x003F };
    uint32_t const ces[9] = { 0x0BBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_479)
{
    // 29D0 0061;	
    // (⧐) VERTICAL BAR BESIDE RIGHT TRIANGLE	[0BBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D0, 0x0061 };
    uint32_t const ces[9] = { 0x0BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_480)
{
    // 29D0 0041;	
    // (⧐) VERTICAL BAR BESIDE RIGHT TRIANGLE	[0BBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D0, 0x0041 };
    uint32_t const ces[9] = { 0x0BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_481)
{
    // 29D0 0062;	
    // (⧐) VERTICAL BAR BESIDE RIGHT TRIANGLE	[0BBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D0, 0x0062 };
    uint32_t const ces[9] = { 0x0BBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_482)
{
    // 29D1 0021;	
    // (⧑) BOWTIE WITH LEFT HALF BLACK	[0BBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D1, 0x0021 };
    uint32_t const ces[9] = { 0x0BBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_483)
{
    // 29D1 003F;	
    // (⧑) BOWTIE WITH LEFT HALF BLACK	[0BBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D1, 0x003F };
    uint32_t const ces[9] = { 0x0BBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_484)
{
    // 29D1 0061;	
    // (⧑) BOWTIE WITH LEFT HALF BLACK	[0BBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D1, 0x0061 };
    uint32_t const ces[9] = { 0x0BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_485)
{
    // 29D1 0041;	
    // (⧑) BOWTIE WITH LEFT HALF BLACK	[0BBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D1, 0x0041 };
    uint32_t const ces[9] = { 0x0BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_486)
{
    // 29D1 0062;	
    // (⧑) BOWTIE WITH LEFT HALF BLACK	[0BBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D1, 0x0062 };
    uint32_t const ces[9] = { 0x0BBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_487)
{
    // 29D2 0021;	
    // (⧒) BOWTIE WITH RIGHT HALF BLACK	[0BBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D2, 0x0021 };
    uint32_t const ces[9] = { 0x0BBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_488)
{
    // 29D2 003F;	
    // (⧒) BOWTIE WITH RIGHT HALF BLACK	[0BBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D2, 0x003F };
    uint32_t const ces[9] = { 0x0BBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_489)
{
    // 29D2 0061;	
    // (⧒) BOWTIE WITH RIGHT HALF BLACK	[0BBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D2, 0x0061 };
    uint32_t const ces[9] = { 0x0BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_490)
{
    // 29D2 0041;	
    // (⧒) BOWTIE WITH RIGHT HALF BLACK	[0BBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D2, 0x0041 };
    uint32_t const ces[9] = { 0x0BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_491)
{
    // 29D2 0062;	
    // (⧒) BOWTIE WITH RIGHT HALF BLACK	[0BBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D2, 0x0062 };
    uint32_t const ces[9] = { 0x0BBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_492)
{
    // 29D3 0021;	
    // (⧓) BLACK BOWTIE	[0BBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D3, 0x0021 };
    uint32_t const ces[9] = { 0x0BBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_493)
{
    // 29D3 003F;	
    // (⧓) BLACK BOWTIE	[0BBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D3, 0x003F };
    uint32_t const ces[9] = { 0x0BBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_494)
{
    // 29D3 0061;	
    // (⧓) BLACK BOWTIE	[0BBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D3, 0x0061 };
    uint32_t const ces[9] = { 0x0BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_495)
{
    // 29D3 0041;	
    // (⧓) BLACK BOWTIE	[0BBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D3, 0x0041 };
    uint32_t const ces[9] = { 0x0BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_496)
{
    // 29D3 0062;	
    // (⧓) BLACK BOWTIE	[0BBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D3, 0x0062 };
    uint32_t const ces[9] = { 0x0BBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_497)
{
    // 29D4 0021;	
    // (⧔) TIMES WITH LEFT HALF BLACK	[0BBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D4, 0x0021 };
    uint32_t const ces[9] = { 0x0BBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_498)
{
    // 29D4 003F;	
    // (⧔) TIMES WITH LEFT HALF BLACK	[0BBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D4, 0x003F };
    uint32_t const ces[9] = { 0x0BBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_036_499)
{
    // 29D4 0061;	
    // (⧔) TIMES WITH LEFT HALF BLACK	[0BBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D4, 0x0061 };
    uint32_t const ces[9] = { 0x0BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

