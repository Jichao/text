// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_227_000)
{
    // 10CDD 0041;	
    // (‚Äé‚Äéê≥ù‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER NIKOLSBURG OE	[3833 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CDD, 0x0041 };
    uint32_t const ces[9] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_001)
{
    // 10C9D 0061;	
    // (‚Äé‚Äéê≤ù‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE	[3833 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C9D, 0x0061 };
    uint32_t const ces[9] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_002)
{
    // 10C9D 0041;	
    // (‚Äé‚Äéê≤ù‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE	[3833 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10C9D, 0x0041 };
    uint32_t const ces[9] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_003)
{
    // 10CDE 0061;	
    // (‚Äé‚Äéê≥û‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA OE	[3833 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CDE, 0x0061 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_004)
{
    // 10CDE 0041;	
    // (‚Äé‚Äéê≥û‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA OE	[3833 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10CDE, 0x0041 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_005)
{
    // 10C9E 0061;	
    // (‚Äé‚Äéê≤û‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE	[3833 1CAD | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10C9E, 0x0061 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_006)
{
    // 10C9E 0041;	
    // (‚Äé‚Äéê≤û‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE	[3833 1CAD | 0020 0111 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0x10C9E, 0x0041 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_007)
{
    // 10CDF 0061;	
    // (‚Äé‚Äéê≥ü‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER OEE	[3833 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CDF, 0x0061 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_008)
{
    // 10CDF 0041;	
    // (‚Äé‚Äéê≥ü‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER OEE	[3833 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10CDF, 0x0041 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_009)
{
    // 10C9F 0061;	
    // (‚Äé‚Äéê≤ü‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER OEE	[3833 1CAD | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10C9F, 0x0061 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_010)
{
    // 10C9F 0041;	
    // (‚Äé‚Äéê≤ü‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER OEE	[3833 1CAD | 0020 0112 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0x10C9F, 0x0041 };
    uint32_t const ces[11] = { 0x3833, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_011)
{
    // 10CDD 0062;	
    // (‚Äé‚Äéê≥ù‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER NIKOLSBURG OE	[3833 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CDD, 0x0062 };
    uint32_t const ces[9] = { 0x3833, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_012)
{
    // 10C9D 0062;	
    // (‚Äé‚Äéê≤ù‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE	[3833 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C9D, 0x0062 };
    uint32_t const ces[9] = { 0x3833, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_013)
{
    // 10CDE 0062;	
    // (‚Äé‚Äéê≥û‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA OE	[3833 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CDE, 0x0062 };
    uint32_t const ces[11] = { 0x3833, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_014)
{
    // 10C9E 0062;	
    // (‚Äé‚Äéê≤û‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE	[3833 1CC6 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10C9E, 0x0062 };
    uint32_t const ces[11] = { 0x3833, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_015)
{
    // 10CDF 0062;	
    // (‚Äé‚Äéê≥ü‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER OEE	[3833 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CDF, 0x0062 };
    uint32_t const ces[11] = { 0x3833, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_016)
{
    // 10C9F 0062;	
    // (‚Äé‚Äéê≤ü‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER OEE	[3833 1CC6 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10C9F, 0x0062 };
    uint32_t const ces[11] = { 0x3833, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_017)
{
    // 10CE0 0021;	
    // (‚Äé‚Äéê≥†‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EP	[3834 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE0, 0x0021 };
    uint32_t const ces[9] = { 0x3834, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_018)
{
    // 10CA0 0021;	
    // (‚Äé‚Äéê≤†‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EP	[3834 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA0, 0x0021 };
    uint32_t const ces[9] = { 0x3834, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_019)
{
    // 10CE0 003F;	
    // (‚Äé‚Äéê≥†‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EP	[3834 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE0, 0x003F };
    uint32_t const ces[9] = { 0x3834, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_020)
{
    // 10CA0 003F;	
    // (‚Äé‚Äéê≤†‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EP	[3834 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA0, 0x003F };
    uint32_t const ces[9] = { 0x3834, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_021)
{
    // 10CE0 0061;	
    // (‚Äé‚Äéê≥†‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EP	[3834 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE0, 0x0061 };
    uint32_t const ces[9] = { 0x3834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_022)
{
    // 10CE0 0041;	
    // (‚Äé‚Äéê≥†‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EP	[3834 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE0, 0x0041 };
    uint32_t const ces[9] = { 0x3834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_023)
{
    // 10CA0 0061;	
    // (‚Äé‚Äéê≤†‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EP	[3834 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA0, 0x0061 };
    uint32_t const ces[9] = { 0x3834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_024)
{
    // 10CA0 0041;	
    // (‚Äé‚Äéê≤†‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EP	[3834 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA0, 0x0041 };
    uint32_t const ces[9] = { 0x3834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_025)
{
    // 10CE0 0062;	
    // (‚Äé‚Äéê≥†‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EP	[3834 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE0, 0x0062 };
    uint32_t const ces[9] = { 0x3834, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_026)
{
    // 10CA0 0062;	
    // (‚Äé‚Äéê≤†‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EP	[3834 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA0, 0x0062 };
    uint32_t const ces[9] = { 0x3834, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_027)
{
    // 10CE1 0021;	
    // (‚Äé‚Äéê≥°‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EMP	[3835 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE1, 0x0021 };
    uint32_t const ces[9] = { 0x3835, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_028)
{
    // 10CA1 0021;	
    // (‚Äé‚Äéê≤°‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EMP	[3835 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA1, 0x0021 };
    uint32_t const ces[9] = { 0x3835, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_029)
{
    // 10CE1 003F;	
    // (‚Äé‚Äéê≥°‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EMP	[3835 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE1, 0x003F };
    uint32_t const ces[9] = { 0x3835, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_030)
{
    // 10CA1 003F;	
    // (‚Äé‚Äéê≤°‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EMP	[3835 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA1, 0x003F };
    uint32_t const ces[9] = { 0x3835, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_031)
{
    // 10CE1 0061;	
    // (‚Äé‚Äéê≥°‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EMP	[3835 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE1, 0x0061 };
    uint32_t const ces[9] = { 0x3835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_032)
{
    // 10CE1 0041;	
    // (‚Äé‚Äéê≥°‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EMP	[3835 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE1, 0x0041 };
    uint32_t const ces[9] = { 0x3835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_033)
{
    // 10CA1 0061;	
    // (‚Äé‚Äéê≤°‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EMP	[3835 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA1, 0x0061 };
    uint32_t const ces[9] = { 0x3835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_034)
{
    // 10CA1 0041;	
    // (‚Äé‚Äéê≤°‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EMP	[3835 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA1, 0x0041 };
    uint32_t const ces[9] = { 0x3835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_035)
{
    // 10CE1 0062;	
    // (‚Äé‚Äéê≥°‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EMP	[3835 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE1, 0x0062 };
    uint32_t const ces[9] = { 0x3835, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_036)
{
    // 10CA1 0062;	
    // (‚Äé‚Äéê≤°‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EMP	[3835 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA1, 0x0062 };
    uint32_t const ces[9] = { 0x3835, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_037)
{
    // 10CE2 0021;	
    // (‚Äé‚Äéê≥¢‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ER	[3836 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE2, 0x0021 };
    uint32_t const ces[9] = { 0x3836, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_038)
{
    // 10CA2 0021;	
    // (‚Äé‚Äéê≤¢‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ER	[3836 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA2, 0x0021 };
    uint32_t const ces[9] = { 0x3836, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_039)
{
    // 10CE3 0021;	
    // (‚Äé‚Äéê≥£‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER SHORT ER	[3836 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CE3, 0x0021 };
    uint32_t const ces[11] = { 0x3836, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_040)
{
    // 10CA3 0021;	
    // (‚Äé‚Äéê≤£‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER SHORT ER	[3836 0261 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CA3, 0x0021 };
    uint32_t const ces[11] = { 0x3836, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_041)
{
    // 10CE2 003F;	
    // (‚Äé‚Äéê≥¢‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ER	[3836 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE2, 0x003F };
    uint32_t const ces[9] = { 0x3836, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_042)
{
    // 10CA2 003F;	
    // (‚Äé‚Äéê≤¢‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ER	[3836 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA2, 0x003F };
    uint32_t const ces[9] = { 0x3836, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_043)
{
    // 10CE3 003F;	
    // (‚Äé‚Äéê≥£‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER SHORT ER	[3836 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CE3, 0x003F };
    uint32_t const ces[11] = { 0x3836, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_044)
{
    // 10CA3 003F;	
    // (‚Äé‚Äéê≤£‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER SHORT ER	[3836 0267 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CA3, 0x003F };
    uint32_t const ces[11] = { 0x3836, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_045)
{
    // 10CE2 0061;	
    // (‚Äé‚Äéê≥¢‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ER	[3836 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE2, 0x0061 };
    uint32_t const ces[9] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_046)
{
    // 10CE2 0041;	
    // (‚Äé‚Äéê≥¢‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ER	[3836 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE2, 0x0041 };
    uint32_t const ces[9] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_047)
{
    // 10CA2 0061;	
    // (‚Äé‚Äéê≤¢‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ER	[3836 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA2, 0x0061 };
    uint32_t const ces[9] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_048)
{
    // 10CA2 0041;	
    // (‚Äé‚Äéê≤¢‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ER	[3836 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA2, 0x0041 };
    uint32_t const ces[9] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_049)
{
    // 10CE3 0061;	
    // (‚Äé‚Äéê≥£‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER SHORT ER	[3836 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CE3, 0x0061 };
    uint32_t const ces[11] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_050)
{
    // 10CE3 0041;	
    // (‚Äé‚Äéê≥£‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER SHORT ER	[3836 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10CE3, 0x0041 };
    uint32_t const ces[11] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_051)
{
    // 10CA3 0061;	
    // (‚Äé‚Äéê≤£‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER SHORT ER	[3836 1CAD | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CA3, 0x0061 };
    uint32_t const ces[11] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_052)
{
    // 10CA3 0041;	
    // (‚Äé‚Äéê≤£‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER SHORT ER	[3836 1CAD | 0020 0111 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0x10CA3, 0x0041 };
    uint32_t const ces[11] = { 0x3836, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_053)
{
    // 10CE2 0062;	
    // (‚Äé‚Äéê≥¢‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ER	[3836 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE2, 0x0062 };
    uint32_t const ces[9] = { 0x3836, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_054)
{
    // 10CA2 0062;	
    // (‚Äé‚Äéê≤¢‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ER	[3836 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA2, 0x0062 };
    uint32_t const ces[9] = { 0x3836, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_055)
{
    // 10CE3 0062;	
    // (‚Äé‚Äéê≥£‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER SHORT ER	[3836 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CE3, 0x0062 };
    uint32_t const ces[11] = { 0x3836, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_056)
{
    // 10CA3 0062;	
    // (‚Äé‚Äéê≤£‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER SHORT ER	[3836 1CC6 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CA3, 0x0062 };
    uint32_t const ces[11] = { 0x3836, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_057)
{
    // 10CE4 0021;	
    // (‚Äé‚Äéê≥§‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ES	[3837 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE4, 0x0021 };
    uint32_t const ces[9] = { 0x3837, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_058)
{
    // 10CA4 0021;	
    // (‚Äé‚Äéê≤§‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ES	[3837 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA4, 0x0021 };
    uint32_t const ces[9] = { 0x3837, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_059)
{
    // 10CE4 003F;	
    // (‚Äé‚Äéê≥§‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ES	[3837 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE4, 0x003F };
    uint32_t const ces[9] = { 0x3837, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_060)
{
    // 10CA4 003F;	
    // (‚Äé‚Äéê≤§‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ES	[3837 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA4, 0x003F };
    uint32_t const ces[9] = { 0x3837, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_061)
{
    // 10CE4 0061;	
    // (‚Äé‚Äéê≥§‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ES	[3837 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE4, 0x0061 };
    uint32_t const ces[9] = { 0x3837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_062)
{
    // 10CE4 0041;	
    // (‚Äé‚Äéê≥§‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ES	[3837 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE4, 0x0041 };
    uint32_t const ces[9] = { 0x3837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_063)
{
    // 10CA4 0061;	
    // (‚Äé‚Äéê≤§‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ES	[3837 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA4, 0x0061 };
    uint32_t const ces[9] = { 0x3837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_064)
{
    // 10CA4 0041;	
    // (‚Äé‚Äéê≤§‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ES	[3837 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA4, 0x0041 };
    uint32_t const ces[9] = { 0x3837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_065)
{
    // 10CE4 0062;	
    // (‚Äé‚Äéê≥§‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ES	[3837 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE4, 0x0062 };
    uint32_t const ces[9] = { 0x3837, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_066)
{
    // 10CA4 0062;	
    // (‚Äé‚Äéê≤§‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ES	[3837 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA4, 0x0062 };
    uint32_t const ces[9] = { 0x3837, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_067)
{
    // 10CE5 0021;	
    // (‚Äé‚Äéê≥•‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ESZ	[3838 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE5, 0x0021 };
    uint32_t const ces[9] = { 0x3838, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_068)
{
    // 10CA5 0021;	
    // (‚Äé‚Äéê≤•‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ESZ	[3838 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA5, 0x0021 };
    uint32_t const ces[9] = { 0x3838, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_069)
{
    // 10CE5 003F;	
    // (‚Äé‚Äéê≥•‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ESZ	[3838 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE5, 0x003F };
    uint32_t const ces[9] = { 0x3838, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_070)
{
    // 10CA5 003F;	
    // (‚Äé‚Äéê≤•‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ESZ	[3838 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA5, 0x003F };
    uint32_t const ces[9] = { 0x3838, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_071)
{
    // 10CE5 0061;	
    // (‚Äé‚Äéê≥•‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ESZ	[3838 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE5, 0x0061 };
    uint32_t const ces[9] = { 0x3838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_072)
{
    // 10CE5 0041;	
    // (‚Äé‚Äéê≥•‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ESZ	[3838 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE5, 0x0041 };
    uint32_t const ces[9] = { 0x3838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_073)
{
    // 10CA5 0061;	
    // (‚Äé‚Äéê≤•‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ESZ	[3838 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA5, 0x0061 };
    uint32_t const ces[9] = { 0x3838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_074)
{
    // 10CA5 0041;	
    // (‚Äé‚Äéê≤•‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ESZ	[3838 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA5, 0x0041 };
    uint32_t const ces[9] = { 0x3838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_075)
{
    // 10CE5 0062;	
    // (‚Äé‚Äéê≥•‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ESZ	[3838 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE5, 0x0062 };
    uint32_t const ces[9] = { 0x3838, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_076)
{
    // 10CA5 0062;	
    // (‚Äé‚Äéê≤•‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ESZ	[3838 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA5, 0x0062 };
    uint32_t const ces[9] = { 0x3838, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_077)
{
    // 10CE6 0021;	
    // (‚Äé‚Äéê≥¶‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ET	[3839 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE6, 0x0021 };
    uint32_t const ces[9] = { 0x3839, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_078)
{
    // 10CA6 0021;	
    // (‚Äé‚Äéê≤¶‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ET	[3839 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA6, 0x0021 };
    uint32_t const ces[9] = { 0x3839, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_079)
{
    // 10CE6 003F;	
    // (‚Äé‚Äéê≥¶‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ET	[3839 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE6, 0x003F };
    uint32_t const ces[9] = { 0x3839, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_080)
{
    // 10CA6 003F;	
    // (‚Äé‚Äéê≤¶‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ET	[3839 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA6, 0x003F };
    uint32_t const ces[9] = { 0x3839, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_081)
{
    // 10CE6 0061;	
    // (‚Äé‚Äéê≥¶‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ET	[3839 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE6, 0x0061 };
    uint32_t const ces[9] = { 0x3839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_082)
{
    // 10CE6 0041;	
    // (‚Äé‚Äéê≥¶‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ET	[3839 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE6, 0x0041 };
    uint32_t const ces[9] = { 0x3839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_083)
{
    // 10CA6 0061;	
    // (‚Äé‚Äéê≤¶‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ET	[3839 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA6, 0x0061 };
    uint32_t const ces[9] = { 0x3839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_084)
{
    // 10CA6 0041;	
    // (‚Äé‚Äéê≤¶‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ET	[3839 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA6, 0x0041 };
    uint32_t const ces[9] = { 0x3839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_085)
{
    // 10CE6 0062;	
    // (‚Äé‚Äéê≥¶‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ET	[3839 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE6, 0x0062 };
    uint32_t const ces[9] = { 0x3839, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_086)
{
    // 10CA6 0062;	
    // (‚Äé‚Äéê≤¶‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ET	[3839 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA6, 0x0062 };
    uint32_t const ces[9] = { 0x3839, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_087)
{
    // 10CE7 0021;	
    // (‚Äé‚Äéê≥ß‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT	[383A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE7, 0x0021 };
    uint32_t const ces[9] = { 0x383A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_088)
{
    // 10CA7 0021;	
    // (‚Äé‚Äéê≤ß‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT	[383A 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA7, 0x0021 };
    uint32_t const ces[9] = { 0x383A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_089)
{
    // 10CE7 003F;	
    // (‚Äé‚Äéê≥ß‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT	[383A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE7, 0x003F };
    uint32_t const ces[9] = { 0x383A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_090)
{
    // 10CA7 003F;	
    // (‚Äé‚Äéê≤ß‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT	[383A 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA7, 0x003F };
    uint32_t const ces[9] = { 0x383A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_091)
{
    // 10CE7 0061;	
    // (‚Äé‚Äéê≥ß‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT	[383A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE7, 0x0061 };
    uint32_t const ces[9] = { 0x383A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_092)
{
    // 10CE7 0041;	
    // (‚Äé‚Äéê≥ß‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT	[383A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE7, 0x0041 };
    uint32_t const ces[9] = { 0x383A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_093)
{
    // 10CA7 0061;	
    // (‚Äé‚Äéê≤ß‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT	[383A 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA7, 0x0061 };
    uint32_t const ces[9] = { 0x383A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_094)
{
    // 10CA7 0041;	
    // (‚Äé‚Äéê≤ß‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT	[383A 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA7, 0x0041 };
    uint32_t const ces[9] = { 0x383A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_095)
{
    // 10CE7 0062;	
    // (‚Äé‚Äéê≥ß‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT	[383A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE7, 0x0062 };
    uint32_t const ces[9] = { 0x383A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_096)
{
    // 10CA7 0062;	
    // (‚Äé‚Äéê≤ß‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT	[383A 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA7, 0x0062 };
    uint32_t const ces[9] = { 0x383A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_097)
{
    // 10CE8 0021;	
    // (‚Äé‚Äéê≥®‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ETY	[383B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE8, 0x0021 };
    uint32_t const ces[9] = { 0x383B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_098)
{
    // 10CA8 0021;	
    // (‚Äé‚Äéê≤®‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ETY	[383B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA8, 0x0021 };
    uint32_t const ces[9] = { 0x383B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_099)
{
    // 10CE8 003F;	
    // (‚Äé‚Äéê≥®‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ETY	[383B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE8, 0x003F };
    uint32_t const ces[9] = { 0x383B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_100)
{
    // 10CA8 003F;	
    // (‚Äé‚Äéê≤®‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ETY	[383B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA8, 0x003F };
    uint32_t const ces[9] = { 0x383B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_101)
{
    // 10CE8 0061;	
    // (‚Äé‚Äéê≥®‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ETY	[383B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE8, 0x0061 };
    uint32_t const ces[9] = { 0x383B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_102)
{
    // 10CE8 0041;	
    // (‚Äé‚Äéê≥®‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ETY	[383B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE8, 0x0041 };
    uint32_t const ces[9] = { 0x383B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_103)
{
    // 10CA8 0061;	
    // (‚Äé‚Äéê≤®‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ETY	[383B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA8, 0x0061 };
    uint32_t const ces[9] = { 0x383B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_104)
{
    // 10CA8 0041;	
    // (‚Äé‚Äéê≤®‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ETY	[383B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA8, 0x0041 };
    uint32_t const ces[9] = { 0x383B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_105)
{
    // 10CE8 0062;	
    // (‚Äé‚Äéê≥®‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ETY	[383B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE8, 0x0062 };
    uint32_t const ces[9] = { 0x383B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_106)
{
    // 10CA8 0062;	
    // (‚Äé‚Äéê≤®‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ETY	[383B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA8, 0x0062 };
    uint32_t const ces[9] = { 0x383B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_107)
{
    // 10CE9 0021;	
    // (‚Äé‚Äéê≥©‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ECH	[383C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE9, 0x0021 };
    uint32_t const ces[9] = { 0x383C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_108)
{
    // 10CA9 0021;	
    // (‚Äé‚Äéê≤©‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ECH	[383C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA9, 0x0021 };
    uint32_t const ces[9] = { 0x383C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_109)
{
    // 10CE9 003F;	
    // (‚Äé‚Äéê≥©‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ECH	[383C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE9, 0x003F };
    uint32_t const ces[9] = { 0x383C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_110)
{
    // 10CA9 003F;	
    // (‚Äé‚Äéê≤©‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ECH	[383C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA9, 0x003F };
    uint32_t const ces[9] = { 0x383C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_111)
{
    // 10CE9 0061;	
    // (‚Äé‚Äéê≥©‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ECH	[383C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE9, 0x0061 };
    uint32_t const ces[9] = { 0x383C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_112)
{
    // 10CE9 0041;	
    // (‚Äé‚Äéê≥©‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ECH	[383C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CE9, 0x0041 };
    uint32_t const ces[9] = { 0x383C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_113)
{
    // 10CA9 0061;	
    // (‚Äé‚Äéê≤©‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ECH	[383C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA9, 0x0061 };
    uint32_t const ces[9] = { 0x383C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_114)
{
    // 10CA9 0041;	
    // (‚Äé‚Äéê≤©‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ECH	[383C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CA9, 0x0041 };
    uint32_t const ces[9] = { 0x383C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_115)
{
    // 10CE9 0062;	
    // (‚Äé‚Äéê≥©‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ECH	[383C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CE9, 0x0062 };
    uint32_t const ces[9] = { 0x383C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_116)
{
    // 10CA9 0062;	
    // (‚Äé‚Äéê≤©‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ECH	[383C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CA9, 0x0062 };
    uint32_t const ces[9] = { 0x383C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_117)
{
    // 10CEA 0021;	
    // (‚Äé‚Äéê≥™‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER U	[383D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEA, 0x0021 };
    uint32_t const ces[9] = { 0x383D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_118)
{
    // 10CAA 0021;	
    // (‚Äé‚Äéê≤™‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER U	[383D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAA, 0x0021 };
    uint32_t const ces[9] = { 0x383D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_119)
{
    // 10CEB 0021;	
    // (‚Äé‚Äéê≥´‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER UU	[383D 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CEB, 0x0021 };
    uint32_t const ces[11] = { 0x383D, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_120)
{
    // 10CAB 0021;	
    // (‚Äé‚Äéê≤´‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER UU	[383D 0261 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAB, 0x0021 };
    uint32_t const ces[11] = { 0x383D, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_121)
{
    // 10CEA 003F;	
    // (‚Äé‚Äéê≥™‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER U	[383D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEA, 0x003F };
    uint32_t const ces[9] = { 0x383D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_122)
{
    // 10CAA 003F;	
    // (‚Äé‚Äéê≤™‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER U	[383D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAA, 0x003F };
    uint32_t const ces[9] = { 0x383D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_123)
{
    // 10CEB 003F;	
    // (‚Äé‚Äéê≥´‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER UU	[383D 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CEB, 0x003F };
    uint32_t const ces[11] = { 0x383D, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_124)
{
    // 10CAB 003F;	
    // (‚Äé‚Äéê≤´‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER UU	[383D 0267 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAB, 0x003F };
    uint32_t const ces[11] = { 0x383D, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_125)
{
    // 10CEA 0061;	
    // (‚Äé‚Äéê≥™‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER U	[383D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEA, 0x0061 };
    uint32_t const ces[9] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_126)
{
    // 10CEA 0041;	
    // (‚Äé‚Äéê≥™‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER U	[383D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CEA, 0x0041 };
    uint32_t const ces[9] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_127)
{
    // 10CAA 0061;	
    // (‚Äé‚Äéê≤™‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER U	[383D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAA, 0x0061 };
    uint32_t const ces[9] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_128)
{
    // 10CAA 0041;	
    // (‚Äé‚Äéê≤™‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER U	[383D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CAA, 0x0041 };
    uint32_t const ces[9] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_129)
{
    // 10CEB 0061;	
    // (‚Äé‚Äéê≥´‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER UU	[383D 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CEB, 0x0061 };
    uint32_t const ces[11] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_130)
{
    // 10CEB 0041;	
    // (‚Äé‚Äéê≥´‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER UU	[383D 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10CEB, 0x0041 };
    uint32_t const ces[11] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_131)
{
    // 10CAB 0061;	
    // (‚Äé‚Äéê≤´‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER UU	[383D 1CAD | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAB, 0x0061 };
    uint32_t const ces[11] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_132)
{
    // 10CAB 0041;	
    // (‚Äé‚Äéê≤´‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER UU	[383D 1CAD | 0020 0111 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0x10CAB, 0x0041 };
    uint32_t const ces[11] = { 0x383D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_133)
{
    // 10CEA 0062;	
    // (‚Äé‚Äéê≥™‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER U	[383D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEA, 0x0062 };
    uint32_t const ces[9] = { 0x383D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_134)
{
    // 10CAA 0062;	
    // (‚Äé‚Äéê≤™‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER U	[383D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAA, 0x0062 };
    uint32_t const ces[9] = { 0x383D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_135)
{
    // 10CEB 0062;	
    // (‚Äé‚Äéê≥´‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER UU	[383D 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CEB, 0x0062 };
    uint32_t const ces[11] = { 0x383D, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_136)
{
    // 10CAB 0062;	
    // (‚Äé‚Äéê≤´‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER UU	[383D 1CC6 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAB, 0x0062 };
    uint32_t const ces[11] = { 0x383D, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_137)
{
    // 10CEC 0021;	
    // (‚Äé‚Äéê≥¨‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE	[383E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEC, 0x0021 };
    uint32_t const ces[9] = { 0x383E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_138)
{
    // 10CAC 0021;	
    // (‚Äé‚Äéê≤¨‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE	[383E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAC, 0x0021 };
    uint32_t const ces[9] = { 0x383E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_139)
{
    // 10CED 0021;	
    // (‚Äé‚Äéê≥≠‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA UE	[383E 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CED, 0x0021 };
    uint32_t const ces[11] = { 0x383E, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_140)
{
    // 10CAD 0021;	
    // (‚Äé‚Äéê≤≠‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE	[383E 0261 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAD, 0x0021 };
    uint32_t const ces[11] = { 0x383E, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_141)
{
    // 10CEC 003F;	
    // (‚Äé‚Äéê≥¨‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE	[383E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEC, 0x003F };
    uint32_t const ces[9] = { 0x383E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_142)
{
    // 10CAC 003F;	
    // (‚Äé‚Äéê≤¨‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE	[383E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAC, 0x003F };
    uint32_t const ces[9] = { 0x383E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_143)
{
    // 10CED 003F;	
    // (‚Äé‚Äéê≥≠‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA UE	[383E 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CED, 0x003F };
    uint32_t const ces[11] = { 0x383E, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_144)
{
    // 10CAD 003F;	
    // (‚Äé‚Äéê≤≠‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE	[383E 0267 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAD, 0x003F };
    uint32_t const ces[11] = { 0x383E, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_145)
{
    // 10CEC 0061;	
    // (‚Äé‚Äéê≥¨‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE	[383E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEC, 0x0061 };
    uint32_t const ces[9] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_146)
{
    // 10CEC 0041;	
    // (‚Äé‚Äéê≥¨‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE	[383E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CEC, 0x0041 };
    uint32_t const ces[9] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_147)
{
    // 10CAC 0061;	
    // (‚Äé‚Äéê≤¨‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE	[383E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAC, 0x0061 };
    uint32_t const ces[9] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_148)
{
    // 10CAC 0041;	
    // (‚Äé‚Äéê≤¨‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE	[383E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CAC, 0x0041 };
    uint32_t const ces[9] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_149)
{
    // 10CED 0061;	
    // (‚Äé‚Äéê≥≠‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA UE	[383E 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CED, 0x0061 };
    uint32_t const ces[11] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_150)
{
    // 10CED 0041;	
    // (‚Äé‚Äéê≥≠‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA UE	[383E 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10CED, 0x0041 };
    uint32_t const ces[11] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_151)
{
    // 10CAD 0061;	
    // (‚Äé‚Äéê≤≠‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE	[383E 1CAD | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAD, 0x0061 };
    uint32_t const ces[11] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_152)
{
    // 10CAD 0041;	
    // (‚Äé‚Äéê≤≠‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE	[383E 1CAD | 0020 0111 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0x10CAD, 0x0041 };
    uint32_t const ces[11] = { 0x383E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_153)
{
    // 10CEC 0062;	
    // (‚Äé‚Äéê≥¨‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE	[383E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEC, 0x0062 };
    uint32_t const ces[9] = { 0x383E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_154)
{
    // 10CAC 0062;	
    // (‚Äé‚Äéê≤¨‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE	[383E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAC, 0x0062 };
    uint32_t const ces[9] = { 0x383E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_155)
{
    // 10CED 0062;	
    // (‚Äé‚Äéê≥≠‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER RUDIMENTA UE	[383E 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10CED, 0x0062 };
    uint32_t const ces[11] = { 0x383E, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_156)
{
    // 10CAD 0062;	
    // (‚Äé‚Äéê≤≠‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE	[383E 1CC6 | 0020 0111 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x10CAD, 0x0062 };
    uint32_t const ces[11] = { 0x383E, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_157)
{
    // 10CEE 0021;	
    // (‚Äé‚Äéê≥Æ‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EV	[383F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEE, 0x0021 };
    uint32_t const ces[9] = { 0x383F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_158)
{
    // 10CAE 0021;	
    // (‚Äé‚Äéê≤Æ‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EV	[383F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAE, 0x0021 };
    uint32_t const ces[9] = { 0x383F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_159)
{
    // 10CEE 003F;	
    // (‚Äé‚Äéê≥Æ‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EV	[383F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEE, 0x003F };
    uint32_t const ces[9] = { 0x383F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_160)
{
    // 10CAE 003F;	
    // (‚Äé‚Äéê≤Æ‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EV	[383F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAE, 0x003F };
    uint32_t const ces[9] = { 0x383F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_161)
{
    // 10CEE 0061;	
    // (‚Äé‚Äéê≥Æ‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EV	[383F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEE, 0x0061 };
    uint32_t const ces[9] = { 0x383F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_162)
{
    // 10CEE 0041;	
    // (‚Äé‚Äéê≥Æ‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EV	[383F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CEE, 0x0041 };
    uint32_t const ces[9] = { 0x383F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_163)
{
    // 10CAE 0061;	
    // (‚Äé‚Äéê≤Æ‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EV	[383F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAE, 0x0061 };
    uint32_t const ces[9] = { 0x383F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_164)
{
    // 10CAE 0041;	
    // (‚Äé‚Äéê≤Æ‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EV	[383F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CAE, 0x0041 };
    uint32_t const ces[9] = { 0x383F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_165)
{
    // 10CEE 0062;	
    // (‚Äé‚Äéê≥Æ‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EV	[383F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEE, 0x0062 };
    uint32_t const ces[9] = { 0x383F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_166)
{
    // 10CAE 0062;	
    // (‚Äé‚Äéê≤Æ‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EV	[383F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAE, 0x0062 };
    uint32_t const ces[9] = { 0x383F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_167)
{
    // 10CEF 0021;	
    // (‚Äé‚Äéê≥Ø‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZ	[3840 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEF, 0x0021 };
    uint32_t const ces[9] = { 0x3840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_168)
{
    // 10CAF 0021;	
    // (‚Äé‚Äéê≤Ø‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZ	[3840 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAF, 0x0021 };
    uint32_t const ces[9] = { 0x3840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_169)
{
    // 10CEF 003F;	
    // (‚Äé‚Äéê≥Ø‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZ	[3840 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEF, 0x003F };
    uint32_t const ces[9] = { 0x3840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_170)
{
    // 10CAF 003F;	
    // (‚Äé‚Äéê≤Ø‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZ	[3840 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAF, 0x003F };
    uint32_t const ces[9] = { 0x3840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_171)
{
    // 10CEF 0061;	
    // (‚Äé‚Äéê≥Ø‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZ	[3840 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEF, 0x0061 };
    uint32_t const ces[9] = { 0x3840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_172)
{
    // 10CEF 0041;	
    // (‚Äé‚Äéê≥Ø‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZ	[3840 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CEF, 0x0041 };
    uint32_t const ces[9] = { 0x3840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_173)
{
    // 10CAF 0061;	
    // (‚Äé‚Äéê≤Ø‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZ	[3840 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAF, 0x0061 };
    uint32_t const ces[9] = { 0x3840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_174)
{
    // 10CAF 0041;	
    // (‚Äé‚Äéê≤Ø‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZ	[3840 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CAF, 0x0041 };
    uint32_t const ces[9] = { 0x3840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_175)
{
    // 10CEF 0062;	
    // (‚Äé‚Äéê≥Ø‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZ	[3840 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CEF, 0x0062 };
    uint32_t const ces[9] = { 0x3840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_176)
{
    // 10CAF 0062;	
    // (‚Äé‚Äéê≤Ø‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZ	[3840 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CAF, 0x0062 };
    uint32_t const ces[9] = { 0x3840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_177)
{
    // 10CF0 0021;	
    // (‚Äé‚Äéê≥∞‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZS	[3841 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF0, 0x0021 };
    uint32_t const ces[9] = { 0x3841, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_178)
{
    // 10CB0 0021;	
    // (‚Äé‚Äéê≤∞‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZS	[3841 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB0, 0x0021 };
    uint32_t const ces[9] = { 0x3841, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_179)
{
    // 10CF0 003F;	
    // (‚Äé‚Äéê≥∞‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZS	[3841 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF0, 0x003F };
    uint32_t const ces[9] = { 0x3841, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_180)
{
    // 10CB0 003F;	
    // (‚Äé‚Äéê≤∞‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZS	[3841 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB0, 0x003F };
    uint32_t const ces[9] = { 0x3841, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_181)
{
    // 10CF0 0061;	
    // (‚Äé‚Äéê≥∞‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZS	[3841 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF0, 0x0061 };
    uint32_t const ces[9] = { 0x3841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_182)
{
    // 10CF0 0041;	
    // (‚Äé‚Äéê≥∞‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZS	[3841 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CF0, 0x0041 };
    uint32_t const ces[9] = { 0x3841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_183)
{
    // 10CB0 0061;	
    // (‚Äé‚Äéê≤∞‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZS	[3841 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB0, 0x0061 };
    uint32_t const ces[9] = { 0x3841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_184)
{
    // 10CB0 0041;	
    // (‚Äé‚Äéê≤∞‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZS	[3841 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CB0, 0x0041 };
    uint32_t const ces[9] = { 0x3841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_185)
{
    // 10CF0 0062;	
    // (‚Äé‚Äéê≥∞‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER EZS	[3841 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF0, 0x0062 };
    uint32_t const ces[9] = { 0x3841, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_186)
{
    // 10CB0 0062;	
    // (‚Äé‚Äéê≤∞‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER EZS	[3841 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB0, 0x0062 };
    uint32_t const ces[9] = { 0x3841, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_187)
{
    // 10CF1 0021;	
    // (‚Äé‚Äéê≥±‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN	[3842 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF1, 0x0021 };
    uint32_t const ces[9] = { 0x3842, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_188)
{
    // 10CB1 0021;	
    // (‚Äé‚Äéê≤±‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN	[3842 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB1, 0x0021 };
    uint32_t const ces[9] = { 0x3842, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_189)
{
    // 10CF1 003F;	
    // (‚Äé‚Äéê≥±‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN	[3842 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF1, 0x003F };
    uint32_t const ces[9] = { 0x3842, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_190)
{
    // 10CB1 003F;	
    // (‚Äé‚Äéê≤±‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN	[3842 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB1, 0x003F };
    uint32_t const ces[9] = { 0x3842, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_191)
{
    // 10CF1 0061;	
    // (‚Äé‚Äéê≥±‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN	[3842 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF1, 0x0061 };
    uint32_t const ces[9] = { 0x3842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_192)
{
    // 10CF1 0041;	
    // (‚Äé‚Äéê≥±‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN	[3842 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CF1, 0x0041 };
    uint32_t const ces[9] = { 0x3842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_193)
{
    // 10CB1 0061;	
    // (‚Äé‚Äéê≤±‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN	[3842 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB1, 0x0061 };
    uint32_t const ces[9] = { 0x3842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_194)
{
    // 10CB1 0041;	
    // (‚Äé‚Äéê≤±‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN	[3842 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CB1, 0x0041 };
    uint32_t const ces[9] = { 0x3842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_195)
{
    // 10CF1 0062;	
    // (‚Äé‚Äéê≥±‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN	[3842 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF1, 0x0062 };
    uint32_t const ces[9] = { 0x3842, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_196)
{
    // 10CB1 0062;	
    // (‚Äé‚Äéê≤±‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN	[3842 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB1, 0x0062 };
    uint32_t const ces[9] = { 0x3842, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_197)
{
    // 10CF2 0021;	
    // (‚Äé‚Äéê≥≤‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER US	[3843 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF2, 0x0021 };
    uint32_t const ces[9] = { 0x3843, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_198)
{
    // 10CB2 0021;	
    // (‚Äé‚Äéê≤≤‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER US	[3843 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB2, 0x0021 };
    uint32_t const ces[9] = { 0x3843, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_199)
{
    // 10CF2 003F;	
    // (‚Äé‚Äéê≥≤‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER US	[3843 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF2, 0x003F };
    uint32_t const ces[9] = { 0x3843, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_200)
{
    // 10CB2 003F;	
    // (‚Äé‚Äéê≤≤‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER US	[3843 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB2, 0x003F };
    uint32_t const ces[9] = { 0x3843, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_201)
{
    // 10CF2 0061;	
    // (‚Äé‚Äéê≥≤‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER US	[3843 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF2, 0x0061 };
    uint32_t const ces[9] = { 0x3843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_202)
{
    // 10CF2 0041;	
    // (‚Äé‚Äéê≥≤‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER US	[3843 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CF2, 0x0041 };
    uint32_t const ces[9] = { 0x3843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_203)
{
    // 10CB2 0061;	
    // (‚Äé‚Äéê≤≤‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER US	[3843 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB2, 0x0061 };
    uint32_t const ces[9] = { 0x3843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_204)
{
    // 10CB2 0041;	
    // (‚Äé‚Äéê≤≤‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER US	[3843 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CB2, 0x0041 };
    uint32_t const ces[9] = { 0x3843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_205)
{
    // 10CF2 0062;	
    // (‚Äé‚Äéê≥≤‚Äé‚Äé) OLD HUNGARIAN SMALL LETTER US	[3843 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CF2, 0x0062 };
    uint32_t const ces[9] = { 0x3843, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_206)
{
    // 10CB2 0062;	
    // (‚Äé‚Äéê≤≤‚Äé‚Äé) OLD HUNGARIAN CAPITAL LETTER US	[3843 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CB2, 0x0062 };
    uint32_t const ces[9] = { 0x3843, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_207)
{
    // 10C00 0021;	
    // (‚Äé‚Äéê∞Ä‚Äé‚Äé) OLD TURKIC LETTER ORKHON A	[3844 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C00, 0x0021 };
    uint32_t const ces[9] = { 0x3844, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_208)
{
    // 10C01 0021;	
    // (‚Äé‚Äéê∞Å‚Äé‚Äé) OLD TURKIC LETTER YENISEI A	[3844 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C01, 0x0021 };
    uint32_t const ces[11] = { 0x3844, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_209)
{
    // 10C00 003F;	
    // (‚Äé‚Äéê∞Ä‚Äé‚Äé) OLD TURKIC LETTER ORKHON A	[3844 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C00, 0x003F };
    uint32_t const ces[9] = { 0x3844, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_210)
{
    // 10C01 003F;	
    // (‚Äé‚Äéê∞Å‚Äé‚Äé) OLD TURKIC LETTER YENISEI A	[3844 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C01, 0x003F };
    uint32_t const ces[11] = { 0x3844, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_211)
{
    // 10C00 0061;	
    // (‚Äé‚Äéê∞Ä‚Äé‚Äé) OLD TURKIC LETTER ORKHON A	[3844 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C00, 0x0061 };
    uint32_t const ces[9] = { 0x3844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_212)
{
    // 10C00 0041;	
    // (‚Äé‚Äéê∞Ä‚Äé‚Äé) OLD TURKIC LETTER ORKHON A	[3844 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C00, 0x0041 };
    uint32_t const ces[9] = { 0x3844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_213)
{
    // 10C01 0061;	
    // (‚Äé‚Äéê∞Å‚Äé‚Äé) OLD TURKIC LETTER YENISEI A	[3844 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C01, 0x0061 };
    uint32_t const ces[11] = { 0x3844, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_214)
{
    // 10C01 0041;	
    // (‚Äé‚Äéê∞Å‚Äé‚Äé) OLD TURKIC LETTER YENISEI A	[3844 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C01, 0x0041 };
    uint32_t const ces[11] = { 0x3844, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_215)
{
    // 10C00 0062;	
    // (‚Äé‚Äéê∞Ä‚Äé‚Äé) OLD TURKIC LETTER ORKHON A	[3844 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C00, 0x0062 };
    uint32_t const ces[9] = { 0x3844, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_216)
{
    // 10C01 0062;	
    // (‚Äé‚Äéê∞Å‚Äé‚Äé) OLD TURKIC LETTER YENISEI A	[3844 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C01, 0x0062 };
    uint32_t const ces[11] = { 0x3844, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_217)
{
    // 10C02 0021;	
    // (‚Äé‚Äéê∞Ç‚Äé‚Äé) OLD TURKIC LETTER YENISEI AE	[3845 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C02, 0x0021 };
    uint32_t const ces[9] = { 0x3845, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_218)
{
    // 10C02 003F;	
    // (‚Äé‚Äéê∞Ç‚Äé‚Äé) OLD TURKIC LETTER YENISEI AE	[3845 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C02, 0x003F };
    uint32_t const ces[9] = { 0x3845, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_219)
{
    // 10C02 0061;	
    // (‚Äé‚Äéê∞Ç‚Äé‚Äé) OLD TURKIC LETTER YENISEI AE	[3845 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C02, 0x0061 };
    uint32_t const ces[9] = { 0x3845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_220)
{
    // 10C02 0041;	
    // (‚Äé‚Äéê∞Ç‚Äé‚Äé) OLD TURKIC LETTER YENISEI AE	[3845 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C02, 0x0041 };
    uint32_t const ces[9] = { 0x3845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_221)
{
    // 10C02 0062;	
    // (‚Äé‚Äéê∞Ç‚Äé‚Äé) OLD TURKIC LETTER YENISEI AE	[3845 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C02, 0x0062 };
    uint32_t const ces[9] = { 0x3845, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_222)
{
    // 10C03 0021;	
    // (‚Äé‚Äéê∞É‚Äé‚Äé) OLD TURKIC LETTER ORKHON I	[3846 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C03, 0x0021 };
    uint32_t const ces[9] = { 0x3846, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_223)
{
    // 10C04 0021;	
    // (‚Äé‚Äéê∞Ñ‚Äé‚Äé) OLD TURKIC LETTER YENISEI I	[3846 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C04, 0x0021 };
    uint32_t const ces[11] = { 0x3846, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_224)
{
    // 10C03 003F;	
    // (‚Äé‚Äéê∞É‚Äé‚Äé) OLD TURKIC LETTER ORKHON I	[3846 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C03, 0x003F };
    uint32_t const ces[9] = { 0x3846, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_225)
{
    // 10C04 003F;	
    // (‚Äé‚Äéê∞Ñ‚Äé‚Äé) OLD TURKIC LETTER YENISEI I	[3846 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C04, 0x003F };
    uint32_t const ces[11] = { 0x3846, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_226)
{
    // 10C03 0061;	
    // (‚Äé‚Äéê∞É‚Äé‚Äé) OLD TURKIC LETTER ORKHON I	[3846 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C03, 0x0061 };
    uint32_t const ces[9] = { 0x3846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_227)
{
    // 10C03 0041;	
    // (‚Äé‚Äéê∞É‚Äé‚Äé) OLD TURKIC LETTER ORKHON I	[3846 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C03, 0x0041 };
    uint32_t const ces[9] = { 0x3846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_228)
{
    // 10C04 0061;	
    // (‚Äé‚Äéê∞Ñ‚Äé‚Äé) OLD TURKIC LETTER YENISEI I	[3846 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C04, 0x0061 };
    uint32_t const ces[11] = { 0x3846, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_229)
{
    // 10C04 0041;	
    // (‚Äé‚Äéê∞Ñ‚Äé‚Äé) OLD TURKIC LETTER YENISEI I	[3846 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C04, 0x0041 };
    uint32_t const ces[11] = { 0x3846, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_230)
{
    // 10C03 0062;	
    // (‚Äé‚Äéê∞É‚Äé‚Äé) OLD TURKIC LETTER ORKHON I	[3846 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C03, 0x0062 };
    uint32_t const ces[9] = { 0x3846, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_231)
{
    // 10C04 0062;	
    // (‚Äé‚Äéê∞Ñ‚Äé‚Äé) OLD TURKIC LETTER YENISEI I	[3846 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C04, 0x0062 };
    uint32_t const ces[11] = { 0x3846, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_232)
{
    // 10C05 0021;	
    // (‚Äé‚Äéê∞Ö‚Äé‚Äé) OLD TURKIC LETTER YENISEI E	[3847 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C05, 0x0021 };
    uint32_t const ces[9] = { 0x3847, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_233)
{
    // 10C05 003F;	
    // (‚Äé‚Äéê∞Ö‚Äé‚Äé) OLD TURKIC LETTER YENISEI E	[3847 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C05, 0x003F };
    uint32_t const ces[9] = { 0x3847, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_234)
{
    // 10C05 0061;	
    // (‚Äé‚Äéê∞Ö‚Äé‚Äé) OLD TURKIC LETTER YENISEI E	[3847 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C05, 0x0061 };
    uint32_t const ces[9] = { 0x3847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_235)
{
    // 10C05 0041;	
    // (‚Äé‚Äéê∞Ö‚Äé‚Äé) OLD TURKIC LETTER YENISEI E	[3847 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C05, 0x0041 };
    uint32_t const ces[9] = { 0x3847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_236)
{
    // 10C05 0062;	
    // (‚Äé‚Äéê∞Ö‚Äé‚Äé) OLD TURKIC LETTER YENISEI E	[3847 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C05, 0x0062 };
    uint32_t const ces[9] = { 0x3847, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_237)
{
    // 10C06 0021;	
    // (‚Äé‚Äéê∞Ü‚Äé‚Äé) OLD TURKIC LETTER ORKHON O	[3848 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C06, 0x0021 };
    uint32_t const ces[9] = { 0x3848, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_238)
{
    // 10C06 003F;	
    // (‚Äé‚Äéê∞Ü‚Äé‚Äé) OLD TURKIC LETTER ORKHON O	[3848 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C06, 0x003F };
    uint32_t const ces[9] = { 0x3848, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_239)
{
    // 10C06 0061;	
    // (‚Äé‚Äéê∞Ü‚Äé‚Äé) OLD TURKIC LETTER ORKHON O	[3848 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C06, 0x0061 };
    uint32_t const ces[9] = { 0x3848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_240)
{
    // 10C06 0041;	
    // (‚Äé‚Äéê∞Ü‚Äé‚Äé) OLD TURKIC LETTER ORKHON O	[3848 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C06, 0x0041 };
    uint32_t const ces[9] = { 0x3848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_241)
{
    // 10C06 0062;	
    // (‚Äé‚Äéê∞Ü‚Äé‚Äé) OLD TURKIC LETTER ORKHON O	[3848 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C06, 0x0062 };
    uint32_t const ces[9] = { 0x3848, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_242)
{
    // 10C07 0021;	
    // (‚Äé‚Äéê∞á‚Äé‚Äé) OLD TURKIC LETTER ORKHON OE	[3849 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C07, 0x0021 };
    uint32_t const ces[9] = { 0x3849, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_243)
{
    // 10C08 0021;	
    // (‚Äé‚Äéê∞à‚Äé‚Äé) OLD TURKIC LETTER YENISEI OE	[3849 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C08, 0x0021 };
    uint32_t const ces[11] = { 0x3849, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_244)
{
    // 10C07 003F;	
    // (‚Äé‚Äéê∞á‚Äé‚Äé) OLD TURKIC LETTER ORKHON OE	[3849 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C07, 0x003F };
    uint32_t const ces[9] = { 0x3849, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_245)
{
    // 10C08 003F;	
    // (‚Äé‚Äéê∞à‚Äé‚Äé) OLD TURKIC LETTER YENISEI OE	[3849 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C08, 0x003F };
    uint32_t const ces[11] = { 0x3849, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_246)
{
    // 10C07 0061;	
    // (‚Äé‚Äéê∞á‚Äé‚Äé) OLD TURKIC LETTER ORKHON OE	[3849 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C07, 0x0061 };
    uint32_t const ces[9] = { 0x3849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_247)
{
    // 10C07 0041;	
    // (‚Äé‚Äéê∞á‚Äé‚Äé) OLD TURKIC LETTER ORKHON OE	[3849 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C07, 0x0041 };
    uint32_t const ces[9] = { 0x3849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_248)
{
    // 10C08 0061;	
    // (‚Äé‚Äéê∞à‚Äé‚Äé) OLD TURKIC LETTER YENISEI OE	[3849 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C08, 0x0061 };
    uint32_t const ces[11] = { 0x3849, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_249)
{
    // 10C08 0041;	
    // (‚Äé‚Äéê∞à‚Äé‚Äé) OLD TURKIC LETTER YENISEI OE	[3849 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C08, 0x0041 };
    uint32_t const ces[11] = { 0x3849, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_250)
{
    // 10C07 0062;	
    // (‚Äé‚Äéê∞á‚Äé‚Äé) OLD TURKIC LETTER ORKHON OE	[3849 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C07, 0x0062 };
    uint32_t const ces[9] = { 0x3849, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_251)
{
    // 10C08 0062;	
    // (‚Äé‚Äéê∞à‚Äé‚Äé) OLD TURKIC LETTER YENISEI OE	[3849 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C08, 0x0062 };
    uint32_t const ces[11] = { 0x3849, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_252)
{
    // 10C09 0021;	
    // (‚Äé‚Äéê∞â‚Äé‚Äé) OLD TURKIC LETTER ORKHON AB	[384A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C09, 0x0021 };
    uint32_t const ces[9] = { 0x384A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_253)
{
    // 10C0A 0021;	
    // (‚Äé‚Äéê∞ä‚Äé‚Äé) OLD TURKIC LETTER YENISEI AB	[384A 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0A, 0x0021 };
    uint32_t const ces[11] = { 0x384A, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_254)
{
    // 10C09 003F;	
    // (‚Äé‚Äéê∞â‚Äé‚Äé) OLD TURKIC LETTER ORKHON AB	[384A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C09, 0x003F };
    uint32_t const ces[9] = { 0x384A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_255)
{
    // 10C0A 003F;	
    // (‚Äé‚Äéê∞ä‚Äé‚Äé) OLD TURKIC LETTER YENISEI AB	[384A 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0A, 0x003F };
    uint32_t const ces[11] = { 0x384A, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_256)
{
    // 10C09 0061;	
    // (‚Äé‚Äéê∞â‚Äé‚Äé) OLD TURKIC LETTER ORKHON AB	[384A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C09, 0x0061 };
    uint32_t const ces[9] = { 0x384A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_257)
{
    // 10C09 0041;	
    // (‚Äé‚Äéê∞â‚Äé‚Äé) OLD TURKIC LETTER ORKHON AB	[384A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C09, 0x0041 };
    uint32_t const ces[9] = { 0x384A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_258)
{
    // 10C0A 0061;	
    // (‚Äé‚Äéê∞ä‚Äé‚Äé) OLD TURKIC LETTER YENISEI AB	[384A 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0A, 0x0061 };
    uint32_t const ces[11] = { 0x384A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_259)
{
    // 10C0A 0041;	
    // (‚Äé‚Äéê∞ä‚Äé‚Äé) OLD TURKIC LETTER YENISEI AB	[384A 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C0A, 0x0041 };
    uint32_t const ces[11] = { 0x384A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_260)
{
    // 10C09 0062;	
    // (‚Äé‚Äéê∞â‚Äé‚Äé) OLD TURKIC LETTER ORKHON AB	[384A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C09, 0x0062 };
    uint32_t const ces[9] = { 0x384A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_261)
{
    // 10C0A 0062;	
    // (‚Äé‚Äéê∞ä‚Äé‚Äé) OLD TURKIC LETTER YENISEI AB	[384A 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0A, 0x0062 };
    uint32_t const ces[11] = { 0x384A, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_262)
{
    // 10C0B 0021;	
    // (‚Äé‚Äéê∞ã‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEB	[384B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0B, 0x0021 };
    uint32_t const ces[9] = { 0x384B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_263)
{
    // 10C0C 0021;	
    // (‚Äé‚Äéê∞å‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEB	[384B 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0C, 0x0021 };
    uint32_t const ces[11] = { 0x384B, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_264)
{
    // 10C0B 003F;	
    // (‚Äé‚Äéê∞ã‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEB	[384B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0B, 0x003F };
    uint32_t const ces[9] = { 0x384B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_265)
{
    // 10C0C 003F;	
    // (‚Äé‚Äéê∞å‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEB	[384B 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0C, 0x003F };
    uint32_t const ces[11] = { 0x384B, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_266)
{
    // 10C0B 0061;	
    // (‚Äé‚Äéê∞ã‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEB	[384B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0B, 0x0061 };
    uint32_t const ces[9] = { 0x384B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_267)
{
    // 10C0B 0041;	
    // (‚Äé‚Äéê∞ã‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEB	[384B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C0B, 0x0041 };
    uint32_t const ces[9] = { 0x384B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_268)
{
    // 10C0C 0061;	
    // (‚Äé‚Äéê∞å‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEB	[384B 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0C, 0x0061 };
    uint32_t const ces[11] = { 0x384B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_269)
{
    // 10C0C 0041;	
    // (‚Äé‚Äéê∞å‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEB	[384B 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C0C, 0x0041 };
    uint32_t const ces[11] = { 0x384B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_270)
{
    // 10C0B 0062;	
    // (‚Äé‚Äéê∞ã‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEB	[384B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0B, 0x0062 };
    uint32_t const ces[9] = { 0x384B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_271)
{
    // 10C0C 0062;	
    // (‚Äé‚Äéê∞å‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEB	[384B 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0C, 0x0062 };
    uint32_t const ces[11] = { 0x384B, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_272)
{
    // 10C0D 0021;	
    // (‚Äé‚Äéê∞ç‚Äé‚Äé) OLD TURKIC LETTER ORKHON AG	[384C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0D, 0x0021 };
    uint32_t const ces[9] = { 0x384C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_273)
{
    // 10C0E 0021;	
    // (‚Äé‚Äéê∞é‚Äé‚Äé) OLD TURKIC LETTER YENISEI AG	[384C 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0E, 0x0021 };
    uint32_t const ces[11] = { 0x384C, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_274)
{
    // 10C0D 003F;	
    // (‚Äé‚Äéê∞ç‚Äé‚Äé) OLD TURKIC LETTER ORKHON AG	[384C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0D, 0x003F };
    uint32_t const ces[9] = { 0x384C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_275)
{
    // 10C0E 003F;	
    // (‚Äé‚Äéê∞é‚Äé‚Äé) OLD TURKIC LETTER YENISEI AG	[384C 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0E, 0x003F };
    uint32_t const ces[11] = { 0x384C, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_276)
{
    // 10C0D 0061;	
    // (‚Äé‚Äéê∞ç‚Äé‚Äé) OLD TURKIC LETTER ORKHON AG	[384C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0D, 0x0061 };
    uint32_t const ces[9] = { 0x384C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_277)
{
    // 10C0D 0041;	
    // (‚Äé‚Äéê∞ç‚Äé‚Äé) OLD TURKIC LETTER ORKHON AG	[384C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C0D, 0x0041 };
    uint32_t const ces[9] = { 0x384C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_278)
{
    // 10C0E 0061;	
    // (‚Äé‚Äéê∞é‚Äé‚Äé) OLD TURKIC LETTER YENISEI AG	[384C 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0E, 0x0061 };
    uint32_t const ces[11] = { 0x384C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_279)
{
    // 10C0E 0041;	
    // (‚Äé‚Äéê∞é‚Äé‚Äé) OLD TURKIC LETTER YENISEI AG	[384C 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C0E, 0x0041 };
    uint32_t const ces[11] = { 0x384C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_280)
{
    // 10C0D 0062;	
    // (‚Äé‚Äéê∞ç‚Äé‚Äé) OLD TURKIC LETTER ORKHON AG	[384C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0D, 0x0062 };
    uint32_t const ces[9] = { 0x384C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_281)
{
    // 10C0E 0062;	
    // (‚Äé‚Äéê∞é‚Äé‚Äé) OLD TURKIC LETTER YENISEI AG	[384C 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C0E, 0x0062 };
    uint32_t const ces[11] = { 0x384C, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_282)
{
    // 10C0F 0021;	
    // (‚Äé‚Äéê∞è‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEG	[384D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0F, 0x0021 };
    uint32_t const ces[9] = { 0x384D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_283)
{
    // 10C10 0021;	
    // (‚Äé‚Äéê∞ê‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEG	[384D 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C10, 0x0021 };
    uint32_t const ces[11] = { 0x384D, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_284)
{
    // 10C0F 003F;	
    // (‚Äé‚Äéê∞è‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEG	[384D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0F, 0x003F };
    uint32_t const ces[9] = { 0x384D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_285)
{
    // 10C10 003F;	
    // (‚Äé‚Äéê∞ê‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEG	[384D 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C10, 0x003F };
    uint32_t const ces[11] = { 0x384D, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_286)
{
    // 10C0F 0061;	
    // (‚Äé‚Äéê∞è‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEG	[384D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0F, 0x0061 };
    uint32_t const ces[9] = { 0x384D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_287)
{
    // 10C0F 0041;	
    // (‚Äé‚Äéê∞è‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEG	[384D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C0F, 0x0041 };
    uint32_t const ces[9] = { 0x384D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_288)
{
    // 10C10 0061;	
    // (‚Äé‚Äéê∞ê‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEG	[384D 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C10, 0x0061 };
    uint32_t const ces[11] = { 0x384D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_289)
{
    // 10C10 0041;	
    // (‚Äé‚Äéê∞ê‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEG	[384D 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C10, 0x0041 };
    uint32_t const ces[11] = { 0x384D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_290)
{
    // 10C0F 0062;	
    // (‚Äé‚Äéê∞è‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEG	[384D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C0F, 0x0062 };
    uint32_t const ces[9] = { 0x384D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_291)
{
    // 10C10 0062;	
    // (‚Äé‚Äéê∞ê‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEG	[384D 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C10, 0x0062 };
    uint32_t const ces[11] = { 0x384D, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_292)
{
    // 10C11 0021;	
    // (‚Äé‚Äéê∞ë‚Äé‚Äé) OLD TURKIC LETTER ORKHON AD	[384E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C11, 0x0021 };
    uint32_t const ces[9] = { 0x384E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_293)
{
    // 10C12 0021;	
    // (‚Äé‚Äéê∞í‚Äé‚Äé) OLD TURKIC LETTER YENISEI AD	[384E 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C12, 0x0021 };
    uint32_t const ces[11] = { 0x384E, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_294)
{
    // 10C11 003F;	
    // (‚Äé‚Äéê∞ë‚Äé‚Äé) OLD TURKIC LETTER ORKHON AD	[384E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C11, 0x003F };
    uint32_t const ces[9] = { 0x384E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_295)
{
    // 10C12 003F;	
    // (‚Äé‚Äéê∞í‚Äé‚Äé) OLD TURKIC LETTER YENISEI AD	[384E 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C12, 0x003F };
    uint32_t const ces[11] = { 0x384E, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_296)
{
    // 10C11 0061;	
    // (‚Äé‚Äéê∞ë‚Äé‚Äé) OLD TURKIC LETTER ORKHON AD	[384E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C11, 0x0061 };
    uint32_t const ces[9] = { 0x384E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_297)
{
    // 10C11 0041;	
    // (‚Äé‚Äéê∞ë‚Äé‚Äé) OLD TURKIC LETTER ORKHON AD	[384E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C11, 0x0041 };
    uint32_t const ces[9] = { 0x384E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_298)
{
    // 10C12 0061;	
    // (‚Äé‚Äéê∞í‚Äé‚Äé) OLD TURKIC LETTER YENISEI AD	[384E 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C12, 0x0061 };
    uint32_t const ces[11] = { 0x384E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_299)
{
    // 10C12 0041;	
    // (‚Äé‚Äéê∞í‚Äé‚Äé) OLD TURKIC LETTER YENISEI AD	[384E 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C12, 0x0041 };
    uint32_t const ces[11] = { 0x384E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_300)
{
    // 10C11 0062;	
    // (‚Äé‚Äéê∞ë‚Äé‚Äé) OLD TURKIC LETTER ORKHON AD	[384E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C11, 0x0062 };
    uint32_t const ces[9] = { 0x384E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_301)
{
    // 10C12 0062;	
    // (‚Äé‚Äéê∞í‚Äé‚Äé) OLD TURKIC LETTER YENISEI AD	[384E 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C12, 0x0062 };
    uint32_t const ces[11] = { 0x384E, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_302)
{
    // 10C13 0021;	
    // (‚Äé‚Äéê∞ì‚Äé‚Äé) OLD TURKIC LETTER ORKHON AED	[384F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C13, 0x0021 };
    uint32_t const ces[9] = { 0x384F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_303)
{
    // 10C13 003F;	
    // (‚Äé‚Äéê∞ì‚Äé‚Äé) OLD TURKIC LETTER ORKHON AED	[384F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C13, 0x003F };
    uint32_t const ces[9] = { 0x384F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_304)
{
    // 10C13 0061;	
    // (‚Äé‚Äéê∞ì‚Äé‚Äé) OLD TURKIC LETTER ORKHON AED	[384F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C13, 0x0061 };
    uint32_t const ces[9] = { 0x384F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_305)
{
    // 10C13 0041;	
    // (‚Äé‚Äéê∞ì‚Äé‚Äé) OLD TURKIC LETTER ORKHON AED	[384F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C13, 0x0041 };
    uint32_t const ces[9] = { 0x384F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_306)
{
    // 10C13 0062;	
    // (‚Äé‚Äéê∞ì‚Äé‚Äé) OLD TURKIC LETTER ORKHON AED	[384F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C13, 0x0062 };
    uint32_t const ces[9] = { 0x384F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_307)
{
    // 10C14 0021;	
    // (‚Äé‚Äéê∞î‚Äé‚Äé) OLD TURKIC LETTER ORKHON EZ	[3850 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C14, 0x0021 };
    uint32_t const ces[9] = { 0x3850, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_308)
{
    // 10C15 0021;	
    // (‚Äé‚Äéê∞ï‚Äé‚Äé) OLD TURKIC LETTER YENISEI EZ	[3850 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C15, 0x0021 };
    uint32_t const ces[11] = { 0x3850, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_309)
{
    // 10C14 003F;	
    // (‚Äé‚Äéê∞î‚Äé‚Äé) OLD TURKIC LETTER ORKHON EZ	[3850 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C14, 0x003F };
    uint32_t const ces[9] = { 0x3850, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_310)
{
    // 10C15 003F;	
    // (‚Äé‚Äéê∞ï‚Äé‚Äé) OLD TURKIC LETTER YENISEI EZ	[3850 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C15, 0x003F };
    uint32_t const ces[11] = { 0x3850, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_311)
{
    // 10C14 0061;	
    // (‚Äé‚Äéê∞î‚Äé‚Äé) OLD TURKIC LETTER ORKHON EZ	[3850 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C14, 0x0061 };
    uint32_t const ces[9] = { 0x3850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_312)
{
    // 10C14 0041;	
    // (‚Äé‚Äéê∞î‚Äé‚Äé) OLD TURKIC LETTER ORKHON EZ	[3850 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C14, 0x0041 };
    uint32_t const ces[9] = { 0x3850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_313)
{
    // 10C15 0061;	
    // (‚Äé‚Äéê∞ï‚Äé‚Äé) OLD TURKIC LETTER YENISEI EZ	[3850 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C15, 0x0061 };
    uint32_t const ces[11] = { 0x3850, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_314)
{
    // 10C15 0041;	
    // (‚Äé‚Äéê∞ï‚Äé‚Äé) OLD TURKIC LETTER YENISEI EZ	[3850 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C15, 0x0041 };
    uint32_t const ces[11] = { 0x3850, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_315)
{
    // 10C14 0062;	
    // (‚Äé‚Äéê∞î‚Äé‚Äé) OLD TURKIC LETTER ORKHON EZ	[3850 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C14, 0x0062 };
    uint32_t const ces[9] = { 0x3850, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_316)
{
    // 10C15 0062;	
    // (‚Äé‚Äéê∞ï‚Äé‚Äé) OLD TURKIC LETTER YENISEI EZ	[3850 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C15, 0x0062 };
    uint32_t const ces[11] = { 0x3850, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_317)
{
    // 10C16 0021;	
    // (‚Äé‚Äéê∞ñ‚Äé‚Äé) OLD TURKIC LETTER ORKHON AY	[3851 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C16, 0x0021 };
    uint32_t const ces[9] = { 0x3851, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_318)
{
    // 10C17 0021;	
    // (‚Äé‚Äéê∞ó‚Äé‚Äé) OLD TURKIC LETTER YENISEI AY	[3851 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C17, 0x0021 };
    uint32_t const ces[11] = { 0x3851, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_319)
{
    // 10C16 003F;	
    // (‚Äé‚Äéê∞ñ‚Äé‚Äé) OLD TURKIC LETTER ORKHON AY	[3851 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C16, 0x003F };
    uint32_t const ces[9] = { 0x3851, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_320)
{
    // 10C17 003F;	
    // (‚Äé‚Äéê∞ó‚Äé‚Äé) OLD TURKIC LETTER YENISEI AY	[3851 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C17, 0x003F };
    uint32_t const ces[11] = { 0x3851, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_321)
{
    // 10C16 0061;	
    // (‚Äé‚Äéê∞ñ‚Äé‚Äé) OLD TURKIC LETTER ORKHON AY	[3851 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C16, 0x0061 };
    uint32_t const ces[9] = { 0x3851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_322)
{
    // 10C16 0041;	
    // (‚Äé‚Äéê∞ñ‚Äé‚Äé) OLD TURKIC LETTER ORKHON AY	[3851 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C16, 0x0041 };
    uint32_t const ces[9] = { 0x3851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_323)
{
    // 10C17 0061;	
    // (‚Äé‚Äéê∞ó‚Äé‚Äé) OLD TURKIC LETTER YENISEI AY	[3851 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C17, 0x0061 };
    uint32_t const ces[11] = { 0x3851, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_324)
{
    // 10C17 0041;	
    // (‚Äé‚Äéê∞ó‚Äé‚Äé) OLD TURKIC LETTER YENISEI AY	[3851 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C17, 0x0041 };
    uint32_t const ces[11] = { 0x3851, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_325)
{
    // 10C16 0062;	
    // (‚Äé‚Äéê∞ñ‚Äé‚Äé) OLD TURKIC LETTER ORKHON AY	[3851 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C16, 0x0062 };
    uint32_t const ces[9] = { 0x3851, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_326)
{
    // 10C17 0062;	
    // (‚Äé‚Äéê∞ó‚Äé‚Äé) OLD TURKIC LETTER YENISEI AY	[3851 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C17, 0x0062 };
    uint32_t const ces[11] = { 0x3851, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_327)
{
    // 10C18 0021;	
    // (‚Äé‚Äéê∞ò‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEY	[3852 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C18, 0x0021 };
    uint32_t const ces[9] = { 0x3852, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_328)
{
    // 10C19 0021;	
    // (‚Äé‚Äéê∞ô‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEY	[3852 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C19, 0x0021 };
    uint32_t const ces[11] = { 0x3852, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_329)
{
    // 10C18 003F;	
    // (‚Äé‚Äéê∞ò‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEY	[3852 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C18, 0x003F };
    uint32_t const ces[9] = { 0x3852, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_330)
{
    // 10C19 003F;	
    // (‚Äé‚Äéê∞ô‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEY	[3852 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C19, 0x003F };
    uint32_t const ces[11] = { 0x3852, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_331)
{
    // 10C18 0061;	
    // (‚Äé‚Äéê∞ò‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEY	[3852 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C18, 0x0061 };
    uint32_t const ces[9] = { 0x3852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_332)
{
    // 10C18 0041;	
    // (‚Äé‚Äéê∞ò‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEY	[3852 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C18, 0x0041 };
    uint32_t const ces[9] = { 0x3852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_333)
{
    // 10C19 0061;	
    // (‚Äé‚Äéê∞ô‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEY	[3852 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C19, 0x0061 };
    uint32_t const ces[11] = { 0x3852, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_334)
{
    // 10C19 0041;	
    // (‚Äé‚Äéê∞ô‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEY	[3852 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C19, 0x0041 };
    uint32_t const ces[11] = { 0x3852, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_335)
{
    // 10C18 0062;	
    // (‚Äé‚Äéê∞ò‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEY	[3852 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C18, 0x0062 };
    uint32_t const ces[9] = { 0x3852, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_336)
{
    // 10C19 0062;	
    // (‚Äé‚Äéê∞ô‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEY	[3852 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C19, 0x0062 };
    uint32_t const ces[11] = { 0x3852, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_337)
{
    // 10C1A 0021;	
    // (‚Äé‚Äéê∞ö‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEK	[3853 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1A, 0x0021 };
    uint32_t const ces[9] = { 0x3853, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_338)
{
    // 10C1B 0021;	
    // (‚Äé‚Äéê∞õ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEK	[3853 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1B, 0x0021 };
    uint32_t const ces[11] = { 0x3853, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_339)
{
    // 10C1A 003F;	
    // (‚Äé‚Äéê∞ö‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEK	[3853 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1A, 0x003F };
    uint32_t const ces[9] = { 0x3853, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_340)
{
    // 10C1B 003F;	
    // (‚Äé‚Äéê∞õ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEK	[3853 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1B, 0x003F };
    uint32_t const ces[11] = { 0x3853, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_341)
{
    // 10C1A 0061;	
    // (‚Äé‚Äéê∞ö‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEK	[3853 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1A, 0x0061 };
    uint32_t const ces[9] = { 0x3853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_342)
{
    // 10C1A 0041;	
    // (‚Äé‚Äéê∞ö‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEK	[3853 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C1A, 0x0041 };
    uint32_t const ces[9] = { 0x3853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_343)
{
    // 10C1B 0061;	
    // (‚Äé‚Äéê∞õ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEK	[3853 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1B, 0x0061 };
    uint32_t const ces[11] = { 0x3853, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_344)
{
    // 10C1B 0041;	
    // (‚Äé‚Äéê∞õ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEK	[3853 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C1B, 0x0041 };
    uint32_t const ces[11] = { 0x3853, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_345)
{
    // 10C1A 0062;	
    // (‚Äé‚Äéê∞ö‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEK	[3853 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1A, 0x0062 };
    uint32_t const ces[9] = { 0x3853, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_346)
{
    // 10C1B 0062;	
    // (‚Äé‚Äéê∞õ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEK	[3853 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1B, 0x0062 };
    uint32_t const ces[11] = { 0x3853, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_347)
{
    // 10C1C 0021;	
    // (‚Äé‚Äéê∞ú‚Äé‚Äé) OLD TURKIC LETTER ORKHON OEK	[3854 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1C, 0x0021 };
    uint32_t const ces[9] = { 0x3854, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_348)
{
    // 10C1D 0021;	
    // (‚Äé‚Äéê∞ù‚Äé‚Äé) OLD TURKIC LETTER YENISEI OEK	[3854 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1D, 0x0021 };
    uint32_t const ces[11] = { 0x3854, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_349)
{
    // 10C1C 003F;	
    // (‚Äé‚Äéê∞ú‚Äé‚Äé) OLD TURKIC LETTER ORKHON OEK	[3854 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1C, 0x003F };
    uint32_t const ces[9] = { 0x3854, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_350)
{
    // 10C1D 003F;	
    // (‚Äé‚Äéê∞ù‚Äé‚Äé) OLD TURKIC LETTER YENISEI OEK	[3854 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1D, 0x003F };
    uint32_t const ces[11] = { 0x3854, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_351)
{
    // 10C1C 0061;	
    // (‚Äé‚Äéê∞ú‚Äé‚Äé) OLD TURKIC LETTER ORKHON OEK	[3854 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1C, 0x0061 };
    uint32_t const ces[9] = { 0x3854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_352)
{
    // 10C1C 0041;	
    // (‚Äé‚Äéê∞ú‚Äé‚Äé) OLD TURKIC LETTER ORKHON OEK	[3854 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C1C, 0x0041 };
    uint32_t const ces[9] = { 0x3854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_353)
{
    // 10C1D 0061;	
    // (‚Äé‚Äéê∞ù‚Äé‚Äé) OLD TURKIC LETTER YENISEI OEK	[3854 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1D, 0x0061 };
    uint32_t const ces[11] = { 0x3854, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_354)
{
    // 10C1D 0041;	
    // (‚Äé‚Äéê∞ù‚Äé‚Äé) OLD TURKIC LETTER YENISEI OEK	[3854 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C1D, 0x0041 };
    uint32_t const ces[11] = { 0x3854, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_355)
{
    // 10C1C 0062;	
    // (‚Äé‚Äéê∞ú‚Äé‚Äé) OLD TURKIC LETTER ORKHON OEK	[3854 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1C, 0x0062 };
    uint32_t const ces[9] = { 0x3854, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_356)
{
    // 10C1D 0062;	
    // (‚Äé‚Äéê∞ù‚Äé‚Äé) OLD TURKIC LETTER YENISEI OEK	[3854 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1D, 0x0062 };
    uint32_t const ces[11] = { 0x3854, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_357)
{
    // 10C1E 0021;	
    // (‚Äé‚Äéê∞û‚Äé‚Äé) OLD TURKIC LETTER ORKHON AL	[3855 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1E, 0x0021 };
    uint32_t const ces[9] = { 0x3855, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_358)
{
    // 10C1F 0021;	
    // (‚Äé‚Äéê∞ü‚Äé‚Äé) OLD TURKIC LETTER YENISEI AL	[3855 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1F, 0x0021 };
    uint32_t const ces[11] = { 0x3855, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_359)
{
    // 10C1E 003F;	
    // (‚Äé‚Äéê∞û‚Äé‚Äé) OLD TURKIC LETTER ORKHON AL	[3855 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1E, 0x003F };
    uint32_t const ces[9] = { 0x3855, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_360)
{
    // 10C1F 003F;	
    // (‚Äé‚Äéê∞ü‚Äé‚Äé) OLD TURKIC LETTER YENISEI AL	[3855 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1F, 0x003F };
    uint32_t const ces[11] = { 0x3855, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_361)
{
    // 10C1E 0061;	
    // (‚Äé‚Äéê∞û‚Äé‚Äé) OLD TURKIC LETTER ORKHON AL	[3855 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1E, 0x0061 };
    uint32_t const ces[9] = { 0x3855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_362)
{
    // 10C1E 0041;	
    // (‚Äé‚Äéê∞û‚Äé‚Äé) OLD TURKIC LETTER ORKHON AL	[3855 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C1E, 0x0041 };
    uint32_t const ces[9] = { 0x3855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_363)
{
    // 10C1F 0061;	
    // (‚Äé‚Äéê∞ü‚Äé‚Äé) OLD TURKIC LETTER YENISEI AL	[3855 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1F, 0x0061 };
    uint32_t const ces[11] = { 0x3855, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_364)
{
    // 10C1F 0041;	
    // (‚Äé‚Äéê∞ü‚Äé‚Äé) OLD TURKIC LETTER YENISEI AL	[3855 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C1F, 0x0041 };
    uint32_t const ces[11] = { 0x3855, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_365)
{
    // 10C1E 0062;	
    // (‚Äé‚Äéê∞û‚Äé‚Äé) OLD TURKIC LETTER ORKHON AL	[3855 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C1E, 0x0062 };
    uint32_t const ces[9] = { 0x3855, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_366)
{
    // 10C1F 0062;	
    // (‚Äé‚Äéê∞ü‚Äé‚Äé) OLD TURKIC LETTER YENISEI AL	[3855 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C1F, 0x0062 };
    uint32_t const ces[11] = { 0x3855, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_367)
{
    // 10C20 0021;	
    // (‚Äé‚Äéê∞†‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEL	[3856 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C20, 0x0021 };
    uint32_t const ces[9] = { 0x3856, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_368)
{
    // 10C20 003F;	
    // (‚Äé‚Äéê∞†‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEL	[3856 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C20, 0x003F };
    uint32_t const ces[9] = { 0x3856, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_369)
{
    // 10C20 0061;	
    // (‚Äé‚Äéê∞†‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEL	[3856 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C20, 0x0061 };
    uint32_t const ces[9] = { 0x3856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_370)
{
    // 10C20 0041;	
    // (‚Äé‚Äéê∞†‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEL	[3856 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C20, 0x0041 };
    uint32_t const ces[9] = { 0x3856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_371)
{
    // 10C20 0062;	
    // (‚Äé‚Äéê∞†‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEL	[3856 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C20, 0x0062 };
    uint32_t const ces[9] = { 0x3856, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_372)
{
    // 10C21 0021;	
    // (‚Äé‚Äéê∞°‚Äé‚Äé) OLD TURKIC LETTER ORKHON ELT	[3857 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C21, 0x0021 };
    uint32_t const ces[9] = { 0x3857, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_373)
{
    // 10C21 003F;	
    // (‚Äé‚Äéê∞°‚Äé‚Äé) OLD TURKIC LETTER ORKHON ELT	[3857 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C21, 0x003F };
    uint32_t const ces[9] = { 0x3857, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_374)
{
    // 10C21 0061;	
    // (‚Äé‚Äéê∞°‚Äé‚Äé) OLD TURKIC LETTER ORKHON ELT	[3857 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C21, 0x0061 };
    uint32_t const ces[9] = { 0x3857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_375)
{
    // 10C21 0041;	
    // (‚Äé‚Äéê∞°‚Äé‚Äé) OLD TURKIC LETTER ORKHON ELT	[3857 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C21, 0x0041 };
    uint32_t const ces[9] = { 0x3857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_376)
{
    // 10C21 0062;	
    // (‚Äé‚Äéê∞°‚Äé‚Äé) OLD TURKIC LETTER ORKHON ELT	[3857 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C21, 0x0062 };
    uint32_t const ces[9] = { 0x3857, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_377)
{
    // 10C22 0021;	
    // (‚Äé‚Äéê∞¢‚Äé‚Äé) OLD TURKIC LETTER ORKHON EM	[3858 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C22, 0x0021 };
    uint32_t const ces[9] = { 0x3858, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_378)
{
    // 10C22 003F;	
    // (‚Äé‚Äéê∞¢‚Äé‚Äé) OLD TURKIC LETTER ORKHON EM	[3858 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C22, 0x003F };
    uint32_t const ces[9] = { 0x3858, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_379)
{
    // 10C22 0061;	
    // (‚Äé‚Äéê∞¢‚Äé‚Äé) OLD TURKIC LETTER ORKHON EM	[3858 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C22, 0x0061 };
    uint32_t const ces[9] = { 0x3858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_380)
{
    // 10C22 0041;	
    // (‚Äé‚Äéê∞¢‚Äé‚Äé) OLD TURKIC LETTER ORKHON EM	[3858 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C22, 0x0041 };
    uint32_t const ces[9] = { 0x3858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_381)
{
    // 10C22 0062;	
    // (‚Äé‚Äéê∞¢‚Äé‚Äé) OLD TURKIC LETTER ORKHON EM	[3858 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C22, 0x0062 };
    uint32_t const ces[9] = { 0x3858, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_382)
{
    // 10C23 0021;	
    // (‚Äé‚Äéê∞£‚Äé‚Äé) OLD TURKIC LETTER ORKHON AN	[3859 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C23, 0x0021 };
    uint32_t const ces[9] = { 0x3859, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_383)
{
    // 10C23 003F;	
    // (‚Äé‚Äéê∞£‚Äé‚Äé) OLD TURKIC LETTER ORKHON AN	[3859 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C23, 0x003F };
    uint32_t const ces[9] = { 0x3859, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_384)
{
    // 10C23 0061;	
    // (‚Äé‚Äéê∞£‚Äé‚Äé) OLD TURKIC LETTER ORKHON AN	[3859 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C23, 0x0061 };
    uint32_t const ces[9] = { 0x3859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_385)
{
    // 10C23 0041;	
    // (‚Äé‚Äéê∞£‚Äé‚Äé) OLD TURKIC LETTER ORKHON AN	[3859 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C23, 0x0041 };
    uint32_t const ces[9] = { 0x3859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_386)
{
    // 10C23 0062;	
    // (‚Äé‚Äéê∞£‚Äé‚Äé) OLD TURKIC LETTER ORKHON AN	[3859 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C23, 0x0062 };
    uint32_t const ces[9] = { 0x3859, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_387)
{
    // 10C24 0021;	
    // (‚Äé‚Äéê∞§‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEN	[385A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C24, 0x0021 };
    uint32_t const ces[9] = { 0x385A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_388)
{
    // 10C25 0021;	
    // (‚Äé‚Äéê∞•‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEN	[385A 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C25, 0x0021 };
    uint32_t const ces[11] = { 0x385A, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_389)
{
    // 10C24 003F;	
    // (‚Äé‚Äéê∞§‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEN	[385A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C24, 0x003F };
    uint32_t const ces[9] = { 0x385A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_390)
{
    // 10C25 003F;	
    // (‚Äé‚Äéê∞•‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEN	[385A 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C25, 0x003F };
    uint32_t const ces[11] = { 0x385A, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_391)
{
    // 10C24 0061;	
    // (‚Äé‚Äéê∞§‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEN	[385A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C24, 0x0061 };
    uint32_t const ces[9] = { 0x385A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_392)
{
    // 10C24 0041;	
    // (‚Äé‚Äéê∞§‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEN	[385A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C24, 0x0041 };
    uint32_t const ces[9] = { 0x385A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_393)
{
    // 10C25 0061;	
    // (‚Äé‚Äéê∞•‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEN	[385A 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C25, 0x0061 };
    uint32_t const ces[11] = { 0x385A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_394)
{
    // 10C25 0041;	
    // (‚Äé‚Äéê∞•‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEN	[385A 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C25, 0x0041 };
    uint32_t const ces[11] = { 0x385A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_395)
{
    // 10C24 0062;	
    // (‚Äé‚Äéê∞§‚Äé‚Äé) OLD TURKIC LETTER ORKHON AEN	[385A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C24, 0x0062 };
    uint32_t const ces[9] = { 0x385A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_396)
{
    // 10C25 0062;	
    // (‚Äé‚Äéê∞•‚Äé‚Äé) OLD TURKIC LETTER YENISEI AEN	[385A 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C25, 0x0062 };
    uint32_t const ces[11] = { 0x385A, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_397)
{
    // 10C26 0021;	
    // (‚Äé‚Äéê∞¶‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENT	[385B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C26, 0x0021 };
    uint32_t const ces[9] = { 0x385B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_398)
{
    // 10C27 0021;	
    // (‚Äé‚Äéê∞ß‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENT	[385B 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C27, 0x0021 };
    uint32_t const ces[11] = { 0x385B, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_399)
{
    // 10C26 003F;	
    // (‚Äé‚Äéê∞¶‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENT	[385B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C26, 0x003F };
    uint32_t const ces[9] = { 0x385B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_400)
{
    // 10C27 003F;	
    // (‚Äé‚Äéê∞ß‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENT	[385B 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C27, 0x003F };
    uint32_t const ces[11] = { 0x385B, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_401)
{
    // 10C26 0061;	
    // (‚Äé‚Äéê∞¶‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENT	[385B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C26, 0x0061 };
    uint32_t const ces[9] = { 0x385B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_402)
{
    // 10C26 0041;	
    // (‚Äé‚Äéê∞¶‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENT	[385B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C26, 0x0041 };
    uint32_t const ces[9] = { 0x385B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_403)
{
    // 10C27 0061;	
    // (‚Äé‚Äéê∞ß‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENT	[385B 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C27, 0x0061 };
    uint32_t const ces[11] = { 0x385B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_404)
{
    // 10C27 0041;	
    // (‚Äé‚Äéê∞ß‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENT	[385B 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C27, 0x0041 };
    uint32_t const ces[11] = { 0x385B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_405)
{
    // 10C26 0062;	
    // (‚Äé‚Äéê∞¶‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENT	[385B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C26, 0x0062 };
    uint32_t const ces[9] = { 0x385B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_406)
{
    // 10C27 0062;	
    // (‚Äé‚Äéê∞ß‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENT	[385B 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C27, 0x0062 };
    uint32_t const ces[11] = { 0x385B, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_407)
{
    // 10C28 0021;	
    // (‚Äé‚Äéê∞®‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENC	[385C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C28, 0x0021 };
    uint32_t const ces[9] = { 0x385C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_408)
{
    // 10C29 0021;	
    // (‚Äé‚Äéê∞©‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENC	[385C 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C29, 0x0021 };
    uint32_t const ces[11] = { 0x385C, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_409)
{
    // 10C28 003F;	
    // (‚Äé‚Äéê∞®‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENC	[385C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C28, 0x003F };
    uint32_t const ces[9] = { 0x385C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_410)
{
    // 10C29 003F;	
    // (‚Äé‚Äéê∞©‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENC	[385C 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C29, 0x003F };
    uint32_t const ces[11] = { 0x385C, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_411)
{
    // 10C28 0061;	
    // (‚Äé‚Äéê∞®‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENC	[385C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C28, 0x0061 };
    uint32_t const ces[9] = { 0x385C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_412)
{
    // 10C28 0041;	
    // (‚Äé‚Äéê∞®‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENC	[385C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C28, 0x0041 };
    uint32_t const ces[9] = { 0x385C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_413)
{
    // 10C29 0061;	
    // (‚Äé‚Äéê∞©‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENC	[385C 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C29, 0x0061 };
    uint32_t const ces[11] = { 0x385C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_414)
{
    // 10C29 0041;	
    // (‚Äé‚Äéê∞©‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENC	[385C 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C29, 0x0041 };
    uint32_t const ces[11] = { 0x385C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_415)
{
    // 10C28 0062;	
    // (‚Äé‚Äéê∞®‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENC	[385C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C28, 0x0062 };
    uint32_t const ces[9] = { 0x385C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_416)
{
    // 10C29 0062;	
    // (‚Äé‚Äéê∞©‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENC	[385C 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C29, 0x0062 };
    uint32_t const ces[11] = { 0x385C, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_417)
{
    // 10C2A 0021;	
    // (‚Äé‚Äéê∞™‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENY	[385D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2A, 0x0021 };
    uint32_t const ces[9] = { 0x385D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_418)
{
    // 10C2B 0021;	
    // (‚Äé‚Äéê∞´‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENY	[385D 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2B, 0x0021 };
    uint32_t const ces[11] = { 0x385D, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_419)
{
    // 10C2A 003F;	
    // (‚Äé‚Äéê∞™‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENY	[385D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2A, 0x003F };
    uint32_t const ces[9] = { 0x385D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_420)
{
    // 10C2B 003F;	
    // (‚Äé‚Äéê∞´‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENY	[385D 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2B, 0x003F };
    uint32_t const ces[11] = { 0x385D, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_421)
{
    // 10C2A 0061;	
    // (‚Äé‚Äéê∞™‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENY	[385D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2A, 0x0061 };
    uint32_t const ces[9] = { 0x385D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_422)
{
    // 10C2A 0041;	
    // (‚Äé‚Äéê∞™‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENY	[385D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C2A, 0x0041 };
    uint32_t const ces[9] = { 0x385D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_423)
{
    // 10C2B 0061;	
    // (‚Äé‚Äéê∞´‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENY	[385D 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2B, 0x0061 };
    uint32_t const ces[11] = { 0x385D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_424)
{
    // 10C2B 0041;	
    // (‚Äé‚Äéê∞´‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENY	[385D 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C2B, 0x0041 };
    uint32_t const ces[11] = { 0x385D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_425)
{
    // 10C2A 0062;	
    // (‚Äé‚Äéê∞™‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENY	[385D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2A, 0x0062 };
    uint32_t const ces[9] = { 0x385D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_426)
{
    // 10C2B 0062;	
    // (‚Äé‚Äéê∞´‚Äé‚Äé) OLD TURKIC LETTER YENISEI ENY	[385D 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2B, 0x0062 };
    uint32_t const ces[11] = { 0x385D, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_427)
{
    // 10C2C 0021;	
    // (‚Äé‚Äéê∞¨‚Äé‚Äé) OLD TURKIC LETTER YENISEI ANG	[385E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2C, 0x0021 };
    uint32_t const ces[9] = { 0x385E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_428)
{
    // 10C2C 003F;	
    // (‚Äé‚Äéê∞¨‚Äé‚Äé) OLD TURKIC LETTER YENISEI ANG	[385E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2C, 0x003F };
    uint32_t const ces[9] = { 0x385E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_429)
{
    // 10C2C 0061;	
    // (‚Äé‚Äéê∞¨‚Äé‚Äé) OLD TURKIC LETTER YENISEI ANG	[385E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2C, 0x0061 };
    uint32_t const ces[9] = { 0x385E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_430)
{
    // 10C2C 0041;	
    // (‚Äé‚Äéê∞¨‚Äé‚Äé) OLD TURKIC LETTER YENISEI ANG	[385E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C2C, 0x0041 };
    uint32_t const ces[9] = { 0x385E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_431)
{
    // 10C2C 0062;	
    // (‚Äé‚Äéê∞¨‚Äé‚Äé) OLD TURKIC LETTER YENISEI ANG	[385E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2C, 0x0062 };
    uint32_t const ces[9] = { 0x385E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_432)
{
    // 10C2D 0021;	
    // (‚Äé‚Äéê∞≠‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENG	[385F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2D, 0x0021 };
    uint32_t const ces[9] = { 0x385F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_433)
{
    // 10C2E 0021;	
    // (‚Äé‚Äéê∞Æ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AENG	[385F 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2E, 0x0021 };
    uint32_t const ces[11] = { 0x385F, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_434)
{
    // 10C2D 003F;	
    // (‚Äé‚Äéê∞≠‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENG	[385F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2D, 0x003F };
    uint32_t const ces[9] = { 0x385F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_435)
{
    // 10C2E 003F;	
    // (‚Äé‚Äéê∞Æ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AENG	[385F 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2E, 0x003F };
    uint32_t const ces[11] = { 0x385F, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_436)
{
    // 10C2D 0061;	
    // (‚Äé‚Äéê∞≠‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENG	[385F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2D, 0x0061 };
    uint32_t const ces[9] = { 0x385F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_437)
{
    // 10C2D 0041;	
    // (‚Äé‚Äéê∞≠‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENG	[385F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C2D, 0x0041 };
    uint32_t const ces[9] = { 0x385F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_438)
{
    // 10C2E 0061;	
    // (‚Äé‚Äéê∞Æ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AENG	[385F 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2E, 0x0061 };
    uint32_t const ces[11] = { 0x385F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_439)
{
    // 10C2E 0041;	
    // (‚Äé‚Äéê∞Æ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AENG	[385F 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C2E, 0x0041 };
    uint32_t const ces[11] = { 0x385F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_440)
{
    // 10C2D 0062;	
    // (‚Äé‚Äéê∞≠‚Äé‚Äé) OLD TURKIC LETTER ORKHON ENG	[385F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2D, 0x0062 };
    uint32_t const ces[9] = { 0x385F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_441)
{
    // 10C2E 0062;	
    // (‚Äé‚Äéê∞Æ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AENG	[385F 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C2E, 0x0062 };
    uint32_t const ces[11] = { 0x385F, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_442)
{
    // 10C2F 0021;	
    // (‚Äé‚Äéê∞Ø‚Äé‚Äé) OLD TURKIC LETTER ORKHON EP	[3860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2F, 0x0021 };
    uint32_t const ces[9] = { 0x3860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_443)
{
    // 10C2F 003F;	
    // (‚Äé‚Äéê∞Ø‚Äé‚Äé) OLD TURKIC LETTER ORKHON EP	[3860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2F, 0x003F };
    uint32_t const ces[9] = { 0x3860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_444)
{
    // 10C2F 0061;	
    // (‚Äé‚Äéê∞Ø‚Äé‚Äé) OLD TURKIC LETTER ORKHON EP	[3860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2F, 0x0061 };
    uint32_t const ces[9] = { 0x3860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_445)
{
    // 10C2F 0041;	
    // (‚Äé‚Äéê∞Ø‚Äé‚Äé) OLD TURKIC LETTER ORKHON EP	[3860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C2F, 0x0041 };
    uint32_t const ces[9] = { 0x3860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_446)
{
    // 10C2F 0062;	
    // (‚Äé‚Äéê∞Ø‚Äé‚Äé) OLD TURKIC LETTER ORKHON EP	[3860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C2F, 0x0062 };
    uint32_t const ces[9] = { 0x3860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_447)
{
    // 10C30 0021;	
    // (‚Äé‚Äéê∞∞‚Äé‚Äé) OLD TURKIC LETTER ORKHON OP	[3861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C30, 0x0021 };
    uint32_t const ces[9] = { 0x3861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_448)
{
    // 10C30 003F;	
    // (‚Äé‚Äéê∞∞‚Äé‚Äé) OLD TURKIC LETTER ORKHON OP	[3861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C30, 0x003F };
    uint32_t const ces[9] = { 0x3861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_449)
{
    // 10C30 0061;	
    // (‚Äé‚Äéê∞∞‚Äé‚Äé) OLD TURKIC LETTER ORKHON OP	[3861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C30, 0x0061 };
    uint32_t const ces[9] = { 0x3861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_450)
{
    // 10C30 0041;	
    // (‚Äé‚Äéê∞∞‚Äé‚Äé) OLD TURKIC LETTER ORKHON OP	[3861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C30, 0x0041 };
    uint32_t const ces[9] = { 0x3861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_451)
{
    // 10C30 0062;	
    // (‚Äé‚Äéê∞∞‚Äé‚Äé) OLD TURKIC LETTER ORKHON OP	[3861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C30, 0x0062 };
    uint32_t const ces[9] = { 0x3861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_452)
{
    // 10C31 0021;	
    // (‚Äé‚Äéê∞±‚Äé‚Äé) OLD TURKIC LETTER ORKHON IC	[3862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C31, 0x0021 };
    uint32_t const ces[9] = { 0x3862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_453)
{
    // 10C31 003F;	
    // (‚Äé‚Äéê∞±‚Äé‚Äé) OLD TURKIC LETTER ORKHON IC	[3862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C31, 0x003F };
    uint32_t const ces[9] = { 0x3862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_454)
{
    // 10C31 0061;	
    // (‚Äé‚Äéê∞±‚Äé‚Äé) OLD TURKIC LETTER ORKHON IC	[3862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C31, 0x0061 };
    uint32_t const ces[9] = { 0x3862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_455)
{
    // 10C31 0041;	
    // (‚Äé‚Äéê∞±‚Äé‚Äé) OLD TURKIC LETTER ORKHON IC	[3862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C31, 0x0041 };
    uint32_t const ces[9] = { 0x3862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_456)
{
    // 10C31 0062;	
    // (‚Äé‚Äéê∞±‚Äé‚Äé) OLD TURKIC LETTER ORKHON IC	[3862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C31, 0x0062 };
    uint32_t const ces[9] = { 0x3862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_457)
{
    // 10C32 0021;	
    // (‚Äé‚Äéê∞≤‚Äé‚Äé) OLD TURKIC LETTER ORKHON EC	[3863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C32, 0x0021 };
    uint32_t const ces[9] = { 0x3863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_458)
{
    // 10C33 0021;	
    // (‚Äé‚Äéê∞≥‚Äé‚Äé) OLD TURKIC LETTER YENISEI EC	[3863 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C33, 0x0021 };
    uint32_t const ces[11] = { 0x3863, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_459)
{
    // 10C32 003F;	
    // (‚Äé‚Äéê∞≤‚Äé‚Äé) OLD TURKIC LETTER ORKHON EC	[3863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C32, 0x003F };
    uint32_t const ces[9] = { 0x3863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_460)
{
    // 10C33 003F;	
    // (‚Äé‚Äéê∞≥‚Äé‚Äé) OLD TURKIC LETTER YENISEI EC	[3863 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C33, 0x003F };
    uint32_t const ces[11] = { 0x3863, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_461)
{
    // 10C32 0061;	
    // (‚Äé‚Äéê∞≤‚Äé‚Äé) OLD TURKIC LETTER ORKHON EC	[3863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C32, 0x0061 };
    uint32_t const ces[9] = { 0x3863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_462)
{
    // 10C32 0041;	
    // (‚Äé‚Äéê∞≤‚Äé‚Äé) OLD TURKIC LETTER ORKHON EC	[3863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C32, 0x0041 };
    uint32_t const ces[9] = { 0x3863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_463)
{
    // 10C33 0061;	
    // (‚Äé‚Äéê∞≥‚Äé‚Äé) OLD TURKIC LETTER YENISEI EC	[3863 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C33, 0x0061 };
    uint32_t const ces[11] = { 0x3863, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_464)
{
    // 10C33 0041;	
    // (‚Äé‚Äéê∞≥‚Äé‚Äé) OLD TURKIC LETTER YENISEI EC	[3863 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C33, 0x0041 };
    uint32_t const ces[11] = { 0x3863, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_465)
{
    // 10C32 0062;	
    // (‚Äé‚Äéê∞≤‚Äé‚Äé) OLD TURKIC LETTER ORKHON EC	[3863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C32, 0x0062 };
    uint32_t const ces[9] = { 0x3863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_466)
{
    // 10C33 0062;	
    // (‚Äé‚Äéê∞≥‚Äé‚Äé) OLD TURKIC LETTER YENISEI EC	[3863 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C33, 0x0062 };
    uint32_t const ces[11] = { 0x3863, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_467)
{
    // 10C34 0021;	
    // (‚Äé‚Äéê∞¥‚Äé‚Äé) OLD TURKIC LETTER ORKHON AQ	[3864 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C34, 0x0021 };
    uint32_t const ces[9] = { 0x3864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_468)
{
    // 10C35 0021;	
    // (‚Äé‚Äéê∞µ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AQ	[3864 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C35, 0x0021 };
    uint32_t const ces[11] = { 0x3864, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_469)
{
    // 10C34 003F;	
    // (‚Äé‚Äéê∞¥‚Äé‚Äé) OLD TURKIC LETTER ORKHON AQ	[3864 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C34, 0x003F };
    uint32_t const ces[9] = { 0x3864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_470)
{
    // 10C35 003F;	
    // (‚Äé‚Äéê∞µ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AQ	[3864 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C35, 0x003F };
    uint32_t const ces[11] = { 0x3864, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_471)
{
    // 10C34 0061;	
    // (‚Äé‚Äéê∞¥‚Äé‚Äé) OLD TURKIC LETTER ORKHON AQ	[3864 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C34, 0x0061 };
    uint32_t const ces[9] = { 0x3864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_472)
{
    // 10C34 0041;	
    // (‚Äé‚Äéê∞¥‚Äé‚Äé) OLD TURKIC LETTER ORKHON AQ	[3864 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C34, 0x0041 };
    uint32_t const ces[9] = { 0x3864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_473)
{
    // 10C35 0061;	
    // (‚Äé‚Äéê∞µ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AQ	[3864 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C35, 0x0061 };
    uint32_t const ces[11] = { 0x3864, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_474)
{
    // 10C35 0041;	
    // (‚Äé‚Äéê∞µ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AQ	[3864 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C35, 0x0041 };
    uint32_t const ces[11] = { 0x3864, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_475)
{
    // 10C34 0062;	
    // (‚Äé‚Äéê∞¥‚Äé‚Äé) OLD TURKIC LETTER ORKHON AQ	[3864 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C34, 0x0062 };
    uint32_t const ces[9] = { 0x3864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_476)
{
    // 10C35 0062;	
    // (‚Äé‚Äéê∞µ‚Äé‚Äé) OLD TURKIC LETTER YENISEI AQ	[3864 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C35, 0x0062 };
    uint32_t const ces[11] = { 0x3864, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_477)
{
    // 10C36 0021;	
    // (‚Äé‚Äéê∞∂‚Äé‚Äé) OLD TURKIC LETTER ORKHON IQ	[3865 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C36, 0x0021 };
    uint32_t const ces[9] = { 0x3865, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_478)
{
    // 10C37 0021;	
    // (‚Äé‚Äéê∞∑‚Äé‚Äé) OLD TURKIC LETTER YENISEI IQ	[3865 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C37, 0x0021 };
    uint32_t const ces[11] = { 0x3865, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_479)
{
    // 10C36 003F;	
    // (‚Äé‚Äéê∞∂‚Äé‚Äé) OLD TURKIC LETTER ORKHON IQ	[3865 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C36, 0x003F };
    uint32_t const ces[9] = { 0x3865, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_480)
{
    // 10C37 003F;	
    // (‚Äé‚Äéê∞∑‚Äé‚Äé) OLD TURKIC LETTER YENISEI IQ	[3865 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C37, 0x003F };
    uint32_t const ces[11] = { 0x3865, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_481)
{
    // 10C36 0061;	
    // (‚Äé‚Äéê∞∂‚Äé‚Äé) OLD TURKIC LETTER ORKHON IQ	[3865 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C36, 0x0061 };
    uint32_t const ces[9] = { 0x3865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_482)
{
    // 10C36 0041;	
    // (‚Äé‚Äéê∞∂‚Äé‚Äé) OLD TURKIC LETTER ORKHON IQ	[3865 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C36, 0x0041 };
    uint32_t const ces[9] = { 0x3865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_483)
{
    // 10C37 0061;	
    // (‚Äé‚Äéê∞∑‚Äé‚Äé) OLD TURKIC LETTER YENISEI IQ	[3865 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C37, 0x0061 };
    uint32_t const ces[11] = { 0x3865, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_484)
{
    // 10C37 0041;	
    // (‚Äé‚Äéê∞∑‚Äé‚Äé) OLD TURKIC LETTER YENISEI IQ	[3865 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C37, 0x0041 };
    uint32_t const ces[11] = { 0x3865, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_485)
{
    // 10C36 0062;	
    // (‚Äé‚Äéê∞∂‚Äé‚Äé) OLD TURKIC LETTER ORKHON IQ	[3865 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C36, 0x0062 };
    uint32_t const ces[9] = { 0x3865, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_486)
{
    // 10C37 0062;	
    // (‚Äé‚Äéê∞∑‚Äé‚Äé) OLD TURKIC LETTER YENISEI IQ	[3865 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C37, 0x0062 };
    uint32_t const ces[11] = { 0x3865, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_487)
{
    // 10C38 0021;	
    // (‚Äé‚Äéê∞∏‚Äé‚Äé) OLD TURKIC LETTER ORKHON OQ	[3866 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C38, 0x0021 };
    uint32_t const ces[9] = { 0x3866, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_488)
{
    // 10C39 0021;	
    // (‚Äé‚Äéê∞π‚Äé‚Äé) OLD TURKIC LETTER YENISEI OQ	[3866 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C39, 0x0021 };
    uint32_t const ces[11] = { 0x3866, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_489)
{
    // 10C38 003F;	
    // (‚Äé‚Äéê∞∏‚Äé‚Äé) OLD TURKIC LETTER ORKHON OQ	[3866 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C38, 0x003F };
    uint32_t const ces[9] = { 0x3866, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_490)
{
    // 10C39 003F;	
    // (‚Äé‚Äéê∞π‚Äé‚Äé) OLD TURKIC LETTER YENISEI OQ	[3866 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C39, 0x003F };
    uint32_t const ces[11] = { 0x3866, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_491)
{
    // 10C38 0061;	
    // (‚Äé‚Äéê∞∏‚Äé‚Äé) OLD TURKIC LETTER ORKHON OQ	[3866 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C38, 0x0061 };
    uint32_t const ces[9] = { 0x3866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_492)
{
    // 10C38 0041;	
    // (‚Äé‚Äéê∞∏‚Äé‚Äé) OLD TURKIC LETTER ORKHON OQ	[3866 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10C38, 0x0041 };
    uint32_t const ces[9] = { 0x3866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_493)
{
    // 10C39 0061;	
    // (‚Äé‚Äéê∞π‚Äé‚Äé) OLD TURKIC LETTER YENISEI OQ	[3866 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C39, 0x0061 };
    uint32_t const ces[11] = { 0x3866, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_494)
{
    // 10C39 0041;	
    // (‚Äé‚Äéê∞π‚Äé‚Äé) OLD TURKIC LETTER YENISEI OQ	[3866 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10C39, 0x0041 };
    uint32_t const ces[11] = { 0x3866, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_495)
{
    // 10C38 0062;	
    // (‚Äé‚Äéê∞∏‚Äé‚Äé) OLD TURKIC LETTER ORKHON OQ	[3866 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C38, 0x0062 };
    uint32_t const ces[9] = { 0x3866, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_496)
{
    // 10C39 0062;	
    // (‚Äé‚Äéê∞π‚Äé‚Äé) OLD TURKIC LETTER YENISEI OQ	[3866 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C39, 0x0062 };
    uint32_t const ces[11] = { 0x3866, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_497)
{
    // 10C3A 0021;	
    // (‚Äé‚Äéê∞∫‚Äé‚Äé) OLD TURKIC LETTER ORKHON AR	[3867 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C3A, 0x0021 };
    uint32_t const ces[9] = { 0x3867, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_498)
{
    // 10C3B 0021;	
    // (‚Äé‚Äéê∞ª‚Äé‚Äé) OLD TURKIC LETTER YENISEI AR	[3867 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10C3B, 0x0021 };
    uint32_t const ces[11] = { 0x3867, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_227_499)
{
    // 10C3A 003F;	
    // (‚Äé‚Äéê∞∫‚Äé‚Äé) OLD TURKIC LETTER ORKHON AR	[3867 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10C3A, 0x003F };
    uint32_t const ces[9] = { 0x3867, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

