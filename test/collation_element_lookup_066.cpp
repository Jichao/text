// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_066_000)
{
    // 2889  ; [*0E3D.0020.0002] 
    // BRAILLE PATTERN DOTS-148

    uint32_t const cps[1] = { 0x2889 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_001)
{
    // 288A  ; [*0E3E.0020.0002] 
    // BRAILLE PATTERN DOTS-248

    uint32_t const cps[1] = { 0x288a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_002)
{
    // 288B  ; [*0E3F.0020.0002] 
    // BRAILLE PATTERN DOTS-1248

    uint32_t const cps[1] = { 0x288b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_003)
{
    // 288C  ; [*0E40.0020.0002] 
    // BRAILLE PATTERN DOTS-348

    uint32_t const cps[1] = { 0x288c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_004)
{
    // 288D  ; [*0E41.0020.0002] 
    // BRAILLE PATTERN DOTS-1348

    uint32_t const cps[1] = { 0x288d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_005)
{
    // 288E  ; [*0E42.0020.0002] 
    // BRAILLE PATTERN DOTS-2348

    uint32_t const cps[1] = { 0x288e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_006)
{
    // 288F  ; [*0E43.0020.0002] 
    // BRAILLE PATTERN DOTS-12348

    uint32_t const cps[1] = { 0x288f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_007)
{
    // 2890  ; [*0E44.0020.0002] 
    // BRAILLE PATTERN DOTS-58

    uint32_t const cps[1] = { 0x2890 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_008)
{
    // 2891  ; [*0E45.0020.0002] 
    // BRAILLE PATTERN DOTS-158

    uint32_t const cps[1] = { 0x2891 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_009)
{
    // 2892  ; [*0E46.0020.0002] 
    // BRAILLE PATTERN DOTS-258

    uint32_t const cps[1] = { 0x2892 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_010)
{
    // 2893  ; [*0E47.0020.0002] 
    // BRAILLE PATTERN DOTS-1258

    uint32_t const cps[1] = { 0x2893 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_011)
{
    // 2894  ; [*0E48.0020.0002] 
    // BRAILLE PATTERN DOTS-358

    uint32_t const cps[1] = { 0x2894 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_012)
{
    // 2895  ; [*0E49.0020.0002] 
    // BRAILLE PATTERN DOTS-1358

    uint32_t const cps[1] = { 0x2895 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_013)
{
    // 2896  ; [*0E4A.0020.0002] 
    // BRAILLE PATTERN DOTS-2358

    uint32_t const cps[1] = { 0x2896 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_014)
{
    // 2897  ; [*0E4B.0020.0002] 
    // BRAILLE PATTERN DOTS-12358

    uint32_t const cps[1] = { 0x2897 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_015)
{
    // 2898  ; [*0E4C.0020.0002] 
    // BRAILLE PATTERN DOTS-458

    uint32_t const cps[1] = { 0x2898 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_016)
{
    // 2899  ; [*0E4D.0020.0002] 
    // BRAILLE PATTERN DOTS-1458

    uint32_t const cps[1] = { 0x2899 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_017)
{
    // 289A  ; [*0E4E.0020.0002] 
    // BRAILLE PATTERN DOTS-2458

    uint32_t const cps[1] = { 0x289a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_018)
{
    // 289B  ; [*0E4F.0020.0002] 
    // BRAILLE PATTERN DOTS-12458

    uint32_t const cps[1] = { 0x289b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_019)
{
    // 289C  ; [*0E50.0020.0002] 
    // BRAILLE PATTERN DOTS-3458

    uint32_t const cps[1] = { 0x289c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_020)
{
    // 289D  ; [*0E51.0020.0002] 
    // BRAILLE PATTERN DOTS-13458

    uint32_t const cps[1] = { 0x289d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_021)
{
    // 289E  ; [*0E52.0020.0002] 
    // BRAILLE PATTERN DOTS-23458

    uint32_t const cps[1] = { 0x289e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_022)
{
    // 289F  ; [*0E53.0020.0002] 
    // BRAILLE PATTERN DOTS-123458

    uint32_t const cps[1] = { 0x289f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_023)
{
    // 28A0  ; [*0E54.0020.0002] 
    // BRAILLE PATTERN DOTS-68

    uint32_t const cps[1] = { 0x28a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_024)
{
    // 28A1  ; [*0E55.0020.0002] 
    // BRAILLE PATTERN DOTS-168

    uint32_t const cps[1] = { 0x28a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_025)
{
    // 28A2  ; [*0E56.0020.0002] 
    // BRAILLE PATTERN DOTS-268

    uint32_t const cps[1] = { 0x28a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_026)
{
    // 28A3  ; [*0E57.0020.0002] 
    // BRAILLE PATTERN DOTS-1268

    uint32_t const cps[1] = { 0x28a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_027)
{
    // 28A4  ; [*0E58.0020.0002] 
    // BRAILLE PATTERN DOTS-368

    uint32_t const cps[1] = { 0x28a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_028)
{
    // 28A5  ; [*0E59.0020.0002] 
    // BRAILLE PATTERN DOTS-1368

    uint32_t const cps[1] = { 0x28a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_029)
{
    // 28A6  ; [*0E5A.0020.0002] 
    // BRAILLE PATTERN DOTS-2368

    uint32_t const cps[1] = { 0x28a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_030)
{
    // 28A7  ; [*0E5B.0020.0002] 
    // BRAILLE PATTERN DOTS-12368

    uint32_t const cps[1] = { 0x28a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_031)
{
    // 28A8  ; [*0E5C.0020.0002] 
    // BRAILLE PATTERN DOTS-468

    uint32_t const cps[1] = { 0x28a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_032)
{
    // 28A9  ; [*0E5D.0020.0002] 
    // BRAILLE PATTERN DOTS-1468

    uint32_t const cps[1] = { 0x28a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_033)
{
    // 28AA  ; [*0E5E.0020.0002] 
    // BRAILLE PATTERN DOTS-2468

    uint32_t const cps[1] = { 0x28aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_034)
{
    // 28AB  ; [*0E5F.0020.0002] 
    // BRAILLE PATTERN DOTS-12468

    uint32_t const cps[1] = { 0x28ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_035)
{
    // 28AC  ; [*0E60.0020.0002] 
    // BRAILLE PATTERN DOTS-3468

    uint32_t const cps[1] = { 0x28ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_036)
{
    // 28AD  ; [*0E61.0020.0002] 
    // BRAILLE PATTERN DOTS-13468

    uint32_t const cps[1] = { 0x28ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_037)
{
    // 28AE  ; [*0E62.0020.0002] 
    // BRAILLE PATTERN DOTS-23468

    uint32_t const cps[1] = { 0x28ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_038)
{
    // 28AF  ; [*0E63.0020.0002] 
    // BRAILLE PATTERN DOTS-123468

    uint32_t const cps[1] = { 0x28af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_039)
{
    // 28B0  ; [*0E64.0020.0002] 
    // BRAILLE PATTERN DOTS-568

    uint32_t const cps[1] = { 0x28b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_040)
{
    // 28B1  ; [*0E65.0020.0002] 
    // BRAILLE PATTERN DOTS-1568

    uint32_t const cps[1] = { 0x28b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_041)
{
    // 28B2  ; [*0E66.0020.0002] 
    // BRAILLE PATTERN DOTS-2568

    uint32_t const cps[1] = { 0x28b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_042)
{
    // 28B3  ; [*0E67.0020.0002] 
    // BRAILLE PATTERN DOTS-12568

    uint32_t const cps[1] = { 0x28b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_043)
{
    // 28B4  ; [*0E68.0020.0002] 
    // BRAILLE PATTERN DOTS-3568

    uint32_t const cps[1] = { 0x28b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_044)
{
    // 28B5  ; [*0E69.0020.0002] 
    // BRAILLE PATTERN DOTS-13568

    uint32_t const cps[1] = { 0x28b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_045)
{
    // 28B6  ; [*0E6A.0020.0002] 
    // BRAILLE PATTERN DOTS-23568

    uint32_t const cps[1] = { 0x28b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_046)
{
    // 28B7  ; [*0E6B.0020.0002] 
    // BRAILLE PATTERN DOTS-123568

    uint32_t const cps[1] = { 0x28b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_047)
{
    // 28B8  ; [*0E6C.0020.0002] 
    // BRAILLE PATTERN DOTS-4568

    uint32_t const cps[1] = { 0x28b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_048)
{
    // 28B9  ; [*0E6D.0020.0002] 
    // BRAILLE PATTERN DOTS-14568

    uint32_t const cps[1] = { 0x28b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_049)
{
    // 28BA  ; [*0E6E.0020.0002] 
    // BRAILLE PATTERN DOTS-24568

    uint32_t const cps[1] = { 0x28ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_050)
{
    // 28BB  ; [*0E6F.0020.0002] 
    // BRAILLE PATTERN DOTS-124568

    uint32_t const cps[1] = { 0x28bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_051)
{
    // 28BC  ; [*0E70.0020.0002] 
    // BRAILLE PATTERN DOTS-34568

    uint32_t const cps[1] = { 0x28bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_052)
{
    // 28BD  ; [*0E71.0020.0002] 
    // BRAILLE PATTERN DOTS-134568

    uint32_t const cps[1] = { 0x28bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_053)
{
    // 28BE  ; [*0E72.0020.0002] 
    // BRAILLE PATTERN DOTS-234568

    uint32_t const cps[1] = { 0x28be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_054)
{
    // 28BF  ; [*0E73.0020.0002] 
    // BRAILLE PATTERN DOTS-1234568

    uint32_t const cps[1] = { 0x28bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_055)
{
    // 28C0  ; [*0E74.0020.0002] 
    // BRAILLE PATTERN DOTS-78

    uint32_t const cps[1] = { 0x28c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_056)
{
    // 28C1  ; [*0E75.0020.0002] 
    // BRAILLE PATTERN DOTS-178

    uint32_t const cps[1] = { 0x28c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_057)
{
    // 28C2  ; [*0E76.0020.0002] 
    // BRAILLE PATTERN DOTS-278

    uint32_t const cps[1] = { 0x28c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_058)
{
    // 28C3  ; [*0E77.0020.0002] 
    // BRAILLE PATTERN DOTS-1278

    uint32_t const cps[1] = { 0x28c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_059)
{
    // 28C4  ; [*0E78.0020.0002] 
    // BRAILLE PATTERN DOTS-378

    uint32_t const cps[1] = { 0x28c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_060)
{
    // 28C5  ; [*0E79.0020.0002] 
    // BRAILLE PATTERN DOTS-1378

    uint32_t const cps[1] = { 0x28c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_061)
{
    // 28C6  ; [*0E7A.0020.0002] 
    // BRAILLE PATTERN DOTS-2378

    uint32_t const cps[1] = { 0x28c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_062)
{
    // 28C7  ; [*0E7B.0020.0002] 
    // BRAILLE PATTERN DOTS-12378

    uint32_t const cps[1] = { 0x28c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_063)
{
    // 28C8  ; [*0E7C.0020.0002] 
    // BRAILLE PATTERN DOTS-478

    uint32_t const cps[1] = { 0x28c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_064)
{
    // 28C9  ; [*0E7D.0020.0002] 
    // BRAILLE PATTERN DOTS-1478

    uint32_t const cps[1] = { 0x28c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_065)
{
    // 28CA  ; [*0E7E.0020.0002] 
    // BRAILLE PATTERN DOTS-2478

    uint32_t const cps[1] = { 0x28ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_066)
{
    // 28CB  ; [*0E7F.0020.0002] 
    // BRAILLE PATTERN DOTS-12478

    uint32_t const cps[1] = { 0x28cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_067)
{
    // 28CC  ; [*0E80.0020.0002] 
    // BRAILLE PATTERN DOTS-3478

    uint32_t const cps[1] = { 0x28cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_068)
{
    // 28CD  ; [*0E81.0020.0002] 
    // BRAILLE PATTERN DOTS-13478

    uint32_t const cps[1] = { 0x28cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_069)
{
    // 28CE  ; [*0E82.0020.0002] 
    // BRAILLE PATTERN DOTS-23478

    uint32_t const cps[1] = { 0x28ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_070)
{
    // 28CF  ; [*0E83.0020.0002] 
    // BRAILLE PATTERN DOTS-123478

    uint32_t const cps[1] = { 0x28cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_071)
{
    // 28D0  ; [*0E84.0020.0002] 
    // BRAILLE PATTERN DOTS-578

    uint32_t const cps[1] = { 0x28d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_072)
{
    // 28D1  ; [*0E85.0020.0002] 
    // BRAILLE PATTERN DOTS-1578

    uint32_t const cps[1] = { 0x28d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_073)
{
    // 28D2  ; [*0E86.0020.0002] 
    // BRAILLE PATTERN DOTS-2578

    uint32_t const cps[1] = { 0x28d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_074)
{
    // 28D3  ; [*0E87.0020.0002] 
    // BRAILLE PATTERN DOTS-12578

    uint32_t const cps[1] = { 0x28d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_075)
{
    // 28D4  ; [*0E88.0020.0002] 
    // BRAILLE PATTERN DOTS-3578

    uint32_t const cps[1] = { 0x28d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_076)
{
    // 28D5  ; [*0E89.0020.0002] 
    // BRAILLE PATTERN DOTS-13578

    uint32_t const cps[1] = { 0x28d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_077)
{
    // 28D6  ; [*0E8A.0020.0002] 
    // BRAILLE PATTERN DOTS-23578

    uint32_t const cps[1] = { 0x28d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_078)
{
    // 28D7  ; [*0E8B.0020.0002] 
    // BRAILLE PATTERN DOTS-123578

    uint32_t const cps[1] = { 0x28d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_079)
{
    // 28D8  ; [*0E8C.0020.0002] 
    // BRAILLE PATTERN DOTS-4578

    uint32_t const cps[1] = { 0x28d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_080)
{
    // 28D9  ; [*0E8D.0020.0002] 
    // BRAILLE PATTERN DOTS-14578

    uint32_t const cps[1] = { 0x28d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_081)
{
    // 28DA  ; [*0E8E.0020.0002] 
    // BRAILLE PATTERN DOTS-24578

    uint32_t const cps[1] = { 0x28da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_082)
{
    // 28DB  ; [*0E8F.0020.0002] 
    // BRAILLE PATTERN DOTS-124578

    uint32_t const cps[1] = { 0x28db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_083)
{
    // 28DC  ; [*0E90.0020.0002] 
    // BRAILLE PATTERN DOTS-34578

    uint32_t const cps[1] = { 0x28dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_084)
{
    // 28DD  ; [*0E91.0020.0002] 
    // BRAILLE PATTERN DOTS-134578

    uint32_t const cps[1] = { 0x28dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_085)
{
    // 28DE  ; [*0E92.0020.0002] 
    // BRAILLE PATTERN DOTS-234578

    uint32_t const cps[1] = { 0x28de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_086)
{
    // 28DF  ; [*0E93.0020.0002] 
    // BRAILLE PATTERN DOTS-1234578

    uint32_t const cps[1] = { 0x28df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_087)
{
    // 28E0  ; [*0E94.0020.0002] 
    // BRAILLE PATTERN DOTS-678

    uint32_t const cps[1] = { 0x28e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_088)
{
    // 28E1  ; [*0E95.0020.0002] 
    // BRAILLE PATTERN DOTS-1678

    uint32_t const cps[1] = { 0x28e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_089)
{
    // 28E2  ; [*0E96.0020.0002] 
    // BRAILLE PATTERN DOTS-2678

    uint32_t const cps[1] = { 0x28e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_090)
{
    // 28E3  ; [*0E97.0020.0002] 
    // BRAILLE PATTERN DOTS-12678

    uint32_t const cps[1] = { 0x28e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_091)
{
    // 28E4  ; [*0E98.0020.0002] 
    // BRAILLE PATTERN DOTS-3678

    uint32_t const cps[1] = { 0x28e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_092)
{
    // 28E5  ; [*0E99.0020.0002] 
    // BRAILLE PATTERN DOTS-13678

    uint32_t const cps[1] = { 0x28e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_093)
{
    // 28E6  ; [*0E9A.0020.0002] 
    // BRAILLE PATTERN DOTS-23678

    uint32_t const cps[1] = { 0x28e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_094)
{
    // 28E7  ; [*0E9B.0020.0002] 
    // BRAILLE PATTERN DOTS-123678

    uint32_t const cps[1] = { 0x28e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_095)
{
    // 28E8  ; [*0E9C.0020.0002] 
    // BRAILLE PATTERN DOTS-4678

    uint32_t const cps[1] = { 0x28e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_096)
{
    // 28E9  ; [*0E9D.0020.0002] 
    // BRAILLE PATTERN DOTS-14678

    uint32_t const cps[1] = { 0x28e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_097)
{
    // 28EA  ; [*0E9E.0020.0002] 
    // BRAILLE PATTERN DOTS-24678

    uint32_t const cps[1] = { 0x28ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_098)
{
    // 28EB  ; [*0E9F.0020.0002] 
    // BRAILLE PATTERN DOTS-124678

    uint32_t const cps[1] = { 0x28eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_099)
{
    // 28EC  ; [*0EA0.0020.0002] 
    // BRAILLE PATTERN DOTS-34678

    uint32_t const cps[1] = { 0x28ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_100)
{
    // 28ED  ; [*0EA1.0020.0002] 
    // BRAILLE PATTERN DOTS-134678

    uint32_t const cps[1] = { 0x28ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_101)
{
    // 28EE  ; [*0EA2.0020.0002] 
    // BRAILLE PATTERN DOTS-234678

    uint32_t const cps[1] = { 0x28ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_102)
{
    // 28EF  ; [*0EA3.0020.0002] 
    // BRAILLE PATTERN DOTS-1234678

    uint32_t const cps[1] = { 0x28ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_103)
{
    // 28F0  ; [*0EA4.0020.0002] 
    // BRAILLE PATTERN DOTS-5678

    uint32_t const cps[1] = { 0x28f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_104)
{
    // 28F1  ; [*0EA5.0020.0002] 
    // BRAILLE PATTERN DOTS-15678

    uint32_t const cps[1] = { 0x28f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_105)
{
    // 28F2  ; [*0EA6.0020.0002] 
    // BRAILLE PATTERN DOTS-25678

    uint32_t const cps[1] = { 0x28f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_106)
{
    // 28F3  ; [*0EA7.0020.0002] 
    // BRAILLE PATTERN DOTS-125678

    uint32_t const cps[1] = { 0x28f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_107)
{
    // 28F4  ; [*0EA8.0020.0002] 
    // BRAILLE PATTERN DOTS-35678

    uint32_t const cps[1] = { 0x28f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_108)
{
    // 28F5  ; [*0EA9.0020.0002] 
    // BRAILLE PATTERN DOTS-135678

    uint32_t const cps[1] = { 0x28f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xea9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_109)
{
    // 28F6  ; [*0EAA.0020.0002] 
    // BRAILLE PATTERN DOTS-235678

    uint32_t const cps[1] = { 0x28f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_110)
{
    // 28F7  ; [*0EAB.0020.0002] 
    // BRAILLE PATTERN DOTS-1235678

    uint32_t const cps[1] = { 0x28f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_111)
{
    // 28F8  ; [*0EAC.0020.0002] 
    // BRAILLE PATTERN DOTS-45678

    uint32_t const cps[1] = { 0x28f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_112)
{
    // 28F9  ; [*0EAD.0020.0002] 
    // BRAILLE PATTERN DOTS-145678

    uint32_t const cps[1] = { 0x28f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xead), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_113)
{
    // 28FA  ; [*0EAE.0020.0002] 
    // BRAILLE PATTERN DOTS-245678

    uint32_t const cps[1] = { 0x28fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_114)
{
    // 28FB  ; [*0EAF.0020.0002] 
    // BRAILLE PATTERN DOTS-1245678

    uint32_t const cps[1] = { 0x28fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_115)
{
    // 28FC  ; [*0EB0.0020.0002] 
    // BRAILLE PATTERN DOTS-345678

    uint32_t const cps[1] = { 0x28fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_116)
{
    // 28FD  ; [*0EB1.0020.0002] 
    // BRAILLE PATTERN DOTS-1345678

    uint32_t const cps[1] = { 0x28fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_117)
{
    // 28FE  ; [*0EB2.0020.0002] 
    // BRAILLE PATTERN DOTS-2345678

    uint32_t const cps[1] = { 0x28fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_118)
{
    // 28FF  ; [*0EB3.0020.0002] 
    // BRAILLE PATTERN DOTS-12345678

    uint32_t const cps[1] = { 0x28ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_119)
{
    // 2900  ; [*0B00.0020.0002] 
    // RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2900 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_120)
{
    // 2901  ; [*0B01.0020.0002] 
    // RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2901 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_121)
{
    // 2902  ; [*0B02.0020.0002] 
    // LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2902 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_122)
{
    // 2903  ; [*0B03.0020.0002] 
    // RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2903 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_123)
{
    // 2904  ; [*0B04.0020.0002] 
    // LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2904 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_124)
{
    // 2905  ; [*0B05.0020.0002] 
    // RIGHTWARDS TWO-HEADED ARROW FROM BAR

    uint32_t const cps[1] = { 0x2905 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_125)
{
    // 2906  ; [*0B06.0020.0002] 
    // LEFTWARDS DOUBLE ARROW FROM BAR

    uint32_t const cps[1] = { 0x2906 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_126)
{
    // 2907  ; [*0B07.0020.0002] 
    // RIGHTWARDS DOUBLE ARROW FROM BAR

    uint32_t const cps[1] = { 0x2907 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_127)
{
    // 2908  ; [*0B08.0020.0002] 
    // DOWNWARDS ARROW WITH HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2908 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_128)
{
    // 2909  ; [*0B09.0020.0002] 
    // UPWARDS ARROW WITH HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2909 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_129)
{
    // 290A  ; [*0B0A.0020.0002] 
    // UPWARDS TRIPLE ARROW

    uint32_t const cps[1] = { 0x290a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_130)
{
    // 290B  ; [*0B0B.0020.0002] 
    // DOWNWARDS TRIPLE ARROW

    uint32_t const cps[1] = { 0x290b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_131)
{
    // 290C  ; [*0B0C.0020.0002] 
    // LEFTWARDS DOUBLE DASH ARROW

    uint32_t const cps[1] = { 0x290c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_132)
{
    // 290D  ; [*0B0D.0020.0002] 
    // RIGHTWARDS DOUBLE DASH ARROW

    uint32_t const cps[1] = { 0x290d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_133)
{
    // 290E  ; [*0B0E.0020.0002] 
    // LEFTWARDS TRIPLE DASH ARROW

    uint32_t const cps[1] = { 0x290e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_134)
{
    // 290F  ; [*0B0F.0020.0002] 
    // RIGHTWARDS TRIPLE DASH ARROW

    uint32_t const cps[1] = { 0x290f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_135)
{
    // 2910  ; [*0B10.0020.0002] 
    // RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW

    uint32_t const cps[1] = { 0x2910 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_136)
{
    // 2911  ; [*0B11.0020.0002] 
    // RIGHTWARDS ARROW WITH DOTTED STEM

    uint32_t const cps[1] = { 0x2911 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_137)
{
    // 2912  ; [*0B12.0020.0002] 
    // UPWARDS ARROW TO BAR

    uint32_t const cps[1] = { 0x2912 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_138)
{
    // 2913  ; [*0B13.0020.0002] 
    // DOWNWARDS ARROW TO BAR

    uint32_t const cps[1] = { 0x2913 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_139)
{
    // 2914  ; [*0B14.0020.0002] 
    // RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2914 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_140)
{
    // 2915  ; [*0B15.0020.0002] 
    // RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2915 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_141)
{
    // 2916  ; [*0B16.0020.0002] 
    // RIGHTWARDS TWO-HEADED ARROW WITH TAIL

    uint32_t const cps[1] = { 0x2916 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_142)
{
    // 2917  ; [*0B17.0020.0002] 
    // RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2917 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_143)
{
    // 2918  ; [*0B18.0020.0002] 
    // RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2918 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_144)
{
    // 2919  ; [*0B19.0020.0002] 
    // LEFTWARDS ARROW-TAIL

    uint32_t const cps[1] = { 0x2919 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_145)
{
    // 291A  ; [*0B1A.0020.0002] 
    // RIGHTWARDS ARROW-TAIL

    uint32_t const cps[1] = { 0x291a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_146)
{
    // 291B  ; [*0B1B.0020.0002] 
    // LEFTWARDS DOUBLE ARROW-TAIL

    uint32_t const cps[1] = { 0x291b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_147)
{
    // 291C  ; [*0B1C.0020.0002] 
    // RIGHTWARDS DOUBLE ARROW-TAIL

    uint32_t const cps[1] = { 0x291c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_148)
{
    // 291D  ; [*0B1D.0020.0002] 
    // LEFTWARDS ARROW TO BLACK DIAMOND

    uint32_t const cps[1] = { 0x291d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_066_149)
{
    // 291E  ; [*0B1E.0020.0002] 
    // RIGHTWARDS ARROW TO BLACK DIAMOND

    uint32_t const cps[1] = { 0x291e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xb1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

