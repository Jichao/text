// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_190_000)
{
    // 1F03B ; [*1216.0020.0002] 
    // DOMINO TILE HORIZONTAL-01-03

    uint32_t const cps[1] = { 0x1f03b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1216), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_001)
{
    // 1F03C ; [*1217.0020.0002] 
    // DOMINO TILE HORIZONTAL-01-04

    uint32_t const cps[1] = { 0x1f03c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1217), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_002)
{
    // 1F03D ; [*1218.0020.0002] 
    // DOMINO TILE HORIZONTAL-01-05

    uint32_t const cps[1] = { 0x1f03d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1218), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_003)
{
    // 1F03E ; [*1219.0020.0002] 
    // DOMINO TILE HORIZONTAL-01-06

    uint32_t const cps[1] = { 0x1f03e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1219), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_004)
{
    // 1F03F ; [*121A.0020.0002] 
    // DOMINO TILE HORIZONTAL-02-00

    uint32_t const cps[1] = { 0x1f03f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x121a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_005)
{
    // 1F040 ; [*121B.0020.0002] 
    // DOMINO TILE HORIZONTAL-02-01

    uint32_t const cps[1] = { 0x1f040 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x121b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_006)
{
    // 1F041 ; [*121C.0020.0002] 
    // DOMINO TILE HORIZONTAL-02-02

    uint32_t const cps[1] = { 0x1f041 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x121c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_007)
{
    // 1F042 ; [*121D.0020.0002] 
    // DOMINO TILE HORIZONTAL-02-03

    uint32_t const cps[1] = { 0x1f042 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x121d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_008)
{
    // 1F043 ; [*121E.0020.0002] 
    // DOMINO TILE HORIZONTAL-02-04

    uint32_t const cps[1] = { 0x1f043 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x121e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_009)
{
    // 1F044 ; [*121F.0020.0002] 
    // DOMINO TILE HORIZONTAL-02-05

    uint32_t const cps[1] = { 0x1f044 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x121f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_010)
{
    // 1F045 ; [*1220.0020.0002] 
    // DOMINO TILE HORIZONTAL-02-06

    uint32_t const cps[1] = { 0x1f045 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1220), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_011)
{
    // 1F046 ; [*1221.0020.0002] 
    // DOMINO TILE HORIZONTAL-03-00

    uint32_t const cps[1] = { 0x1f046 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1221), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_012)
{
    // 1F047 ; [*1222.0020.0002] 
    // DOMINO TILE HORIZONTAL-03-01

    uint32_t const cps[1] = { 0x1f047 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1222), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_013)
{
    // 1F048 ; [*1223.0020.0002] 
    // DOMINO TILE HORIZONTAL-03-02

    uint32_t const cps[1] = { 0x1f048 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1223), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_014)
{
    // 1F049 ; [*1224.0020.0002] 
    // DOMINO TILE HORIZONTAL-03-03

    uint32_t const cps[1] = { 0x1f049 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1224), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_015)
{
    // 1F04A ; [*1225.0020.0002] 
    // DOMINO TILE HORIZONTAL-03-04

    uint32_t const cps[1] = { 0x1f04a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1225), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_016)
{
    // 1F04B ; [*1226.0020.0002] 
    // DOMINO TILE HORIZONTAL-03-05

    uint32_t const cps[1] = { 0x1f04b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1226), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_017)
{
    // 1F04C ; [*1227.0020.0002] 
    // DOMINO TILE HORIZONTAL-03-06

    uint32_t const cps[1] = { 0x1f04c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1227), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_018)
{
    // 1F04D ; [*1228.0020.0002] 
    // DOMINO TILE HORIZONTAL-04-00

    uint32_t const cps[1] = { 0x1f04d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1228), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_019)
{
    // 1F04E ; [*1229.0020.0002] 
    // DOMINO TILE HORIZONTAL-04-01

    uint32_t const cps[1] = { 0x1f04e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1229), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_020)
{
    // 1F04F ; [*122A.0020.0002] 
    // DOMINO TILE HORIZONTAL-04-02

    uint32_t const cps[1] = { 0x1f04f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x122a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_021)
{
    // 1F050 ; [*122B.0020.0002] 
    // DOMINO TILE HORIZONTAL-04-03

    uint32_t const cps[1] = { 0x1f050 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x122b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_022)
{
    // 1F051 ; [*122C.0020.0002] 
    // DOMINO TILE HORIZONTAL-04-04

    uint32_t const cps[1] = { 0x1f051 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x122c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_023)
{
    // 1F052 ; [*122D.0020.0002] 
    // DOMINO TILE HORIZONTAL-04-05

    uint32_t const cps[1] = { 0x1f052 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x122d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_024)
{
    // 1F053 ; [*122E.0020.0002] 
    // DOMINO TILE HORIZONTAL-04-06

    uint32_t const cps[1] = { 0x1f053 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x122e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_025)
{
    // 1F054 ; [*122F.0020.0002] 
    // DOMINO TILE HORIZONTAL-05-00

    uint32_t const cps[1] = { 0x1f054 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x122f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_026)
{
    // 1F055 ; [*1230.0020.0002] 
    // DOMINO TILE HORIZONTAL-05-01

    uint32_t const cps[1] = { 0x1f055 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1230), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_027)
{
    // 1F056 ; [*1231.0020.0002] 
    // DOMINO TILE HORIZONTAL-05-02

    uint32_t const cps[1] = { 0x1f056 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1231), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_028)
{
    // 1F057 ; [*1232.0020.0002] 
    // DOMINO TILE HORIZONTAL-05-03

    uint32_t const cps[1] = { 0x1f057 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1232), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_029)
{
    // 1F058 ; [*1233.0020.0002] 
    // DOMINO TILE HORIZONTAL-05-04

    uint32_t const cps[1] = { 0x1f058 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1233), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_030)
{
    // 1F059 ; [*1234.0020.0002] 
    // DOMINO TILE HORIZONTAL-05-05

    uint32_t const cps[1] = { 0x1f059 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1234), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_031)
{
    // 1F05A ; [*1235.0020.0002] 
    // DOMINO TILE HORIZONTAL-05-06

    uint32_t const cps[1] = { 0x1f05a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1235), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_032)
{
    // 1F05B ; [*1236.0020.0002] 
    // DOMINO TILE HORIZONTAL-06-00

    uint32_t const cps[1] = { 0x1f05b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1236), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_033)
{
    // 1F05C ; [*1237.0020.0002] 
    // DOMINO TILE HORIZONTAL-06-01

    uint32_t const cps[1] = { 0x1f05c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1237), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_034)
{
    // 1F05D ; [*1238.0020.0002] 
    // DOMINO TILE HORIZONTAL-06-02

    uint32_t const cps[1] = { 0x1f05d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1238), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_035)
{
    // 1F05E ; [*1239.0020.0002] 
    // DOMINO TILE HORIZONTAL-06-03

    uint32_t const cps[1] = { 0x1f05e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1239), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_036)
{
    // 1F05F ; [*123A.0020.0002] 
    // DOMINO TILE HORIZONTAL-06-04

    uint32_t const cps[1] = { 0x1f05f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x123a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_037)
{
    // 1F060 ; [*123B.0020.0002] 
    // DOMINO TILE HORIZONTAL-06-05

    uint32_t const cps[1] = { 0x1f060 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x123b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_038)
{
    // 1F061 ; [*123C.0020.0002] 
    // DOMINO TILE HORIZONTAL-06-06

    uint32_t const cps[1] = { 0x1f061 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x123c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_039)
{
    // 1F062 ; [*123D.0020.0002] 
    // DOMINO TILE VERTICAL BACK

    uint32_t const cps[1] = { 0x1f062 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x123d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_040)
{
    // 1F063 ; [*123E.0020.0002] 
    // DOMINO TILE VERTICAL-00-00

    uint32_t const cps[1] = { 0x1f063 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x123e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_041)
{
    // 1F064 ; [*123F.0020.0002] 
    // DOMINO TILE VERTICAL-00-01

    uint32_t const cps[1] = { 0x1f064 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x123f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_042)
{
    // 1F065 ; [*1240.0020.0002] 
    // DOMINO TILE VERTICAL-00-02

    uint32_t const cps[1] = { 0x1f065 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1240), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_043)
{
    // 1F066 ; [*1241.0020.0002] 
    // DOMINO TILE VERTICAL-00-03

    uint32_t const cps[1] = { 0x1f066 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1241), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_044)
{
    // 1F067 ; [*1242.0020.0002] 
    // DOMINO TILE VERTICAL-00-04

    uint32_t const cps[1] = { 0x1f067 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1242), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_045)
{
    // 1F068 ; [*1243.0020.0002] 
    // DOMINO TILE VERTICAL-00-05

    uint32_t const cps[1] = { 0x1f068 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1243), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_046)
{
    // 1F069 ; [*1244.0020.0002] 
    // DOMINO TILE VERTICAL-00-06

    uint32_t const cps[1] = { 0x1f069 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1244), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_047)
{
    // 1F06A ; [*1245.0020.0002] 
    // DOMINO TILE VERTICAL-01-00

    uint32_t const cps[1] = { 0x1f06a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1245), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_048)
{
    // 1F06B ; [*1246.0020.0002] 
    // DOMINO TILE VERTICAL-01-01

    uint32_t const cps[1] = { 0x1f06b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1246), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_049)
{
    // 1F06C ; [*1247.0020.0002] 
    // DOMINO TILE VERTICAL-01-02

    uint32_t const cps[1] = { 0x1f06c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1247), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_050)
{
    // 1F06D ; [*1248.0020.0002] 
    // DOMINO TILE VERTICAL-01-03

    uint32_t const cps[1] = { 0x1f06d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1248), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_051)
{
    // 1F06E ; [*1249.0020.0002] 
    // DOMINO TILE VERTICAL-01-04

    uint32_t const cps[1] = { 0x1f06e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1249), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_052)
{
    // 1F06F ; [*124A.0020.0002] 
    // DOMINO TILE VERTICAL-01-05

    uint32_t const cps[1] = { 0x1f06f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x124a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_053)
{
    // 1F070 ; [*124B.0020.0002] 
    // DOMINO TILE VERTICAL-01-06

    uint32_t const cps[1] = { 0x1f070 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x124b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_054)
{
    // 1F071 ; [*124C.0020.0002] 
    // DOMINO TILE VERTICAL-02-00

    uint32_t const cps[1] = { 0x1f071 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x124c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_055)
{
    // 1F072 ; [*124D.0020.0002] 
    // DOMINO TILE VERTICAL-02-01

    uint32_t const cps[1] = { 0x1f072 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x124d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_056)
{
    // 1F073 ; [*124E.0020.0002] 
    // DOMINO TILE VERTICAL-02-02

    uint32_t const cps[1] = { 0x1f073 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x124e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_057)
{
    // 1F074 ; [*124F.0020.0002] 
    // DOMINO TILE VERTICAL-02-03

    uint32_t const cps[1] = { 0x1f074 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x124f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_058)
{
    // 1F075 ; [*1250.0020.0002] 
    // DOMINO TILE VERTICAL-02-04

    uint32_t const cps[1] = { 0x1f075 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1250), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_059)
{
    // 1F076 ; [*1251.0020.0002] 
    // DOMINO TILE VERTICAL-02-05

    uint32_t const cps[1] = { 0x1f076 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1251), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_060)
{
    // 1F077 ; [*1252.0020.0002] 
    // DOMINO TILE VERTICAL-02-06

    uint32_t const cps[1] = { 0x1f077 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1252), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_061)
{
    // 1F078 ; [*1253.0020.0002] 
    // DOMINO TILE VERTICAL-03-00

    uint32_t const cps[1] = { 0x1f078 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1253), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_062)
{
    // 1F079 ; [*1254.0020.0002] 
    // DOMINO TILE VERTICAL-03-01

    uint32_t const cps[1] = { 0x1f079 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1254), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_063)
{
    // 1F07A ; [*1255.0020.0002] 
    // DOMINO TILE VERTICAL-03-02

    uint32_t const cps[1] = { 0x1f07a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1255), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_064)
{
    // 1F07B ; [*1256.0020.0002] 
    // DOMINO TILE VERTICAL-03-03

    uint32_t const cps[1] = { 0x1f07b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1256), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_065)
{
    // 1F07C ; [*1257.0020.0002] 
    // DOMINO TILE VERTICAL-03-04

    uint32_t const cps[1] = { 0x1f07c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1257), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_066)
{
    // 1F07D ; [*1258.0020.0002] 
    // DOMINO TILE VERTICAL-03-05

    uint32_t const cps[1] = { 0x1f07d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1258), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_067)
{
    // 1F07E ; [*1259.0020.0002] 
    // DOMINO TILE VERTICAL-03-06

    uint32_t const cps[1] = { 0x1f07e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1259), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_068)
{
    // 1F07F ; [*125A.0020.0002] 
    // DOMINO TILE VERTICAL-04-00

    uint32_t const cps[1] = { 0x1f07f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x125a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_069)
{
    // 1F080 ; [*125B.0020.0002] 
    // DOMINO TILE VERTICAL-04-01

    uint32_t const cps[1] = { 0x1f080 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x125b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_070)
{
    // 1F081 ; [*125C.0020.0002] 
    // DOMINO TILE VERTICAL-04-02

    uint32_t const cps[1] = { 0x1f081 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x125c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_071)
{
    // 1F082 ; [*125D.0020.0002] 
    // DOMINO TILE VERTICAL-04-03

    uint32_t const cps[1] = { 0x1f082 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x125d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_072)
{
    // 1F083 ; [*125E.0020.0002] 
    // DOMINO TILE VERTICAL-04-04

    uint32_t const cps[1] = { 0x1f083 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x125e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_073)
{
    // 1F084 ; [*125F.0020.0002] 
    // DOMINO TILE VERTICAL-04-05

    uint32_t const cps[1] = { 0x1f084 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x125f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_074)
{
    // 1F085 ; [*1260.0020.0002] 
    // DOMINO TILE VERTICAL-04-06

    uint32_t const cps[1] = { 0x1f085 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1260), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_075)
{
    // 1F086 ; [*1261.0020.0002] 
    // DOMINO TILE VERTICAL-05-00

    uint32_t const cps[1] = { 0x1f086 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1261), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_076)
{
    // 1F087 ; [*1262.0020.0002] 
    // DOMINO TILE VERTICAL-05-01

    uint32_t const cps[1] = { 0x1f087 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1262), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_077)
{
    // 1F088 ; [*1263.0020.0002] 
    // DOMINO TILE VERTICAL-05-02

    uint32_t const cps[1] = { 0x1f088 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1263), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_078)
{
    // 1F089 ; [*1264.0020.0002] 
    // DOMINO TILE VERTICAL-05-03

    uint32_t const cps[1] = { 0x1f089 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1264), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_079)
{
    // 1F08A ; [*1265.0020.0002] 
    // DOMINO TILE VERTICAL-05-04

    uint32_t const cps[1] = { 0x1f08a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1265), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_080)
{
    // 1F08B ; [*1266.0020.0002] 
    // DOMINO TILE VERTICAL-05-05

    uint32_t const cps[1] = { 0x1f08b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1266), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_081)
{
    // 1F08C ; [*1267.0020.0002] 
    // DOMINO TILE VERTICAL-05-06

    uint32_t const cps[1] = { 0x1f08c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1267), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_082)
{
    // 1F08D ; [*1268.0020.0002] 
    // DOMINO TILE VERTICAL-06-00

    uint32_t const cps[1] = { 0x1f08d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1268), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_083)
{
    // 1F08E ; [*1269.0020.0002] 
    // DOMINO TILE VERTICAL-06-01

    uint32_t const cps[1] = { 0x1f08e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1269), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_084)
{
    // 1F08F ; [*126A.0020.0002] 
    // DOMINO TILE VERTICAL-06-02

    uint32_t const cps[1] = { 0x1f08f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x126a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_085)
{
    // 1F090 ; [*126B.0020.0002] 
    // DOMINO TILE VERTICAL-06-03

    uint32_t const cps[1] = { 0x1f090 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x126b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_086)
{
    // 1F091 ; [*126C.0020.0002] 
    // DOMINO TILE VERTICAL-06-04

    uint32_t const cps[1] = { 0x1f091 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x126c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_087)
{
    // 1F092 ; [*126D.0020.0002] 
    // DOMINO TILE VERTICAL-06-05

    uint32_t const cps[1] = { 0x1f092 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x126d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_088)
{
    // 1F093 ; [*126E.0020.0002] 
    // DOMINO TILE VERTICAL-06-06

    uint32_t const cps[1] = { 0x1f093 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x126e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_089)
{
    // 1F0A0 ; [*126F.0020.0002] 
    // PLAYING CARD BACK

    uint32_t const cps[1] = { 0x1f0a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x126f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_090)
{
    // 1F0A1 ; [*1270.0020.0002] 
    // PLAYING CARD ACE OF SPADES

    uint32_t const cps[1] = { 0x1f0a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1270), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_091)
{
    // 1F0A2 ; [*1271.0020.0002] 
    // PLAYING CARD TWO OF SPADES

    uint32_t const cps[1] = { 0x1f0a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1271), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_092)
{
    // 1F0A3 ; [*1272.0020.0002] 
    // PLAYING CARD THREE OF SPADES

    uint32_t const cps[1] = { 0x1f0a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1272), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_093)
{
    // 1F0A4 ; [*1273.0020.0002] 
    // PLAYING CARD FOUR OF SPADES

    uint32_t const cps[1] = { 0x1f0a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1273), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_094)
{
    // 1F0A5 ; [*1274.0020.0002] 
    // PLAYING CARD FIVE OF SPADES

    uint32_t const cps[1] = { 0x1f0a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1274), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_095)
{
    // 1F0A6 ; [*1275.0020.0002] 
    // PLAYING CARD SIX OF SPADES

    uint32_t const cps[1] = { 0x1f0a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1275), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_096)
{
    // 1F0A7 ; [*1276.0020.0002] 
    // PLAYING CARD SEVEN OF SPADES

    uint32_t const cps[1] = { 0x1f0a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1276), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_097)
{
    // 1F0A8 ; [*1277.0020.0002] 
    // PLAYING CARD EIGHT OF SPADES

    uint32_t const cps[1] = { 0x1f0a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1277), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_098)
{
    // 1F0A9 ; [*1278.0020.0002] 
    // PLAYING CARD NINE OF SPADES

    uint32_t const cps[1] = { 0x1f0a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1278), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_099)
{
    // 1F0AA ; [*1279.0020.0002] 
    // PLAYING CARD TEN OF SPADES

    uint32_t const cps[1] = { 0x1f0aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1279), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_100)
{
    // 1F0AB ; [*127A.0020.0002] 
    // PLAYING CARD JACK OF SPADES

    uint32_t const cps[1] = { 0x1f0ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x127a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_101)
{
    // 1F0AC ; [*127B.0020.0002] 
    // PLAYING CARD KNIGHT OF SPADES

    uint32_t const cps[1] = { 0x1f0ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x127b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_102)
{
    // 1F0AD ; [*127C.0020.0002] 
    // PLAYING CARD QUEEN OF SPADES

    uint32_t const cps[1] = { 0x1f0ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x127c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_103)
{
    // 1F0AE ; [*127D.0020.0002] 
    // PLAYING CARD KING OF SPADES

    uint32_t const cps[1] = { 0x1f0ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x127d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_104)
{
    // 1F0B1 ; [*127E.0020.0002] 
    // PLAYING CARD ACE OF HEARTS

    uint32_t const cps[1] = { 0x1f0b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x127e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_105)
{
    // 1F0B2 ; [*127F.0020.0002] 
    // PLAYING CARD TWO OF HEARTS

    uint32_t const cps[1] = { 0x1f0b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x127f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_106)
{
    // 1F0B3 ; [*1280.0020.0002] 
    // PLAYING CARD THREE OF HEARTS

    uint32_t const cps[1] = { 0x1f0b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1280), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_107)
{
    // 1F0B4 ; [*1281.0020.0002] 
    // PLAYING CARD FOUR OF HEARTS

    uint32_t const cps[1] = { 0x1f0b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1281), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_108)
{
    // 1F0B5 ; [*1282.0020.0002] 
    // PLAYING CARD FIVE OF HEARTS

    uint32_t const cps[1] = { 0x1f0b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1282), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_109)
{
    // 1F0B6 ; [*1283.0020.0002] 
    // PLAYING CARD SIX OF HEARTS

    uint32_t const cps[1] = { 0x1f0b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1283), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_110)
{
    // 1F0B7 ; [*1284.0020.0002] 
    // PLAYING CARD SEVEN OF HEARTS

    uint32_t const cps[1] = { 0x1f0b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1284), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_111)
{
    // 1F0B8 ; [*1285.0020.0002] 
    // PLAYING CARD EIGHT OF HEARTS

    uint32_t const cps[1] = { 0x1f0b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1285), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_112)
{
    // 1F0B9 ; [*1286.0020.0002] 
    // PLAYING CARD NINE OF HEARTS

    uint32_t const cps[1] = { 0x1f0b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1286), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_113)
{
    // 1F0BA ; [*1287.0020.0002] 
    // PLAYING CARD TEN OF HEARTS

    uint32_t const cps[1] = { 0x1f0ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1287), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_114)
{
    // 1F0BB ; [*1288.0020.0002] 
    // PLAYING CARD JACK OF HEARTS

    uint32_t const cps[1] = { 0x1f0bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1288), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_115)
{
    // 1F0BC ; [*1289.0020.0002] 
    // PLAYING CARD KNIGHT OF HEARTS

    uint32_t const cps[1] = { 0x1f0bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1289), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_116)
{
    // 1F0BD ; [*128A.0020.0002] 
    // PLAYING CARD QUEEN OF HEARTS

    uint32_t const cps[1] = { 0x1f0bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x128a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_117)
{
    // 1F0BE ; [*128B.0020.0002] 
    // PLAYING CARD KING OF HEARTS

    uint32_t const cps[1] = { 0x1f0be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x128b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_118)
{
    // 1F0BF ; [*128C.0020.0002] 
    // PLAYING CARD RED JOKER

    uint32_t const cps[1] = { 0x1f0bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x128c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_119)
{
    // 1F0C1 ; [*128D.0020.0002] 
    // PLAYING CARD ACE OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x128d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_120)
{
    // 1F0C2 ; [*128E.0020.0002] 
    // PLAYING CARD TWO OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x128e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_121)
{
    // 1F0C3 ; [*128F.0020.0002] 
    // PLAYING CARD THREE OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x128f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_122)
{
    // 1F0C4 ; [*1290.0020.0002] 
    // PLAYING CARD FOUR OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1290), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_123)
{
    // 1F0C5 ; [*1291.0020.0002] 
    // PLAYING CARD FIVE OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1291), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_124)
{
    // 1F0C6 ; [*1292.0020.0002] 
    // PLAYING CARD SIX OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1292), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_125)
{
    // 1F0C7 ; [*1293.0020.0002] 
    // PLAYING CARD SEVEN OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1293), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_126)
{
    // 1F0C8 ; [*1294.0020.0002] 
    // PLAYING CARD EIGHT OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1294), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_127)
{
    // 1F0C9 ; [*1295.0020.0002] 
    // PLAYING CARD NINE OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1295), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_128)
{
    // 1F0CA ; [*1296.0020.0002] 
    // PLAYING CARD TEN OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1296), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_129)
{
    // 1F0CB ; [*1297.0020.0002] 
    // PLAYING CARD JACK OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1297), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_130)
{
    // 1F0CC ; [*1298.0020.0002] 
    // PLAYING CARD KNIGHT OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1298), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_131)
{
    // 1F0CD ; [*1299.0020.0002] 
    // PLAYING CARD QUEEN OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1299), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_132)
{
    // 1F0CE ; [*129A.0020.0002] 
    // PLAYING CARD KING OF DIAMONDS

    uint32_t const cps[1] = { 0x1f0ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x129a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_133)
{
    // 1F0CF ; [*129B.0020.0002] 
    // PLAYING CARD BLACK JOKER

    uint32_t const cps[1] = { 0x1f0cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x129b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_134)
{
    // 1F0D1 ; [*129C.0020.0002] 
    // PLAYING CARD ACE OF CLUBS

    uint32_t const cps[1] = { 0x1f0d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x129c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_135)
{
    // 1F0D2 ; [*129D.0020.0002] 
    // PLAYING CARD TWO OF CLUBS

    uint32_t const cps[1] = { 0x1f0d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x129d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_136)
{
    // 1F0D3 ; [*129E.0020.0002] 
    // PLAYING CARD THREE OF CLUBS

    uint32_t const cps[1] = { 0x1f0d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x129e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_137)
{
    // 1F0D4 ; [*129F.0020.0002] 
    // PLAYING CARD FOUR OF CLUBS

    uint32_t const cps[1] = { 0x1f0d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x129f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_138)
{
    // 1F0D5 ; [*12A0.0020.0002] 
    // PLAYING CARD FIVE OF CLUBS

    uint32_t const cps[1] = { 0x1f0d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_139)
{
    // 1F0D6 ; [*12A1.0020.0002] 
    // PLAYING CARD SIX OF CLUBS

    uint32_t const cps[1] = { 0x1f0d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_140)
{
    // 1F0D7 ; [*12A2.0020.0002] 
    // PLAYING CARD SEVEN OF CLUBS

    uint32_t const cps[1] = { 0x1f0d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_141)
{
    // 1F0D8 ; [*12A3.0020.0002] 
    // PLAYING CARD EIGHT OF CLUBS

    uint32_t const cps[1] = { 0x1f0d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_142)
{
    // 1F0D9 ; [*12A4.0020.0002] 
    // PLAYING CARD NINE OF CLUBS

    uint32_t const cps[1] = { 0x1f0d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_143)
{
    // 1F0DA ; [*12A5.0020.0002] 
    // PLAYING CARD TEN OF CLUBS

    uint32_t const cps[1] = { 0x1f0da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_144)
{
    // 1F0DB ; [*12A6.0020.0002] 
    // PLAYING CARD JACK OF CLUBS

    uint32_t const cps[1] = { 0x1f0db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_145)
{
    // 1F0DC ; [*12A7.0020.0002] 
    // PLAYING CARD KNIGHT OF CLUBS

    uint32_t const cps[1] = { 0x1f0dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_146)
{
    // 1F0DD ; [*12A8.0020.0002] 
    // PLAYING CARD QUEEN OF CLUBS

    uint32_t const cps[1] = { 0x1f0dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_147)
{
    // 1F0DE ; [*12A9.0020.0002] 
    // PLAYING CARD KING OF CLUBS

    uint32_t const cps[1] = { 0x1f0de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_148)
{
    // 1F0DF ; [*12AA.0020.0002] 
    // PLAYING CARD WHITE JOKER

    uint32_t const cps[1] = { 0x1f0df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_190_149)
{
    // 1F0E0 ; [*12AB.0020.0002] 
    // PLAYING CARD FOOL

    uint32_t const cps[1] = { 0x1f0e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x12ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

