// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_119_000)
{
    // 1E5D 0062;	
    // (ṝ) LATIN SMALL LETTER R WITH DOT BELOW AND MACRON	[1E99 1CC6 | 0020 0042 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E5D, 0x0062 };
    uint32_t const ces[13] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_001)
{
    // 1E5C 0062;	
    // (Ṝ) LATIN CAPITAL LETTER R WITH DOT BELOW AND MACRON	[1E99 1CC6 | 0020 0042 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E5C, 0x0062 };
    uint32_t const ces[13] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_002)
{
    // 1E5F 0062;	
    // (ṟ) LATIN SMALL LETTER R WITH LINE BELOW	[1E99 1CC6 | 0020 0049 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E5F, 0x0062 };
    uint32_t const ces[11] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_003)
{
    // 1E5E 0062;	
    // (Ṟ) LATIN CAPITAL LETTER R WITH LINE BELOW	[1E99 1CC6 | 0020 0049 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E5E, 0x0062 };
    uint32_t const ces[11] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_004)
{
    // A783 0062;	
    // (ꞃ) LATIN SMALL LETTER INSULAR R	[1E99 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA783, 0x0062 };
    uint32_t const ces[11] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_005)
{
    // A782 0062;	
    // (Ꞃ) LATIN CAPITAL LETTER INSULAR R	[1E99 1CC6 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA782, 0x0062 };
    uint32_t const ces[11] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_006)
{
    // 20A8 0021;	
    // (₨) RUPEE SIGN	[1E99 1ED7 0261 | 0020 0020 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x20A8, 0x0021 };
    uint32_t const ces[12] = { 0x1E99, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_007)
{
    // 20A8 003F;	
    // (₨) RUPEE SIGN	[1E99 1ED7 0267 | 0020 0020 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x20A8, 0x003F };
    uint32_t const ces[12] = { 0x1E99, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_008)
{
    // 20A8 0061;	
    // (₨) RUPEE SIGN	[1E99 1ED7 1CAD | 0020 0020 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x20A8, 0x0061 };
    uint32_t const ces[12] = { 0x1E99, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_009)
{
    // 20A8 0041;	
    // (₨) RUPEE SIGN	[1E99 1ED7 1CAD | 0020 0020 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0x20A8, 0x0041 };
    uint32_t const ces[12] = { 0x1E99, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_010)
{
    // 20A8 0062;	
    // (₨) RUPEE SIGN	[1E99 1ED7 1CC6 | 0020 0020 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x20A8, 0x0062 };
    uint32_t const ces[12] = { 0x1E99, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_011)
{
    // AB45 0021;	
    // (ꭅ) LATIN SMALL LETTER STIRRUP R	[1E9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB45, 0x0021 };
    uint32_t const ces[9] = { 0x1E9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_012)
{
    // AB45 003F;	
    // (ꭅ) LATIN SMALL LETTER STIRRUP R	[1E9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB45, 0x003F };
    uint32_t const ces[9] = { 0x1E9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_013)
{
    // AB45 0061;	
    // (ꭅ) LATIN SMALL LETTER STIRRUP R	[1E9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB45, 0x0061 };
    uint32_t const ces[9] = { 0x1E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_014)
{
    // AB45 0041;	
    // (ꭅ) LATIN SMALL LETTER STIRRUP R	[1E9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB45, 0x0041 };
    uint32_t const ces[9] = { 0x1E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_015)
{
    // AB45 0062;	
    // (ꭅ) LATIN SMALL LETTER STIRRUP R	[1E9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB45, 0x0062 };
    uint32_t const ces[9] = { 0x1E9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_016)
{
    // 0334 1DE2;	
    // (ᷢ) COMBINING LATIN LETTER SMALL CAPITAL R	[1E9E | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DE2 };
    uint32_t const ces[8] = { 0x1E9E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_017)
{
    // 1DE2 0334;	
    // (ᷢ) COMBINING LATIN LETTER SMALL CAPITAL R	[1E9E | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DE2, 0x0334 };
    uint32_t const ces[8] = { 0x1E9E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_018)
{
    // 0280 0021;	
    // (ʀ) LATIN LETTER SMALL CAPITAL R	[1E9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0280, 0x0021 };
    uint32_t const ces[9] = { 0x1E9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_019)
{
    // 1DE2 0021;	
    // (ᷢ) COMBINING LATIN LETTER SMALL CAPITAL R	[1E9E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE2, 0x0021 };
    uint32_t const ces[9] = { 0x1E9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_020)
{
    // 01A6 0021;	
    // (Ʀ) LATIN LETTER YR	[1E9E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A6, 0x0021 };
    uint32_t const ces[9] = { 0x1E9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_021)
{
    // 0280 003F;	
    // (ʀ) LATIN LETTER SMALL CAPITAL R	[1E9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0280, 0x003F };
    uint32_t const ces[9] = { 0x1E9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_022)
{
    // 1DE2 003F;	
    // (ᷢ) COMBINING LATIN LETTER SMALL CAPITAL R	[1E9E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE2, 0x003F };
    uint32_t const ces[9] = { 0x1E9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_023)
{
    // 01A6 003F;	
    // (Ʀ) LATIN LETTER YR	[1E9E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A6, 0x003F };
    uint32_t const ces[9] = { 0x1E9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_024)
{
    // 0280 0061;	
    // (ʀ) LATIN LETTER SMALL CAPITAL R	[1E9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0280, 0x0061 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_025)
{
    // 0280 0041;	
    // (ʀ) LATIN LETTER SMALL CAPITAL R	[1E9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0280, 0x0041 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_026)
{
    // 1DE2 0061;	
    // (ᷢ) COMBINING LATIN LETTER SMALL CAPITAL R	[1E9E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE2, 0x0061 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_027)
{
    // 1DE2 0041;	
    // (ᷢ) COMBINING LATIN LETTER SMALL CAPITAL R	[1E9E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DE2, 0x0041 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_028)
{
    // 01A6 0061;	
    // (Ʀ) LATIN LETTER YR	[1E9E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A6, 0x0061 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_029)
{
    // 01A6 0041;	
    // (Ʀ) LATIN LETTER YR	[1E9E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01A6, 0x0041 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_030)
{
    // 0280 0062;	
    // (ʀ) LATIN LETTER SMALL CAPITAL R	[1E9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0280, 0x0062 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_031)
{
    // 1DE2 0062;	
    // (ᷢ) COMBINING LATIN LETTER SMALL CAPITAL R	[1E9E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE2, 0x0062 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_032)
{
    // 01A6 0062;	
    // (Ʀ) LATIN LETTER YR	[1E9E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A6, 0x0062 };
    uint32_t const ces[9] = { 0x1E9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_033)
{
    // AB46 0021;	
    // (ꭆ) LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG	[1EA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB46, 0x0021 };
    uint32_t const ces[9] = { 0x1EA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_034)
{
    // AB46 003F;	
    // (ꭆ) LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG	[1EA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB46, 0x003F };
    uint32_t const ces[9] = { 0x1EA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_035)
{
    // AB46 0061;	
    // (ꭆ) LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG	[1EA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB46, 0x0061 };
    uint32_t const ces[9] = { 0x1EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_036)
{
    // AB46 0041;	
    // (ꭆ) LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG	[1EA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB46, 0x0041 };
    uint32_t const ces[9] = { 0x1EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_037)
{
    // AB46 0062;	
    // (ꭆ) LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG	[1EA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB46, 0x0062 };
    uint32_t const ces[9] = { 0x1EA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_038)
{
    // 0334 1DE3;	
    // (ᷣ) COMBINING LATIN SMALL LETTER R ROTUNDA	[1EA3 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DE3 };
    uint32_t const ces[8] = { 0x1EA3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_039)
{
    // 1DE3 0334;	
    // (ᷣ) COMBINING LATIN SMALL LETTER R ROTUNDA	[1EA3 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DE3, 0x0334 };
    uint32_t const ces[8] = { 0x1EA3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_040)
{
    // A75B 0021;	
    // (ꝛ) LATIN SMALL LETTER R ROTUNDA	[1EA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75B, 0x0021 };
    uint32_t const ces[9] = { 0x1EA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_041)
{
    // 1DE3 0021;	
    // (ᷣ) COMBINING LATIN SMALL LETTER R ROTUNDA	[1EA3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE3, 0x0021 };
    uint32_t const ces[9] = { 0x1EA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_042)
{
    // A75A 0021;	
    // (Ꝛ) LATIN CAPITAL LETTER R ROTUNDA	[1EA3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75A, 0x0021 };
    uint32_t const ces[9] = { 0x1EA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_043)
{
    // A75B 003F;	
    // (ꝛ) LATIN SMALL LETTER R ROTUNDA	[1EA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75B, 0x003F };
    uint32_t const ces[9] = { 0x1EA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_044)
{
    // 1DE3 003F;	
    // (ᷣ) COMBINING LATIN SMALL LETTER R ROTUNDA	[1EA3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE3, 0x003F };
    uint32_t const ces[9] = { 0x1EA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_045)
{
    // A75A 003F;	
    // (Ꝛ) LATIN CAPITAL LETTER R ROTUNDA	[1EA3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75A, 0x003F };
    uint32_t const ces[9] = { 0x1EA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_046)
{
    // A75B 0061;	
    // (ꝛ) LATIN SMALL LETTER R ROTUNDA	[1EA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75B, 0x0061 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_047)
{
    // A75B 0041;	
    // (ꝛ) LATIN SMALL LETTER R ROTUNDA	[1EA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA75B, 0x0041 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_048)
{
    // 1DE3 0061;	
    // (ᷣ) COMBINING LATIN SMALL LETTER R ROTUNDA	[1EA3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE3, 0x0061 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_049)
{
    // 1DE3 0041;	
    // (ᷣ) COMBINING LATIN SMALL LETTER R ROTUNDA	[1EA3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DE3, 0x0041 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_050)
{
    // A75A 0061;	
    // (Ꝛ) LATIN CAPITAL LETTER R ROTUNDA	[1EA3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75A, 0x0061 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_051)
{
    // A75A 0041;	
    // (Ꝛ) LATIN CAPITAL LETTER R ROTUNDA	[1EA3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA75A, 0x0041 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_052)
{
    // A75B 0062;	
    // (ꝛ) LATIN SMALL LETTER R ROTUNDA	[1EA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75B, 0x0062 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_053)
{
    // 1DE3 0062;	
    // (ᷣ) COMBINING LATIN SMALL LETTER R ROTUNDA	[1EA3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE3, 0x0062 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_054)
{
    // A75A 0062;	
    // (Ꝛ) LATIN CAPITAL LETTER R ROTUNDA	[1EA3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75A, 0x0062 };
    uint32_t const ces[9] = { 0x1EA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_055)
{
    // 1D19 0021;	
    // (ᴙ) LATIN LETTER SMALL CAPITAL REVERSED R	[1EA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19, 0x0021 };
    uint32_t const ces[9] = { 0x1EA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_056)
{
    // 1D19 003F;	
    // (ᴙ) LATIN LETTER SMALL CAPITAL REVERSED R	[1EA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19, 0x003F };
    uint32_t const ces[9] = { 0x1EA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_057)
{
    // 1D19 0061;	
    // (ᴙ) LATIN LETTER SMALL CAPITAL REVERSED R	[1EA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19, 0x0061 };
    uint32_t const ces[9] = { 0x1EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_058)
{
    // 1D19 0041;	
    // (ᴙ) LATIN LETTER SMALL CAPITAL REVERSED R	[1EA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D19, 0x0041 };
    uint32_t const ces[9] = { 0x1EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_059)
{
    // 1D19 0062;	
    // (ᴙ) LATIN LETTER SMALL CAPITAL REVERSED R	[1EA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19, 0x0062 };
    uint32_t const ces[9] = { 0x1EA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_060)
{
    // 024D 0021;	
    // (ɍ) LATIN SMALL LETTER R WITH STROKE	[1EA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024D, 0x0021 };
    uint32_t const ces[9] = { 0x1EA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_061)
{
    // 024C 0021;	
    // (Ɍ) LATIN CAPITAL LETTER R WITH STROKE	[1EA5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024C, 0x0021 };
    uint32_t const ces[9] = { 0x1EA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_062)
{
    // 024D 003F;	
    // (ɍ) LATIN SMALL LETTER R WITH STROKE	[1EA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024D, 0x003F };
    uint32_t const ces[9] = { 0x1EA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_063)
{
    // 024C 003F;	
    // (Ɍ) LATIN CAPITAL LETTER R WITH STROKE	[1EA5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024C, 0x003F };
    uint32_t const ces[9] = { 0x1EA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_064)
{
    // 024D 0061;	
    // (ɍ) LATIN SMALL LETTER R WITH STROKE	[1EA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024D, 0x0061 };
    uint32_t const ces[9] = { 0x1EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_065)
{
    // 024D 0041;	
    // (ɍ) LATIN SMALL LETTER R WITH STROKE	[1EA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x024D, 0x0041 };
    uint32_t const ces[9] = { 0x1EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_066)
{
    // 024C 0061;	
    // (Ɍ) LATIN CAPITAL LETTER R WITH STROKE	[1EA5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024C, 0x0061 };
    uint32_t const ces[9] = { 0x1EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_067)
{
    // 024C 0041;	
    // (Ɍ) LATIN CAPITAL LETTER R WITH STROKE	[1EA5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x024C, 0x0041 };
    uint32_t const ces[9] = { 0x1EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_068)
{
    // 024D 0062;	
    // (ɍ) LATIN SMALL LETTER R WITH STROKE	[1EA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024D, 0x0062 };
    uint32_t const ces[9] = { 0x1EA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_069)
{
    // 024C 0062;	
    // (Ɍ) LATIN CAPITAL LETTER R WITH STROKE	[1EA5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024C, 0x0062 };
    uint32_t const ces[9] = { 0x1EA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_070)
{
    // 1D72 0021;	
    // (ᵲ) LATIN SMALL LETTER R WITH MIDDLE TILDE	[1EA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D72, 0x0021 };
    uint32_t const ces[9] = { 0x1EA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_071)
{
    // 1D72 003F;	
    // (ᵲ) LATIN SMALL LETTER R WITH MIDDLE TILDE	[1EA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D72, 0x003F };
    uint32_t const ces[9] = { 0x1EA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_072)
{
    // 1D72 0061;	
    // (ᵲ) LATIN SMALL LETTER R WITH MIDDLE TILDE	[1EA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D72, 0x0061 };
    uint32_t const ces[9] = { 0x1EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_073)
{
    // 1D72 0041;	
    // (ᵲ) LATIN SMALL LETTER R WITH MIDDLE TILDE	[1EA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D72, 0x0041 };
    uint32_t const ces[9] = { 0x1EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_074)
{
    // 1D72 0062;	
    // (ᵲ) LATIN SMALL LETTER R WITH MIDDLE TILDE	[1EA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D72, 0x0062 };
    uint32_t const ces[9] = { 0x1EA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_075)
{
    // 0279 0021;	
    // (ɹ) LATIN SMALL LETTER TURNED R	[1EAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0279, 0x0021 };
    uint32_t const ces[9] = { 0x1EAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_076)
{
    // 02B4 0021;	
    // (ʴ) MODIFIER LETTER SMALL TURNED R	[1EAA 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B4, 0x0021 };
    uint32_t const ces[9] = { 0x1EAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_077)
{
    // 0279 003F;	
    // (ɹ) LATIN SMALL LETTER TURNED R	[1EAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0279, 0x003F };
    uint32_t const ces[9] = { 0x1EAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_078)
{
    // 02B4 003F;	
    // (ʴ) MODIFIER LETTER SMALL TURNED R	[1EAA 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B4, 0x003F };
    uint32_t const ces[9] = { 0x1EAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_079)
{
    // 0279 0061;	
    // (ɹ) LATIN SMALL LETTER TURNED R	[1EAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0279, 0x0061 };
    uint32_t const ces[9] = { 0x1EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_080)
{
    // 0279 0041;	
    // (ɹ) LATIN SMALL LETTER TURNED R	[1EAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0279, 0x0041 };
    uint32_t const ces[9] = { 0x1EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_081)
{
    // 02B4 0061;	
    // (ʴ) MODIFIER LETTER SMALL TURNED R	[1EAA 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B4, 0x0061 };
    uint32_t const ces[9] = { 0x1EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_082)
{
    // 02B4 0041;	
    // (ʴ) MODIFIER LETTER SMALL TURNED R	[1EAA 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x02B4, 0x0041 };
    uint32_t const ces[9] = { 0x1EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_083)
{
    // 0279 0062;	
    // (ɹ) LATIN SMALL LETTER TURNED R	[1EAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0279, 0x0062 };
    uint32_t const ces[9] = { 0x1EAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_084)
{
    // 02B4 0062;	
    // (ʴ) MODIFIER LETTER SMALL TURNED R	[1EAA 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B4, 0x0062 };
    uint32_t const ces[9] = { 0x1EAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_085)
{
    // 1D1A 0021;	
    // (ᴚ) LATIN LETTER SMALL CAPITAL TURNED R	[1EAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A, 0x0021 };
    uint32_t const ces[9] = { 0x1EAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_086)
{
    // 1D1A 003F;	
    // (ᴚ) LATIN LETTER SMALL CAPITAL TURNED R	[1EAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A, 0x003F };
    uint32_t const ces[9] = { 0x1EAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_087)
{
    // 1D1A 0061;	
    // (ᴚ) LATIN LETTER SMALL CAPITAL TURNED R	[1EAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A, 0x0061 };
    uint32_t const ces[9] = { 0x1EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_088)
{
    // 1D1A 0041;	
    // (ᴚ) LATIN LETTER SMALL CAPITAL TURNED R	[1EAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A, 0x0041 };
    uint32_t const ces[9] = { 0x1EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_089)
{
    // 1D1A 0062;	
    // (ᴚ) LATIN LETTER SMALL CAPITAL TURNED R	[1EAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A, 0x0062 };
    uint32_t const ces[9] = { 0x1EAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_090)
{
    // 027A 0021;	
    // (ɺ) LATIN SMALL LETTER TURNED R WITH LONG LEG	[1EAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027A, 0x0021 };
    uint32_t const ces[9] = { 0x1EAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_091)
{
    // 027A 003F;	
    // (ɺ) LATIN SMALL LETTER TURNED R WITH LONG LEG	[1EAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027A, 0x003F };
    uint32_t const ces[9] = { 0x1EAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_092)
{
    // 027A 0061;	
    // (ɺ) LATIN SMALL LETTER TURNED R WITH LONG LEG	[1EAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027A, 0x0061 };
    uint32_t const ces[9] = { 0x1EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_093)
{
    // 027A 0041;	
    // (ɺ) LATIN SMALL LETTER TURNED R WITH LONG LEG	[1EAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x027A, 0x0041 };
    uint32_t const ces[9] = { 0x1EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_094)
{
    // 027A 0062;	
    // (ɺ) LATIN SMALL LETTER TURNED R WITH LONG LEG	[1EAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027A, 0x0062 };
    uint32_t const ces[9] = { 0x1EAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_095)
{
    // 1D89 0021;	
    // (ᶉ) LATIN SMALL LETTER R WITH PALATAL HOOK	[1EB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89, 0x0021 };
    uint32_t const ces[9] = { 0x1EB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_096)
{
    // 1D89 003F;	
    // (ᶉ) LATIN SMALL LETTER R WITH PALATAL HOOK	[1EB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89, 0x003F };
    uint32_t const ces[9] = { 0x1EB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_097)
{
    // 1D89 0061;	
    // (ᶉ) LATIN SMALL LETTER R WITH PALATAL HOOK	[1EB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89, 0x0061 };
    uint32_t const ces[9] = { 0x1EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_098)
{
    // 1D89 0041;	
    // (ᶉ) LATIN SMALL LETTER R WITH PALATAL HOOK	[1EB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D89, 0x0041 };
    uint32_t const ces[9] = { 0x1EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_099)
{
    // 1D89 0062;	
    // (ᶉ) LATIN SMALL LETTER R WITH PALATAL HOOK	[1EB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89, 0x0062 };
    uint32_t const ces[9] = { 0x1EB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_100)
{
    // 027B 0021;	
    // (ɻ) LATIN SMALL LETTER TURNED R WITH HOOK	[1EB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027B, 0x0021 };
    uint32_t const ces[9] = { 0x1EB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_101)
{
    // 02B5 0021;	
    // (ʵ) MODIFIER LETTER SMALL TURNED R WITH HOOK	[1EB4 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B5, 0x0021 };
    uint32_t const ces[9] = { 0x1EB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_102)
{
    // 027B 003F;	
    // (ɻ) LATIN SMALL LETTER TURNED R WITH HOOK	[1EB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027B, 0x003F };
    uint32_t const ces[9] = { 0x1EB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_103)
{
    // 02B5 003F;	
    // (ʵ) MODIFIER LETTER SMALL TURNED R WITH HOOK	[1EB4 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B5, 0x003F };
    uint32_t const ces[9] = { 0x1EB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_104)
{
    // 027B 0061;	
    // (ɻ) LATIN SMALL LETTER TURNED R WITH HOOK	[1EB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027B, 0x0061 };
    uint32_t const ces[9] = { 0x1EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_105)
{
    // 027B 0041;	
    // (ɻ) LATIN SMALL LETTER TURNED R WITH HOOK	[1EB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x027B, 0x0041 };
    uint32_t const ces[9] = { 0x1EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_106)
{
    // 02B5 0061;	
    // (ʵ) MODIFIER LETTER SMALL TURNED R WITH HOOK	[1EB4 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B5, 0x0061 };
    uint32_t const ces[9] = { 0x1EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_107)
{
    // 02B5 0041;	
    // (ʵ) MODIFIER LETTER SMALL TURNED R WITH HOOK	[1EB4 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x02B5, 0x0041 };
    uint32_t const ces[9] = { 0x1EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_108)
{
    // 027B 0062;	
    // (ɻ) LATIN SMALL LETTER TURNED R WITH HOOK	[1EB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027B, 0x0062 };
    uint32_t const ces[9] = { 0x1EB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_109)
{
    // 02B5 0062;	
    // (ʵ) MODIFIER LETTER SMALL TURNED R WITH HOOK	[1EB4 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B5, 0x0062 };
    uint32_t const ces[9] = { 0x1EB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_110)
{
    // 2C79 0021;	
    // (ⱹ) LATIN SMALL LETTER TURNED R WITH TAIL	[1EB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C79, 0x0021 };
    uint32_t const ces[9] = { 0x1EB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_111)
{
    // 2C79 003F;	
    // (ⱹ) LATIN SMALL LETTER TURNED R WITH TAIL	[1EB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C79, 0x003F };
    uint32_t const ces[9] = { 0x1EB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_112)
{
    // 2C79 0061;	
    // (ⱹ) LATIN SMALL LETTER TURNED R WITH TAIL	[1EB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C79, 0x0061 };
    uint32_t const ces[9] = { 0x1EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_113)
{
    // 2C79 0041;	
    // (ⱹ) LATIN SMALL LETTER TURNED R WITH TAIL	[1EB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C79, 0x0041 };
    uint32_t const ces[9] = { 0x1EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_114)
{
    // 2C79 0062;	
    // (ⱹ) LATIN SMALL LETTER TURNED R WITH TAIL	[1EB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C79, 0x0062 };
    uint32_t const ces[9] = { 0x1EB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_115)
{
    // 027C 0021;	
    // (ɼ) LATIN SMALL LETTER R WITH LONG LEG	[1EB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027C, 0x0021 };
    uint32_t const ces[9] = { 0x1EB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_116)
{
    // 027C 003F;	
    // (ɼ) LATIN SMALL LETTER R WITH LONG LEG	[1EB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027C, 0x003F };
    uint32_t const ces[9] = { 0x1EB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_117)
{
    // 027C 0061;	
    // (ɼ) LATIN SMALL LETTER R WITH LONG LEG	[1EB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027C, 0x0061 };
    uint32_t const ces[9] = { 0x1EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_118)
{
    // 027C 0041;	
    // (ɼ) LATIN SMALL LETTER R WITH LONG LEG	[1EB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x027C, 0x0041 };
    uint32_t const ces[9] = { 0x1EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_119)
{
    // 027C 0062;	
    // (ɼ) LATIN SMALL LETTER R WITH LONG LEG	[1EB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027C, 0x0062 };
    uint32_t const ces[9] = { 0x1EB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_120)
{
    // 027D 0021;	
    // (ɽ) LATIN SMALL LETTER R WITH TAIL	[1EBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027D, 0x0021 };
    uint32_t const ces[9] = { 0x1EBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_121)
{
    // 2C64 0021;	
    // (Ɽ) LATIN CAPITAL LETTER R WITH TAIL	[1EBD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C64, 0x0021 };
    uint32_t const ces[9] = { 0x1EBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_122)
{
    // 027D 003F;	
    // (ɽ) LATIN SMALL LETTER R WITH TAIL	[1EBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027D, 0x003F };
    uint32_t const ces[9] = { 0x1EBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_123)
{
    // 2C64 003F;	
    // (Ɽ) LATIN CAPITAL LETTER R WITH TAIL	[1EBD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C64, 0x003F };
    uint32_t const ces[9] = { 0x1EBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_124)
{
    // 027D 0061;	
    // (ɽ) LATIN SMALL LETTER R WITH TAIL	[1EBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027D, 0x0061 };
    uint32_t const ces[9] = { 0x1EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_125)
{
    // 027D 0041;	
    // (ɽ) LATIN SMALL LETTER R WITH TAIL	[1EBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x027D, 0x0041 };
    uint32_t const ces[9] = { 0x1EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_126)
{
    // 2C64 0061;	
    // (Ɽ) LATIN CAPITAL LETTER R WITH TAIL	[1EBD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C64, 0x0061 };
    uint32_t const ces[9] = { 0x1EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_127)
{
    // 2C64 0041;	
    // (Ɽ) LATIN CAPITAL LETTER R WITH TAIL	[1EBD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C64, 0x0041 };
    uint32_t const ces[9] = { 0x1EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_128)
{
    // 027D 0062;	
    // (ɽ) LATIN SMALL LETTER R WITH TAIL	[1EBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027D, 0x0062 };
    uint32_t const ces[9] = { 0x1EBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_129)
{
    // 2C64 0062;	
    // (Ɽ) LATIN CAPITAL LETTER R WITH TAIL	[1EBD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C64, 0x0062 };
    uint32_t const ces[9] = { 0x1EBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_130)
{
    // AB49 0021;	
    // (ꭉ) LATIN SMALL LETTER R WITH CROSSED-TAIL	[1EC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB49, 0x0021 };
    uint32_t const ces[9] = { 0x1EC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_131)
{
    // AB49 003F;	
    // (ꭉ) LATIN SMALL LETTER R WITH CROSSED-TAIL	[1EC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB49, 0x003F };
    uint32_t const ces[9] = { 0x1EC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_132)
{
    // AB49 0061;	
    // (ꭉ) LATIN SMALL LETTER R WITH CROSSED-TAIL	[1EC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB49, 0x0061 };
    uint32_t const ces[9] = { 0x1EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_133)
{
    // AB49 0041;	
    // (ꭉ) LATIN SMALL LETTER R WITH CROSSED-TAIL	[1EC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB49, 0x0041 };
    uint32_t const ces[9] = { 0x1EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_134)
{
    // AB49 0062;	
    // (ꭉ) LATIN SMALL LETTER R WITH CROSSED-TAIL	[1EC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB49, 0x0062 };
    uint32_t const ces[9] = { 0x1EC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_135)
{
    // 027E 0021;	
    // (ɾ) LATIN SMALL LETTER R WITH FISHHOOK	[1EC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027E, 0x0021 };
    uint32_t const ces[9] = { 0x1EC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_136)
{
    // 027E 003F;	
    // (ɾ) LATIN SMALL LETTER R WITH FISHHOOK	[1EC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027E, 0x003F };
    uint32_t const ces[9] = { 0x1EC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_137)
{
    // 027E 0061;	
    // (ɾ) LATIN SMALL LETTER R WITH FISHHOOK	[1EC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027E, 0x0061 };
    uint32_t const ces[9] = { 0x1EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_138)
{
    // 027E 0041;	
    // (ɾ) LATIN SMALL LETTER R WITH FISHHOOK	[1EC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x027E, 0x0041 };
    uint32_t const ces[9] = { 0x1EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_139)
{
    // 027E 0062;	
    // (ɾ) LATIN SMALL LETTER R WITH FISHHOOK	[1EC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027E, 0x0062 };
    uint32_t const ces[9] = { 0x1EC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_140)
{
    // 1D73 0021;	
    // (ᵳ) LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE	[1EC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D73, 0x0021 };
    uint32_t const ces[9] = { 0x1EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_141)
{
    // 1D73 003F;	
    // (ᵳ) LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE	[1EC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D73, 0x003F };
    uint32_t const ces[9] = { 0x1EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_142)
{
    // 1D73 0061;	
    // (ᵳ) LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE	[1EC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D73, 0x0061 };
    uint32_t const ces[9] = { 0x1EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_143)
{
    // 1D73 0041;	
    // (ᵳ) LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE	[1EC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D73, 0x0041 };
    uint32_t const ces[9] = { 0x1EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_144)
{
    // 1D73 0062;	
    // (ᵳ) LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE	[1EC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D73, 0x0062 };
    uint32_t const ces[9] = { 0x1EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_145)
{
    // 027F 0021;	
    // (ɿ) LATIN SMALL LETTER REVERSED R WITH FISHHOOK	[1EC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027F, 0x0021 };
    uint32_t const ces[9] = { 0x1EC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_146)
{
    // 027F 003F;	
    // (ɿ) LATIN SMALL LETTER REVERSED R WITH FISHHOOK	[1EC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027F, 0x003F };
    uint32_t const ces[9] = { 0x1EC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_147)
{
    // 027F 0061;	
    // (ɿ) LATIN SMALL LETTER REVERSED R WITH FISHHOOK	[1EC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027F, 0x0061 };
    uint32_t const ces[9] = { 0x1EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_148)
{
    // 027F 0041;	
    // (ɿ) LATIN SMALL LETTER REVERSED R WITH FISHHOOK	[1EC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x027F, 0x0041 };
    uint32_t const ces[9] = { 0x1EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_149)
{
    // 027F 0062;	
    // (ɿ) LATIN SMALL LETTER REVERSED R WITH FISHHOOK	[1EC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x027F, 0x0062 };
    uint32_t const ces[9] = { 0x1EC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_150)
{
    // AB47 0021;	
    // (ꭇ) LATIN SMALL LETTER R WITHOUT HANDLE	[1ECB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB47, 0x0021 };
    uint32_t const ces[9] = { 0x1ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_151)
{
    // AB47 003F;	
    // (ꭇ) LATIN SMALL LETTER R WITHOUT HANDLE	[1ECB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB47, 0x003F };
    uint32_t const ces[9] = { 0x1ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_152)
{
    // AB47 0061;	
    // (ꭇ) LATIN SMALL LETTER R WITHOUT HANDLE	[1ECB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB47, 0x0061 };
    uint32_t const ces[9] = { 0x1ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_153)
{
    // AB47 0041;	
    // (ꭇ) LATIN SMALL LETTER R WITHOUT HANDLE	[1ECB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB47, 0x0041 };
    uint32_t const ces[9] = { 0x1ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_154)
{
    // AB47 0062;	
    // (ꭇ) LATIN SMALL LETTER R WITHOUT HANDLE	[1ECB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB47, 0x0062 };
    uint32_t const ces[9] = { 0x1ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_155)
{
    // AB48 0021;	
    // (ꭈ) LATIN SMALL LETTER DOUBLE R	[1ECC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB48, 0x0021 };
    uint32_t const ces[9] = { 0x1ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_156)
{
    // AB48 003F;	
    // (ꭈ) LATIN SMALL LETTER DOUBLE R	[1ECC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB48, 0x003F };
    uint32_t const ces[9] = { 0x1ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_157)
{
    // AB48 0061;	
    // (ꭈ) LATIN SMALL LETTER DOUBLE R	[1ECC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB48, 0x0061 };
    uint32_t const ces[9] = { 0x1ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_158)
{
    // AB48 0041;	
    // (ꭈ) LATIN SMALL LETTER DOUBLE R	[1ECC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB48, 0x0041 };
    uint32_t const ces[9] = { 0x1ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_159)
{
    // AB48 0062;	
    // (ꭈ) LATIN SMALL LETTER DOUBLE R	[1ECC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB48, 0x0062 };
    uint32_t const ces[9] = { 0x1ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_160)
{
    // AB4A 0021;	
    // (ꭊ) LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL	[1ECD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4A, 0x0021 };
    uint32_t const ces[9] = { 0x1ECD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_161)
{
    // AB4A 003F;	
    // (ꭊ) LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL	[1ECD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4A, 0x003F };
    uint32_t const ces[9] = { 0x1ECD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_162)
{
    // AB4A 0061;	
    // (ꭊ) LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL	[1ECD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4A, 0x0061 };
    uint32_t const ces[9] = { 0x1ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_163)
{
    // AB4A 0041;	
    // (ꭊ) LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL	[1ECD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB4A, 0x0041 };
    uint32_t const ces[9] = { 0x1ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_164)
{
    // AB4A 0062;	
    // (ꭊ) LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL	[1ECD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4A, 0x0062 };
    uint32_t const ces[9] = { 0x1ECD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_165)
{
    // AB4B 0021;	
    // (ꭋ) LATIN SMALL LETTER SCRIPT R	[1ECE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4B, 0x0021 };
    uint32_t const ces[9] = { 0x1ECE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_166)
{
    // AB4B 003F;	
    // (ꭋ) LATIN SMALL LETTER SCRIPT R	[1ECE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4B, 0x003F };
    uint32_t const ces[9] = { 0x1ECE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_167)
{
    // AB4B 0061;	
    // (ꭋ) LATIN SMALL LETTER SCRIPT R	[1ECE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4B, 0x0061 };
    uint32_t const ces[9] = { 0x1ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_168)
{
    // AB4B 0041;	
    // (ꭋ) LATIN SMALL LETTER SCRIPT R	[1ECE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB4B, 0x0041 };
    uint32_t const ces[9] = { 0x1ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_169)
{
    // AB4B 0062;	
    // (ꭋ) LATIN SMALL LETTER SCRIPT R	[1ECE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4B, 0x0062 };
    uint32_t const ces[9] = { 0x1ECE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_170)
{
    // AB4C 0021;	
    // (ꭌ) LATIN SMALL LETTER SCRIPT R WITH RING	[1ECF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4C, 0x0021 };
    uint32_t const ces[9] = { 0x1ECF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_171)
{
    // AB4C 003F;	
    // (ꭌ) LATIN SMALL LETTER SCRIPT R WITH RING	[1ECF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4C, 0x003F };
    uint32_t const ces[9] = { 0x1ECF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_172)
{
    // AB4C 0061;	
    // (ꭌ) LATIN SMALL LETTER SCRIPT R WITH RING	[1ECF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4C, 0x0061 };
    uint32_t const ces[9] = { 0x1ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_173)
{
    // AB4C 0041;	
    // (ꭌ) LATIN SMALL LETTER SCRIPT R WITH RING	[1ECF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB4C, 0x0041 };
    uint32_t const ces[9] = { 0x1ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_174)
{
    // AB4C 0062;	
    // (ꭌ) LATIN SMALL LETTER SCRIPT R WITH RING	[1ECF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4C, 0x0062 };
    uint32_t const ces[9] = { 0x1ECF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_175)
{
    // 0281 0021;	
    // (ʁ) LATIN LETTER SMALL CAPITAL INVERTED R	[1ED0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0281, 0x0021 };
    uint32_t const ces[9] = { 0x1ED0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_176)
{
    // 02B6 0021;	
    // (ʶ) MODIFIER LETTER SMALL CAPITAL INVERTED R	[1ED0 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B6, 0x0021 };
    uint32_t const ces[9] = { 0x1ED0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_177)
{
    // 0281 003F;	
    // (ʁ) LATIN LETTER SMALL CAPITAL INVERTED R	[1ED0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0281, 0x003F };
    uint32_t const ces[9] = { 0x1ED0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_178)
{
    // 02B6 003F;	
    // (ʶ) MODIFIER LETTER SMALL CAPITAL INVERTED R	[1ED0 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B6, 0x003F };
    uint32_t const ces[9] = { 0x1ED0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_179)
{
    // 0281 0061;	
    // (ʁ) LATIN LETTER SMALL CAPITAL INVERTED R	[1ED0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0281, 0x0061 };
    uint32_t const ces[9] = { 0x1ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_180)
{
    // 0281 0041;	
    // (ʁ) LATIN LETTER SMALL CAPITAL INVERTED R	[1ED0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0281, 0x0041 };
    uint32_t const ces[9] = { 0x1ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_181)
{
    // 02B6 0061;	
    // (ʶ) MODIFIER LETTER SMALL CAPITAL INVERTED R	[1ED0 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B6, 0x0061 };
    uint32_t const ces[9] = { 0x1ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_182)
{
    // 02B6 0041;	
    // (ʶ) MODIFIER LETTER SMALL CAPITAL INVERTED R	[1ED0 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x02B6, 0x0041 };
    uint32_t const ces[9] = { 0x1ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_183)
{
    // 0281 0062;	
    // (ʁ) LATIN LETTER SMALL CAPITAL INVERTED R	[1ED0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0281, 0x0062 };
    uint32_t const ces[9] = { 0x1ED0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_184)
{
    // 02B6 0062;	
    // (ʶ) MODIFIER LETTER SMALL CAPITAL INVERTED R	[1ED0 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B6, 0x0062 };
    uint32_t const ces[9] = { 0x1ED0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_185)
{
    // A775 0021;	
    // (ꝵ) LATIN SMALL LETTER RUM	[1ED4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA775, 0x0021 };
    uint32_t const ces[9] = { 0x1ED4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_186)
{
    // A775 003F;	
    // (ꝵ) LATIN SMALL LETTER RUM	[1ED4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA775, 0x003F };
    uint32_t const ces[9] = { 0x1ED4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_187)
{
    // A775 0061;	
    // (ꝵ) LATIN SMALL LETTER RUM	[1ED4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA775, 0x0061 };
    uint32_t const ces[9] = { 0x1ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_188)
{
    // A775 0041;	
    // (ꝵ) LATIN SMALL LETTER RUM	[1ED4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA775, 0x0041 };
    uint32_t const ces[9] = { 0x1ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_189)
{
    // A775 0062;	
    // (ꝵ) LATIN SMALL LETTER RUM	[1ED4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA775, 0x0062 };
    uint32_t const ces[9] = { 0x1ED4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_190)
{
    // A776 0021;	
    // (ꝶ) LATIN LETTER SMALL CAPITAL RUM	[1ED5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA776, 0x0021 };
    uint32_t const ces[9] = { 0x1ED5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_191)
{
    // A776 003F;	
    // (ꝶ) LATIN LETTER SMALL CAPITAL RUM	[1ED5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA776, 0x003F };
    uint32_t const ces[9] = { 0x1ED5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_192)
{
    // A776 0061;	
    // (ꝶ) LATIN LETTER SMALL CAPITAL RUM	[1ED5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA776, 0x0061 };
    uint32_t const ces[9] = { 0x1ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_193)
{
    // A776 0041;	
    // (ꝶ) LATIN LETTER SMALL CAPITAL RUM	[1ED5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA776, 0x0041 };
    uint32_t const ces[9] = { 0x1ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_194)
{
    // A776 0062;	
    // (ꝶ) LATIN LETTER SMALL CAPITAL RUM	[1ED5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA776, 0x0062 };
    uint32_t const ces[9] = { 0x1ED5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_195)
{
    // A75D 0021;	
    // (ꝝ) LATIN SMALL LETTER RUM ROTUNDA	[1ED6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75D, 0x0021 };
    uint32_t const ces[9] = { 0x1ED6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_196)
{
    // A75C 0021;	
    // (Ꝝ) LATIN CAPITAL LETTER RUM ROTUNDA	[1ED6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75C, 0x0021 };
    uint32_t const ces[9] = { 0x1ED6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_197)
{
    // A75D 003F;	
    // (ꝝ) LATIN SMALL LETTER RUM ROTUNDA	[1ED6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75D, 0x003F };
    uint32_t const ces[9] = { 0x1ED6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_198)
{
    // A75C 003F;	
    // (Ꝝ) LATIN CAPITAL LETTER RUM ROTUNDA	[1ED6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75C, 0x003F };
    uint32_t const ces[9] = { 0x1ED6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_199)
{
    // A75D 0061;	
    // (ꝝ) LATIN SMALL LETTER RUM ROTUNDA	[1ED6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75D, 0x0061 };
    uint32_t const ces[9] = { 0x1ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_200)
{
    // A75D 0041;	
    // (ꝝ) LATIN SMALL LETTER RUM ROTUNDA	[1ED6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA75D, 0x0041 };
    uint32_t const ces[9] = { 0x1ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_201)
{
    // A75C 0061;	
    // (Ꝝ) LATIN CAPITAL LETTER RUM ROTUNDA	[1ED6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75C, 0x0061 };
    uint32_t const ces[9] = { 0x1ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_202)
{
    // A75C 0041;	
    // (Ꝝ) LATIN CAPITAL LETTER RUM ROTUNDA	[1ED6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA75C, 0x0041 };
    uint32_t const ces[9] = { 0x1ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_203)
{
    // A75D 0062;	
    // (ꝝ) LATIN SMALL LETTER RUM ROTUNDA	[1ED6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA75D, 0x0062 };
    uint32_t const ces[9] = { 0x1ED6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_204)
{
    // A75C 0062;	
    // (Ꝝ) LATIN CAPITAL LETTER RUM ROTUNDA	[1ED6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA75C, 0x0062 };
    uint32_t const ces[9] = { 0x1ED6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_205)
{
    // 0073 0301 0334;	
    // (ś) LATIN SMALL LETTER S, COMBINING ACUTE ACCENT	[1ED7 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_206)
{
    // 0073 0334 0301;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_207)
{
    // 0073 0334 0341;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_208)
{
    // 0073 0341 0334;	
    // (ś) LATIN SMALL LETTER S, COMBINING ACUTE TONE MARK	[1ED7 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_209)
{
    // 0053 0301 0334;	
    // (Ś) LATIN CAPITAL LETTER S, COMBINING ACUTE ACCENT	[1ED7 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_210)
{
    // 0053 0334 0301;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_211)
{
    // 0053 0334 0341;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_212)
{
    // 0053 0341 0334;	
    // (Ś) LATIN CAPITAL LETTER S, COMBINING ACUTE TONE MARK	[1ED7 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_213)
{
    // 0073 0301 0307 0334;	
    // (ṥ) LATIN SMALL LETTER S, COMBINING ACUTE ACCENT, COMBINING DOT ABOVE	[1ED7 | 0020 004A 0024 002E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0073, 0x0301, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_214)
{
    // 0073 0334 0301 0307;	
    // (ś̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY, COMBINING ACUTE ACCENT	[1ED7 | 0020 004A 0024 002E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0073, 0x0334, 0x0301, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_215)
{
    // 0073 0334 0341 0307;	
    // (ś̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY, COMBINING ACUTE TONE MARK	[1ED7 | 0020 004A 0024 002E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0073, 0x0334, 0x0341, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_216)
{
    // 0073 0341 0334 0307;	
    // (ś̴) LATIN SMALL LETTER S, COMBINING ACUTE TONE MARK, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0024 002E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0073, 0x0341, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_217)
{
    // 0053 0301 0334 0307;	
    // (Ś̴) LATIN CAPITAL LETTER S, COMBINING ACUTE ACCENT, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0024 002E | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0053, 0x0301, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_218)
{
    // 0053 0341 0334 0307;	
    // (Ś̴) LATIN CAPITAL LETTER S, COMBINING ACUTE TONE MARK, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0024 002E | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0053, 0x0341, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_219)
{
    // 015A 0307 0334;	
    // (Ṥ) LATIN CAPITAL LETTER S WITH ACUTE, COMBINING DOT ABOVE	[1ED7 | 0020 004A 0024 002E | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x015A, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_220)
{
    // 1E64 0334;	
    // (Ṥ) LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 | 0020 004A 0024 002E | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E64, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0024, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_221)
{
    // 0073 0302 0334;	
    // (ŝ) LATIN SMALL LETTER S, COMBINING CIRCUMFLEX ACCENT	[1ED7 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_222)
{
    // 0073 0334 0302;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_223)
{
    // 015D 0334;	
    // (ŝ) LATIN SMALL LETTER S WITH CIRCUMFLEX	[1ED7 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015D, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_224)
{
    // 0053 0302 0334;	
    // (Ŝ) LATIN CAPITAL LETTER S, COMBINING CIRCUMFLEX ACCENT	[1ED7 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_225)
{
    // 0053 0334 0302;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_226)
{
    // 015C 0334;	
    // (Ŝ) LATIN CAPITAL LETTER S WITH CIRCUMFLEX	[1ED7 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015C, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_227)
{
    // 0073 030C 0334;	
    // (š) LATIN SMALL LETTER S, COMBINING CARON	[1ED7 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_228)
{
    // 0073 0334 030C;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_229)
{
    // 0161 0334;	
    // (š) LATIN SMALL LETTER S WITH CARON	[1ED7 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0161, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_230)
{
    // 0053 030C 0334;	
    // (Š) LATIN CAPITAL LETTER S, COMBINING CARON	[1ED7 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_231)
{
    // 0053 0334 030C;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_232)
{
    // 0160 0334;	
    // (Š) LATIN CAPITAL LETTER S WITH CARON	[1ED7 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0160, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_233)
{
    // 0073 030C 0307 0334;	
    // (ṧ) LATIN SMALL LETTER S, COMBINING CARON, COMBINING DOT ABOVE	[1ED7 | 0020 004A 0028 002E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0073, 0x030C, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_234)
{
    // 0073 030C 0334 0307;	
    // (š̴) LATIN SMALL LETTER S, COMBINING CARON, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0028 002E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0073, 0x030C, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_235)
{
    // 0161 0307 0334;	
    // (ṧ) LATIN SMALL LETTER S WITH CARON, COMBINING DOT ABOVE	[1ED7 | 0020 004A 0028 002E | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0161, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_236)
{
    // 0161 0334 0307;	
    // (š̴) LATIN SMALL LETTER S WITH CARON, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0028 002E | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0161, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_237)
{
    // 0053 030C 0307 0334;	
    // (Ṧ) LATIN CAPITAL LETTER S, COMBINING CARON, COMBINING DOT ABOVE	[1ED7 | 0020 004A 0028 002E | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0053, 0x030C, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_238)
{
    // 0160 0307 0334;	
    // (Ṧ) LATIN CAPITAL LETTER S WITH CARON, COMBINING DOT ABOVE	[1ED7 | 0020 004A 0028 002E | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0160, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_239)
{
    // 0160 0334 0307;	
    // (Š̴) LATIN CAPITAL LETTER S WITH CARON, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0028 002E | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0160, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_240)
{
    // 1E66 0334;	
    // (Ṧ) LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE	[1ED7 | 0020 004A 0028 002E | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E66, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0028, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_241)
{
    // 0073 0307 0334;	
    // (ṡ) LATIN SMALL LETTER S, COMBINING DOT ABOVE	[1ED7 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_242)
{
    // 0073 0334 0307;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_243)
{
    // 1E61 0334;	
    // (ṡ) LATIN SMALL LETTER S WITH DOT ABOVE	[1ED7 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E61, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_244)
{
    // 0053 0307 0334;	
    // (Ṡ) LATIN CAPITAL LETTER S, COMBINING DOT ABOVE	[1ED7 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_245)
{
    // 0053 0334 0307;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_246)
{
    // 1E60 0334;	
    // (Ṡ) LATIN CAPITAL LETTER S WITH DOT ABOVE	[1ED7 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E60, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_247)
{
    // 0073 0327 0334;	
    // (ş) LATIN SMALL LETTER S, COMBINING CEDILLA	[1ED7 | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_248)
{
    // 0073 0334 0327;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_249)
{
    // 015F 0334;	
    // (ş) LATIN SMALL LETTER S WITH CEDILLA	[1ED7 | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015F, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_250)
{
    // 0053 0327 0334;	
    // (Ş) LATIN CAPITAL LETTER S, COMBINING CEDILLA	[1ED7 | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_251)
{
    // 0053 0334 0327;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_252)
{
    // 015E 0334;	
    // (Ş) LATIN CAPITAL LETTER S WITH CEDILLA	[1ED7 | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015E, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_253)
{
    // 0073 0323 0334;	
    // (ṣ) LATIN SMALL LETTER S, COMBINING DOT BELOW	[1ED7 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_254)
{
    // 0073 0334 0323;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_255)
{
    // 1E63 0334;	
    // (ṣ) LATIN SMALL LETTER S WITH DOT BELOW	[1ED7 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E63, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_256)
{
    // 0053 0323 0334;	
    // (Ṣ) LATIN CAPITAL LETTER S, COMBINING DOT BELOW	[1ED7 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_257)
{
    // 0053 0334 0323;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_258)
{
    // 1E62 0334;	
    // (Ṣ) LATIN CAPITAL LETTER S WITH DOT BELOW	[1ED7 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E62, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_259)
{
    // 0073 0323 0334 0307;	
    // (ṣ̴) LATIN SMALL LETTER S, COMBINING DOT BELOW, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0042 002E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0073, 0x0323, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_260)
{
    // 1E61 0323 0334;	
    // (ṩ) LATIN SMALL LETTER S WITH DOT ABOVE, COMBINING DOT BELOW	[1ED7 | 0020 004A 0042 002E | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1E61, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_261)
{
    // 1E61 0334 0323;	
    // (ṡ̴) LATIN SMALL LETTER S WITH DOT ABOVE, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0042 002E | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1E61, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_262)
{
    // 1E63 0307 0334;	
    // (ṩ) LATIN SMALL LETTER S WITH DOT BELOW, COMBINING DOT ABOVE	[1ED7 | 0020 004A 0042 002E | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1E63, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_263)
{
    // 0053 0307 0323 0334;	
    // (Ṩ) LATIN CAPITAL LETTER S, COMBINING DOT ABOVE, COMBINING DOT BELOW	[1ED7 | 0020 004A 0042 002E | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0053, 0x0307, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_264)
{
    // 0053 0307 0334 0323;	
    // (Ṡ̴) LATIN CAPITAL LETTER S, COMBINING DOT ABOVE, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0042 002E | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0053, 0x0307, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_265)
{
    // 0053 0323 0334 0307;	
    // (Ṣ̴) LATIN CAPITAL LETTER S, COMBINING DOT BELOW, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0042 002E | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0053, 0x0323, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_266)
{
    // 1E60 0323 0334;	
    // (Ṩ) LATIN CAPITAL LETTER S WITH DOT ABOVE, COMBINING DOT BELOW	[1ED7 | 0020 004A 0042 002E | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1E60, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0042, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_267)
{
    // 0073 0326 0334;	
    // (ș) LATIN SMALL LETTER S, COMBINING COMMA BELOW	[1ED7 | 0020 004A 0045 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0326, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0045, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_268)
{
    // 0073 0334 0326;	
    // (s̴) LATIN SMALL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0045 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0073, 0x0334, 0x0326 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0045, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_269)
{
    // 0219 0334;	
    // (ș) LATIN SMALL LETTER S WITH COMMA BELOW	[1ED7 | 0020 004A 0045 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0219, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0045, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_270)
{
    // 0053 0326 0334;	
    // (Ș) LATIN CAPITAL LETTER S, COMBINING COMMA BELOW	[1ED7 | 0020 004A 0045 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0326, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0045, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_271)
{
    // 0053 0334 0326;	
    // (S̴) LATIN CAPITAL LETTER S, COMBINING TILDE OVERLAY	[1ED7 | 0020 004A 0045 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0053, 0x0334, 0x0326 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0045, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_272)
{
    // 0218 0334;	
    // (Ș) LATIN CAPITAL LETTER S WITH COMMA BELOW	[1ED7 | 0020 004A 0045 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0218, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x0020, 0x004A, 0x0045, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_273)
{
    // 017F 0307 0334;	
    // (ẛ) LATIN SMALL LETTER LONG S, COMBINING DOT ABOVE	[1ED7 | 0020 0112 004A 002E | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x017F, 0x0307, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x0112, 0x004A, 0x002E, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_274)
{
    // 017F 0334 0307;	
    // (ſ̴) LATIN SMALL LETTER LONG S, COMBINING TILDE OVERLAY	[1ED7 | 0020 0112 004A 002E | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x017F, 0x0334, 0x0307 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x0112, 0x004A, 0x002E, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_275)
{
    // 1E9B 0334;	
    // (ẛ) LATIN SMALL LETTER LONG S WITH DOT ABOVE	[1ED7 | 0020 0112 004A 002E | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0x1E9B, 0x0334 };
    uint32_t const ces[12] = { 0x1ED7, 0x0000, 0x0020, 0x0112, 0x004A, 0x002E, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_276)
{
    // 0334 1DE4;	
    // (ᷤ) COMBINING LATIN SMALL LETTER S	[1ED7 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DE4 };
    uint32_t const ces[8] = { 0x1ED7, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_277)
{
    // 1DE4 0334;	
    // (ᷤ) COMBINING LATIN SMALL LETTER S	[1ED7 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DE4, 0x0334 };
    uint32_t const ces[8] = { 0x1ED7, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_278)
{
    // 0334 1DE5;	
    // (ᷥ) COMBINING LATIN SMALL LETTER LONG S	[1ED7 | 004A 0020 0112 | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DE5 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x004A, 0x0020, 0x0112, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_279)
{
    // 1DE5 0334;	
    // (ᷥ) COMBINING LATIN SMALL LETTER LONG S	[1ED7 | 004A 0020 0112 | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x1DE5, 0x0334 };
    uint32_t const ces[10] = { 0x1ED7, 0x0000, 0x004A, 0x0020, 0x0112, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_280)
{
    // 0073 0021;	
    // (s) LATIN SMALL LETTER S	[1ED7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0073, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_281)
{
    // FF53 0021;	
    // (ｓ) FULLWIDTH LATIN SMALL LETTER S	[1ED7 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF53, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_282)
{
    // 1DE4 0021;	
    // (ᷤ) COMBINING LATIN SMALL LETTER S	[1ED7 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE4, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_283)
{
    // 1D42C 0021;	
    // (𝐬) MATHEMATICAL BOLD SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42C, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_284)
{
    // 1D460 0021;	
    // (𝑠) MATHEMATICAL ITALIC SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D460, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_285)
{
    // 1D494 0021;	
    // (𝒔) MATHEMATICAL BOLD ITALIC SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D494, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_286)
{
    // 1D4C8 0021;	
    // (𝓈) MATHEMATICAL SCRIPT SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C8, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_287)
{
    // 1D4FC 0021;	
    // (𝓼) MATHEMATICAL BOLD SCRIPT SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FC, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_288)
{
    // 1D530 0021;	
    // (𝔰) MATHEMATICAL FRAKTUR SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D530, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_289)
{
    // 1D564 0021;	
    // (𝕤) MATHEMATICAL DOUBLE-STRUCK SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D564, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_290)
{
    // 1D598 0021;	
    // (𝖘) MATHEMATICAL BOLD FRAKTUR SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D598, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_291)
{
    // 1D5CC 0021;	
    // (𝗌) MATHEMATICAL SANS-SERIF SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CC, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_292)
{
    // 1D600 0021;	
    // (𝘀) MATHEMATICAL SANS-SERIF BOLD SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D600, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_293)
{
    // 1D634 0021;	
    // (𝘴) MATHEMATICAL SANS-SERIF ITALIC SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D634, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_294)
{
    // 1D668 0021;	
    // (𝙨) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D668, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_295)
{
    // 1D69C 0021;	
    // (𝚜) MATHEMATICAL MONOSPACE SMALL S	[1ED7 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69C, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_296)
{
    // 24E2 0021;	
    // (ⓢ) CIRCLED LATIN SMALL LETTER S	[1ED7 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E2, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_297)
{
    // 0053 0021;	
    // (S) LATIN CAPITAL LETTER S	[1ED7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0053, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_298)
{
    // FF33 0021;	
    // (Ｓ) FULLWIDTH LATIN CAPITAL LETTER S	[1ED7 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF33, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_299)
{
    // 1D412 0021;	
    // (𝐒) MATHEMATICAL BOLD CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D412, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_300)
{
    // 1D446 0021;	
    // (𝑆) MATHEMATICAL ITALIC CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D446, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_301)
{
    // 1D47A 0021;	
    // (𝑺) MATHEMATICAL BOLD ITALIC CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D47A, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_302)
{
    // 1D4AE 0021;	
    // (𝒮) MATHEMATICAL SCRIPT CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AE, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_303)
{
    // 1D4E2 0021;	
    // (𝓢) MATHEMATICAL BOLD SCRIPT CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E2, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_304)
{
    // 1D516 0021;	
    // (𝔖) MATHEMATICAL FRAKTUR CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D516, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_305)
{
    // 1D54A 0021;	
    // (𝕊) MATHEMATICAL DOUBLE-STRUCK CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D54A, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_306)
{
    // 1D57E 0021;	
    // (𝕾) MATHEMATICAL BOLD FRAKTUR CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57E, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_307)
{
    // 1D5B2 0021;	
    // (𝖲) MATHEMATICAL SANS-SERIF CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B2, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_308)
{
    // 1D5E6 0021;	
    // (𝗦) MATHEMATICAL SANS-SERIF BOLD CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E6, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_309)
{
    // 1D61A 0021;	
    // (𝘚) MATHEMATICAL SANS-SERIF ITALIC CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D61A, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_310)
{
    // 1D64E 0021;	
    // (𝙎) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64E, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_311)
{
    // 1D682 0021;	
    // (𝚂) MATHEMATICAL MONOSPACE CAPITAL S	[1ED7 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D682, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_312)
{
    // 24C8 0021;	
    // (Ⓢ) CIRCLED LATIN CAPITAL LETTER S	[1ED7 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C8, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_313)
{
    // 1F162 0021;	
    // (🅢) NEGATIVE CIRCLED LATIN CAPITAL LETTER S	[1ED7 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F162, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_314)
{
    // 02E2 0021;	
    // (ˢ) MODIFIER LETTER SMALL S	[1ED7 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E2, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_315)
{
    // 209B 0021;	
    // (ₛ) LATIN SUBSCRIPT SMALL LETTER S	[1ED7 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x209B, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_316)
{
    // 1F142 0021;	
    // (🅂) SQUARED LATIN CAPITAL LETTER S	[1ED7 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F142, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_317)
{
    // 1F182 0021;	
    // (🆂) NEGATIVE SQUARED LATIN CAPITAL LETTER S	[1ED7 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F182, 0x0021 };
    uint32_t const ces[9] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_318)
{
    // 015B 0021;	
    // (ś) LATIN SMALL LETTER S WITH ACUTE	[1ED7 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015B, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_319)
{
    // 015A 0021;	
    // (Ś) LATIN CAPITAL LETTER S WITH ACUTE	[1ED7 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015A, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_320)
{
    // 1E65 0021;	
    // (ṥ) LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 0261 | 0020 0024 002E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E65, 0x0021 };
    uint32_t const ces[13] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_321)
{
    // 1E64 0021;	
    // (Ṥ) LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 0261 | 0020 0024 002E 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E64, 0x0021 };
    uint32_t const ces[13] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_322)
{
    // 015D 0021;	
    // (ŝ) LATIN SMALL LETTER S WITH CIRCUMFLEX	[1ED7 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015D, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_323)
{
    // 015C 0021;	
    // (Ŝ) LATIN CAPITAL LETTER S WITH CIRCUMFLEX	[1ED7 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015C, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_324)
{
    // 0161 0021;	
    // (š) LATIN SMALL LETTER S WITH CARON	[1ED7 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0161, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_325)
{
    // 0160 0021;	
    // (Š) LATIN CAPITAL LETTER S WITH CARON	[1ED7 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0160, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_326)
{
    // 1E67 0021;	
    // (ṧ) LATIN SMALL LETTER S WITH CARON AND DOT ABOVE	[1ED7 0261 | 0020 0028 002E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E67, 0x0021 };
    uint32_t const ces[13] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0028, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_327)
{
    // 1E66 0021;	
    // (Ṧ) LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE	[1ED7 0261 | 0020 0028 002E 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E66, 0x0021 };
    uint32_t const ces[13] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0028, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_328)
{
    // 1E61 0021;	
    // (ṡ) LATIN SMALL LETTER S WITH DOT ABOVE	[1ED7 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E61, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_329)
{
    // 1E60 0021;	
    // (Ṡ) LATIN CAPITAL LETTER S WITH DOT ABOVE	[1ED7 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E60, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_330)
{
    // 015F 0021;	
    // (ş) LATIN SMALL LETTER S WITH CEDILLA	[1ED7 0261 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015F, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_331)
{
    // 015E 0021;	
    // (Ş) LATIN CAPITAL LETTER S WITH CEDILLA	[1ED7 0261 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015E, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_332)
{
    // A7A9 0021;	
    // (ꞩ) LATIN SMALL LETTER S WITH OBLIQUE STROKE	[1ED7 0261 | 0020 0035 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA7A9, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_333)
{
    // A7A8 0021;	
    // (Ꞩ) LATIN CAPITAL LETTER S WITH OBLIQUE STROKE	[1ED7 0261 | 0020 0035 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA7A8, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_334)
{
    // 1E63 0021;	
    // (ṣ) LATIN SMALL LETTER S WITH DOT BELOW	[1ED7 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E63, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_335)
{
    // 1E62 0021;	
    // (Ṣ) LATIN CAPITAL LETTER S WITH DOT BELOW	[1ED7 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E62, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_336)
{
    // 1E69 0021;	
    // (ṩ) LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE	[1ED7 0261 | 0020 0042 002E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E69, 0x0021 };
    uint32_t const ces[13] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0042, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_337)
{
    // 1E68 0021;	
    // (Ṩ) LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE	[1ED7 0261 | 0020 0042 002E 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E68, 0x0021 };
    uint32_t const ces[13] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0042, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_338)
{
    // 0219 0021;	
    // (ș) LATIN SMALL LETTER S WITH COMMA BELOW	[1ED7 0261 | 0020 0045 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0219, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0045, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_339)
{
    // 0218 0021;	
    // (Ș) LATIN CAPITAL LETTER S WITH COMMA BELOW	[1ED7 0261 | 0020 0045 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0218, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0045, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_340)
{
    // 017F 0021;	
    // (ſ) LATIN SMALL LETTER LONG S	[1ED7 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x017F, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_341)
{
    // 1DE5 0021;	
    // (ᷥ) COMBINING LATIN SMALL LETTER LONG S	[1ED7 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DE5, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_342)
{
    // A785 0021;	
    // (ꞅ) LATIN SMALL LETTER INSULAR S	[1ED7 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA785, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_343)
{
    // A784 0021;	
    // (Ꞅ) LATIN CAPITAL LETTER INSULAR S	[1ED7 0261 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA784, 0x0021 };
    uint32_t const ces[11] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_344)
{
    // 1E9B 0021;	
    // (ẛ) LATIN SMALL LETTER LONG S WITH DOT ABOVE	[1ED7 0261 | 0020 0112 002E 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0x1E9B, 0x0021 };
    uint32_t const ces[13] = { 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0112, 0x002E, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_345)
{
    // 0073 003F;	
    // (s) LATIN SMALL LETTER S	[1ED7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0073, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_346)
{
    // FF53 003F;	
    // (ｓ) FULLWIDTH LATIN SMALL LETTER S	[1ED7 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF53, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_347)
{
    // 1DE4 003F;	
    // (ᷤ) COMBINING LATIN SMALL LETTER S	[1ED7 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE4, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_348)
{
    // 1D42C 003F;	
    // (𝐬) MATHEMATICAL BOLD SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42C, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_349)
{
    // 1D460 003F;	
    // (𝑠) MATHEMATICAL ITALIC SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D460, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_350)
{
    // 1D494 003F;	
    // (𝒔) MATHEMATICAL BOLD ITALIC SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D494, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_351)
{
    // 1D4C8 003F;	
    // (𝓈) MATHEMATICAL SCRIPT SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C8, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_352)
{
    // 1D4FC 003F;	
    // (𝓼) MATHEMATICAL BOLD SCRIPT SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FC, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_353)
{
    // 1D530 003F;	
    // (𝔰) MATHEMATICAL FRAKTUR SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D530, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_354)
{
    // 1D564 003F;	
    // (𝕤) MATHEMATICAL DOUBLE-STRUCK SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D564, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_355)
{
    // 1D598 003F;	
    // (𝖘) MATHEMATICAL BOLD FRAKTUR SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D598, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_356)
{
    // 1D5CC 003F;	
    // (𝗌) MATHEMATICAL SANS-SERIF SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CC, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_357)
{
    // 1D600 003F;	
    // (𝘀) MATHEMATICAL SANS-SERIF BOLD SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D600, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_358)
{
    // 1D634 003F;	
    // (𝘴) MATHEMATICAL SANS-SERIF ITALIC SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D634, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_359)
{
    // 1D668 003F;	
    // (𝙨) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D668, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_360)
{
    // 1D69C 003F;	
    // (𝚜) MATHEMATICAL MONOSPACE SMALL S	[1ED7 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69C, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_361)
{
    // 24E2 003F;	
    // (ⓢ) CIRCLED LATIN SMALL LETTER S	[1ED7 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E2, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_362)
{
    // 0053 003F;	
    // (S) LATIN CAPITAL LETTER S	[1ED7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0053, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_363)
{
    // FF33 003F;	
    // (Ｓ) FULLWIDTH LATIN CAPITAL LETTER S	[1ED7 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF33, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_364)
{
    // 1D412 003F;	
    // (𝐒) MATHEMATICAL BOLD CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D412, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_365)
{
    // 1D446 003F;	
    // (𝑆) MATHEMATICAL ITALIC CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D446, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_366)
{
    // 1D47A 003F;	
    // (𝑺) MATHEMATICAL BOLD ITALIC CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D47A, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_367)
{
    // 1D4AE 003F;	
    // (𝒮) MATHEMATICAL SCRIPT CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AE, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_368)
{
    // 1D4E2 003F;	
    // (𝓢) MATHEMATICAL BOLD SCRIPT CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E2, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_369)
{
    // 1D516 003F;	
    // (𝔖) MATHEMATICAL FRAKTUR CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D516, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_370)
{
    // 1D54A 003F;	
    // (𝕊) MATHEMATICAL DOUBLE-STRUCK CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D54A, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_371)
{
    // 1D57E 003F;	
    // (𝕾) MATHEMATICAL BOLD FRAKTUR CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57E, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_372)
{
    // 1D5B2 003F;	
    // (𝖲) MATHEMATICAL SANS-SERIF CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B2, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_373)
{
    // 1D5E6 003F;	
    // (𝗦) MATHEMATICAL SANS-SERIF BOLD CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E6, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_374)
{
    // 1D61A 003F;	
    // (𝘚) MATHEMATICAL SANS-SERIF ITALIC CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D61A, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_375)
{
    // 1D64E 003F;	
    // (𝙎) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64E, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_376)
{
    // 1D682 003F;	
    // (𝚂) MATHEMATICAL MONOSPACE CAPITAL S	[1ED7 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D682, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_377)
{
    // 24C8 003F;	
    // (Ⓢ) CIRCLED LATIN CAPITAL LETTER S	[1ED7 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C8, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_378)
{
    // 1F162 003F;	
    // (🅢) NEGATIVE CIRCLED LATIN CAPITAL LETTER S	[1ED7 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F162, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_379)
{
    // 02E2 003F;	
    // (ˢ) MODIFIER LETTER SMALL S	[1ED7 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E2, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_380)
{
    // 209B 003F;	
    // (ₛ) LATIN SUBSCRIPT SMALL LETTER S	[1ED7 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x209B, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_381)
{
    // 1F142 003F;	
    // (🅂) SQUARED LATIN CAPITAL LETTER S	[1ED7 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F142, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_382)
{
    // 1F182 003F;	
    // (🆂) NEGATIVE SQUARED LATIN CAPITAL LETTER S	[1ED7 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F182, 0x003F };
    uint32_t const ces[9] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_383)
{
    // 015B 003F;	
    // (ś) LATIN SMALL LETTER S WITH ACUTE	[1ED7 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015B, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_384)
{
    // 015A 003F;	
    // (Ś) LATIN CAPITAL LETTER S WITH ACUTE	[1ED7 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015A, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_385)
{
    // 1E65 003F;	
    // (ṥ) LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 0267 | 0020 0024 002E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E65, 0x003F };
    uint32_t const ces[13] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_386)
{
    // 1E64 003F;	
    // (Ṥ) LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 0267 | 0020 0024 002E 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E64, 0x003F };
    uint32_t const ces[13] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_387)
{
    // 015D 003F;	
    // (ŝ) LATIN SMALL LETTER S WITH CIRCUMFLEX	[1ED7 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015D, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_388)
{
    // 015C 003F;	
    // (Ŝ) LATIN CAPITAL LETTER S WITH CIRCUMFLEX	[1ED7 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015C, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_389)
{
    // 0161 003F;	
    // (š) LATIN SMALL LETTER S WITH CARON	[1ED7 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0161, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_390)
{
    // 0160 003F;	
    // (Š) LATIN CAPITAL LETTER S WITH CARON	[1ED7 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0160, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_391)
{
    // 1E67 003F;	
    // (ṧ) LATIN SMALL LETTER S WITH CARON AND DOT ABOVE	[1ED7 0267 | 0020 0028 002E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E67, 0x003F };
    uint32_t const ces[13] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0028, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_392)
{
    // 1E66 003F;	
    // (Ṧ) LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE	[1ED7 0267 | 0020 0028 002E 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E66, 0x003F };
    uint32_t const ces[13] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0028, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_393)
{
    // 1E61 003F;	
    // (ṡ) LATIN SMALL LETTER S WITH DOT ABOVE	[1ED7 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E61, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_394)
{
    // 1E60 003F;	
    // (Ṡ) LATIN CAPITAL LETTER S WITH DOT ABOVE	[1ED7 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E60, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_395)
{
    // 015F 003F;	
    // (ş) LATIN SMALL LETTER S WITH CEDILLA	[1ED7 0267 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015F, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_396)
{
    // 015E 003F;	
    // (Ş) LATIN CAPITAL LETTER S WITH CEDILLA	[1ED7 0267 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015E, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_397)
{
    // A7A9 003F;	
    // (ꞩ) LATIN SMALL LETTER S WITH OBLIQUE STROKE	[1ED7 0267 | 0020 0035 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA7A9, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_398)
{
    // A7A8 003F;	
    // (Ꞩ) LATIN CAPITAL LETTER S WITH OBLIQUE STROKE	[1ED7 0267 | 0020 0035 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA7A8, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_399)
{
    // 1E63 003F;	
    // (ṣ) LATIN SMALL LETTER S WITH DOT BELOW	[1ED7 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E63, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_400)
{
    // 1E62 003F;	
    // (Ṣ) LATIN CAPITAL LETTER S WITH DOT BELOW	[1ED7 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E62, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_401)
{
    // 1E69 003F;	
    // (ṩ) LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE	[1ED7 0267 | 0020 0042 002E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E69, 0x003F };
    uint32_t const ces[13] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0042, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_402)
{
    // 1E68 003F;	
    // (Ṩ) LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE	[1ED7 0267 | 0020 0042 002E 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E68, 0x003F };
    uint32_t const ces[13] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0042, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_403)
{
    // 0219 003F;	
    // (ș) LATIN SMALL LETTER S WITH COMMA BELOW	[1ED7 0267 | 0020 0045 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0219, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0045, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_404)
{
    // 0218 003F;	
    // (Ș) LATIN CAPITAL LETTER S WITH COMMA BELOW	[1ED7 0267 | 0020 0045 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0218, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0045, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_405)
{
    // 017F 003F;	
    // (ſ) LATIN SMALL LETTER LONG S	[1ED7 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x017F, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_406)
{
    // 1DE5 003F;	
    // (ᷥ) COMBINING LATIN SMALL LETTER LONG S	[1ED7 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DE5, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_407)
{
    // A785 003F;	
    // (ꞅ) LATIN SMALL LETTER INSULAR S	[1ED7 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA785, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_408)
{
    // A784 003F;	
    // (Ꞅ) LATIN CAPITAL LETTER INSULAR S	[1ED7 0267 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA784, 0x003F };
    uint32_t const ces[11] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_409)
{
    // 1E9B 003F;	
    // (ẛ) LATIN SMALL LETTER LONG S WITH DOT ABOVE	[1ED7 0267 | 0020 0112 002E 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0x1E9B, 0x003F };
    uint32_t const ces[13] = { 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0112, 0x002E, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_410)
{
    // 0073 0061;	
    // (s) LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0073, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_411)
{
    // 0073 0041;	
    // (s) LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0073, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_412)
{
    // FF53 0061;	
    // (ｓ) FULLWIDTH LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF53, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_413)
{
    // FF53 0041;	
    // (ｓ) FULLWIDTH LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF53, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_414)
{
    // 1DE4 0061;	
    // (ᷤ) COMBINING LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE4, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_415)
{
    // 1DE4 0041;	
    // (ᷤ) COMBINING LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DE4, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_416)
{
    // 1D42C 0061;	
    // (𝐬) MATHEMATICAL BOLD SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42C, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_417)
{
    // 1D460 0061;	
    // (𝑠) MATHEMATICAL ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D460, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_418)
{
    // 1D494 0061;	
    // (𝒔) MATHEMATICAL BOLD ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D494, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_419)
{
    // 1D4C8 0061;	
    // (𝓈) MATHEMATICAL SCRIPT SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C8, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_420)
{
    // 1D4FC 0061;	
    // (𝓼) MATHEMATICAL BOLD SCRIPT SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FC, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_421)
{
    // 1D530 0061;	
    // (𝔰) MATHEMATICAL FRAKTUR SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D530, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_422)
{
    // 1D564 0061;	
    // (𝕤) MATHEMATICAL DOUBLE-STRUCK SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D564, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_423)
{
    // 1D598 0061;	
    // (𝖘) MATHEMATICAL BOLD FRAKTUR SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D598, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_424)
{
    // 1D5CC 0061;	
    // (𝗌) MATHEMATICAL SANS-SERIF SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CC, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_425)
{
    // 1D600 0061;	
    // (𝘀) MATHEMATICAL SANS-SERIF BOLD SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D600, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_426)
{
    // 1D634 0061;	
    // (𝘴) MATHEMATICAL SANS-SERIF ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D634, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_427)
{
    // 1D668 0061;	
    // (𝙨) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D668, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_428)
{
    // 1D69C 0061;	
    // (𝚜) MATHEMATICAL MONOSPACE SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69C, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_429)
{
    // 1D42C 0041;	
    // (𝐬) MATHEMATICAL BOLD SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D42C, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_430)
{
    // 1D460 0041;	
    // (𝑠) MATHEMATICAL ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D460, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_431)
{
    // 1D494 0041;	
    // (𝒔) MATHEMATICAL BOLD ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D494, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_432)
{
    // 1D4C8 0041;	
    // (𝓈) MATHEMATICAL SCRIPT SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4C8, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_433)
{
    // 1D4FC 0041;	
    // (𝓼) MATHEMATICAL BOLD SCRIPT SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4FC, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_434)
{
    // 1D530 0041;	
    // (𝔰) MATHEMATICAL FRAKTUR SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D530, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_435)
{
    // 1D564 0041;	
    // (𝕤) MATHEMATICAL DOUBLE-STRUCK SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D564, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_436)
{
    // 1D598 0041;	
    // (𝖘) MATHEMATICAL BOLD FRAKTUR SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D598, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_437)
{
    // 1D5CC 0041;	
    // (𝗌) MATHEMATICAL SANS-SERIF SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5CC, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_438)
{
    // 1D600 0041;	
    // (𝘀) MATHEMATICAL SANS-SERIF BOLD SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D600, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_439)
{
    // 1D634 0041;	
    // (𝘴) MATHEMATICAL SANS-SERIF ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D634, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_440)
{
    // 1D668 0041;	
    // (𝙨) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D668, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_441)
{
    // 1D69C 0041;	
    // (𝚜) MATHEMATICAL MONOSPACE SMALL S	[1ED7 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D69C, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_442)
{
    // 24E2 0061;	
    // (ⓢ) CIRCLED LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E2, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_443)
{
    // 24E2 0041;	
    // (ⓢ) CIRCLED LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24E2, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_444)
{
    // 0053 0061;	
    // (S) LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0053, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_445)
{
    // 0053 0041;	
    // (S) LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0053, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_446)
{
    // FF33 0061;	
    // (Ｓ) FULLWIDTH LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF33, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_447)
{
    // FF33 0041;	
    // (Ｓ) FULLWIDTH LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF33, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_448)
{
    // 1D412 0061;	
    // (𝐒) MATHEMATICAL BOLD CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D412, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_449)
{
    // 1D446 0061;	
    // (𝑆) MATHEMATICAL ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D446, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_450)
{
    // 1D47A 0061;	
    // (𝑺) MATHEMATICAL BOLD ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D47A, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_451)
{
    // 1D4AE 0061;	
    // (𝒮) MATHEMATICAL SCRIPT CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AE, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_452)
{
    // 1D4E2 0061;	
    // (𝓢) MATHEMATICAL BOLD SCRIPT CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E2, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_453)
{
    // 1D516 0061;	
    // (𝔖) MATHEMATICAL FRAKTUR CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D516, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_454)
{
    // 1D54A 0061;	
    // (𝕊) MATHEMATICAL DOUBLE-STRUCK CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D54A, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_455)
{
    // 1D57E 0061;	
    // (𝕾) MATHEMATICAL BOLD FRAKTUR CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57E, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_456)
{
    // 1D5B2 0061;	
    // (𝖲) MATHEMATICAL SANS-SERIF CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B2, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_457)
{
    // 1D5E6 0061;	
    // (𝗦) MATHEMATICAL SANS-SERIF BOLD CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E6, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_458)
{
    // 1D61A 0061;	
    // (𝘚) MATHEMATICAL SANS-SERIF ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D61A, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_459)
{
    // 1D64E 0061;	
    // (𝙎) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64E, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_460)
{
    // 1D682 0061;	
    // (𝚂) MATHEMATICAL MONOSPACE CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D682, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_461)
{
    // 1D412 0041;	
    // (𝐒) MATHEMATICAL BOLD CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D412, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_462)
{
    // 1D446 0041;	
    // (𝑆) MATHEMATICAL ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D446, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_463)
{
    // 1D47A 0041;	
    // (𝑺) MATHEMATICAL BOLD ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D47A, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_464)
{
    // 1D4AE 0041;	
    // (𝒮) MATHEMATICAL SCRIPT CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4AE, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_465)
{
    // 1D4E2 0041;	
    // (𝓢) MATHEMATICAL BOLD SCRIPT CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4E2, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_466)
{
    // 1D516 0041;	
    // (𝔖) MATHEMATICAL FRAKTUR CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D516, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_467)
{
    // 1D54A 0041;	
    // (𝕊) MATHEMATICAL DOUBLE-STRUCK CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D54A, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_468)
{
    // 1D57E 0041;	
    // (𝕾) MATHEMATICAL BOLD FRAKTUR CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D57E, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_469)
{
    // 1D5B2 0041;	
    // (𝖲) MATHEMATICAL SANS-SERIF CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5B2, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_470)
{
    // 1D5E6 0041;	
    // (𝗦) MATHEMATICAL SANS-SERIF BOLD CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5E6, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_471)
{
    // 1D61A 0041;	
    // (𝘚) MATHEMATICAL SANS-SERIF ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D61A, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_472)
{
    // 1D64E 0041;	
    // (𝙎) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D64E, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_473)
{
    // 1D682 0041;	
    // (𝚂) MATHEMATICAL MONOSPACE CAPITAL S	[1ED7 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D682, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_474)
{
    // 24C8 0061;	
    // (Ⓢ) CIRCLED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C8, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_475)
{
    // 1F162 0061;	
    // (🅢) NEGATIVE CIRCLED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F162, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_476)
{
    // 24C8 0041;	
    // (Ⓢ) CIRCLED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24C8, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_477)
{
    // 1F162 0041;	
    // (🅢) NEGATIVE CIRCLED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F162, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_478)
{
    // 02E2 0061;	
    // (ˢ) MODIFIER LETTER SMALL S	[1ED7 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E2, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_479)
{
    // 02E2 0041;	
    // (ˢ) MODIFIER LETTER SMALL S	[1ED7 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x02E2, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_480)
{
    // 209B 0061;	
    // (ₛ) LATIN SUBSCRIPT SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x209B, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_481)
{
    // 209B 0041;	
    // (ₛ) LATIN SUBSCRIPT SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x209B, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_482)
{
    // 1F142 0061;	
    // (🅂) SQUARED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F142, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_483)
{
    // 1F182 0061;	
    // (🆂) NEGATIVE SQUARED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F182, 0x0061 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_484)
{
    // 1F142 0041;	
    // (🅂) SQUARED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F142, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_485)
{
    // 1F182 0041;	
    // (🆂) NEGATIVE SQUARED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F182, 0x0041 };
    uint32_t const ces[9] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_486)
{
    // 015B 0061;	
    // (ś) LATIN SMALL LETTER S WITH ACUTE	[1ED7 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015B, 0x0061 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_487)
{
    // 015B 0041;	
    // (ś) LATIN SMALL LETTER S WITH ACUTE	[1ED7 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x015B, 0x0041 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_488)
{
    // 015A 0061;	
    // (Ś) LATIN CAPITAL LETTER S WITH ACUTE	[1ED7 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015A, 0x0061 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_489)
{
    // 015A 0041;	
    // (Ś) LATIN CAPITAL LETTER S WITH ACUTE	[1ED7 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x015A, 0x0041 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_490)
{
    // 1E65 0061;	
    // (ṥ) LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 1CAD | 0020 0024 002E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E65, 0x0061 };
    uint32_t const ces[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_491)
{
    // 1E65 0041;	
    // (ṥ) LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 1CAD | 0020 0024 002E 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E65, 0x0041 };
    uint32_t const ces[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_492)
{
    // 1E64 0061;	
    // (Ṥ) LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 1CAD | 0020 0024 002E 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E64, 0x0061 };
    uint32_t const ces[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_493)
{
    // 1E64 0041;	
    // (Ṥ) LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE	[1ED7 1CAD | 0020 0024 002E 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E64, 0x0041 };
    uint32_t const ces[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_494)
{
    // 015D 0061;	
    // (ŝ) LATIN SMALL LETTER S WITH CIRCUMFLEX	[1ED7 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x015D, 0x0061 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_495)
{
    // 015D 0041;	
    // (ŝ) LATIN SMALL LETTER S WITH CIRCUMFLEX	[1ED7 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x015D, 0x0041 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_496)
{
    // 015C 0061;	
    // (Ŝ) LATIN CAPITAL LETTER S WITH CIRCUMFLEX	[1ED7 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x015C, 0x0061 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_497)
{
    // 015C 0041;	
    // (Ŝ) LATIN CAPITAL LETTER S WITH CIRCUMFLEX	[1ED7 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x015C, 0x0041 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_498)
{
    // 0161 0061;	
    // (š) LATIN SMALL LETTER S WITH CARON	[1ED7 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0161, 0x0061 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_119_499)
{
    // 0161 0041;	
    // (š) LATIN SMALL LETTER S WITH CARON	[1ED7 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0161, 0x0041 };
    uint32_t const ces[11] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

