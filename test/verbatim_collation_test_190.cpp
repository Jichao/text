// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_190_000)
{
    uint32_t const cps[2] = { 0x0E94, 0x003F };

    // 0E94 003F;	
    // (ດ) LAO LETTER DO	[2E6A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E94 003F;	
    // (ດ) LAO LETTER DO	[2E6A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E6A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_001)
{
    uint32_t const cps[2] = { 0x0E94, 0x0061 };

    // 0E94 0061;	
    // (ດ) LAO LETTER DO	[2E6A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E94 0061;	
    // (ດ) LAO LETTER DO	[2E6A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_002)
{
    uint32_t const cps[2] = { 0x0E94, 0x0041 };

    // 0E94 0041;	
    // (ດ) LAO LETTER DO	[2E6A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E94 0041;	
    // (ດ) LAO LETTER DO	[2E6A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_003)
{
    uint32_t const cps[2] = { 0x0E94, 0x0062 };

    // 0E94 0062;	
    // (ດ) LAO LETTER DO	[2E6A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E94 0062;	
    // (ດ) LAO LETTER DO	[2E6A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_004)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E94, 0x0021 };

    // 0EC0 0E94 0021;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E94 0021;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_005)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E94, 0x003F };

    // 0EC0 0E94 003F;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E94 003F;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_006)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E94, 0x0061 };

    // 0EC0 0E94 0061;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E94 0061;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_007)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E94, 0x0041 };

    // 0EC0 0E94 0041;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E94 0041;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_008)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E94, 0x0062 };

    // 0EC0 0E94 0062;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E94 0062;	
    // (ເດ) LAO VOWEL SIGN E, LAO LETTER DO	[2E6A 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_009)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E94, 0x0021 };

    // 0EC1 0E94 0021;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E94 0021;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_010)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E94, 0x003F };

    // 0EC1 0E94 003F;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E94 003F;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_011)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E94, 0x0061 };

    // 0EC1 0E94 0061;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E94 0061;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_012)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E94, 0x0041 };

    // 0EC1 0E94 0041;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E94 0041;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_013)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E94, 0x0062 };

    // 0EC1 0E94 0062;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E94 0062;	
    // (ແດ) LAO VOWEL SIGN EI, LAO LETTER DO	[2E6A 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_014)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E94, 0x0021 };

    // 0EC2 0E94 0021;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E94 0021;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_015)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E94, 0x003F };

    // 0EC2 0E94 003F;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E94 003F;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_016)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E94, 0x0061 };

    // 0EC2 0E94 0061;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E94 0061;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_017)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E94, 0x0041 };

    // 0EC2 0E94 0041;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E94 0041;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_018)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E94, 0x0062 };

    // 0EC2 0E94 0062;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E94 0062;	
    // (ໂດ) LAO VOWEL SIGN O, LAO LETTER DO	[2E6A 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_019)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E94, 0x0021 };

    // 0EC3 0E94 0021;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E94 0021;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_020)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E94, 0x003F };

    // 0EC3 0E94 003F;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E94 003F;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_021)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E94, 0x0061 };

    // 0EC3 0E94 0061;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E94 0061;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_022)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E94, 0x0041 };

    // 0EC3 0E94 0041;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E94 0041;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_023)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E94, 0x0062 };

    // 0EC3 0E94 0062;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E94 0062;	
    // (ໃດ) LAO VOWEL SIGN AY, LAO LETTER DO	[2E6A 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_024)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E94, 0x0021 };

    // 0EC4 0E94 0021;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E94 0021;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_025)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E94, 0x003F };

    // 0EC4 0E94 003F;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E94 003F;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6A, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_026)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E94, 0x0061 };

    // 0EC4 0E94 0061;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E94 0061;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_027)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E94, 0x0041 };

    // 0EC4 0E94 0041;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E94 0041;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_028)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E94, 0x0062 };

    // 0EC4 0E94 0062;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6A, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E94 0062;	
    // (ໄດ) LAO VOWEL SIGN AI, LAO LETTER DO	[2E6A 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6A, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_029)
{
    uint32_t const cps[2] = { 0x0E95, 0x0021 };

    // 0E95 0021;	
    // (ຕ) LAO LETTER TO	[2E6B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E95 0021;	
    // (ຕ) LAO LETTER TO	[2E6B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E6B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_030)
{
    uint32_t const cps[2] = { 0x0E95, 0x003F };

    // 0E95 003F;	
    // (ຕ) LAO LETTER TO	[2E6B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E95 003F;	
    // (ຕ) LAO LETTER TO	[2E6B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E6B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_031)
{
    uint32_t const cps[2] = { 0x0E95, 0x0061 };

    // 0E95 0061;	
    // (ຕ) LAO LETTER TO	[2E6B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E95 0061;	
    // (ຕ) LAO LETTER TO	[2E6B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_032)
{
    uint32_t const cps[2] = { 0x0E95, 0x0041 };

    // 0E95 0041;	
    // (ຕ) LAO LETTER TO	[2E6B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E95 0041;	
    // (ຕ) LAO LETTER TO	[2E6B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_033)
{
    uint32_t const cps[2] = { 0x0E95, 0x0062 };

    // 0E95 0062;	
    // (ຕ) LAO LETTER TO	[2E6B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E95 0062;	
    // (ຕ) LAO LETTER TO	[2E6B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_034)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E95, 0x0021 };

    // 0EC0 0E95 0021;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E95 0021;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_035)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E95, 0x003F };

    // 0EC0 0E95 003F;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E95 003F;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_036)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E95, 0x0061 };

    // 0EC0 0E95 0061;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E95 0061;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_037)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E95, 0x0041 };

    // 0EC0 0E95 0041;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E95 0041;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_038)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E95, 0x0062 };

    // 0EC0 0E95 0062;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E95 0062;	
    // (ເຕ) LAO VOWEL SIGN E, LAO LETTER TO	[2E6B 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_039)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E95, 0x0021 };

    // 0EC1 0E95 0021;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E95 0021;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_040)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E95, 0x003F };

    // 0EC1 0E95 003F;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E95 003F;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_041)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E95, 0x0061 };

    // 0EC1 0E95 0061;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E95 0061;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_042)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E95, 0x0041 };

    // 0EC1 0E95 0041;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E95 0041;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_043)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E95, 0x0062 };

    // 0EC1 0E95 0062;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E95 0062;	
    // (ແຕ) LAO VOWEL SIGN EI, LAO LETTER TO	[2E6B 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_044)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E95, 0x0021 };

    // 0EC2 0E95 0021;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E95 0021;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_045)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E95, 0x003F };

    // 0EC2 0E95 003F;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E95 003F;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_046)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E95, 0x0061 };

    // 0EC2 0E95 0061;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E95 0061;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_047)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E95, 0x0041 };

    // 0EC2 0E95 0041;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E95 0041;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_048)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E95, 0x0062 };

    // 0EC2 0E95 0062;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E95 0062;	
    // (ໂຕ) LAO VOWEL SIGN O, LAO LETTER TO	[2E6B 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_049)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E95, 0x0021 };

    // 0EC3 0E95 0021;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E95 0021;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_050)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E95, 0x003F };

    // 0EC3 0E95 003F;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E95 003F;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_051)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E95, 0x0061 };

    // 0EC3 0E95 0061;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E95 0061;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_052)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E95, 0x0041 };

    // 0EC3 0E95 0041;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E95 0041;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_053)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E95, 0x0062 };

    // 0EC3 0E95 0062;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E95 0062;	
    // (ໃຕ) LAO VOWEL SIGN AY, LAO LETTER TO	[2E6B 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_054)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E95, 0x0021 };

    // 0EC4 0E95 0021;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E95 0021;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_055)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E95, 0x003F };

    // 0EC4 0E95 003F;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E95 003F;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6B, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_056)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E95, 0x0061 };

    // 0EC4 0E95 0061;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E95 0061;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_057)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E95, 0x0041 };

    // 0EC4 0E95 0041;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E95 0041;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_058)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E95, 0x0062 };

    // 0EC4 0E95 0062;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6B, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E95 0062;	
    // (ໄຕ) LAO VOWEL SIGN AI, LAO LETTER TO	[2E6B 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6B, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_059)
{
    uint32_t const cps[2] = { 0x0E96, 0x0021 };

    // 0E96 0021;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E96 0021;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E6C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_060)
{
    uint32_t const cps[2] = { 0x0E96, 0x003F };

    // 0E96 003F;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E96 003F;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E6C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_061)
{
    uint32_t const cps[2] = { 0x0E96, 0x0061 };

    // 0E96 0061;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E96 0061;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_062)
{
    uint32_t const cps[2] = { 0x0E96, 0x0041 };

    // 0E96 0041;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E96 0041;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_063)
{
    uint32_t const cps[2] = { 0x0E96, 0x0062 };

    // 0E96 0062;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E96 0062;	
    // (ຖ) LAO LETTER THO SUNG	[2E6C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_064)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E96, 0x0021 };

    // 0EC0 0E96 0021;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E96 0021;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_065)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E96, 0x003F };

    // 0EC0 0E96 003F;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E96 003F;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_066)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E96, 0x0061 };

    // 0EC0 0E96 0061;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E96 0061;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_067)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E96, 0x0041 };

    // 0EC0 0E96 0041;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E96 0041;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_068)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E96, 0x0062 };

    // 0EC0 0E96 0062;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E96 0062;	
    // (ເຖ) LAO VOWEL SIGN E, LAO LETTER THO SUNG	[2E6C 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_069)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E96, 0x0021 };

    // 0EC1 0E96 0021;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E96 0021;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_070)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E96, 0x003F };

    // 0EC1 0E96 003F;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E96 003F;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_071)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E96, 0x0061 };

    // 0EC1 0E96 0061;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E96 0061;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_072)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E96, 0x0041 };

    // 0EC1 0E96 0041;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E96 0041;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_073)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E96, 0x0062 };

    // 0EC1 0E96 0062;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E96 0062;	
    // (ແຖ) LAO VOWEL SIGN EI, LAO LETTER THO SUNG	[2E6C 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_074)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E96, 0x0021 };

    // 0EC2 0E96 0021;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E96 0021;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_075)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E96, 0x003F };

    // 0EC2 0E96 003F;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E96 003F;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_076)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E96, 0x0061 };

    // 0EC2 0E96 0061;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E96 0061;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_077)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E96, 0x0041 };

    // 0EC2 0E96 0041;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E96 0041;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_078)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E96, 0x0062 };

    // 0EC2 0E96 0062;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E96 0062;	
    // (ໂຖ) LAO VOWEL SIGN O, LAO LETTER THO SUNG	[2E6C 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_079)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E96, 0x0021 };

    // 0EC3 0E96 0021;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E96 0021;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_080)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E96, 0x003F };

    // 0EC3 0E96 003F;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E96 003F;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_081)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E96, 0x0061 };

    // 0EC3 0E96 0061;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E96 0061;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_082)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E96, 0x0041 };

    // 0EC3 0E96 0041;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E96 0041;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_083)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E96, 0x0062 };

    // 0EC3 0E96 0062;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E96 0062;	
    // (ໃຖ) LAO VOWEL SIGN AY, LAO LETTER THO SUNG	[2E6C 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_084)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E96, 0x0021 };

    // 0EC4 0E96 0021;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E96 0021;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_085)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E96, 0x003F };

    // 0EC4 0E96 003F;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E96 003F;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6C, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_086)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E96, 0x0061 };

    // 0EC4 0E96 0061;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E96 0061;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_087)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E96, 0x0041 };

    // 0EC4 0E96 0041;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E96 0041;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_088)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E96, 0x0062 };

    // 0EC4 0E96 0062;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6C, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E96 0062;	
    // (ໄຖ) LAO VOWEL SIGN AI, LAO LETTER THO SUNG	[2E6C 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6C, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_089)
{
    uint32_t const cps[2] = { 0x0E97, 0x0021 };

    // 0E97 0021;	
    // (ທ) LAO LETTER THO TAM	[2E6D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E97 0021;	
    // (ທ) LAO LETTER THO TAM	[2E6D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E6D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_090)
{
    uint32_t const cps[2] = { 0x0E97, 0x003F };

    // 0E97 003F;	
    // (ທ) LAO LETTER THO TAM	[2E6D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E97 003F;	
    // (ທ) LAO LETTER THO TAM	[2E6D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E6D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_091)
{
    uint32_t const cps[2] = { 0x0E97, 0x0061 };

    // 0E97 0061;	
    // (ທ) LAO LETTER THO TAM	[2E6D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E97 0061;	
    // (ທ) LAO LETTER THO TAM	[2E6D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_092)
{
    uint32_t const cps[2] = { 0x0E97, 0x0041 };

    // 0E97 0041;	
    // (ທ) LAO LETTER THO TAM	[2E6D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E97 0041;	
    // (ທ) LAO LETTER THO TAM	[2E6D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_093)
{
    uint32_t const cps[2] = { 0x0E97, 0x0062 };

    // 0E97 0062;	
    // (ທ) LAO LETTER THO TAM	[2E6D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E97 0062;	
    // (ທ) LAO LETTER THO TAM	[2E6D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_094)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E97, 0x0021 };

    // 0EC0 0E97 0021;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E97 0021;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_095)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E97, 0x003F };

    // 0EC0 0E97 003F;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E97 003F;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_096)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E97, 0x0061 };

    // 0EC0 0E97 0061;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E97 0061;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_097)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E97, 0x0041 };

    // 0EC0 0E97 0041;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E97 0041;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_098)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E97, 0x0062 };

    // 0EC0 0E97 0062;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E97 0062;	
    // (ເທ) LAO VOWEL SIGN E, LAO LETTER THO TAM	[2E6D 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_099)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E97, 0x0021 };

    // 0EC1 0E97 0021;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E97 0021;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_100)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E97, 0x003F };

    // 0EC1 0E97 003F;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E97 003F;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_101)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E97, 0x0061 };

    // 0EC1 0E97 0061;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E97 0061;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_102)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E97, 0x0041 };

    // 0EC1 0E97 0041;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E97 0041;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_103)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E97, 0x0062 };

    // 0EC1 0E97 0062;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E97 0062;	
    // (ແທ) LAO VOWEL SIGN EI, LAO LETTER THO TAM	[2E6D 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_104)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E97, 0x0021 };

    // 0EC2 0E97 0021;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E97 0021;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_105)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E97, 0x003F };

    // 0EC2 0E97 003F;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E97 003F;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_106)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E97, 0x0061 };

    // 0EC2 0E97 0061;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E97 0061;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_107)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E97, 0x0041 };

    // 0EC2 0E97 0041;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E97 0041;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_108)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E97, 0x0062 };

    // 0EC2 0E97 0062;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E97 0062;	
    // (ໂທ) LAO VOWEL SIGN O, LAO LETTER THO TAM	[2E6D 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_109)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E97, 0x0021 };

    // 0EC3 0E97 0021;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E97 0021;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_110)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E97, 0x003F };

    // 0EC3 0E97 003F;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E97 003F;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_111)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E97, 0x0061 };

    // 0EC3 0E97 0061;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E97 0061;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_112)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E97, 0x0041 };

    // 0EC3 0E97 0041;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E97 0041;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_113)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E97, 0x0062 };

    // 0EC3 0E97 0062;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E97 0062;	
    // (ໃທ) LAO VOWEL SIGN AY, LAO LETTER THO TAM	[2E6D 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_114)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E97, 0x0021 };

    // 0EC4 0E97 0021;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E97 0021;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_115)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E97, 0x003F };

    // 0EC4 0E97 003F;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E97 003F;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6D, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_116)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E97, 0x0061 };

    // 0EC4 0E97 0061;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E97 0061;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_117)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E97, 0x0041 };

    // 0EC4 0E97 0041;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E97 0041;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_118)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E97, 0x0062 };

    // 0EC4 0E97 0062;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6D, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E97 0062;	
    // (ໄທ) LAO VOWEL SIGN AI, LAO LETTER THO TAM	[2E6D 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6D, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_119)
{
    uint32_t const cps[2] = { 0x0E99, 0x0021 };

    // 0E99 0021;	
    // (ນ) LAO LETTER NO	[2E6E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E99 0021;	
    // (ນ) LAO LETTER NO	[2E6E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E6E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_120)
{
    uint32_t const cps[2] = { 0x0E99, 0x003F };

    // 0E99 003F;	
    // (ນ) LAO LETTER NO	[2E6E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E99 003F;	
    // (ນ) LAO LETTER NO	[2E6E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E6E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_121)
{
    uint32_t const cps[2] = { 0x0E99, 0x0061 };

    // 0E99 0061;	
    // (ນ) LAO LETTER NO	[2E6E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E99 0061;	
    // (ນ) LAO LETTER NO	[2E6E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_122)
{
    uint32_t const cps[2] = { 0x0E99, 0x0041 };

    // 0E99 0041;	
    // (ນ) LAO LETTER NO	[2E6E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E99 0041;	
    // (ນ) LAO LETTER NO	[2E6E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_123)
{
    uint32_t const cps[2] = { 0x0E99, 0x0062 };

    // 0E99 0062;	
    // (ນ) LAO LETTER NO	[2E6E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E99 0062;	
    // (ນ) LAO LETTER NO	[2E6E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_124)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E99, 0x0021 };

    // 0EC0 0E99 0021;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E99 0021;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_125)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E99, 0x003F };

    // 0EC0 0E99 003F;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E99 003F;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_126)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E99, 0x0061 };

    // 0EC0 0E99 0061;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E99 0061;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_127)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E99, 0x0041 };

    // 0EC0 0E99 0041;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E99 0041;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_128)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E99, 0x0062 };

    // 0EC0 0E99 0062;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E99 0062;	
    // (ເນ) LAO VOWEL SIGN E, LAO LETTER NO	[2E6E 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_129)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E99, 0x0021 };

    // 0EC1 0E99 0021;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E99 0021;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_130)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E99, 0x003F };

    // 0EC1 0E99 003F;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E99 003F;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_131)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E99, 0x0061 };

    // 0EC1 0E99 0061;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E99 0061;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_132)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E99, 0x0041 };

    // 0EC1 0E99 0041;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E99 0041;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_133)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E99, 0x0062 };

    // 0EC1 0E99 0062;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E99 0062;	
    // (ແນ) LAO VOWEL SIGN EI, LAO LETTER NO	[2E6E 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_134)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E99, 0x0021 };

    // 0EC2 0E99 0021;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E99 0021;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_135)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E99, 0x003F };

    // 0EC2 0E99 003F;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E99 003F;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_136)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E99, 0x0061 };

    // 0EC2 0E99 0061;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E99 0061;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_137)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E99, 0x0041 };

    // 0EC2 0E99 0041;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E99 0041;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_138)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E99, 0x0062 };

    // 0EC2 0E99 0062;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E99 0062;	
    // (ໂນ) LAO VOWEL SIGN O, LAO LETTER NO	[2E6E 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_139)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E99, 0x0021 };

    // 0EC3 0E99 0021;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E99 0021;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_140)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E99, 0x003F };

    // 0EC3 0E99 003F;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E99 003F;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_141)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E99, 0x0061 };

    // 0EC3 0E99 0061;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E99 0061;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_142)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E99, 0x0041 };

    // 0EC3 0E99 0041;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E99 0041;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_143)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E99, 0x0062 };

    // 0EC3 0E99 0062;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E99 0062;	
    // (ໃນ) LAO VOWEL SIGN AY, LAO LETTER NO	[2E6E 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_144)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E99, 0x0021 };

    // 0EC4 0E99 0021;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E99 0021;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_145)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E99, 0x003F };

    // 0EC4 0E99 003F;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E99 003F;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6E, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_146)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E99, 0x0061 };

    // 0EC4 0E99 0061;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E99 0061;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_147)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E99, 0x0041 };

    // 0EC4 0E99 0041;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E99 0041;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_148)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E99, 0x0062 };

    // 0EC4 0E99 0062;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6E, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E99 0062;	
    // (ໄນ) LAO VOWEL SIGN AI, LAO LETTER NO	[2E6E 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6E, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_149)
{
    uint32_t const cps[2] = { 0x0E9A, 0x0021 };

    // 0E9A 0021;	
    // (ບ) LAO LETTER BO	[2E6F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9A 0021;	
    // (ບ) LAO LETTER BO	[2E6F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E6F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_150)
{
    uint32_t const cps[2] = { 0x0E9A, 0x003F };

    // 0E9A 003F;	
    // (ບ) LAO LETTER BO	[2E6F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9A 003F;	
    // (ບ) LAO LETTER BO	[2E6F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E6F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_151)
{
    uint32_t const cps[2] = { 0x0E9A, 0x0061 };

    // 0E9A 0061;	
    // (ບ) LAO LETTER BO	[2E6F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9A 0061;	
    // (ບ) LAO LETTER BO	[2E6F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_152)
{
    uint32_t const cps[2] = { 0x0E9A, 0x0041 };

    // 0E9A 0041;	
    // (ບ) LAO LETTER BO	[2E6F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9A 0041;	
    // (ບ) LAO LETTER BO	[2E6F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_153)
{
    uint32_t const cps[2] = { 0x0E9A, 0x0062 };

    // 0E9A 0062;	
    // (ບ) LAO LETTER BO	[2E6F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9A 0062;	
    // (ບ) LAO LETTER BO	[2E6F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_154)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9A, 0x0021 };

    // 0EC0 0E9A 0021;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9A 0021;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_155)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9A, 0x003F };

    // 0EC0 0E9A 003F;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9A 003F;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_156)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9A, 0x0061 };

    // 0EC0 0E9A 0061;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9A 0061;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_157)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9A, 0x0041 };

    // 0EC0 0E9A 0041;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9A 0041;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_158)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9A, 0x0062 };

    // 0EC0 0E9A 0062;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9A 0062;	
    // (ເບ) LAO VOWEL SIGN E, LAO LETTER BO	[2E6F 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_159)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9A, 0x0021 };

    // 0EC1 0E9A 0021;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9A 0021;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_160)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9A, 0x003F };

    // 0EC1 0E9A 003F;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9A 003F;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_161)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9A, 0x0061 };

    // 0EC1 0E9A 0061;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9A 0061;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_162)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9A, 0x0041 };

    // 0EC1 0E9A 0041;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9A 0041;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_163)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9A, 0x0062 };

    // 0EC1 0E9A 0062;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9A 0062;	
    // (ແບ) LAO VOWEL SIGN EI, LAO LETTER BO	[2E6F 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_164)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9A, 0x0021 };

    // 0EC2 0E9A 0021;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9A 0021;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_165)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9A, 0x003F };

    // 0EC2 0E9A 003F;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9A 003F;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_166)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9A, 0x0061 };

    // 0EC2 0E9A 0061;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9A 0061;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_167)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9A, 0x0041 };

    // 0EC2 0E9A 0041;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9A 0041;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_168)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9A, 0x0062 };

    // 0EC2 0E9A 0062;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9A 0062;	
    // (ໂບ) LAO VOWEL SIGN O, LAO LETTER BO	[2E6F 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_169)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9A, 0x0021 };

    // 0EC3 0E9A 0021;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9A 0021;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_170)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9A, 0x003F };

    // 0EC3 0E9A 003F;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9A 003F;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_171)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9A, 0x0061 };

    // 0EC3 0E9A 0061;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9A 0061;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_172)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9A, 0x0041 };

    // 0EC3 0E9A 0041;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9A 0041;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_173)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9A, 0x0062 };

    // 0EC3 0E9A 0062;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9A 0062;	
    // (ໃບ) LAO VOWEL SIGN AY, LAO LETTER BO	[2E6F 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_174)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9A, 0x0021 };

    // 0EC4 0E9A 0021;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9A 0021;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_175)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9A, 0x003F };

    // 0EC4 0E9A 003F;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9A 003F;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E6F, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_176)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9A, 0x0061 };

    // 0EC4 0E9A 0061;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9A 0061;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_177)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9A, 0x0041 };

    // 0EC4 0E9A 0041;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9A 0041;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_178)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9A, 0x0062 };

    // 0EC4 0E9A 0062;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E6F, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9A 0062;	
    // (ໄບ) LAO VOWEL SIGN AI, LAO LETTER BO	[2E6F 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E6F, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_179)
{
    uint32_t const cps[2] = { 0x0E9B, 0x0021 };

    // 0E9B 0021;	
    // (ປ) LAO LETTER PO	[2E70 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9B 0021;	
    // (ປ) LAO LETTER PO	[2E70 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E70, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_180)
{
    uint32_t const cps[2] = { 0x0E9B, 0x003F };

    // 0E9B 003F;	
    // (ປ) LAO LETTER PO	[2E70 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9B 003F;	
    // (ປ) LAO LETTER PO	[2E70 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E70, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_181)
{
    uint32_t const cps[2] = { 0x0E9B, 0x0061 };

    // 0E9B 0061;	
    // (ປ) LAO LETTER PO	[2E70 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9B 0061;	
    // (ປ) LAO LETTER PO	[2E70 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_182)
{
    uint32_t const cps[2] = { 0x0E9B, 0x0041 };

    // 0E9B 0041;	
    // (ປ) LAO LETTER PO	[2E70 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9B 0041;	
    // (ປ) LAO LETTER PO	[2E70 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_183)
{
    uint32_t const cps[2] = { 0x0E9B, 0x0062 };

    // 0E9B 0062;	
    // (ປ) LAO LETTER PO	[2E70 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9B 0062;	
    // (ປ) LAO LETTER PO	[2E70 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_184)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9B, 0x0021 };

    // 0EC0 0E9B 0021;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9B 0021;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_185)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9B, 0x003F };

    // 0EC0 0E9B 003F;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9B 003F;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_186)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9B, 0x0061 };

    // 0EC0 0E9B 0061;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9B 0061;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_187)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9B, 0x0041 };

    // 0EC0 0E9B 0041;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9B 0041;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_188)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9B, 0x0062 };

    // 0EC0 0E9B 0062;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9B 0062;	
    // (ເປ) LAO VOWEL SIGN E, LAO LETTER PO	[2E70 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_189)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9B, 0x0021 };

    // 0EC1 0E9B 0021;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9B 0021;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_190)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9B, 0x003F };

    // 0EC1 0E9B 003F;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9B 003F;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_191)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9B, 0x0061 };

    // 0EC1 0E9B 0061;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9B 0061;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_192)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9B, 0x0041 };

    // 0EC1 0E9B 0041;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9B 0041;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_193)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9B, 0x0062 };

    // 0EC1 0E9B 0062;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9B 0062;	
    // (ແປ) LAO VOWEL SIGN EI, LAO LETTER PO	[2E70 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_194)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9B, 0x0021 };

    // 0EC2 0E9B 0021;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9B 0021;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_195)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9B, 0x003F };

    // 0EC2 0E9B 003F;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9B 003F;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_196)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9B, 0x0061 };

    // 0EC2 0E9B 0061;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9B 0061;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_197)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9B, 0x0041 };

    // 0EC2 0E9B 0041;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9B 0041;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_198)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9B, 0x0062 };

    // 0EC2 0E9B 0062;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9B 0062;	
    // (ໂປ) LAO VOWEL SIGN O, LAO LETTER PO	[2E70 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_199)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9B, 0x0021 };

    // 0EC3 0E9B 0021;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9B 0021;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_200)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9B, 0x003F };

    // 0EC3 0E9B 003F;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9B 003F;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_201)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9B, 0x0061 };

    // 0EC3 0E9B 0061;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9B 0061;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_202)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9B, 0x0041 };

    // 0EC3 0E9B 0041;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9B 0041;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_203)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9B, 0x0062 };

    // 0EC3 0E9B 0062;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9B 0062;	
    // (ໃປ) LAO VOWEL SIGN AY, LAO LETTER PO	[2E70 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_204)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9B, 0x0021 };

    // 0EC4 0E9B 0021;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9B 0021;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_205)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9B, 0x003F };

    // 0EC4 0E9B 003F;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9B 003F;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E70, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_206)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9B, 0x0061 };

    // 0EC4 0E9B 0061;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9B 0061;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_207)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9B, 0x0041 };

    // 0EC4 0E9B 0041;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9B 0041;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_208)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9B, 0x0062 };

    // 0EC4 0E9B 0062;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E70, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9B 0062;	
    // (ໄປ) LAO VOWEL SIGN AI, LAO LETTER PO	[2E70 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E70, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_209)
{
    uint32_t const cps[2] = { 0x0E9C, 0x0021 };

    // 0E9C 0021;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9C 0021;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E71, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_210)
{
    uint32_t const cps[2] = { 0x0E9C, 0x003F };

    // 0E9C 003F;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9C 003F;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E71, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_211)
{
    uint32_t const cps[2] = { 0x0E9C, 0x0061 };

    // 0E9C 0061;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9C 0061;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_212)
{
    uint32_t const cps[2] = { 0x0E9C, 0x0041 };

    // 0E9C 0041;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9C 0041;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_213)
{
    uint32_t const cps[2] = { 0x0E9C, 0x0062 };

    // 0E9C 0062;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9C 0062;	
    // (ຜ) LAO LETTER PHO SUNG	[2E71 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_214)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9C, 0x0021 };

    // 0EC0 0E9C 0021;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9C 0021;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_215)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9C, 0x003F };

    // 0EC0 0E9C 003F;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9C 003F;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_216)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9C, 0x0061 };

    // 0EC0 0E9C 0061;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9C 0061;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_217)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9C, 0x0041 };

    // 0EC0 0E9C 0041;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9C 0041;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_218)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9C, 0x0062 };

    // 0EC0 0E9C 0062;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9C 0062;	
    // (ເຜ) LAO VOWEL SIGN E, LAO LETTER PHO SUNG	[2E71 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_219)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9C, 0x0021 };

    // 0EC1 0E9C 0021;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9C 0021;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_220)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9C, 0x003F };

    // 0EC1 0E9C 003F;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9C 003F;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_221)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9C, 0x0061 };

    // 0EC1 0E9C 0061;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9C 0061;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_222)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9C, 0x0041 };

    // 0EC1 0E9C 0041;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9C 0041;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_223)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9C, 0x0062 };

    // 0EC1 0E9C 0062;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9C 0062;	
    // (ແຜ) LAO VOWEL SIGN EI, LAO LETTER PHO SUNG	[2E71 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_224)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9C, 0x0021 };

    // 0EC2 0E9C 0021;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9C 0021;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_225)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9C, 0x003F };

    // 0EC2 0E9C 003F;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9C 003F;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_226)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9C, 0x0061 };

    // 0EC2 0E9C 0061;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9C 0061;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_227)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9C, 0x0041 };

    // 0EC2 0E9C 0041;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9C 0041;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_228)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9C, 0x0062 };

    // 0EC2 0E9C 0062;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9C 0062;	
    // (ໂຜ) LAO VOWEL SIGN O, LAO LETTER PHO SUNG	[2E71 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_229)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9C, 0x0021 };

    // 0EC3 0E9C 0021;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9C 0021;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_230)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9C, 0x003F };

    // 0EC3 0E9C 003F;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9C 003F;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_231)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9C, 0x0061 };

    // 0EC3 0E9C 0061;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9C 0061;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_232)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9C, 0x0041 };

    // 0EC3 0E9C 0041;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9C 0041;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_233)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9C, 0x0062 };

    // 0EC3 0E9C 0062;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9C 0062;	
    // (ໃຜ) LAO VOWEL SIGN AY, LAO LETTER PHO SUNG	[2E71 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_234)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9C, 0x0021 };

    // 0EC4 0E9C 0021;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9C 0021;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_235)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9C, 0x003F };

    // 0EC4 0E9C 003F;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9C 003F;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E71, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_236)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9C, 0x0061 };

    // 0EC4 0E9C 0061;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9C 0061;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_237)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9C, 0x0041 };

    // 0EC4 0E9C 0041;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9C 0041;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_238)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9C, 0x0062 };

    // 0EC4 0E9C 0062;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E71, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9C 0062;	
    // (ໄຜ) LAO VOWEL SIGN AI, LAO LETTER PHO SUNG	[2E71 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E71, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_239)
{
    uint32_t const cps[2] = { 0x0E9D, 0x0021 };

    // 0E9D 0021;	
    // (ຝ) LAO LETTER FO TAM	[2E72 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9D 0021;	
    // (ຝ) LAO LETTER FO TAM	[2E72 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E72, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_240)
{
    uint32_t const cps[2] = { 0x0E9D, 0x003F };

    // 0E9D 003F;	
    // (ຝ) LAO LETTER FO TAM	[2E72 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9D 003F;	
    // (ຝ) LAO LETTER FO TAM	[2E72 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E72, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_241)
{
    uint32_t const cps[2] = { 0x0E9D, 0x0061 };

    // 0E9D 0061;	
    // (ຝ) LAO LETTER FO TAM	[2E72 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9D 0061;	
    // (ຝ) LAO LETTER FO TAM	[2E72 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_242)
{
    uint32_t const cps[2] = { 0x0E9D, 0x0041 };

    // 0E9D 0041;	
    // (ຝ) LAO LETTER FO TAM	[2E72 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9D 0041;	
    // (ຝ) LAO LETTER FO TAM	[2E72 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_243)
{
    uint32_t const cps[2] = { 0x0E9D, 0x0062 };

    // 0E9D 0062;	
    // (ຝ) LAO LETTER FO TAM	[2E72 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9D 0062;	
    // (ຝ) LAO LETTER FO TAM	[2E72 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_244)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9D, 0x0021 };

    // 0EC0 0E9D 0021;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9D 0021;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_245)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9D, 0x003F };

    // 0EC0 0E9D 003F;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9D 003F;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_246)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9D, 0x0061 };

    // 0EC0 0E9D 0061;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9D 0061;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_247)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9D, 0x0041 };

    // 0EC0 0E9D 0041;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9D 0041;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_248)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9D, 0x0062 };

    // 0EC0 0E9D 0062;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9D 0062;	
    // (ເຝ) LAO VOWEL SIGN E, LAO LETTER FO TAM	[2E72 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_249)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9D, 0x0021 };

    // 0EC1 0E9D 0021;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9D 0021;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_250)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9D, 0x003F };

    // 0EC1 0E9D 003F;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9D 003F;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_251)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9D, 0x0061 };

    // 0EC1 0E9D 0061;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9D 0061;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_252)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9D, 0x0041 };

    // 0EC1 0E9D 0041;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9D 0041;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_253)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9D, 0x0062 };

    // 0EC1 0E9D 0062;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9D 0062;	
    // (ແຝ) LAO VOWEL SIGN EI, LAO LETTER FO TAM	[2E72 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_254)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9D, 0x0021 };

    // 0EC2 0E9D 0021;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9D 0021;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_255)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9D, 0x003F };

    // 0EC2 0E9D 003F;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9D 003F;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_256)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9D, 0x0061 };

    // 0EC2 0E9D 0061;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9D 0061;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_257)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9D, 0x0041 };

    // 0EC2 0E9D 0041;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9D 0041;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_258)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9D, 0x0062 };

    // 0EC2 0E9D 0062;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9D 0062;	
    // (ໂຝ) LAO VOWEL SIGN O, LAO LETTER FO TAM	[2E72 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_259)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9D, 0x0021 };

    // 0EC3 0E9D 0021;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9D 0021;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_260)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9D, 0x003F };

    // 0EC3 0E9D 003F;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9D 003F;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_261)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9D, 0x0061 };

    // 0EC3 0E9D 0061;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9D 0061;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_262)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9D, 0x0041 };

    // 0EC3 0E9D 0041;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9D 0041;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_263)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9D, 0x0062 };

    // 0EC3 0E9D 0062;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9D 0062;	
    // (ໃຝ) LAO VOWEL SIGN AY, LAO LETTER FO TAM	[2E72 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_264)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9D, 0x0021 };

    // 0EC4 0E9D 0021;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9D 0021;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_265)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9D, 0x003F };

    // 0EC4 0E9D 003F;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9D 003F;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E72, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_266)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9D, 0x0061 };

    // 0EC4 0E9D 0061;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9D 0061;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_267)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9D, 0x0041 };

    // 0EC4 0E9D 0041;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9D 0041;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_268)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9D, 0x0062 };

    // 0EC4 0E9D 0062;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E72, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9D 0062;	
    // (ໄຝ) LAO VOWEL SIGN AI, LAO LETTER FO TAM	[2E72 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E72, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_269)
{
    uint32_t const cps[2] = { 0x0E9E, 0x0021 };

    // 0E9E 0021;	
    // (ພ) LAO LETTER PHO TAM	[2E73 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9E 0021;	
    // (ພ) LAO LETTER PHO TAM	[2E73 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E73, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_270)
{
    uint32_t const cps[2] = { 0x0E9E, 0x003F };

    // 0E9E 003F;	
    // (ພ) LAO LETTER PHO TAM	[2E73 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9E 003F;	
    // (ພ) LAO LETTER PHO TAM	[2E73 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E73, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_271)
{
    uint32_t const cps[2] = { 0x0E9E, 0x0061 };

    // 0E9E 0061;	
    // (ພ) LAO LETTER PHO TAM	[2E73 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9E 0061;	
    // (ພ) LAO LETTER PHO TAM	[2E73 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_272)
{
    uint32_t const cps[2] = { 0x0E9E, 0x0041 };

    // 0E9E 0041;	
    // (ພ) LAO LETTER PHO TAM	[2E73 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9E 0041;	
    // (ພ) LAO LETTER PHO TAM	[2E73 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_273)
{
    uint32_t const cps[2] = { 0x0E9E, 0x0062 };

    // 0E9E 0062;	
    // (ພ) LAO LETTER PHO TAM	[2E73 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9E 0062;	
    // (ພ) LAO LETTER PHO TAM	[2E73 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_274)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9E, 0x0021 };

    // 0EC0 0E9E 0021;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9E 0021;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_275)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9E, 0x003F };

    // 0EC0 0E9E 003F;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9E 003F;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_276)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9E, 0x0061 };

    // 0EC0 0E9E 0061;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9E 0061;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_277)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9E, 0x0041 };

    // 0EC0 0E9E 0041;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9E 0041;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_278)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9E, 0x0062 };

    // 0EC0 0E9E 0062;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9E 0062;	
    // (ເພ) LAO VOWEL SIGN E, LAO LETTER PHO TAM	[2E73 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_279)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9E, 0x0021 };

    // 0EC1 0E9E 0021;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9E 0021;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_280)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9E, 0x003F };

    // 0EC1 0E9E 003F;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9E 003F;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_281)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9E, 0x0061 };

    // 0EC1 0E9E 0061;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9E 0061;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_282)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9E, 0x0041 };

    // 0EC1 0E9E 0041;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9E 0041;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_283)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9E, 0x0062 };

    // 0EC1 0E9E 0062;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9E 0062;	
    // (ແພ) LAO VOWEL SIGN EI, LAO LETTER PHO TAM	[2E73 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_284)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9E, 0x0021 };

    // 0EC2 0E9E 0021;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9E 0021;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_285)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9E, 0x003F };

    // 0EC2 0E9E 003F;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9E 003F;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_286)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9E, 0x0061 };

    // 0EC2 0E9E 0061;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9E 0061;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_287)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9E, 0x0041 };

    // 0EC2 0E9E 0041;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9E 0041;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_288)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9E, 0x0062 };

    // 0EC2 0E9E 0062;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9E 0062;	
    // (ໂພ) LAO VOWEL SIGN O, LAO LETTER PHO TAM	[2E73 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_289)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9E, 0x0021 };

    // 0EC3 0E9E 0021;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9E 0021;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_290)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9E, 0x003F };

    // 0EC3 0E9E 003F;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9E 003F;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_291)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9E, 0x0061 };

    // 0EC3 0E9E 0061;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9E 0061;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_292)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9E, 0x0041 };

    // 0EC3 0E9E 0041;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9E 0041;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_293)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9E, 0x0062 };

    // 0EC3 0E9E 0062;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9E 0062;	
    // (ໃພ) LAO VOWEL SIGN AY, LAO LETTER PHO TAM	[2E73 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_294)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9E, 0x0021 };

    // 0EC4 0E9E 0021;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9E 0021;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_295)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9E, 0x003F };

    // 0EC4 0E9E 003F;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9E 003F;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E73, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_296)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9E, 0x0061 };

    // 0EC4 0E9E 0061;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9E 0061;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_297)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9E, 0x0041 };

    // 0EC4 0E9E 0041;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9E 0041;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_298)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9E, 0x0062 };

    // 0EC4 0E9E 0062;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E73, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9E 0062;	
    // (ໄພ) LAO VOWEL SIGN AI, LAO LETTER PHO TAM	[2E73 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E73, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_299)
{
    uint32_t const cps[2] = { 0x0E9F, 0x0021 };

    // 0E9F 0021;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9F 0021;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E74, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_300)
{
    uint32_t const cps[2] = { 0x0E9F, 0x003F };

    // 0E9F 003F;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9F 003F;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E74, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_301)
{
    uint32_t const cps[2] = { 0x0E9F, 0x0061 };

    // 0E9F 0061;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9F 0061;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_302)
{
    uint32_t const cps[2] = { 0x0E9F, 0x0041 };

    // 0E9F 0041;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9F 0041;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_303)
{
    uint32_t const cps[2] = { 0x0E9F, 0x0062 };

    // 0E9F 0062;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0E9F 0062;	
    // (ຟ) LAO LETTER FO SUNG	[2E74 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_304)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9F, 0x0021 };

    // 0EC0 0E9F 0021;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9F 0021;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_305)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9F, 0x003F };

    // 0EC0 0E9F 003F;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9F 003F;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_306)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9F, 0x0061 };

    // 0EC0 0E9F 0061;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9F 0061;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_307)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9F, 0x0041 };

    // 0EC0 0E9F 0041;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9F 0041;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_308)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0E9F, 0x0062 };

    // 0EC0 0E9F 0062;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0E9F 0062;	
    // (ເຟ) LAO VOWEL SIGN E, LAO LETTER FO SUNG	[2E74 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_309)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9F, 0x0021 };

    // 0EC1 0E9F 0021;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9F 0021;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_310)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9F, 0x003F };

    // 0EC1 0E9F 003F;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9F 003F;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_311)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9F, 0x0061 };

    // 0EC1 0E9F 0061;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9F 0061;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_312)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9F, 0x0041 };

    // 0EC1 0E9F 0041;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9F 0041;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_313)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0E9F, 0x0062 };

    // 0EC1 0E9F 0062;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0E9F 0062;	
    // (ແຟ) LAO VOWEL SIGN EI, LAO LETTER FO SUNG	[2E74 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_314)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9F, 0x0021 };

    // 0EC2 0E9F 0021;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9F 0021;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_315)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9F, 0x003F };

    // 0EC2 0E9F 003F;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9F 003F;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_316)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9F, 0x0061 };

    // 0EC2 0E9F 0061;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9F 0061;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_317)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9F, 0x0041 };

    // 0EC2 0E9F 0041;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9F 0041;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_318)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0E9F, 0x0062 };

    // 0EC2 0E9F 0062;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0E9F 0062;	
    // (ໂຟ) LAO VOWEL SIGN O, LAO LETTER FO SUNG	[2E74 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_319)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9F, 0x0021 };

    // 0EC3 0E9F 0021;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9F 0021;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_320)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9F, 0x003F };

    // 0EC3 0E9F 003F;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9F 003F;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_321)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9F, 0x0061 };

    // 0EC3 0E9F 0061;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9F 0061;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_322)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9F, 0x0041 };

    // 0EC3 0E9F 0041;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9F 0041;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_323)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0E9F, 0x0062 };

    // 0EC3 0E9F 0062;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0E9F 0062;	
    // (ໃຟ) LAO VOWEL SIGN AY, LAO LETTER FO SUNG	[2E74 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_324)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9F, 0x0021 };

    // 0EC4 0E9F 0021;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9F 0021;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_325)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9F, 0x003F };

    // 0EC4 0E9F 003F;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9F 003F;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E74, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_326)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9F, 0x0061 };

    // 0EC4 0E9F 0061;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9F 0061;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_327)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9F, 0x0041 };

    // 0EC4 0E9F 0041;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9F 0041;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_328)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0E9F, 0x0062 };

    // 0EC4 0E9F 0062;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E74, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0E9F 0062;	
    // (ໄຟ) LAO VOWEL SIGN AI, LAO LETTER FO SUNG	[2E74 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E74, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_329)
{
    uint32_t const cps[2] = { 0x0EA1, 0x0021 };

    // 0EA1 0021;	
    // (ມ) LAO LETTER MO	[2E75 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA1 0021;	
    // (ມ) LAO LETTER MO	[2E75 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E75, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_330)
{
    uint32_t const cps[2] = { 0x0EA1, 0x003F };

    // 0EA1 003F;	
    // (ມ) LAO LETTER MO	[2E75 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA1 003F;	
    // (ມ) LAO LETTER MO	[2E75 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E75, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_331)
{
    uint32_t const cps[2] = { 0x0EA1, 0x0061 };

    // 0EA1 0061;	
    // (ມ) LAO LETTER MO	[2E75 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA1 0061;	
    // (ມ) LAO LETTER MO	[2E75 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_332)
{
    uint32_t const cps[2] = { 0x0EA1, 0x0041 };

    // 0EA1 0041;	
    // (ມ) LAO LETTER MO	[2E75 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA1 0041;	
    // (ມ) LAO LETTER MO	[2E75 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_333)
{
    uint32_t const cps[2] = { 0x0EA1, 0x0062 };

    // 0EA1 0062;	
    // (ມ) LAO LETTER MO	[2E75 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA1 0062;	
    // (ມ) LAO LETTER MO	[2E75 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_334)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA1, 0x0021 };

    // 0EC0 0EA1 0021;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA1 0021;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_335)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA1, 0x003F };

    // 0EC0 0EA1 003F;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA1 003F;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_336)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA1, 0x0061 };

    // 0EC0 0EA1 0061;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA1 0061;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_337)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA1, 0x0041 };

    // 0EC0 0EA1 0041;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA1 0041;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_338)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA1, 0x0062 };

    // 0EC0 0EA1 0062;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA1 0062;	
    // (ເມ) LAO VOWEL SIGN E, LAO LETTER MO	[2E75 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_339)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA1, 0x0021 };

    // 0EC1 0EA1 0021;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA1 0021;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_340)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA1, 0x003F };

    // 0EC1 0EA1 003F;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA1 003F;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_341)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA1, 0x0061 };

    // 0EC1 0EA1 0061;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA1 0061;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_342)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA1, 0x0041 };

    // 0EC1 0EA1 0041;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA1 0041;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_343)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA1, 0x0062 };

    // 0EC1 0EA1 0062;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA1 0062;	
    // (ແມ) LAO VOWEL SIGN EI, LAO LETTER MO	[2E75 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_344)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA1, 0x0021 };

    // 0EC2 0EA1 0021;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA1 0021;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_345)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA1, 0x003F };

    // 0EC2 0EA1 003F;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA1 003F;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_346)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA1, 0x0061 };

    // 0EC2 0EA1 0061;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA1 0061;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_347)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA1, 0x0041 };

    // 0EC2 0EA1 0041;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA1 0041;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_348)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA1, 0x0062 };

    // 0EC2 0EA1 0062;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA1 0062;	
    // (ໂມ) LAO VOWEL SIGN O, LAO LETTER MO	[2E75 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_349)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA1, 0x0021 };

    // 0EC3 0EA1 0021;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA1 0021;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_350)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA1, 0x003F };

    // 0EC3 0EA1 003F;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA1 003F;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_351)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA1, 0x0061 };

    // 0EC3 0EA1 0061;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA1 0061;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_352)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA1, 0x0041 };

    // 0EC3 0EA1 0041;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA1 0041;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_353)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA1, 0x0062 };

    // 0EC3 0EA1 0062;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA1 0062;	
    // (ໃມ) LAO VOWEL SIGN AY, LAO LETTER MO	[2E75 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_354)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA1, 0x0021 };

    // 0EC4 0EA1 0021;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA1 0021;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_355)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA1, 0x003F };

    // 0EC4 0EA1 003F;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA1 003F;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E75, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_356)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA1, 0x0061 };

    // 0EC4 0EA1 0061;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA1 0061;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_357)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA1, 0x0041 };

    // 0EC4 0EA1 0041;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA1 0041;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_358)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA1, 0x0062 };

    // 0EC4 0EA1 0062;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E75, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA1 0062;	
    // (ໄມ) LAO VOWEL SIGN AI, LAO LETTER MO	[2E75 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E75, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_359)
{
    uint32_t const cps[2] = { 0x0EA2, 0x0021 };

    // 0EA2 0021;	
    // (ຢ) LAO LETTER YO	[2E76 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA2 0021;	
    // (ຢ) LAO LETTER YO	[2E76 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E76, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_360)
{
    uint32_t const cps[2] = { 0x0EA2, 0x003F };

    // 0EA2 003F;	
    // (ຢ) LAO LETTER YO	[2E76 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA2 003F;	
    // (ຢ) LAO LETTER YO	[2E76 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E76, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_361)
{
    uint32_t const cps[2] = { 0x0EA2, 0x0061 };

    // 0EA2 0061;	
    // (ຢ) LAO LETTER YO	[2E76 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA2 0061;	
    // (ຢ) LAO LETTER YO	[2E76 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_362)
{
    uint32_t const cps[2] = { 0x0EA2, 0x0041 };

    // 0EA2 0041;	
    // (ຢ) LAO LETTER YO	[2E76 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA2 0041;	
    // (ຢ) LAO LETTER YO	[2E76 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_363)
{
    uint32_t const cps[2] = { 0x0EA2, 0x0062 };

    // 0EA2 0062;	
    // (ຢ) LAO LETTER YO	[2E76 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA2 0062;	
    // (ຢ) LAO LETTER YO	[2E76 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_364)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA2, 0x0021 };

    // 0EC0 0EA2 0021;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA2 0021;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_365)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA2, 0x003F };

    // 0EC0 0EA2 003F;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA2 003F;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_366)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA2, 0x0061 };

    // 0EC0 0EA2 0061;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA2 0061;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_367)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA2, 0x0041 };

    // 0EC0 0EA2 0041;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA2 0041;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_368)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA2, 0x0062 };

    // 0EC0 0EA2 0062;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA2 0062;	
    // (ເຢ) LAO VOWEL SIGN E, LAO LETTER YO	[2E76 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_369)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA2, 0x0021 };

    // 0EC1 0EA2 0021;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA2 0021;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_370)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA2, 0x003F };

    // 0EC1 0EA2 003F;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA2 003F;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_371)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA2, 0x0061 };

    // 0EC1 0EA2 0061;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA2 0061;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_372)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA2, 0x0041 };

    // 0EC1 0EA2 0041;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA2 0041;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_373)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA2, 0x0062 };

    // 0EC1 0EA2 0062;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA2 0062;	
    // (ແຢ) LAO VOWEL SIGN EI, LAO LETTER YO	[2E76 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_374)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA2, 0x0021 };

    // 0EC2 0EA2 0021;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA2 0021;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_375)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA2, 0x003F };

    // 0EC2 0EA2 003F;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA2 003F;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_376)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA2, 0x0061 };

    // 0EC2 0EA2 0061;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA2 0061;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_377)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA2, 0x0041 };

    // 0EC2 0EA2 0041;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA2 0041;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_378)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA2, 0x0062 };

    // 0EC2 0EA2 0062;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA2 0062;	
    // (ໂຢ) LAO VOWEL SIGN O, LAO LETTER YO	[2E76 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_379)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA2, 0x0021 };

    // 0EC3 0EA2 0021;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA2 0021;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_380)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA2, 0x003F };

    // 0EC3 0EA2 003F;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA2 003F;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_381)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA2, 0x0061 };

    // 0EC3 0EA2 0061;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA2 0061;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_382)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA2, 0x0041 };

    // 0EC3 0EA2 0041;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA2 0041;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_383)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA2, 0x0062 };

    // 0EC3 0EA2 0062;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA2 0062;	
    // (ໃຢ) LAO VOWEL SIGN AY, LAO LETTER YO	[2E76 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_384)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA2, 0x0021 };

    // 0EC4 0EA2 0021;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA2 0021;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_385)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA2, 0x003F };

    // 0EC4 0EA2 003F;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA2 003F;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E76, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_386)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA2, 0x0061 };

    // 0EC4 0EA2 0061;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA2 0061;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_387)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA2, 0x0041 };

    // 0EC4 0EA2 0041;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA2 0041;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_388)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA2, 0x0062 };

    // 0EC4 0EA2 0062;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E76, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA2 0062;	
    // (ໄຢ) LAO VOWEL SIGN AI, LAO LETTER YO	[2E76 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E76, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_389)
{
    uint32_t const cps[2] = { 0x0EA3, 0x0021 };

    // 0EA3 0021;	
    // (ຣ) LAO LETTER LO LING	[2E77 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA3 0021;	
    // (ຣ) LAO LETTER LO LING	[2E77 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E77, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_390)
{
    uint32_t const cps[2] = { 0x0EA3, 0x003F };

    // 0EA3 003F;	
    // (ຣ) LAO LETTER LO LING	[2E77 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA3 003F;	
    // (ຣ) LAO LETTER LO LING	[2E77 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E77, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_391)
{
    uint32_t const cps[2] = { 0x0EA3, 0x0061 };

    // 0EA3 0061;	
    // (ຣ) LAO LETTER LO LING	[2E77 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA3 0061;	
    // (ຣ) LAO LETTER LO LING	[2E77 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_392)
{
    uint32_t const cps[2] = { 0x0EA3, 0x0041 };

    // 0EA3 0041;	
    // (ຣ) LAO LETTER LO LING	[2E77 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA3 0041;	
    // (ຣ) LAO LETTER LO LING	[2E77 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_393)
{
    uint32_t const cps[2] = { 0x0EA3, 0x0062 };

    // 0EA3 0062;	
    // (ຣ) LAO LETTER LO LING	[2E77 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA3 0062;	
    // (ຣ) LAO LETTER LO LING	[2E77 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_394)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA3, 0x0021 };

    // 0EC0 0EA3 0021;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA3 0021;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_395)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA3, 0x003F };

    // 0EC0 0EA3 003F;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA3 003F;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_396)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA3, 0x0061 };

    // 0EC0 0EA3 0061;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA3 0061;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_397)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA3, 0x0041 };

    // 0EC0 0EA3 0041;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA3 0041;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_398)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA3, 0x0062 };

    // 0EC0 0EA3 0062;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA3 0062;	
    // (ເຣ) LAO VOWEL SIGN E, LAO LETTER LO LING	[2E77 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_399)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA3, 0x0021 };

    // 0EC1 0EA3 0021;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA3 0021;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_400)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA3, 0x003F };

    // 0EC1 0EA3 003F;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA3 003F;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_401)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA3, 0x0061 };

    // 0EC1 0EA3 0061;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA3 0061;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_402)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA3, 0x0041 };

    // 0EC1 0EA3 0041;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA3 0041;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_403)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA3, 0x0062 };

    // 0EC1 0EA3 0062;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA3 0062;	
    // (ແຣ) LAO VOWEL SIGN EI, LAO LETTER LO LING	[2E77 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_404)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA3, 0x0021 };

    // 0EC2 0EA3 0021;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA3 0021;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_405)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA3, 0x003F };

    // 0EC2 0EA3 003F;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA3 003F;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_406)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA3, 0x0061 };

    // 0EC2 0EA3 0061;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA3 0061;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_407)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA3, 0x0041 };

    // 0EC2 0EA3 0041;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA3 0041;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_408)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA3, 0x0062 };

    // 0EC2 0EA3 0062;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA3 0062;	
    // (ໂຣ) LAO VOWEL SIGN O, LAO LETTER LO LING	[2E77 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_409)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA3, 0x0021 };

    // 0EC3 0EA3 0021;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA3 0021;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_410)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA3, 0x003F };

    // 0EC3 0EA3 003F;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA3 003F;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_411)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA3, 0x0061 };

    // 0EC3 0EA3 0061;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA3 0061;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_412)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA3, 0x0041 };

    // 0EC3 0EA3 0041;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA3 0041;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_413)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA3, 0x0062 };

    // 0EC3 0EA3 0062;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA3 0062;	
    // (ໃຣ) LAO VOWEL SIGN AY, LAO LETTER LO LING	[2E77 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_414)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA3, 0x0021 };

    // 0EC4 0EA3 0021;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA3 0021;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_415)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA3, 0x003F };

    // 0EC4 0EA3 003F;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA3 003F;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E77, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_416)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA3, 0x0061 };

    // 0EC4 0EA3 0061;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA3 0061;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_417)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA3, 0x0041 };

    // 0EC4 0EA3 0041;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA3 0041;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_418)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA3, 0x0062 };

    // 0EC4 0EA3 0062;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E77, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA3 0062;	
    // (ໄຣ) LAO VOWEL SIGN AI, LAO LETTER LO LING	[2E77 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E77, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_419)
{
    uint32_t const cps[2] = { 0x0EA5, 0x0021 };

    // 0EA5 0021;	
    // (ລ) LAO LETTER LO LOOT	[2E78 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA5 0021;	
    // (ລ) LAO LETTER LO LOOT	[2E78 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E78, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_420)
{
    uint32_t const cps[2] = { 0x0EA5, 0x003F };

    // 0EA5 003F;	
    // (ລ) LAO LETTER LO LOOT	[2E78 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA5 003F;	
    // (ລ) LAO LETTER LO LOOT	[2E78 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E78, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_421)
{
    uint32_t const cps[2] = { 0x0EA5, 0x0061 };

    // 0EA5 0061;	
    // (ລ) LAO LETTER LO LOOT	[2E78 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA5 0061;	
    // (ລ) LAO LETTER LO LOOT	[2E78 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_422)
{
    uint32_t const cps[2] = { 0x0EA5, 0x0041 };

    // 0EA5 0041;	
    // (ລ) LAO LETTER LO LOOT	[2E78 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA5 0041;	
    // (ລ) LAO LETTER LO LOOT	[2E78 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_423)
{
    uint32_t const cps[2] = { 0x0EA5, 0x0062 };

    // 0EA5 0062;	
    // (ລ) LAO LETTER LO LOOT	[2E78 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA5 0062;	
    // (ລ) LAO LETTER LO LOOT	[2E78 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_424)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA5, 0x0021 };

    // 0EC0 0EA5 0021;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA5 0021;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_425)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA5, 0x003F };

    // 0EC0 0EA5 003F;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA5 003F;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_426)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA5, 0x0061 };

    // 0EC0 0EA5 0061;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA5 0061;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_427)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA5, 0x0041 };

    // 0EC0 0EA5 0041;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA5 0041;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_428)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA5, 0x0062 };

    // 0EC0 0EA5 0062;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA5 0062;	
    // (ເລ) LAO VOWEL SIGN E, LAO LETTER LO LOOT	[2E78 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_429)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA5, 0x0021 };

    // 0EC1 0EA5 0021;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA5 0021;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_430)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA5, 0x003F };

    // 0EC1 0EA5 003F;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA5 003F;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_431)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA5, 0x0061 };

    // 0EC1 0EA5 0061;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA5 0061;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_432)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA5, 0x0041 };

    // 0EC1 0EA5 0041;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA5 0041;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_433)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA5, 0x0062 };

    // 0EC1 0EA5 0062;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA5 0062;	
    // (ແລ) LAO VOWEL SIGN EI, LAO LETTER LO LOOT	[2E78 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_434)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA5, 0x0021 };

    // 0EC2 0EA5 0021;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA5 0021;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_435)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA5, 0x003F };

    // 0EC2 0EA5 003F;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA5 003F;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_436)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA5, 0x0061 };

    // 0EC2 0EA5 0061;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA5 0061;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_437)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA5, 0x0041 };

    // 0EC2 0EA5 0041;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA5 0041;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_438)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA5, 0x0062 };

    // 0EC2 0EA5 0062;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA5 0062;	
    // (ໂລ) LAO VOWEL SIGN O, LAO LETTER LO LOOT	[2E78 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_439)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA5, 0x0021 };

    // 0EC3 0EA5 0021;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA5 0021;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_440)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA5, 0x003F };

    // 0EC3 0EA5 003F;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA5 003F;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_441)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA5, 0x0061 };

    // 0EC3 0EA5 0061;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA5 0061;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_442)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA5, 0x0041 };

    // 0EC3 0EA5 0041;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA5 0041;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_443)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA5, 0x0062 };

    // 0EC3 0EA5 0062;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA5 0062;	
    // (ໃລ) LAO VOWEL SIGN AY, LAO LETTER LO LOOT	[2E78 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_444)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA5, 0x0021 };

    // 0EC4 0EA5 0021;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA5 0021;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_445)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA5, 0x003F };

    // 0EC4 0EA5 003F;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA5 003F;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E78, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_446)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA5, 0x0061 };

    // 0EC4 0EA5 0061;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA5 0061;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_447)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA5, 0x0041 };

    // 0EC4 0EA5 0041;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA5 0041;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_448)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA5, 0x0062 };

    // 0EC4 0EA5 0062;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E78, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA5 0062;	
    // (ໄລ) LAO VOWEL SIGN AI, LAO LETTER LO LOOT	[2E78 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E78, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_449)
{
    uint32_t const cps[2] = { 0x0EA7, 0x0021 };

    // 0EA7 0021;	
    // (ວ) LAO LETTER WO	[2E79 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA7 0021;	
    // (ວ) LAO LETTER WO	[2E79 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E79, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_450)
{
    uint32_t const cps[2] = { 0x0EA7, 0x003F };

    // 0EA7 003F;	
    // (ວ) LAO LETTER WO	[2E79 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA7 003F;	
    // (ວ) LAO LETTER WO	[2E79 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E79, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_451)
{
    uint32_t const cps[2] = { 0x0EA7, 0x0061 };

    // 0EA7 0061;	
    // (ວ) LAO LETTER WO	[2E79 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA7 0061;	
    // (ວ) LAO LETTER WO	[2E79 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_452)
{
    uint32_t const cps[2] = { 0x0EA7, 0x0041 };

    // 0EA7 0041;	
    // (ວ) LAO LETTER WO	[2E79 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA7 0041;	
    // (ວ) LAO LETTER WO	[2E79 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_453)
{
    uint32_t const cps[2] = { 0x0EA7, 0x0062 };

    // 0EA7 0062;	
    // (ວ) LAO LETTER WO	[2E79 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EA7 0062;	
    // (ວ) LAO LETTER WO	[2E79 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_454)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA7, 0x0021 };

    // 0EC0 0EA7 0021;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA7 0021;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_455)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA7, 0x003F };

    // 0EC0 0EA7 003F;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA7 003F;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_456)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA7, 0x0061 };

    // 0EC0 0EA7 0061;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA7 0061;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_457)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA7, 0x0041 };

    // 0EC0 0EA7 0041;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA7 0041;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_458)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EA7, 0x0062 };

    // 0EC0 0EA7 0062;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EA7 0062;	
    // (ເວ) LAO VOWEL SIGN E, LAO LETTER WO	[2E79 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_459)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA7, 0x0021 };

    // 0EC1 0EA7 0021;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA7 0021;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_460)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA7, 0x003F };

    // 0EC1 0EA7 003F;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA7 003F;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_461)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA7, 0x0061 };

    // 0EC1 0EA7 0061;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA7 0061;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_462)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA7, 0x0041 };

    // 0EC1 0EA7 0041;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA7 0041;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_463)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EA7, 0x0062 };

    // 0EC1 0EA7 0062;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EA7 0062;	
    // (ແວ) LAO VOWEL SIGN EI, LAO LETTER WO	[2E79 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_464)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA7, 0x0021 };

    // 0EC2 0EA7 0021;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA7 0021;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_465)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA7, 0x003F };

    // 0EC2 0EA7 003F;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA7 003F;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_466)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA7, 0x0061 };

    // 0EC2 0EA7 0061;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA7 0061;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_467)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA7, 0x0041 };

    // 0EC2 0EA7 0041;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA7 0041;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_468)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EA7, 0x0062 };

    // 0EC2 0EA7 0062;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EA7 0062;	
    // (ໂວ) LAO VOWEL SIGN O, LAO LETTER WO	[2E79 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_469)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA7, 0x0021 };

    // 0EC3 0EA7 0021;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA7 0021;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_470)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA7, 0x003F };

    // 0EC3 0EA7 003F;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA7 003F;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_471)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA7, 0x0061 };

    // 0EC3 0EA7 0061;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA7 0061;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_472)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA7, 0x0041 };

    // 0EC3 0EA7 0041;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA7 0041;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_473)
{
    uint32_t const cps[3] = { 0x0EC3, 0x0EA7, 0x0062 };

    // 0EC3 0EA7 0062;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC3 0EA7 0062;	
    // (ໃວ) LAO VOWEL SIGN AY, LAO LETTER WO	[2E79 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_474)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA7, 0x0021 };

    // 0EC4 0EA7 0021;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA7 0021;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_475)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA7, 0x003F };

    // 0EC4 0EA7 003F;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA7 003F;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E79, 0x2E8F, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_476)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA7, 0x0061 };

    // 0EC4 0EA7 0061;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA7 0061;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_477)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA7, 0x0041 };

    // 0EC4 0EA7 0041;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA7 0041;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_478)
{
    uint32_t const cps[3] = { 0x0EC4, 0x0EA7, 0x0062 };

    // 0EC4 0EA7 0062;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E79, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC4 0EA7 0062;	
    // (ໄວ) LAO VOWEL SIGN AI, LAO LETTER WO	[2E79 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E79, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_479)
{
    uint32_t const cps[2] = { 0x0EAB, 0x0021 };

    // 0EAB 0021;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EAB 0021;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2E7A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_480)
{
    uint32_t const cps[2] = { 0x0EAB, 0x003F };

    // 0EAB 003F;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EAB 003F;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2E7A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_481)
{
    uint32_t const cps[2] = { 0x0EAB, 0x0061 };

    // 0EAB 0061;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EAB 0061;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_482)
{
    uint32_t const cps[2] = { 0x0EAB, 0x0041 };

    // 0EAB 0041;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EAB 0041;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_483)
{
    uint32_t const cps[2] = { 0x0EAB, 0x0062 };

    // 0EAB 0062;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EAB 0062;	
    // (ຫ) LAO LETTER HO SUNG	[2E7A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_484)
{
    uint32_t const cps[2] = { 0x0EDC, 0x0021 };

    // 0EDC 0021;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E7A, 0x2E6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EDC 0021;	
    // (ໜ) LAO HO NO	[2E7A 2E6E | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2E7A, 0x2E6E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_485)
{
    uint32_t const cps[2] = { 0x0EDC, 0x003F };

    // 0EDC 003F;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E7A, 0x2E6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EDC 003F;	
    // (ໜ) LAO HO NO	[2E7A 2E6E | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2E7A, 0x2E6E, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_486)
{
    uint32_t const cps[2] = { 0x0EDC, 0x0061 };

    // 0EDC 0061;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EDC 0061;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_487)
{
    uint32_t const cps[2] = { 0x0EDC, 0x0041 };

    // 0EDC 0041;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EDC 0041;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_488)
{
    uint32_t const cps[2] = { 0x0EDC, 0x0062 };

    // 0EDC 0062;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2E7A, 0x2E6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EDC 0062;	
    // (ໜ) LAO HO NO	[2E7A 2E6E 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2E7A, 0x2E6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_489)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EDC, 0x0021 };

    // 0EC0 0EDC 0021;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EDC 0021;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_490)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EDC, 0x003F };

    // 0EC0 0EDC 003F;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EDC 003F;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_491)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EDC, 0x0061 };

    // 0EC0 0EDC 0061;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EDC 0061;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_492)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EDC, 0x0041 };

    // 0EC0 0EDC 0041;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EDC 0041;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_493)
{
    uint32_t const cps[3] = { 0x0EC0, 0x0EDC, 0x0062 };

    // 0EC0 0EDC 0062;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC0 0EDC 0062;	
    // (ເໜ) LAO VOWEL SIGN E, LAO HO NO	[2E7A 2E6E 2E8B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x2E7A, 0x2E6E, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_494)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EDC, 0x0021 };

    // 0EC1 0EDC 0021;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EDC 0021;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_495)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EDC, 0x003F };

    // 0EC1 0EDC 003F;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EDC 003F;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_496)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EDC, 0x0061 };

    // 0EC1 0EDC 0061;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EDC 0061;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_497)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EDC, 0x0041 };

    // 0EC1 0EDC 0041;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EDC 0041;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_498)
{
    uint32_t const cps[3] = { 0x0EC1, 0x0EDC, 0x0062 };

    // 0EC1 0EDC 0062;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC1 0EDC 0062;	
    // (ແໜ) LAO VOWEL SIGN EI, LAO HO NO	[2E7A 2E6E 2E8C 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x2E7A, 0x2E6E, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_190_499)
{
    uint32_t const cps[3] = { 0x0EC2, 0x0EDC, 0x0021 };

    // 0EC2 0EDC 0021;	
    // (ໂໜ) LAO VOWEL SIGN O, LAO HO NO	[2E7A 2E6E 2E8D 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x2E7A, 0x2E6E, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0EC2 0EDC 0021;	
    // (ໂໜ) LAO VOWEL SIGN O, LAO HO NO	[2E7A 2E6E 2E8D | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x2E7A, 0x2E6E, 0x2E8D, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

