// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_077_000)
{
    // 2FA4  ; [.FB41.0020.0004][.91C6.0000.0000] 
    // KANGXI RADICAL DISTINGUISH

    uint32_t const cps[1] = { 0x2fa4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x91c6), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_001)
{
    // 2FA5  ; [.FB41.0020.0004][.91CC.0000.0000] 
    // KANGXI RADICAL VILLAGE

    uint32_t const cps[1] = { 0x2fa5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x91cc), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_002)
{
    // 2FA6  ; [.FB41.0020.0004][.91D1.0000.0000] 
    // KANGXI RADICAL GOLD

    uint32_t const cps[1] = { 0x2fa6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x91d1), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_003)
{
    // 2FA7  ; [.FB41.0020.0004][.9577.0000.0000] 
    // KANGXI RADICAL LONG

    uint32_t const cps[1] = { 0x2fa7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9577), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_004)
{
    // 2FA8  ; [.FB41.0020.0004][.9580.0000.0000] 
    // KANGXI RADICAL GATE

    uint32_t const cps[1] = { 0x2fa8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9580), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_005)
{
    // 2FA9  ; [.FB41.0020.0004][.961C.0000.0000] 
    // KANGXI RADICAL MOUND

    uint32_t const cps[1] = { 0x2fa9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x961c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_006)
{
    // 2FAA  ; [.FB41.0020.0004][.96B6.0000.0000] 
    // KANGXI RADICAL SLAVE

    uint32_t const cps[1] = { 0x2faa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x96b6), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_007)
{
    // 2FAB  ; [.FB41.0020.0004][.96B9.0000.0000] 
    // KANGXI RADICAL SHORT TAILED BIRD

    uint32_t const cps[1] = { 0x2fab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x96b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_008)
{
    // 2FAC  ; [.FB41.0020.0004][.96E8.0000.0000] 
    // KANGXI RADICAL RAIN

    uint32_t const cps[1] = { 0x2fac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x96e8), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_009)
{
    // 2FAD  ; [.FB41.0020.0004][.9751.0000.0000] 
    // KANGXI RADICAL BLUE

    uint32_t const cps[1] = { 0x2fad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9751), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_010)
{
    // 2FAE  ; [.FB41.0020.0004][.975E.0000.0000] 
    // KANGXI RADICAL WRONG

    uint32_t const cps[1] = { 0x2fae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x975e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_011)
{
    // 2FAF  ; [.FB41.0020.0004][.9762.0000.0000] 
    // KANGXI RADICAL FACE

    uint32_t const cps[1] = { 0x2faf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9762), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_012)
{
    // 2FB0  ; [.FB41.0020.0004][.9769.0000.0000] 
    // KANGXI RADICAL LEATHER

    uint32_t const cps[1] = { 0x2fb0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9769), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_013)
{
    // 2FB1  ; [.FB41.0020.0004][.97CB.0000.0000] 
    // KANGXI RADICAL TANNED LEATHER

    uint32_t const cps[1] = { 0x2fb1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x97cb), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_014)
{
    // 2FB2  ; [.FB41.0020.0004][.97ED.0000.0000] 
    // KANGXI RADICAL LEEK

    uint32_t const cps[1] = { 0x2fb2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x97ed), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_015)
{
    // 2FB3  ; [.FB41.0020.0004][.97F3.0000.0000] 
    // KANGXI RADICAL SOUND

    uint32_t const cps[1] = { 0x2fb3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x97f3), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_016)
{
    // 2FB4  ; [.FB41.0020.0004][.9801.0000.0000] 
    // KANGXI RADICAL LEAF

    uint32_t const cps[1] = { 0x2fb4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9801), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_017)
{
    // 2FB5  ; [.FB41.0020.0004][.98A8.0000.0000] 
    // KANGXI RADICAL WIND

    uint32_t const cps[1] = { 0x2fb5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98a8), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_018)
{
    // 2FB6  ; [.FB41.0020.0004][.98DB.0000.0000] 
    // KANGXI RADICAL FLY

    uint32_t const cps[1] = { 0x2fb6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98db), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_019)
{
    // 2FB7  ; [.FB41.0020.0004][.98DF.0000.0000] 
    // KANGXI RADICAL EAT

    uint32_t const cps[1] = { 0x2fb7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98df), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_020)
{
    // 2FB8  ; [.FB41.0020.0004][.9996.0000.0000] 
    // KANGXI RADICAL HEAD

    uint32_t const cps[1] = { 0x2fb8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9996), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_021)
{
    // 2FB9  ; [.FB41.0020.0004][.9999.0000.0000] 
    // KANGXI RADICAL FRAGRANT

    uint32_t const cps[1] = { 0x2fb9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9999), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_022)
{
    // 2FBA  ; [.FB41.0020.0004][.99AC.0000.0000] 
    // KANGXI RADICAL HORSE

    uint32_t const cps[1] = { 0x2fba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x99ac), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_023)
{
    // 2FBB  ; [.FB41.0020.0004][.9AA8.0000.0000] 
    // KANGXI RADICAL BONE

    uint32_t const cps[1] = { 0x2fbb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9aa8), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_024)
{
    // 2FBC  ; [.FB41.0020.0004][.9AD8.0000.0000] 
    // KANGXI RADICAL TALL

    uint32_t const cps[1] = { 0x2fbc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ad8), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_025)
{
    // 2FBD  ; [.FB41.0020.0004][.9ADF.0000.0000] 
    // KANGXI RADICAL HAIR

    uint32_t const cps[1] = { 0x2fbd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9adf), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_026)
{
    // 2FBE  ; [.FB41.0020.0004][.9B25.0000.0000] 
    // KANGXI RADICAL FIGHT

    uint32_t const cps[1] = { 0x2fbe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9b25), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_027)
{
    // 2FBF  ; [.FB41.0020.0004][.9B2F.0000.0000] 
    // KANGXI RADICAL SACRIFICIAL WINE

    uint32_t const cps[1] = { 0x2fbf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9b2f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_028)
{
    // 2FC0  ; [.FB41.0020.0004][.9B32.0000.0000] 
    // KANGXI RADICAL CAULDRON

    uint32_t const cps[1] = { 0x2fc0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9b32), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_029)
{
    // 2FC1  ; [.FB41.0020.0004][.9B3C.0000.0000] 
    // KANGXI RADICAL GHOST

    uint32_t const cps[1] = { 0x2fc1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9b3c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_030)
{
    // 2FC2  ; [.FB41.0020.0004][.9B5A.0000.0000] 
    // KANGXI RADICAL FISH

    uint32_t const cps[1] = { 0x2fc2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9b5a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_031)
{
    // 2FC3  ; [.FB41.0020.0004][.9CE5.0000.0000] 
    // KANGXI RADICAL BIRD

    uint32_t const cps[1] = { 0x2fc3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ce5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_032)
{
    // 2FC4  ; [.FB41.0020.0004][.9E75.0000.0000] 
    // KANGXI RADICAL SALT

    uint32_t const cps[1] = { 0x2fc4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9e75), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_033)
{
    // 2FC5  ; [.FB41.0020.0004][.9E7F.0000.0000] 
    // KANGXI RADICAL DEER

    uint32_t const cps[1] = { 0x2fc5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9e7f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_034)
{
    // 2FC6  ; [.FB41.0020.0004][.9EA5.0000.0000] 
    // KANGXI RADICAL WHEAT

    uint32_t const cps[1] = { 0x2fc6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ea5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_035)
{
    // 2FC7  ; [.FB41.0020.0004][.9EBB.0000.0000] 
    // KANGXI RADICAL HEMP

    uint32_t const cps[1] = { 0x2fc7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ebb), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_036)
{
    // 2FC8  ; [.FB41.0020.0004][.9EC3.0000.0000] 
    // KANGXI RADICAL YELLOW

    uint32_t const cps[1] = { 0x2fc8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ec3), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_037)
{
    // 2FC9  ; [.FB41.0020.0004][.9ECD.0000.0000] 
    // KANGXI RADICAL MILLET

    uint32_t const cps[1] = { 0x2fc9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ecd), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_038)
{
    // 2FCA  ; [.FB41.0020.0004][.9ED1.0000.0000] 
    // KANGXI RADICAL BLACK

    uint32_t const cps[1] = { 0x2fca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ed1), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_039)
{
    // 2FCB  ; [.FB41.0020.0004][.9EF9.0000.0000] 
    // KANGXI RADICAL EMBROIDERY

    uint32_t const cps[1] = { 0x2fcb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ef9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_040)
{
    // 2FCC  ; [.FB41.0020.0004][.9EFD.0000.0000] 
    // KANGXI RADICAL FROG

    uint32_t const cps[1] = { 0x2fcc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9efd), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_041)
{
    // 2FCD  ; [.FB41.0020.0004][.9F0E.0000.0000] 
    // KANGXI RADICAL TRIPOD

    uint32_t const cps[1] = { 0x2fcd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f0e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_042)
{
    // 2FCE  ; [.FB41.0020.0004][.9F13.0000.0000] 
    // KANGXI RADICAL DRUM

    uint32_t const cps[1] = { 0x2fce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f13), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_043)
{
    // 2FCF  ; [.FB41.0020.0004][.9F20.0000.0000] 
    // KANGXI RADICAL RAT

    uint32_t const cps[1] = { 0x2fcf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f20), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_044)
{
    // 2FD0  ; [.FB41.0020.0004][.9F3B.0000.0000] 
    // KANGXI RADICAL NOSE

    uint32_t const cps[1] = { 0x2fd0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f3b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_045)
{
    // 2FD1  ; [.FB41.0020.0004][.9F4A.0000.0000] 
    // KANGXI RADICAL EVEN

    uint32_t const cps[1] = { 0x2fd1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f4a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_046)
{
    // 2FD2  ; [.FB41.0020.0004][.9F52.0000.0000] 
    // KANGXI RADICAL TOOTH

    uint32_t const cps[1] = { 0x2fd2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f52), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_047)
{
    // 2FD3  ; [.FB41.0020.0004][.9F8D.0000.0000] 
    // KANGXI RADICAL DRAGON

    uint32_t const cps[1] = { 0x2fd3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f8d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_048)
{
    // 2FD4  ; [.FB41.0020.0004][.9F9C.0000.0000] 
    // KANGXI RADICAL TURTLE

    uint32_t const cps[1] = { 0x2fd4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f9c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_049)
{
    // 2FD5  ; [.FB41.0020.0004][.9FA0.0000.0000] 
    // KANGXI RADICAL FLUTE

    uint32_t const cps[1] = { 0x2fd5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9fa0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_050)
{
    // 2FF0  ; [*1ABF.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT

    uint32_t const cps[1] = { 0x2ff0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1abf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_051)
{
    // 2FF1  ; [*1AC0.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW

    uint32_t const cps[1] = { 0x2ff1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_052)
{
    // 2FF2  ; [*1AC1.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT

    uint32_t const cps[1] = { 0x2ff2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_053)
{
    // 2FF3  ; [*1AC2.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW

    uint32_t const cps[1] = { 0x2ff3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_054)
{
    // 2FF4  ; [*1AC3.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND

    uint32_t const cps[1] = { 0x2ff4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_055)
{
    // 2FF5  ; [*1AC4.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE

    uint32_t const cps[1] = { 0x2ff5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_056)
{
    // 2FF6  ; [*1AC5.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW

    uint32_t const cps[1] = { 0x2ff6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_057)
{
    // 2FF7  ; [*1AC6.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT

    uint32_t const cps[1] = { 0x2ff7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_058)
{
    // 2FF8  ; [*1AC7.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT

    uint32_t const cps[1] = { 0x2ff8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_059)
{
    // 2FF9  ; [*1AC8.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT

    uint32_t const cps[1] = { 0x2ff9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_060)
{
    // 2FFA  ; [*1AC9.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT

    uint32_t const cps[1] = { 0x2ffa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ac9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_061)
{
    // 2FFB  ; [*1ACA.0020.0002] 
    // IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID

    uint32_t const cps[1] = { 0x2ffb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1aca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_062)
{
    // 3000  ; [*0209.0020.0003] 
    // IDEOGRAPHIC SPACE

    uint32_t const cps[1] = { 0x3000 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_063)
{
    // 3001  ; [*0231.0020.0002] 
    // IDEOGRAPHIC COMMA

    uint32_t const cps[1] = { 0x3001 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x231), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_064)
{
    // 3002  ; [*028B.0020.0002] 
    // IDEOGRAPHIC FULL STOP

    uint32_t const cps[1] = { 0x3002 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x28b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_065)
{
    // 3003  ; [*03AD.0020.0002] 
    // DITTO MARK

    uint32_t const cps[1] = { 0x3003 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_066)
{
    // 3004  ; [*1AEF.0020.0002] 
    // JAPANESE INDUSTRIAL STANDARD SYMBOL

    uint32_t const cps[1] = { 0x3004 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1aef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_067)
{
    // 3005  ; [.1C6B.0020.0002] 
    // IDEOGRAPHIC ITERATION MARK

    uint32_t const cps[1] = { 0x3005 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_068)
{
    // 3006  ; [.3E7D.0020.0004][.3E93.0020.0004] 
    // IDEOGRAPHIC CLOSING MARK

    uint32_t const cps[1] = { 0x3006 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e7d), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3e93), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_069)
{
    // 3007  ; [.1CA3.0020.0002] 
    // IDEOGRAPHIC NUMBER ZERO

    uint32_t const cps[1] = { 0x3007 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_070)
{
    // 3008  ; [*0370.0020.0002] 
    // LEFT ANGLE BRACKET

    uint32_t const cps[1] = { 0x2329 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x370), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_071)
{
    // 3009  ; [*0371.0020.0002] 
    // RIGHT ANGLE BRACKET

    uint32_t const cps[1] = { 0x232a }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x371), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_072)
{
    // 300A  ; [*0372.0020.0002] 
    // LEFT DOUBLE ANGLE BRACKET

    uint32_t const cps[1] = { 0x300a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x372), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_073)
{
    // 300B  ; [*0373.0020.0002] 
    // RIGHT DOUBLE ANGLE BRACKET

    uint32_t const cps[1] = { 0x300b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x373), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_074)
{
    // 300C  ; [*0374.0020.0002] 
    // LEFT CORNER BRACKET

    uint32_t const cps[1] = { 0x300c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x374), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_075)
{
    // 300D  ; [*0375.0020.0002] 
    // RIGHT CORNER BRACKET

    uint32_t const cps[1] = { 0x300d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x375), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_076)
{
    // 300E  ; [*0376.0020.0002] 
    // LEFT WHITE CORNER BRACKET

    uint32_t const cps[1] = { 0x300e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x376), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_077)
{
    // 300F  ; [*0377.0020.0002] 
    // RIGHT WHITE CORNER BRACKET

    uint32_t const cps[1] = { 0x300f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x377), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_078)
{
    // 3010  ; [*0378.0020.0002] 
    // LEFT BLACK LENTICULAR BRACKET

    uint32_t const cps[1] = { 0x3010 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x378), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_079)
{
    // 3011  ; [*0379.0020.0002] 
    // RIGHT BLACK LENTICULAR BRACKET

    uint32_t const cps[1] = { 0x3011 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x379), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_080)
{
    // 3012  ; [*1AF0.0020.0002] 
    // POSTAL MARK

    uint32_t const cps[1] = { 0x3012 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_081)
{
    // 3013  ; [*1AF1.0020.0002] 
    // GETA MARK

    uint32_t const cps[1] = { 0x3013 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_082)
{
    // 3014  ; [*037A.0020.0002] 
    // LEFT TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x3014 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_083)
{
    // 3015  ; [*037B.0020.0002] 
    // RIGHT TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x3015 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_084)
{
    // 3016  ; [*037C.0020.0002] 
    // LEFT WHITE LENTICULAR BRACKET

    uint32_t const cps[1] = { 0x3016 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x37c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_085)
{
    // 3017  ; [*037D.0020.0002] 
    // RIGHT WHITE LENTICULAR BRACKET

    uint32_t const cps[1] = { 0x3017 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x37d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_086)
{
    // 3018  ; [*037E.0020.0002] 
    // LEFT WHITE TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x3018 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x37e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_087)
{
    // 3019  ; [*037F.0020.0002] 
    // RIGHT WHITE TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x3019 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x37f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_088)
{
    // 301A  ; [*0380.0020.0002] 
    // LEFT WHITE SQUARE BRACKET

    uint32_t const cps[1] = { 0x301a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x380), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_089)
{
    // 301B  ; [*0381.0020.0002] 
    // RIGHT WHITE SQUARE BRACKET

    uint32_t const cps[1] = { 0x301b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x381), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_090)
{
    // 301C  ; [*021E.0020.0002] 
    // WAVE DASH

    uint32_t const cps[1] = { 0x301c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_091)
{
    // 301D  ; [*0313.0020.0002] 
    // REVERSED DOUBLE PRIME QUOTATION MARK

    uint32_t const cps[1] = { 0x301d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x313), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_092)
{
    // 301E  ; [*0314.0020.0002] 
    // DOUBLE PRIME QUOTATION MARK

    uint32_t const cps[1] = { 0x301e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x314), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_093)
{
    // 301F  ; [*0315.0020.0002] 
    // LOW DOUBLE PRIME QUOTATION MARK

    uint32_t const cps[1] = { 0x301f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x315), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_094)
{
    // 3020  ; [*1AF2.0020.0002] 
    // POSTAL MARK FACE

    uint32_t const cps[1] = { 0x3020 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_095)
{
    // 3021  ; [.1CA4.0020.0002] 
    // HANGZHOU NUMERAL ONE

    uint32_t const cps[1] = { 0x3021 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_096)
{
    // 3022  ; [.1CA5.0020.0002] 
    // HANGZHOU NUMERAL TWO

    uint32_t const cps[1] = { 0x3022 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_097)
{
    // 3023  ; [.1CA6.0020.0002] 
    // HANGZHOU NUMERAL THREE

    uint32_t const cps[1] = { 0x3023 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_098)
{
    // 3024  ; [.1CA7.0020.0002] 
    // HANGZHOU NUMERAL FOUR

    uint32_t const cps[1] = { 0x3024 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_099)
{
    // 3025  ; [.1CA8.0020.0002] 
    // HANGZHOU NUMERAL FIVE

    uint32_t const cps[1] = { 0x3025 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_100)
{
    // 3026  ; [.1CA9.0020.0002] 
    // HANGZHOU NUMERAL SIX

    uint32_t const cps[1] = { 0x3026 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_101)
{
    // 3027  ; [.1CAA.0020.0002] 
    // HANGZHOU NUMERAL SEVEN

    uint32_t const cps[1] = { 0x3027 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_102)
{
    // 3028  ; [.1CAB.0020.0002] 
    // HANGZHOU NUMERAL EIGHT

    uint32_t const cps[1] = { 0x3028 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_103)
{
    // 3029  ; [.1CAC.0020.0002] 
    // HANGZHOU NUMERAL NINE

    uint32_t const cps[1] = { 0x3029 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_104)
{
    // 302A  ; [.0000.00FC.0002] 
    // IDEOGRAPHIC LEVEL TONE MARK

    uint32_t const cps[1] = { 0x302a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xdc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_105)
{
    // 302B  ; [.0000.00FD.0002] 
    // IDEOGRAPHIC RISING TONE MARK

    uint32_t const cps[1] = { 0x302b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xdd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_106)
{
    // 302C  ; [.0000.00FE.0002] 
    // IDEOGRAPHIC DEPARTING TONE MARK

    uint32_t const cps[1] = { 0x302c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xde), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_107)
{
    // 302D  ; [.0000.00FF.0002] 
    // IDEOGRAPHIC ENTERING TONE MARK

    uint32_t const cps[1] = { 0x302d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xdf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_108)
{
    // 302E  ; [.0000.0100.0002] 
    // HANGUL SINGLE DOT TONE MARK

    uint32_t const cps[1] = { 0x302e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_109)
{
    // 302F  ; [.0000.0101.0002] 
    // HANGUL DOUBLE DOT TONE MARK

    uint32_t const cps[1] = { 0x302f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe1), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_110)
{
    // 3030  ; [*021F.0020.0002] 
    // WAVY DASH

    uint32_t const cps[1] = { 0x3030 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_111)
{
    // 3031  ; [.1C6F.0020.0002] 
    // VERTICAL KANA REPEAT MARK

    uint32_t const cps[1] = { 0x3031 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_112)
{
    // 3032  ; [.1C6F.0020.0002][.0000.0037.0002] 
    // VERTICAL KANA REPEAT WITH VOICED SOUND MARK

    uint32_t const cps[1] = { 0x3032 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1c6f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_113)
{
    // 3033  ; [.1C70.0020.0002] 
    // VERTICAL KANA REPEAT MARK UPPER HALF

    uint32_t const cps[1] = { 0x3033 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_114)
{
    // 3034  ; [.1C70.0020.0002][.0000.0037.0002] 
    // VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF

    uint32_t const cps[1] = { 0x3034 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1c70), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_115)
{
    // 3035  ; [.1C71.0020.0002] 
    // VERTICAL KANA REPEAT MARK LOWER HALF

    uint32_t const cps[1] = { 0x3035 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_116)
{
    // 3036  ; [*1AF0.0020.0004] 
    // CIRCLED POSTAL MARK

    uint32_t const cps[1] = { 0x3036 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af0), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_117)
{
    // 3037  ; [*1AF3.0020.0002] 
    // IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL

    uint32_t const cps[1] = { 0x3037 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_118)
{
    // 3038  ; [.FB40.0020.0004][.D341.0000.0000] 
    // HANGZHOU NUMERAL TEN

    uint32_t const cps[1] = { 0x3038 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd341), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_119)
{
    // 3039  ; [.FB40.0020.0004][.D344.0000.0000] 
    // HANGZHOU NUMERAL TWENTY

    uint32_t const cps[1] = { 0x3039 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd344), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_120)
{
    // 303A  ; [.FB40.0020.0004][.D345.0000.0000] 
    // HANGZHOU NUMERAL THIRTY

    uint32_t const cps[1] = { 0x303a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd345), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_121)
{
    // 303B  ; [.1C6C.0020.0002] 
    // VERTICAL IDEOGRAPHIC ITERATION MARK

    uint32_t const cps[1] = { 0x303b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_122)
{
    // 303C  ; [.3E90.0020.0004][.3E7E.0020.0004] 
    // MASU MARK

    uint32_t const cps[1] = { 0x303c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e90), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3e7e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_123)
{
    // 303D  ; [*03AE.0020.0002] 
    // PART ALTERNATION MARK

    uint32_t const cps[1] = { 0x303d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_124)
{
    // 303E  ; [*1AF4.0020.0002] 
    // IDEOGRAPHIC VARIATION INDICATOR

    uint32_t const cps[1] = { 0x303e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_125)
{
    // 303F  ; [*1AF5.0020.0002] 
    // IDEOGRAPHIC HALF FILL SPACE

    uint32_t const cps[1] = { 0x303f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_126)
{
    // 3041  ; [.3E71.0020.000D] 
    // HIRAGANA LETTER SMALL A

    uint32_t const cps[1] = { 0x3041 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e71), uint8_t(0x0), uint8_t(0xd)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_127)
{
    // 3042  ; [.3E71.0020.000E] 
    // HIRAGANA LETTER A

    uint32_t const cps[1] = { 0x3042 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e71), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_128)
{
    // 3043  ; [.3E72.0020.000D] 
    // HIRAGANA LETTER SMALL I

    uint32_t const cps[1] = { 0x3043 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e72), uint8_t(0x0), uint8_t(0xd)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_129)
{
    // 3044  ; [.3E72.0020.000E] 
    // HIRAGANA LETTER I

    uint32_t const cps[1] = { 0x3044 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e72), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_130)
{
    // 3045  ; [.3E73.0020.000D] 
    // HIRAGANA LETTER SMALL U

    uint32_t const cps[1] = { 0x3045 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e73), uint8_t(0x0), uint8_t(0xd)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_131)
{
    // 3046  ; [.3E73.0020.000E] 
    // HIRAGANA LETTER U

    uint32_t const cps[1] = { 0x3046 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e73), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_132)
{
    // 3047  ; [.3E75.0020.000D] 
    // HIRAGANA LETTER SMALL E

    uint32_t const cps[1] = { 0x3047 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e75), uint8_t(0x0), uint8_t(0xd)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_133)
{
    // 3048  ; [.3E75.0020.000E] 
    // HIRAGANA LETTER E

    uint32_t const cps[1] = { 0x3048 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e75), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_134)
{
    // 3049  ; [.3E76.0020.000D] 
    // HIRAGANA LETTER SMALL O

    uint32_t const cps[1] = { 0x3049 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e76), uint8_t(0x0), uint8_t(0xd)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_135)
{
    // 304A  ; [.3E76.0020.000E] 
    // HIRAGANA LETTER O

    uint32_t const cps[1] = { 0x304a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e76), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_136)
{
    // 304B  ; [.3E77.0020.000E] 
    // HIRAGANA LETTER KA

    uint32_t const cps[1] = { 0x304b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e77), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_137)
{
    // 304C  ; [.3E77.0020.000E][.0000.0037.0002] 
    // HIRAGANA LETTER GA

    uint32_t const cps[1] = { 0x304c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e77), uint8_t(0x0), uint8_t(0xe)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_138)
{
    // 304D  ; [.3E78.0020.000E] 
    // HIRAGANA LETTER KI

    uint32_t const cps[1] = { 0x304d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e78), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_139)
{
    // 304E  ; [.3E78.0020.000E][.0000.0037.0002] 
    // HIRAGANA LETTER GI

    uint32_t const cps[1] = { 0x304e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e78), uint8_t(0x0), uint8_t(0xe)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_140)
{
    // 304F  ; [.3E79.0020.000E] 
    // HIRAGANA LETTER KU

    uint32_t const cps[1] = { 0x304f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e79), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_141)
{
    // 3050  ; [.3E79.0020.000E][.0000.0037.0002] 
    // HIRAGANA LETTER GU

    uint32_t const cps[1] = { 0x3050 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e79), uint8_t(0x0), uint8_t(0xe)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_142)
{
    // 3051  ; [.3E7A.0020.000E] 
    // HIRAGANA LETTER KE

    uint32_t const cps[1] = { 0x3051 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e7a), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_143)
{
    // 3052  ; [.3E7A.0020.000E][.0000.0037.0002] 
    // HIRAGANA LETTER GE

    uint32_t const cps[1] = { 0x3052 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e7a), uint8_t(0x0), uint8_t(0xe)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_144)
{
    // 3053  ; [.3E7B.0020.000E] 
    // HIRAGANA LETTER KO

    uint32_t const cps[1] = { 0x3053 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e7b), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_145)
{
    // 3054  ; [.3E7B.0020.000E][.0000.0037.0002] 
    // HIRAGANA LETTER GO

    uint32_t const cps[1] = { 0x3054 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e7b), uint8_t(0x0), uint8_t(0xe)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_146)
{
    // 3055  ; [.3E7C.0020.000E] 
    // HIRAGANA LETTER SA

    uint32_t const cps[1] = { 0x3055 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e7c), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_147)
{
    // 3056  ; [.3E7C.0020.000E][.0000.0037.0002] 
    // HIRAGANA LETTER ZA

    uint32_t const cps[1] = { 0x3056 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e7c), uint8_t(0x0), uint8_t(0xe)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_077_148)
{
    // 3057  ; [.3E7D.0020.000E] 
    // HIRAGANA LETTER SI

    uint32_t const cps[1] = { 0x3057 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e7d), uint8_t(0x0), uint8_t(0xe)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_077_149)
{
    // 3058  ; [.3E7D.0020.000E][.0000.0037.0002] 
    // HIRAGANA LETTER ZI

    uint32_t const cps[1] = { 0x3058 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3e7d), uint8_t(0x0), uint8_t(0xe)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

