// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_031_000)
{
    // 263F 0041;	
    // (☿) MERCURY	[0966 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x263F, 0x0041 };
    uint32_t const ces[9] = { 0x0966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_001)
{
    // 263F 0062;	
    // (☿) MERCURY	[0966 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263F, 0x0062 };
    uint32_t const ces[9] = { 0x0966, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_002)
{
    // 2640 0021;	
    // (♀) FEMALE SIGN	[0967 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2640, 0x0021 };
    uint32_t const ces[9] = { 0x0967, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_003)
{
    // 2640 003F;	
    // (♀) FEMALE SIGN	[0967 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2640, 0x003F };
    uint32_t const ces[9] = { 0x0967, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_004)
{
    // 2640 0061;	
    // (♀) FEMALE SIGN	[0967 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2640, 0x0061 };
    uint32_t const ces[9] = { 0x0967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_005)
{
    // 2640 0041;	
    // (♀) FEMALE SIGN	[0967 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2640, 0x0041 };
    uint32_t const ces[9] = { 0x0967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_006)
{
    // 2640 0062;	
    // (♀) FEMALE SIGN	[0967 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2640, 0x0062 };
    uint32_t const ces[9] = { 0x0967, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_007)
{
    // 2641 0021;	
    // (♁) EARTH	[0968 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2641, 0x0021 };
    uint32_t const ces[9] = { 0x0968, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_008)
{
    // 2641 003F;	
    // (♁) EARTH	[0968 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2641, 0x003F };
    uint32_t const ces[9] = { 0x0968, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_009)
{
    // 2641 0061;	
    // (♁) EARTH	[0968 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2641, 0x0061 };
    uint32_t const ces[9] = { 0x0968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_010)
{
    // 2641 0041;	
    // (♁) EARTH	[0968 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2641, 0x0041 };
    uint32_t const ces[9] = { 0x0968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_011)
{
    // 2641 0062;	
    // (♁) EARTH	[0968 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2641, 0x0062 };
    uint32_t const ces[9] = { 0x0968, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_012)
{
    // 2642 0021;	
    // (♂) MALE SIGN	[0969 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2642, 0x0021 };
    uint32_t const ces[9] = { 0x0969, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_013)
{
    // 2642 003F;	
    // (♂) MALE SIGN	[0969 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2642, 0x003F };
    uint32_t const ces[9] = { 0x0969, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_014)
{
    // 2642 0061;	
    // (♂) MALE SIGN	[0969 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2642, 0x0061 };
    uint32_t const ces[9] = { 0x0969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_015)
{
    // 2642 0041;	
    // (♂) MALE SIGN	[0969 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2642, 0x0041 };
    uint32_t const ces[9] = { 0x0969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_016)
{
    // 2642 0062;	
    // (♂) MALE SIGN	[0969 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2642, 0x0062 };
    uint32_t const ces[9] = { 0x0969, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_017)
{
    // 2643 0021;	
    // (♃) JUPITER	[096A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2643, 0x0021 };
    uint32_t const ces[9] = { 0x096A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_018)
{
    // 2643 003F;	
    // (♃) JUPITER	[096A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2643, 0x003F };
    uint32_t const ces[9] = { 0x096A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_019)
{
    // 2643 0061;	
    // (♃) JUPITER	[096A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2643, 0x0061 };
    uint32_t const ces[9] = { 0x096A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_020)
{
    // 2643 0041;	
    // (♃) JUPITER	[096A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2643, 0x0041 };
    uint32_t const ces[9] = { 0x096A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_021)
{
    // 2643 0062;	
    // (♃) JUPITER	[096A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2643, 0x0062 };
    uint32_t const ces[9] = { 0x096A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_022)
{
    // 2644 0021;	
    // (♄) SATURN	[096B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2644, 0x0021 };
    uint32_t const ces[9] = { 0x096B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_023)
{
    // 2644 003F;	
    // (♄) SATURN	[096B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2644, 0x003F };
    uint32_t const ces[9] = { 0x096B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_024)
{
    // 2644 0061;	
    // (♄) SATURN	[096B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2644, 0x0061 };
    uint32_t const ces[9] = { 0x096B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_025)
{
    // 2644 0041;	
    // (♄) SATURN	[096B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2644, 0x0041 };
    uint32_t const ces[9] = { 0x096B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_026)
{
    // 2644 0062;	
    // (♄) SATURN	[096B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2644, 0x0062 };
    uint32_t const ces[9] = { 0x096B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_027)
{
    // 2645 0021;	
    // (♅) URANUS	[096C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2645, 0x0021 };
    uint32_t const ces[9] = { 0x096C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_028)
{
    // 2645 003F;	
    // (♅) URANUS	[096C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2645, 0x003F };
    uint32_t const ces[9] = { 0x096C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_029)
{
    // 2645 0061;	
    // (♅) URANUS	[096C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2645, 0x0061 };
    uint32_t const ces[9] = { 0x096C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_030)
{
    // 2645 0041;	
    // (♅) URANUS	[096C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2645, 0x0041 };
    uint32_t const ces[9] = { 0x096C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_031)
{
    // 2645 0062;	
    // (♅) URANUS	[096C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2645, 0x0062 };
    uint32_t const ces[9] = { 0x096C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_032)
{
    // 2646 0021;	
    // (♆) NEPTUNE	[096D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2646, 0x0021 };
    uint32_t const ces[9] = { 0x096D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_033)
{
    // 2646 003F;	
    // (♆) NEPTUNE	[096D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2646, 0x003F };
    uint32_t const ces[9] = { 0x096D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_034)
{
    // 2646 0061;	
    // (♆) NEPTUNE	[096D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2646, 0x0061 };
    uint32_t const ces[9] = { 0x096D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_035)
{
    // 2646 0041;	
    // (♆) NEPTUNE	[096D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2646, 0x0041 };
    uint32_t const ces[9] = { 0x096D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_036)
{
    // 2646 0062;	
    // (♆) NEPTUNE	[096D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2646, 0x0062 };
    uint32_t const ces[9] = { 0x096D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_037)
{
    // 2647 0021;	
    // (♇) PLUTO	[096E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2647, 0x0021 };
    uint32_t const ces[9] = { 0x096E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_038)
{
    // 2647 003F;	
    // (♇) PLUTO	[096E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2647, 0x003F };
    uint32_t const ces[9] = { 0x096E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_039)
{
    // 2647 0061;	
    // (♇) PLUTO	[096E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2647, 0x0061 };
    uint32_t const ces[9] = { 0x096E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_040)
{
    // 2647 0041;	
    // (♇) PLUTO	[096E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2647, 0x0041 };
    uint32_t const ces[9] = { 0x096E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_041)
{
    // 2647 0062;	
    // (♇) PLUTO	[096E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2647, 0x0062 };
    uint32_t const ces[9] = { 0x096E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_042)
{
    // 2648 0021;	
    // (♈) ARIES	[096F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2648, 0x0021 };
    uint32_t const ces[9] = { 0x096F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_043)
{
    // 2648 003F;	
    // (♈) ARIES	[096F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2648, 0x003F };
    uint32_t const ces[9] = { 0x096F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_044)
{
    // 2648 0061;	
    // (♈) ARIES	[096F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2648, 0x0061 };
    uint32_t const ces[9] = { 0x096F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_045)
{
    // 2648 0041;	
    // (♈) ARIES	[096F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2648, 0x0041 };
    uint32_t const ces[9] = { 0x096F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_046)
{
    // 2648 0062;	
    // (♈) ARIES	[096F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2648, 0x0062 };
    uint32_t const ces[9] = { 0x096F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_047)
{
    // 2649 0021;	
    // (♉) TAURUS	[0970 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2649, 0x0021 };
    uint32_t const ces[9] = { 0x0970, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_048)
{
    // 2649 003F;	
    // (♉) TAURUS	[0970 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2649, 0x003F };
    uint32_t const ces[9] = { 0x0970, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_049)
{
    // 2649 0061;	
    // (♉) TAURUS	[0970 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2649, 0x0061 };
    uint32_t const ces[9] = { 0x0970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_050)
{
    // 2649 0041;	
    // (♉) TAURUS	[0970 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2649, 0x0041 };
    uint32_t const ces[9] = { 0x0970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_051)
{
    // 2649 0062;	
    // (♉) TAURUS	[0970 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2649, 0x0062 };
    uint32_t const ces[9] = { 0x0970, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_052)
{
    // 264A 0021;	
    // (♊) GEMINI	[0971 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264A, 0x0021 };
    uint32_t const ces[9] = { 0x0971, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_053)
{
    // 264A 003F;	
    // (♊) GEMINI	[0971 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264A, 0x003F };
    uint32_t const ces[9] = { 0x0971, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_054)
{
    // 264A 0061;	
    // (♊) GEMINI	[0971 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264A, 0x0061 };
    uint32_t const ces[9] = { 0x0971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_055)
{
    // 264A 0041;	
    // (♊) GEMINI	[0971 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x264A, 0x0041 };
    uint32_t const ces[9] = { 0x0971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_056)
{
    // 264A 0062;	
    // (♊) GEMINI	[0971 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264A, 0x0062 };
    uint32_t const ces[9] = { 0x0971, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_057)
{
    // 264B 0021;	
    // (♋) CANCER	[0972 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264B, 0x0021 };
    uint32_t const ces[9] = { 0x0972, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_058)
{
    // 264B 003F;	
    // (♋) CANCER	[0972 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264B, 0x003F };
    uint32_t const ces[9] = { 0x0972, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_059)
{
    // 264B 0061;	
    // (♋) CANCER	[0972 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264B, 0x0061 };
    uint32_t const ces[9] = { 0x0972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_060)
{
    // 264B 0041;	
    // (♋) CANCER	[0972 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x264B, 0x0041 };
    uint32_t const ces[9] = { 0x0972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_061)
{
    // 264B 0062;	
    // (♋) CANCER	[0972 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264B, 0x0062 };
    uint32_t const ces[9] = { 0x0972, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_062)
{
    // 264C 0021;	
    // (♌) LEO	[0973 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264C, 0x0021 };
    uint32_t const ces[9] = { 0x0973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_063)
{
    // 264C 003F;	
    // (♌) LEO	[0973 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264C, 0x003F };
    uint32_t const ces[9] = { 0x0973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_064)
{
    // 264C 0061;	
    // (♌) LEO	[0973 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264C, 0x0061 };
    uint32_t const ces[9] = { 0x0973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_065)
{
    // 264C 0041;	
    // (♌) LEO	[0973 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x264C, 0x0041 };
    uint32_t const ces[9] = { 0x0973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_066)
{
    // 264C 0062;	
    // (♌) LEO	[0973 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264C, 0x0062 };
    uint32_t const ces[9] = { 0x0973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_067)
{
    // 264D 0021;	
    // (♍) VIRGO	[0974 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264D, 0x0021 };
    uint32_t const ces[9] = { 0x0974, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_068)
{
    // 264D 003F;	
    // (♍) VIRGO	[0974 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264D, 0x003F };
    uint32_t const ces[9] = { 0x0974, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_069)
{
    // 264D 0061;	
    // (♍) VIRGO	[0974 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264D, 0x0061 };
    uint32_t const ces[9] = { 0x0974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_070)
{
    // 264D 0041;	
    // (♍) VIRGO	[0974 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x264D, 0x0041 };
    uint32_t const ces[9] = { 0x0974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_071)
{
    // 264D 0062;	
    // (♍) VIRGO	[0974 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264D, 0x0062 };
    uint32_t const ces[9] = { 0x0974, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_072)
{
    // 264E 0021;	
    // (♎) LIBRA	[0975 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264E, 0x0021 };
    uint32_t const ces[9] = { 0x0975, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_073)
{
    // 264E 003F;	
    // (♎) LIBRA	[0975 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264E, 0x003F };
    uint32_t const ces[9] = { 0x0975, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_074)
{
    // 264E 0061;	
    // (♎) LIBRA	[0975 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264E, 0x0061 };
    uint32_t const ces[9] = { 0x0975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_075)
{
    // 264E 0041;	
    // (♎) LIBRA	[0975 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x264E, 0x0041 };
    uint32_t const ces[9] = { 0x0975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_076)
{
    // 264E 0062;	
    // (♎) LIBRA	[0975 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264E, 0x0062 };
    uint32_t const ces[9] = { 0x0975, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_077)
{
    // 264F 0021;	
    // (♏) SCORPIUS	[0976 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264F, 0x0021 };
    uint32_t const ces[9] = { 0x0976, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_078)
{
    // 264F 003F;	
    // (♏) SCORPIUS	[0976 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264F, 0x003F };
    uint32_t const ces[9] = { 0x0976, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_079)
{
    // 264F 0061;	
    // (♏) SCORPIUS	[0976 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264F, 0x0061 };
    uint32_t const ces[9] = { 0x0976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_080)
{
    // 264F 0041;	
    // (♏) SCORPIUS	[0976 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x264F, 0x0041 };
    uint32_t const ces[9] = { 0x0976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_081)
{
    // 264F 0062;	
    // (♏) SCORPIUS	[0976 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x264F, 0x0062 };
    uint32_t const ces[9] = { 0x0976, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_082)
{
    // 2650 0021;	
    // (♐) SAGITTARIUS	[0977 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2650, 0x0021 };
    uint32_t const ces[9] = { 0x0977, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_083)
{
    // 2650 003F;	
    // (♐) SAGITTARIUS	[0977 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2650, 0x003F };
    uint32_t const ces[9] = { 0x0977, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_084)
{
    // 2650 0061;	
    // (♐) SAGITTARIUS	[0977 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2650, 0x0061 };
    uint32_t const ces[9] = { 0x0977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_085)
{
    // 2650 0041;	
    // (♐) SAGITTARIUS	[0977 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2650, 0x0041 };
    uint32_t const ces[9] = { 0x0977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_086)
{
    // 2650 0062;	
    // (♐) SAGITTARIUS	[0977 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2650, 0x0062 };
    uint32_t const ces[9] = { 0x0977, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_087)
{
    // 2651 0021;	
    // (♑) CAPRICORN	[0978 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2651, 0x0021 };
    uint32_t const ces[9] = { 0x0978, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_088)
{
    // 2651 003F;	
    // (♑) CAPRICORN	[0978 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2651, 0x003F };
    uint32_t const ces[9] = { 0x0978, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_089)
{
    // 2651 0061;	
    // (♑) CAPRICORN	[0978 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2651, 0x0061 };
    uint32_t const ces[9] = { 0x0978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_090)
{
    // 2651 0041;	
    // (♑) CAPRICORN	[0978 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2651, 0x0041 };
    uint32_t const ces[9] = { 0x0978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_091)
{
    // 2651 0062;	
    // (♑) CAPRICORN	[0978 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2651, 0x0062 };
    uint32_t const ces[9] = { 0x0978, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_092)
{
    // 2652 0021;	
    // (♒) AQUARIUS	[0979 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2652, 0x0021 };
    uint32_t const ces[9] = { 0x0979, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_093)
{
    // 2652 003F;	
    // (♒) AQUARIUS	[0979 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2652, 0x003F };
    uint32_t const ces[9] = { 0x0979, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_094)
{
    // 2652 0061;	
    // (♒) AQUARIUS	[0979 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2652, 0x0061 };
    uint32_t const ces[9] = { 0x0979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_095)
{
    // 2652 0041;	
    // (♒) AQUARIUS	[0979 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2652, 0x0041 };
    uint32_t const ces[9] = { 0x0979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_096)
{
    // 2652 0062;	
    // (♒) AQUARIUS	[0979 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2652, 0x0062 };
    uint32_t const ces[9] = { 0x0979, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_097)
{
    // 2653 0021;	
    // (♓) PISCES	[097A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2653, 0x0021 };
    uint32_t const ces[9] = { 0x097A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_098)
{
    // 2653 003F;	
    // (♓) PISCES	[097A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2653, 0x003F };
    uint32_t const ces[9] = { 0x097A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_099)
{
    // 2653 0061;	
    // (♓) PISCES	[097A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2653, 0x0061 };
    uint32_t const ces[9] = { 0x097A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_100)
{
    // 2653 0041;	
    // (♓) PISCES	[097A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2653, 0x0041 };
    uint32_t const ces[9] = { 0x097A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_101)
{
    // 2653 0062;	
    // (♓) PISCES	[097A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2653, 0x0062 };
    uint32_t const ces[9] = { 0x097A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_102)
{
    // 2654 0021;	
    // (♔) WHITE CHESS KING	[097B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2654, 0x0021 };
    uint32_t const ces[9] = { 0x097B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_103)
{
    // 2654 003F;	
    // (♔) WHITE CHESS KING	[097B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2654, 0x003F };
    uint32_t const ces[9] = { 0x097B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_104)
{
    // 2654 0061;	
    // (♔) WHITE CHESS KING	[097B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2654, 0x0061 };
    uint32_t const ces[9] = { 0x097B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_105)
{
    // 2654 0041;	
    // (♔) WHITE CHESS KING	[097B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2654, 0x0041 };
    uint32_t const ces[9] = { 0x097B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_106)
{
    // 2654 0062;	
    // (♔) WHITE CHESS KING	[097B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2654, 0x0062 };
    uint32_t const ces[9] = { 0x097B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_107)
{
    // 2655 0021;	
    // (♕) WHITE CHESS QUEEN	[097C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2655, 0x0021 };
    uint32_t const ces[9] = { 0x097C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_108)
{
    // 2655 003F;	
    // (♕) WHITE CHESS QUEEN	[097C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2655, 0x003F };
    uint32_t const ces[9] = { 0x097C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_109)
{
    // 2655 0061;	
    // (♕) WHITE CHESS QUEEN	[097C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2655, 0x0061 };
    uint32_t const ces[9] = { 0x097C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_110)
{
    // 2655 0041;	
    // (♕) WHITE CHESS QUEEN	[097C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2655, 0x0041 };
    uint32_t const ces[9] = { 0x097C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_111)
{
    // 2655 0062;	
    // (♕) WHITE CHESS QUEEN	[097C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2655, 0x0062 };
    uint32_t const ces[9] = { 0x097C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_112)
{
    // 2656 0021;	
    // (♖) WHITE CHESS ROOK	[097D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2656, 0x0021 };
    uint32_t const ces[9] = { 0x097D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_113)
{
    // 2656 003F;	
    // (♖) WHITE CHESS ROOK	[097D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2656, 0x003F };
    uint32_t const ces[9] = { 0x097D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_114)
{
    // 2656 0061;	
    // (♖) WHITE CHESS ROOK	[097D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2656, 0x0061 };
    uint32_t const ces[9] = { 0x097D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_115)
{
    // 2656 0041;	
    // (♖) WHITE CHESS ROOK	[097D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2656, 0x0041 };
    uint32_t const ces[9] = { 0x097D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_116)
{
    // 2656 0062;	
    // (♖) WHITE CHESS ROOK	[097D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2656, 0x0062 };
    uint32_t const ces[9] = { 0x097D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_117)
{
    // 2657 0021;	
    // (♗) WHITE CHESS BISHOP	[097E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2657, 0x0021 };
    uint32_t const ces[9] = { 0x097E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_118)
{
    // 2657 003F;	
    // (♗) WHITE CHESS BISHOP	[097E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2657, 0x003F };
    uint32_t const ces[9] = { 0x097E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_119)
{
    // 2657 0061;	
    // (♗) WHITE CHESS BISHOP	[097E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2657, 0x0061 };
    uint32_t const ces[9] = { 0x097E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_120)
{
    // 2657 0041;	
    // (♗) WHITE CHESS BISHOP	[097E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2657, 0x0041 };
    uint32_t const ces[9] = { 0x097E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_121)
{
    // 2657 0062;	
    // (♗) WHITE CHESS BISHOP	[097E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2657, 0x0062 };
    uint32_t const ces[9] = { 0x097E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_122)
{
    // 2658 0021;	
    // (♘) WHITE CHESS KNIGHT	[097F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2658, 0x0021 };
    uint32_t const ces[9] = { 0x097F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_123)
{
    // 2658 003F;	
    // (♘) WHITE CHESS KNIGHT	[097F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2658, 0x003F };
    uint32_t const ces[9] = { 0x097F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_124)
{
    // 2658 0061;	
    // (♘) WHITE CHESS KNIGHT	[097F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2658, 0x0061 };
    uint32_t const ces[9] = { 0x097F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_125)
{
    // 2658 0041;	
    // (♘) WHITE CHESS KNIGHT	[097F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2658, 0x0041 };
    uint32_t const ces[9] = { 0x097F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_126)
{
    // 2658 0062;	
    // (♘) WHITE CHESS KNIGHT	[097F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2658, 0x0062 };
    uint32_t const ces[9] = { 0x097F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_127)
{
    // 2659 0021;	
    // (♙) WHITE CHESS PAWN	[0980 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2659, 0x0021 };
    uint32_t const ces[9] = { 0x0980, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_128)
{
    // 2659 003F;	
    // (♙) WHITE CHESS PAWN	[0980 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2659, 0x003F };
    uint32_t const ces[9] = { 0x0980, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_129)
{
    // 2659 0061;	
    // (♙) WHITE CHESS PAWN	[0980 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2659, 0x0061 };
    uint32_t const ces[9] = { 0x0980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_130)
{
    // 2659 0041;	
    // (♙) WHITE CHESS PAWN	[0980 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2659, 0x0041 };
    uint32_t const ces[9] = { 0x0980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_131)
{
    // 2659 0062;	
    // (♙) WHITE CHESS PAWN	[0980 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2659, 0x0062 };
    uint32_t const ces[9] = { 0x0980, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_132)
{
    // 265A 0021;	
    // (♚) BLACK CHESS KING	[0981 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265A, 0x0021 };
    uint32_t const ces[9] = { 0x0981, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_133)
{
    // 265A 003F;	
    // (♚) BLACK CHESS KING	[0981 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265A, 0x003F };
    uint32_t const ces[9] = { 0x0981, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_134)
{
    // 265A 0061;	
    // (♚) BLACK CHESS KING	[0981 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265A, 0x0061 };
    uint32_t const ces[9] = { 0x0981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_135)
{
    // 265A 0041;	
    // (♚) BLACK CHESS KING	[0981 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x265A, 0x0041 };
    uint32_t const ces[9] = { 0x0981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_136)
{
    // 265A 0062;	
    // (♚) BLACK CHESS KING	[0981 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265A, 0x0062 };
    uint32_t const ces[9] = { 0x0981, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_137)
{
    // 265B 0021;	
    // (♛) BLACK CHESS QUEEN	[0982 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265B, 0x0021 };
    uint32_t const ces[9] = { 0x0982, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_138)
{
    // 265B 003F;	
    // (♛) BLACK CHESS QUEEN	[0982 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265B, 0x003F };
    uint32_t const ces[9] = { 0x0982, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_139)
{
    // 265B 0061;	
    // (♛) BLACK CHESS QUEEN	[0982 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265B, 0x0061 };
    uint32_t const ces[9] = { 0x0982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_140)
{
    // 265B 0041;	
    // (♛) BLACK CHESS QUEEN	[0982 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x265B, 0x0041 };
    uint32_t const ces[9] = { 0x0982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_141)
{
    // 265B 0062;	
    // (♛) BLACK CHESS QUEEN	[0982 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265B, 0x0062 };
    uint32_t const ces[9] = { 0x0982, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_142)
{
    // 265C 0021;	
    // (♜) BLACK CHESS ROOK	[0983 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265C, 0x0021 };
    uint32_t const ces[9] = { 0x0983, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_143)
{
    // 265C 003F;	
    // (♜) BLACK CHESS ROOK	[0983 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265C, 0x003F };
    uint32_t const ces[9] = { 0x0983, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_144)
{
    // 265C 0061;	
    // (♜) BLACK CHESS ROOK	[0983 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265C, 0x0061 };
    uint32_t const ces[9] = { 0x0983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_145)
{
    // 265C 0041;	
    // (♜) BLACK CHESS ROOK	[0983 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x265C, 0x0041 };
    uint32_t const ces[9] = { 0x0983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_146)
{
    // 265C 0062;	
    // (♜) BLACK CHESS ROOK	[0983 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265C, 0x0062 };
    uint32_t const ces[9] = { 0x0983, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_147)
{
    // 265D 0021;	
    // (♝) BLACK CHESS BISHOP	[0984 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265D, 0x0021 };
    uint32_t const ces[9] = { 0x0984, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_148)
{
    // 265D 003F;	
    // (♝) BLACK CHESS BISHOP	[0984 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265D, 0x003F };
    uint32_t const ces[9] = { 0x0984, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_149)
{
    // 265D 0061;	
    // (♝) BLACK CHESS BISHOP	[0984 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265D, 0x0061 };
    uint32_t const ces[9] = { 0x0984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_150)
{
    // 265D 0041;	
    // (♝) BLACK CHESS BISHOP	[0984 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x265D, 0x0041 };
    uint32_t const ces[9] = { 0x0984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_151)
{
    // 265D 0062;	
    // (♝) BLACK CHESS BISHOP	[0984 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265D, 0x0062 };
    uint32_t const ces[9] = { 0x0984, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_152)
{
    // 265E 0021;	
    // (♞) BLACK CHESS KNIGHT	[0985 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265E, 0x0021 };
    uint32_t const ces[9] = { 0x0985, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_153)
{
    // 265E 003F;	
    // (♞) BLACK CHESS KNIGHT	[0985 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265E, 0x003F };
    uint32_t const ces[9] = { 0x0985, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_154)
{
    // 265E 0061;	
    // (♞) BLACK CHESS KNIGHT	[0985 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265E, 0x0061 };
    uint32_t const ces[9] = { 0x0985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_155)
{
    // 265E 0041;	
    // (♞) BLACK CHESS KNIGHT	[0985 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x265E, 0x0041 };
    uint32_t const ces[9] = { 0x0985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_156)
{
    // 265E 0062;	
    // (♞) BLACK CHESS KNIGHT	[0985 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265E, 0x0062 };
    uint32_t const ces[9] = { 0x0985, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_157)
{
    // 265F 0021;	
    // (♟) BLACK CHESS PAWN	[0986 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265F, 0x0021 };
    uint32_t const ces[9] = { 0x0986, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_158)
{
    // 265F 003F;	
    // (♟) BLACK CHESS PAWN	[0986 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265F, 0x003F };
    uint32_t const ces[9] = { 0x0986, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_159)
{
    // 265F 0061;	
    // (♟) BLACK CHESS PAWN	[0986 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265F, 0x0061 };
    uint32_t const ces[9] = { 0x0986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_160)
{
    // 265F 0041;	
    // (♟) BLACK CHESS PAWN	[0986 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x265F, 0x0041 };
    uint32_t const ces[9] = { 0x0986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_161)
{
    // 265F 0062;	
    // (♟) BLACK CHESS PAWN	[0986 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x265F, 0x0062 };
    uint32_t const ces[9] = { 0x0986, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_162)
{
    // 2660 0021;	
    // (♠) BLACK SPADE SUIT	[0987 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2660, 0x0021 };
    uint32_t const ces[9] = { 0x0987, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_163)
{
    // 2660 003F;	
    // (♠) BLACK SPADE SUIT	[0987 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2660, 0x003F };
    uint32_t const ces[9] = { 0x0987, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_164)
{
    // 2660 0061;	
    // (♠) BLACK SPADE SUIT	[0987 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2660, 0x0061 };
    uint32_t const ces[9] = { 0x0987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_165)
{
    // 2660 0041;	
    // (♠) BLACK SPADE SUIT	[0987 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2660, 0x0041 };
    uint32_t const ces[9] = { 0x0987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_166)
{
    // 2660 0062;	
    // (♠) BLACK SPADE SUIT	[0987 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2660, 0x0062 };
    uint32_t const ces[9] = { 0x0987, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_167)
{
    // 2661 0021;	
    // (♡) WHITE HEART SUIT	[0988 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2661, 0x0021 };
    uint32_t const ces[9] = { 0x0988, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_168)
{
    // 2661 003F;	
    // (♡) WHITE HEART SUIT	[0988 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2661, 0x003F };
    uint32_t const ces[9] = { 0x0988, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_169)
{
    // 2661 0061;	
    // (♡) WHITE HEART SUIT	[0988 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2661, 0x0061 };
    uint32_t const ces[9] = { 0x0988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_170)
{
    // 2661 0041;	
    // (♡) WHITE HEART SUIT	[0988 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2661, 0x0041 };
    uint32_t const ces[9] = { 0x0988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_171)
{
    // 2661 0062;	
    // (♡) WHITE HEART SUIT	[0988 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2661, 0x0062 };
    uint32_t const ces[9] = { 0x0988, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_172)
{
    // 2662 0021;	
    // (♢) WHITE DIAMOND SUIT	[0989 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2662, 0x0021 };
    uint32_t const ces[9] = { 0x0989, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_173)
{
    // 2662 003F;	
    // (♢) WHITE DIAMOND SUIT	[0989 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2662, 0x003F };
    uint32_t const ces[9] = { 0x0989, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_174)
{
    // 2662 0061;	
    // (♢) WHITE DIAMOND SUIT	[0989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2662, 0x0061 };
    uint32_t const ces[9] = { 0x0989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_175)
{
    // 2662 0041;	
    // (♢) WHITE DIAMOND SUIT	[0989 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2662, 0x0041 };
    uint32_t const ces[9] = { 0x0989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_176)
{
    // 2662 0062;	
    // (♢) WHITE DIAMOND SUIT	[0989 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2662, 0x0062 };
    uint32_t const ces[9] = { 0x0989, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_177)
{
    // 2663 0021;	
    // (♣) BLACK CLUB SUIT	[098A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2663, 0x0021 };
    uint32_t const ces[9] = { 0x098A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_178)
{
    // 2663 003F;	
    // (♣) BLACK CLUB SUIT	[098A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2663, 0x003F };
    uint32_t const ces[9] = { 0x098A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_179)
{
    // 2663 0061;	
    // (♣) BLACK CLUB SUIT	[098A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2663, 0x0061 };
    uint32_t const ces[9] = { 0x098A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_180)
{
    // 2663 0041;	
    // (♣) BLACK CLUB SUIT	[098A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2663, 0x0041 };
    uint32_t const ces[9] = { 0x098A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_181)
{
    // 2663 0062;	
    // (♣) BLACK CLUB SUIT	[098A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2663, 0x0062 };
    uint32_t const ces[9] = { 0x098A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_182)
{
    // 2664 0021;	
    // (♤) WHITE SPADE SUIT	[098B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2664, 0x0021 };
    uint32_t const ces[9] = { 0x098B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_183)
{
    // 2664 003F;	
    // (♤) WHITE SPADE SUIT	[098B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2664, 0x003F };
    uint32_t const ces[9] = { 0x098B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_184)
{
    // 2664 0061;	
    // (♤) WHITE SPADE SUIT	[098B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2664, 0x0061 };
    uint32_t const ces[9] = { 0x098B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_185)
{
    // 2664 0041;	
    // (♤) WHITE SPADE SUIT	[098B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2664, 0x0041 };
    uint32_t const ces[9] = { 0x098B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_186)
{
    // 2664 0062;	
    // (♤) WHITE SPADE SUIT	[098B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2664, 0x0062 };
    uint32_t const ces[9] = { 0x098B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_187)
{
    // 2665 0021;	
    // (♥) BLACK HEART SUIT	[098C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2665, 0x0021 };
    uint32_t const ces[9] = { 0x098C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_188)
{
    // 2665 003F;	
    // (♥) BLACK HEART SUIT	[098C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2665, 0x003F };
    uint32_t const ces[9] = { 0x098C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_189)
{
    // 2665 0061;	
    // (♥) BLACK HEART SUIT	[098C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2665, 0x0061 };
    uint32_t const ces[9] = { 0x098C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_190)
{
    // 2665 0041;	
    // (♥) BLACK HEART SUIT	[098C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2665, 0x0041 };
    uint32_t const ces[9] = { 0x098C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_191)
{
    // 2665 0062;	
    // (♥) BLACK HEART SUIT	[098C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2665, 0x0062 };
    uint32_t const ces[9] = { 0x098C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_192)
{
    // 2666 0021;	
    // (♦) BLACK DIAMOND SUIT	[098D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2666, 0x0021 };
    uint32_t const ces[9] = { 0x098D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_193)
{
    // 2666 003F;	
    // (♦) BLACK DIAMOND SUIT	[098D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2666, 0x003F };
    uint32_t const ces[9] = { 0x098D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_194)
{
    // 2666 0061;	
    // (♦) BLACK DIAMOND SUIT	[098D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2666, 0x0061 };
    uint32_t const ces[9] = { 0x098D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_195)
{
    // 2666 0041;	
    // (♦) BLACK DIAMOND SUIT	[098D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2666, 0x0041 };
    uint32_t const ces[9] = { 0x098D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_196)
{
    // 2666 0062;	
    // (♦) BLACK DIAMOND SUIT	[098D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2666, 0x0062 };
    uint32_t const ces[9] = { 0x098D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_197)
{
    // 2667 0021;	
    // (♧) WHITE CLUB SUIT	[098E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2667, 0x0021 };
    uint32_t const ces[9] = { 0x098E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_198)
{
    // 2667 003F;	
    // (♧) WHITE CLUB SUIT	[098E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2667, 0x003F };
    uint32_t const ces[9] = { 0x098E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_199)
{
    // 2667 0061;	
    // (♧) WHITE CLUB SUIT	[098E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2667, 0x0061 };
    uint32_t const ces[9] = { 0x098E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_200)
{
    // 2667 0041;	
    // (♧) WHITE CLUB SUIT	[098E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2667, 0x0041 };
    uint32_t const ces[9] = { 0x098E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_201)
{
    // 2667 0062;	
    // (♧) WHITE CLUB SUIT	[098E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2667, 0x0062 };
    uint32_t const ces[9] = { 0x098E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_202)
{
    // 2668 0021;	
    // (♨) HOT SPRINGS	[098F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2668, 0x0021 };
    uint32_t const ces[9] = { 0x098F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_203)
{
    // 2668 003F;	
    // (♨) HOT SPRINGS	[098F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2668, 0x003F };
    uint32_t const ces[9] = { 0x098F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_204)
{
    // 2668 0061;	
    // (♨) HOT SPRINGS	[098F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2668, 0x0061 };
    uint32_t const ces[9] = { 0x098F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_205)
{
    // 2668 0041;	
    // (♨) HOT SPRINGS	[098F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2668, 0x0041 };
    uint32_t const ces[9] = { 0x098F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_206)
{
    // 2668 0062;	
    // (♨) HOT SPRINGS	[098F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2668, 0x0062 };
    uint32_t const ces[9] = { 0x098F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_207)
{
    // 2669 0021;	
    // (♩) QUARTER NOTE	[0990 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2669, 0x0021 };
    uint32_t const ces[9] = { 0x0990, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_208)
{
    // 2669 003F;	
    // (♩) QUARTER NOTE	[0990 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2669, 0x003F };
    uint32_t const ces[9] = { 0x0990, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_209)
{
    // 2669 0061;	
    // (♩) QUARTER NOTE	[0990 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2669, 0x0061 };
    uint32_t const ces[9] = { 0x0990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_210)
{
    // 2669 0041;	
    // (♩) QUARTER NOTE	[0990 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2669, 0x0041 };
    uint32_t const ces[9] = { 0x0990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_211)
{
    // 2669 0062;	
    // (♩) QUARTER NOTE	[0990 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2669, 0x0062 };
    uint32_t const ces[9] = { 0x0990, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_212)
{
    // 266A 0021;	
    // (♪) EIGHTH NOTE	[0991 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266A, 0x0021 };
    uint32_t const ces[9] = { 0x0991, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_213)
{
    // 266A 003F;	
    // (♪) EIGHTH NOTE	[0991 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266A, 0x003F };
    uint32_t const ces[9] = { 0x0991, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_214)
{
    // 266A 0061;	
    // (♪) EIGHTH NOTE	[0991 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266A, 0x0061 };
    uint32_t const ces[9] = { 0x0991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_215)
{
    // 266A 0041;	
    // (♪) EIGHTH NOTE	[0991 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x266A, 0x0041 };
    uint32_t const ces[9] = { 0x0991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_216)
{
    // 266A 0062;	
    // (♪) EIGHTH NOTE	[0991 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266A, 0x0062 };
    uint32_t const ces[9] = { 0x0991, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_217)
{
    // 266B 0021;	
    // (♫) BEAMED EIGHTH NOTES	[0992 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266B, 0x0021 };
    uint32_t const ces[9] = { 0x0992, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_218)
{
    // 266B 003F;	
    // (♫) BEAMED EIGHTH NOTES	[0992 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266B, 0x003F };
    uint32_t const ces[9] = { 0x0992, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_219)
{
    // 266B 0061;	
    // (♫) BEAMED EIGHTH NOTES	[0992 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266B, 0x0061 };
    uint32_t const ces[9] = { 0x0992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_220)
{
    // 266B 0041;	
    // (♫) BEAMED EIGHTH NOTES	[0992 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x266B, 0x0041 };
    uint32_t const ces[9] = { 0x0992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_221)
{
    // 266B 0062;	
    // (♫) BEAMED EIGHTH NOTES	[0992 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266B, 0x0062 };
    uint32_t const ces[9] = { 0x0992, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_222)
{
    // 266C 0021;	
    // (♬) BEAMED SIXTEENTH NOTES	[0993 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266C, 0x0021 };
    uint32_t const ces[9] = { 0x0993, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_223)
{
    // 266C 003F;	
    // (♬) BEAMED SIXTEENTH NOTES	[0993 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266C, 0x003F };
    uint32_t const ces[9] = { 0x0993, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_224)
{
    // 266C 0061;	
    // (♬) BEAMED SIXTEENTH NOTES	[0993 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266C, 0x0061 };
    uint32_t const ces[9] = { 0x0993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_225)
{
    // 266C 0041;	
    // (♬) BEAMED SIXTEENTH NOTES	[0993 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x266C, 0x0041 };
    uint32_t const ces[9] = { 0x0993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_226)
{
    // 266C 0062;	
    // (♬) BEAMED SIXTEENTH NOTES	[0993 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266C, 0x0062 };
    uint32_t const ces[9] = { 0x0993, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_227)
{
    // 2670 0021;	
    // (♰) WEST SYRIAC CROSS	[0994 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2670, 0x0021 };
    uint32_t const ces[9] = { 0x0994, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_228)
{
    // 2670 003F;	
    // (♰) WEST SYRIAC CROSS	[0994 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2670, 0x003F };
    uint32_t const ces[9] = { 0x0994, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_229)
{
    // 2670 0061;	
    // (♰) WEST SYRIAC CROSS	[0994 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2670, 0x0061 };
    uint32_t const ces[9] = { 0x0994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_230)
{
    // 2670 0041;	
    // (♰) WEST SYRIAC CROSS	[0994 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2670, 0x0041 };
    uint32_t const ces[9] = { 0x0994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_231)
{
    // 2670 0062;	
    // (♰) WEST SYRIAC CROSS	[0994 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2670, 0x0062 };
    uint32_t const ces[9] = { 0x0994, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_232)
{
    // 2671 0021;	
    // (♱) EAST SYRIAC CROSS	[0995 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2671, 0x0021 };
    uint32_t const ces[9] = { 0x0995, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_233)
{
    // 2671 003F;	
    // (♱) EAST SYRIAC CROSS	[0995 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2671, 0x003F };
    uint32_t const ces[9] = { 0x0995, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_234)
{
    // 2671 0061;	
    // (♱) EAST SYRIAC CROSS	[0995 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2671, 0x0061 };
    uint32_t const ces[9] = { 0x0995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_235)
{
    // 2671 0041;	
    // (♱) EAST SYRIAC CROSS	[0995 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2671, 0x0041 };
    uint32_t const ces[9] = { 0x0995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_236)
{
    // 2671 0062;	
    // (♱) EAST SYRIAC CROSS	[0995 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2671, 0x0062 };
    uint32_t const ces[9] = { 0x0995, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_237)
{
    // 2672 0021;	
    // (♲) UNIVERSAL RECYCLING SYMBOL	[0996 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2672, 0x0021 };
    uint32_t const ces[9] = { 0x0996, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_238)
{
    // 2672 003F;	
    // (♲) UNIVERSAL RECYCLING SYMBOL	[0996 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2672, 0x003F };
    uint32_t const ces[9] = { 0x0996, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_239)
{
    // 2672 0061;	
    // (♲) UNIVERSAL RECYCLING SYMBOL	[0996 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2672, 0x0061 };
    uint32_t const ces[9] = { 0x0996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_240)
{
    // 2672 0041;	
    // (♲) UNIVERSAL RECYCLING SYMBOL	[0996 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2672, 0x0041 };
    uint32_t const ces[9] = { 0x0996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_241)
{
    // 2672 0062;	
    // (♲) UNIVERSAL RECYCLING SYMBOL	[0996 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2672, 0x0062 };
    uint32_t const ces[9] = { 0x0996, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_242)
{
    // 2673 0021;	
    // (♳) RECYCLING SYMBOL FOR TYPE-1 PLASTICS	[0997 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2673, 0x0021 };
    uint32_t const ces[9] = { 0x0997, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_243)
{
    // 2673 003F;	
    // (♳) RECYCLING SYMBOL FOR TYPE-1 PLASTICS	[0997 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2673, 0x003F };
    uint32_t const ces[9] = { 0x0997, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_244)
{
    // 2673 0061;	
    // (♳) RECYCLING SYMBOL FOR TYPE-1 PLASTICS	[0997 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2673, 0x0061 };
    uint32_t const ces[9] = { 0x0997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_245)
{
    // 2673 0041;	
    // (♳) RECYCLING SYMBOL FOR TYPE-1 PLASTICS	[0997 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2673, 0x0041 };
    uint32_t const ces[9] = { 0x0997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_246)
{
    // 2673 0062;	
    // (♳) RECYCLING SYMBOL FOR TYPE-1 PLASTICS	[0997 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2673, 0x0062 };
    uint32_t const ces[9] = { 0x0997, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_247)
{
    // 2674 0021;	
    // (♴) RECYCLING SYMBOL FOR TYPE-2 PLASTICS	[0998 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2674, 0x0021 };
    uint32_t const ces[9] = { 0x0998, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_248)
{
    // 2674 003F;	
    // (♴) RECYCLING SYMBOL FOR TYPE-2 PLASTICS	[0998 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2674, 0x003F };
    uint32_t const ces[9] = { 0x0998, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_249)
{
    // 2674 0061;	
    // (♴) RECYCLING SYMBOL FOR TYPE-2 PLASTICS	[0998 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2674, 0x0061 };
    uint32_t const ces[9] = { 0x0998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_250)
{
    // 2674 0041;	
    // (♴) RECYCLING SYMBOL FOR TYPE-2 PLASTICS	[0998 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2674, 0x0041 };
    uint32_t const ces[9] = { 0x0998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_251)
{
    // 2674 0062;	
    // (♴) RECYCLING SYMBOL FOR TYPE-2 PLASTICS	[0998 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2674, 0x0062 };
    uint32_t const ces[9] = { 0x0998, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_252)
{
    // 2675 0021;	
    // (♵) RECYCLING SYMBOL FOR TYPE-3 PLASTICS	[0999 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2675, 0x0021 };
    uint32_t const ces[9] = { 0x0999, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_253)
{
    // 2675 003F;	
    // (♵) RECYCLING SYMBOL FOR TYPE-3 PLASTICS	[0999 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2675, 0x003F };
    uint32_t const ces[9] = { 0x0999, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_254)
{
    // 2675 0061;	
    // (♵) RECYCLING SYMBOL FOR TYPE-3 PLASTICS	[0999 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2675, 0x0061 };
    uint32_t const ces[9] = { 0x0999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_255)
{
    // 2675 0041;	
    // (♵) RECYCLING SYMBOL FOR TYPE-3 PLASTICS	[0999 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2675, 0x0041 };
    uint32_t const ces[9] = { 0x0999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_256)
{
    // 2675 0062;	
    // (♵) RECYCLING SYMBOL FOR TYPE-3 PLASTICS	[0999 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2675, 0x0062 };
    uint32_t const ces[9] = { 0x0999, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_257)
{
    // 2676 0021;	
    // (♶) RECYCLING SYMBOL FOR TYPE-4 PLASTICS	[099A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2676, 0x0021 };
    uint32_t const ces[9] = { 0x099A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_258)
{
    // 2676 003F;	
    // (♶) RECYCLING SYMBOL FOR TYPE-4 PLASTICS	[099A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2676, 0x003F };
    uint32_t const ces[9] = { 0x099A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_259)
{
    // 2676 0061;	
    // (♶) RECYCLING SYMBOL FOR TYPE-4 PLASTICS	[099A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2676, 0x0061 };
    uint32_t const ces[9] = { 0x099A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_260)
{
    // 2676 0041;	
    // (♶) RECYCLING SYMBOL FOR TYPE-4 PLASTICS	[099A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2676, 0x0041 };
    uint32_t const ces[9] = { 0x099A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_261)
{
    // 2676 0062;	
    // (♶) RECYCLING SYMBOL FOR TYPE-4 PLASTICS	[099A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2676, 0x0062 };
    uint32_t const ces[9] = { 0x099A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_262)
{
    // 2677 0021;	
    // (♷) RECYCLING SYMBOL FOR TYPE-5 PLASTICS	[099B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2677, 0x0021 };
    uint32_t const ces[9] = { 0x099B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_263)
{
    // 2677 003F;	
    // (♷) RECYCLING SYMBOL FOR TYPE-5 PLASTICS	[099B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2677, 0x003F };
    uint32_t const ces[9] = { 0x099B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_264)
{
    // 2677 0061;	
    // (♷) RECYCLING SYMBOL FOR TYPE-5 PLASTICS	[099B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2677, 0x0061 };
    uint32_t const ces[9] = { 0x099B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_265)
{
    // 2677 0041;	
    // (♷) RECYCLING SYMBOL FOR TYPE-5 PLASTICS	[099B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2677, 0x0041 };
    uint32_t const ces[9] = { 0x099B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_266)
{
    // 2677 0062;	
    // (♷) RECYCLING SYMBOL FOR TYPE-5 PLASTICS	[099B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2677, 0x0062 };
    uint32_t const ces[9] = { 0x099B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_267)
{
    // 2678 0021;	
    // (♸) RECYCLING SYMBOL FOR TYPE-6 PLASTICS	[099C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2678, 0x0021 };
    uint32_t const ces[9] = { 0x099C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_268)
{
    // 2678 003F;	
    // (♸) RECYCLING SYMBOL FOR TYPE-6 PLASTICS	[099C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2678, 0x003F };
    uint32_t const ces[9] = { 0x099C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_269)
{
    // 2678 0061;	
    // (♸) RECYCLING SYMBOL FOR TYPE-6 PLASTICS	[099C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2678, 0x0061 };
    uint32_t const ces[9] = { 0x099C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_270)
{
    // 2678 0041;	
    // (♸) RECYCLING SYMBOL FOR TYPE-6 PLASTICS	[099C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2678, 0x0041 };
    uint32_t const ces[9] = { 0x099C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_271)
{
    // 2678 0062;	
    // (♸) RECYCLING SYMBOL FOR TYPE-6 PLASTICS	[099C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2678, 0x0062 };
    uint32_t const ces[9] = { 0x099C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_272)
{
    // 2679 0021;	
    // (♹) RECYCLING SYMBOL FOR TYPE-7 PLASTICS	[099D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2679, 0x0021 };
    uint32_t const ces[9] = { 0x099D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_273)
{
    // 2679 003F;	
    // (♹) RECYCLING SYMBOL FOR TYPE-7 PLASTICS	[099D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2679, 0x003F };
    uint32_t const ces[9] = { 0x099D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_274)
{
    // 2679 0061;	
    // (♹) RECYCLING SYMBOL FOR TYPE-7 PLASTICS	[099D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2679, 0x0061 };
    uint32_t const ces[9] = { 0x099D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_275)
{
    // 2679 0041;	
    // (♹) RECYCLING SYMBOL FOR TYPE-7 PLASTICS	[099D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2679, 0x0041 };
    uint32_t const ces[9] = { 0x099D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_276)
{
    // 2679 0062;	
    // (♹) RECYCLING SYMBOL FOR TYPE-7 PLASTICS	[099D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2679, 0x0062 };
    uint32_t const ces[9] = { 0x099D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_277)
{
    // 267A 0021;	
    // (♺) RECYCLING SYMBOL FOR GENERIC MATERIALS	[099E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267A, 0x0021 };
    uint32_t const ces[9] = { 0x099E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_278)
{
    // 267A 003F;	
    // (♺) RECYCLING SYMBOL FOR GENERIC MATERIALS	[099E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267A, 0x003F };
    uint32_t const ces[9] = { 0x099E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_279)
{
    // 267A 0061;	
    // (♺) RECYCLING SYMBOL FOR GENERIC MATERIALS	[099E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267A, 0x0061 };
    uint32_t const ces[9] = { 0x099E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_280)
{
    // 267A 0041;	
    // (♺) RECYCLING SYMBOL FOR GENERIC MATERIALS	[099E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x267A, 0x0041 };
    uint32_t const ces[9] = { 0x099E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_281)
{
    // 267A 0062;	
    // (♺) RECYCLING SYMBOL FOR GENERIC MATERIALS	[099E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267A, 0x0062 };
    uint32_t const ces[9] = { 0x099E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_282)
{
    // 267B 0021;	
    // (♻) BLACK UNIVERSAL RECYCLING SYMBOL	[099F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267B, 0x0021 };
    uint32_t const ces[9] = { 0x099F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_283)
{
    // 267B 003F;	
    // (♻) BLACK UNIVERSAL RECYCLING SYMBOL	[099F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267B, 0x003F };
    uint32_t const ces[9] = { 0x099F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_284)
{
    // 267B 0061;	
    // (♻) BLACK UNIVERSAL RECYCLING SYMBOL	[099F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267B, 0x0061 };
    uint32_t const ces[9] = { 0x099F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_285)
{
    // 267B 0041;	
    // (♻) BLACK UNIVERSAL RECYCLING SYMBOL	[099F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x267B, 0x0041 };
    uint32_t const ces[9] = { 0x099F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_286)
{
    // 267B 0062;	
    // (♻) BLACK UNIVERSAL RECYCLING SYMBOL	[099F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267B, 0x0062 };
    uint32_t const ces[9] = { 0x099F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_287)
{
    // 267C 0021;	
    // (♼) RECYCLED PAPER SYMBOL	[09A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267C, 0x0021 };
    uint32_t const ces[9] = { 0x09A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_288)
{
    // 267C 003F;	
    // (♼) RECYCLED PAPER SYMBOL	[09A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267C, 0x003F };
    uint32_t const ces[9] = { 0x09A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_289)
{
    // 267C 0061;	
    // (♼) RECYCLED PAPER SYMBOL	[09A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267C, 0x0061 };
    uint32_t const ces[9] = { 0x09A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_290)
{
    // 267C 0041;	
    // (♼) RECYCLED PAPER SYMBOL	[09A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x267C, 0x0041 };
    uint32_t const ces[9] = { 0x09A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_291)
{
    // 267C 0062;	
    // (♼) RECYCLED PAPER SYMBOL	[09A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267C, 0x0062 };
    uint32_t const ces[9] = { 0x09A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_292)
{
    // 267D 0021;	
    // (♽) PARTIALLY-RECYCLED PAPER SYMBOL	[09A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267D, 0x0021 };
    uint32_t const ces[9] = { 0x09A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_293)
{
    // 267D 003F;	
    // (♽) PARTIALLY-RECYCLED PAPER SYMBOL	[09A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267D, 0x003F };
    uint32_t const ces[9] = { 0x09A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_294)
{
    // 267D 0061;	
    // (♽) PARTIALLY-RECYCLED PAPER SYMBOL	[09A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267D, 0x0061 };
    uint32_t const ces[9] = { 0x09A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_295)
{
    // 267D 0041;	
    // (♽) PARTIALLY-RECYCLED PAPER SYMBOL	[09A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x267D, 0x0041 };
    uint32_t const ces[9] = { 0x09A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_296)
{
    // 267D 0062;	
    // (♽) PARTIALLY-RECYCLED PAPER SYMBOL	[09A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267D, 0x0062 };
    uint32_t const ces[9] = { 0x09A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_297)
{
    // 267E 0021;	
    // (♾) PERMANENT PAPER SIGN	[09A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267E, 0x0021 };
    uint32_t const ces[9] = { 0x09A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_298)
{
    // 267E 003F;	
    // (♾) PERMANENT PAPER SIGN	[09A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267E, 0x003F };
    uint32_t const ces[9] = { 0x09A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_299)
{
    // 267E 0061;	
    // (♾) PERMANENT PAPER SIGN	[09A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267E, 0x0061 };
    uint32_t const ces[9] = { 0x09A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_300)
{
    // 267E 0041;	
    // (♾) PERMANENT PAPER SIGN	[09A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x267E, 0x0041 };
    uint32_t const ces[9] = { 0x09A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_301)
{
    // 267E 0062;	
    // (♾) PERMANENT PAPER SIGN	[09A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267E, 0x0062 };
    uint32_t const ces[9] = { 0x09A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_302)
{
    // 267F 0021;	
    // (♿) WHEELCHAIR SYMBOL	[09A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267F, 0x0021 };
    uint32_t const ces[9] = { 0x09A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_303)
{
    // 267F 003F;	
    // (♿) WHEELCHAIR SYMBOL	[09A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267F, 0x003F };
    uint32_t const ces[9] = { 0x09A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_304)
{
    // 267F 0061;	
    // (♿) WHEELCHAIR SYMBOL	[09A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267F, 0x0061 };
    uint32_t const ces[9] = { 0x09A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_305)
{
    // 267F 0041;	
    // (♿) WHEELCHAIR SYMBOL	[09A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x267F, 0x0041 };
    uint32_t const ces[9] = { 0x09A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_306)
{
    // 267F 0062;	
    // (♿) WHEELCHAIR SYMBOL	[09A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x267F, 0x0062 };
    uint32_t const ces[9] = { 0x09A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_307)
{
    // 2680 0021;	
    // (⚀) DIE FACE-1	[09A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2680, 0x0021 };
    uint32_t const ces[9] = { 0x09A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_308)
{
    // 2680 003F;	
    // (⚀) DIE FACE-1	[09A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2680, 0x003F };
    uint32_t const ces[9] = { 0x09A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_309)
{
    // 2680 0061;	
    // (⚀) DIE FACE-1	[09A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2680, 0x0061 };
    uint32_t const ces[9] = { 0x09A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_310)
{
    // 2680 0041;	
    // (⚀) DIE FACE-1	[09A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2680, 0x0041 };
    uint32_t const ces[9] = { 0x09A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_311)
{
    // 2680 0062;	
    // (⚀) DIE FACE-1	[09A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2680, 0x0062 };
    uint32_t const ces[9] = { 0x09A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_312)
{
    // 2681 0021;	
    // (⚁) DIE FACE-2	[09A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2681, 0x0021 };
    uint32_t const ces[9] = { 0x09A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_313)
{
    // 2681 003F;	
    // (⚁) DIE FACE-2	[09A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2681, 0x003F };
    uint32_t const ces[9] = { 0x09A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_314)
{
    // 2681 0061;	
    // (⚁) DIE FACE-2	[09A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2681, 0x0061 };
    uint32_t const ces[9] = { 0x09A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_315)
{
    // 2681 0041;	
    // (⚁) DIE FACE-2	[09A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2681, 0x0041 };
    uint32_t const ces[9] = { 0x09A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_316)
{
    // 2681 0062;	
    // (⚁) DIE FACE-2	[09A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2681, 0x0062 };
    uint32_t const ces[9] = { 0x09A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_317)
{
    // 2682 0021;	
    // (⚂) DIE FACE-3	[09A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2682, 0x0021 };
    uint32_t const ces[9] = { 0x09A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_318)
{
    // 2682 003F;	
    // (⚂) DIE FACE-3	[09A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2682, 0x003F };
    uint32_t const ces[9] = { 0x09A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_319)
{
    // 2682 0061;	
    // (⚂) DIE FACE-3	[09A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2682, 0x0061 };
    uint32_t const ces[9] = { 0x09A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_320)
{
    // 2682 0041;	
    // (⚂) DIE FACE-3	[09A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2682, 0x0041 };
    uint32_t const ces[9] = { 0x09A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_321)
{
    // 2682 0062;	
    // (⚂) DIE FACE-3	[09A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2682, 0x0062 };
    uint32_t const ces[9] = { 0x09A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_322)
{
    // 2683 0021;	
    // (⚃) DIE FACE-4	[09A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2683, 0x0021 };
    uint32_t const ces[9] = { 0x09A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_323)
{
    // 2683 003F;	
    // (⚃) DIE FACE-4	[09A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2683, 0x003F };
    uint32_t const ces[9] = { 0x09A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_324)
{
    // 2683 0061;	
    // (⚃) DIE FACE-4	[09A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2683, 0x0061 };
    uint32_t const ces[9] = { 0x09A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_325)
{
    // 2683 0041;	
    // (⚃) DIE FACE-4	[09A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2683, 0x0041 };
    uint32_t const ces[9] = { 0x09A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_326)
{
    // 2683 0062;	
    // (⚃) DIE FACE-4	[09A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2683, 0x0062 };
    uint32_t const ces[9] = { 0x09A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_327)
{
    // 2684 0021;	
    // (⚄) DIE FACE-5	[09A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2684, 0x0021 };
    uint32_t const ces[9] = { 0x09A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_328)
{
    // 2684 003F;	
    // (⚄) DIE FACE-5	[09A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2684, 0x003F };
    uint32_t const ces[9] = { 0x09A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_329)
{
    // 2684 0061;	
    // (⚄) DIE FACE-5	[09A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2684, 0x0061 };
    uint32_t const ces[9] = { 0x09A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_330)
{
    // 2684 0041;	
    // (⚄) DIE FACE-5	[09A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2684, 0x0041 };
    uint32_t const ces[9] = { 0x09A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_331)
{
    // 2684 0062;	
    // (⚄) DIE FACE-5	[09A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2684, 0x0062 };
    uint32_t const ces[9] = { 0x09A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_332)
{
    // 2685 0021;	
    // (⚅) DIE FACE-6	[09A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2685, 0x0021 };
    uint32_t const ces[9] = { 0x09A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_333)
{
    // 2685 003F;	
    // (⚅) DIE FACE-6	[09A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2685, 0x003F };
    uint32_t const ces[9] = { 0x09A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_334)
{
    // 2685 0061;	
    // (⚅) DIE FACE-6	[09A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2685, 0x0061 };
    uint32_t const ces[9] = { 0x09A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_335)
{
    // 2685 0041;	
    // (⚅) DIE FACE-6	[09A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2685, 0x0041 };
    uint32_t const ces[9] = { 0x09A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_336)
{
    // 2685 0062;	
    // (⚅) DIE FACE-6	[09A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2685, 0x0062 };
    uint32_t const ces[9] = { 0x09A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_337)
{
    // 2686 0021;	
    // (⚆) WHITE CIRCLE WITH DOT RIGHT	[09AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2686, 0x0021 };
    uint32_t const ces[9] = { 0x09AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_338)
{
    // 2686 003F;	
    // (⚆) WHITE CIRCLE WITH DOT RIGHT	[09AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2686, 0x003F };
    uint32_t const ces[9] = { 0x09AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_339)
{
    // 2686 0061;	
    // (⚆) WHITE CIRCLE WITH DOT RIGHT	[09AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2686, 0x0061 };
    uint32_t const ces[9] = { 0x09AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_340)
{
    // 2686 0041;	
    // (⚆) WHITE CIRCLE WITH DOT RIGHT	[09AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2686, 0x0041 };
    uint32_t const ces[9] = { 0x09AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_341)
{
    // 2686 0062;	
    // (⚆) WHITE CIRCLE WITH DOT RIGHT	[09AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2686, 0x0062 };
    uint32_t const ces[9] = { 0x09AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_342)
{
    // 2687 0021;	
    // (⚇) WHITE CIRCLE WITH TWO DOTS	[09AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2687, 0x0021 };
    uint32_t const ces[9] = { 0x09AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_343)
{
    // 2687 003F;	
    // (⚇) WHITE CIRCLE WITH TWO DOTS	[09AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2687, 0x003F };
    uint32_t const ces[9] = { 0x09AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_344)
{
    // 2687 0061;	
    // (⚇) WHITE CIRCLE WITH TWO DOTS	[09AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2687, 0x0061 };
    uint32_t const ces[9] = { 0x09AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_345)
{
    // 2687 0041;	
    // (⚇) WHITE CIRCLE WITH TWO DOTS	[09AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2687, 0x0041 };
    uint32_t const ces[9] = { 0x09AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_346)
{
    // 2687 0062;	
    // (⚇) WHITE CIRCLE WITH TWO DOTS	[09AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2687, 0x0062 };
    uint32_t const ces[9] = { 0x09AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_347)
{
    // 2688 0021;	
    // (⚈) BLACK CIRCLE WITH WHITE DOT RIGHT	[09AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2688, 0x0021 };
    uint32_t const ces[9] = { 0x09AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_348)
{
    // 2688 003F;	
    // (⚈) BLACK CIRCLE WITH WHITE DOT RIGHT	[09AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2688, 0x003F };
    uint32_t const ces[9] = { 0x09AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_349)
{
    // 2688 0061;	
    // (⚈) BLACK CIRCLE WITH WHITE DOT RIGHT	[09AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2688, 0x0061 };
    uint32_t const ces[9] = { 0x09AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_350)
{
    // 2688 0041;	
    // (⚈) BLACK CIRCLE WITH WHITE DOT RIGHT	[09AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2688, 0x0041 };
    uint32_t const ces[9] = { 0x09AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_351)
{
    // 2688 0062;	
    // (⚈) BLACK CIRCLE WITH WHITE DOT RIGHT	[09AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2688, 0x0062 };
    uint32_t const ces[9] = { 0x09AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_352)
{
    // 2689 0021;	
    // (⚉) BLACK CIRCLE WITH TWO WHITE DOTS	[09AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2689, 0x0021 };
    uint32_t const ces[9] = { 0x09AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_353)
{
    // 2689 003F;	
    // (⚉) BLACK CIRCLE WITH TWO WHITE DOTS	[09AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2689, 0x003F };
    uint32_t const ces[9] = { 0x09AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_354)
{
    // 2689 0061;	
    // (⚉) BLACK CIRCLE WITH TWO WHITE DOTS	[09AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2689, 0x0061 };
    uint32_t const ces[9] = { 0x09AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_355)
{
    // 2689 0041;	
    // (⚉) BLACK CIRCLE WITH TWO WHITE DOTS	[09AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2689, 0x0041 };
    uint32_t const ces[9] = { 0x09AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_356)
{
    // 2689 0062;	
    // (⚉) BLACK CIRCLE WITH TWO WHITE DOTS	[09AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2689, 0x0062 };
    uint32_t const ces[9] = { 0x09AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_357)
{
    // 2690 0021;	
    // (⚐) WHITE FLAG	[09AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2690, 0x0021 };
    uint32_t const ces[9] = { 0x09AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_358)
{
    // 2690 003F;	
    // (⚐) WHITE FLAG	[09AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2690, 0x003F };
    uint32_t const ces[9] = { 0x09AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_359)
{
    // 2690 0061;	
    // (⚐) WHITE FLAG	[09AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2690, 0x0061 };
    uint32_t const ces[9] = { 0x09AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_360)
{
    // 2690 0041;	
    // (⚐) WHITE FLAG	[09AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2690, 0x0041 };
    uint32_t const ces[9] = { 0x09AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_361)
{
    // 2690 0062;	
    // (⚐) WHITE FLAG	[09AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2690, 0x0062 };
    uint32_t const ces[9] = { 0x09AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_362)
{
    // 2691 0021;	
    // (⚑) BLACK FLAG	[09AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2691, 0x0021 };
    uint32_t const ces[9] = { 0x09AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_363)
{
    // 2691 003F;	
    // (⚑) BLACK FLAG	[09AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2691, 0x003F };
    uint32_t const ces[9] = { 0x09AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_364)
{
    // 2691 0061;	
    // (⚑) BLACK FLAG	[09AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2691, 0x0061 };
    uint32_t const ces[9] = { 0x09AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_365)
{
    // 2691 0041;	
    // (⚑) BLACK FLAG	[09AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2691, 0x0041 };
    uint32_t const ces[9] = { 0x09AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_366)
{
    // 2691 0062;	
    // (⚑) BLACK FLAG	[09AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2691, 0x0062 };
    uint32_t const ces[9] = { 0x09AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_367)
{
    // 2692 0021;	
    // (⚒) HAMMER AND PICK	[09B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2692, 0x0021 };
    uint32_t const ces[9] = { 0x09B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_368)
{
    // 2692 003F;	
    // (⚒) HAMMER AND PICK	[09B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2692, 0x003F };
    uint32_t const ces[9] = { 0x09B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_369)
{
    // 2692 0061;	
    // (⚒) HAMMER AND PICK	[09B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2692, 0x0061 };
    uint32_t const ces[9] = { 0x09B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_370)
{
    // 2692 0041;	
    // (⚒) HAMMER AND PICK	[09B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2692, 0x0041 };
    uint32_t const ces[9] = { 0x09B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_371)
{
    // 2692 0062;	
    // (⚒) HAMMER AND PICK	[09B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2692, 0x0062 };
    uint32_t const ces[9] = { 0x09B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_372)
{
    // 2693 0021;	
    // (⚓) ANCHOR	[09B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2693, 0x0021 };
    uint32_t const ces[9] = { 0x09B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_373)
{
    // 2693 003F;	
    // (⚓) ANCHOR	[09B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2693, 0x003F };
    uint32_t const ces[9] = { 0x09B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_374)
{
    // 2693 0061;	
    // (⚓) ANCHOR	[09B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2693, 0x0061 };
    uint32_t const ces[9] = { 0x09B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_375)
{
    // 2693 0041;	
    // (⚓) ANCHOR	[09B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2693, 0x0041 };
    uint32_t const ces[9] = { 0x09B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_376)
{
    // 2693 0062;	
    // (⚓) ANCHOR	[09B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2693, 0x0062 };
    uint32_t const ces[9] = { 0x09B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_377)
{
    // 2694 0021;	
    // (⚔) CROSSED SWORDS	[09B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2694, 0x0021 };
    uint32_t const ces[9] = { 0x09B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_378)
{
    // 2694 003F;	
    // (⚔) CROSSED SWORDS	[09B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2694, 0x003F };
    uint32_t const ces[9] = { 0x09B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_379)
{
    // 2694 0061;	
    // (⚔) CROSSED SWORDS	[09B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2694, 0x0061 };
    uint32_t const ces[9] = { 0x09B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_380)
{
    // 2694 0041;	
    // (⚔) CROSSED SWORDS	[09B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2694, 0x0041 };
    uint32_t const ces[9] = { 0x09B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_381)
{
    // 2694 0062;	
    // (⚔) CROSSED SWORDS	[09B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2694, 0x0062 };
    uint32_t const ces[9] = { 0x09B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_382)
{
    // 2695 0021;	
    // (⚕) STAFF OF AESCULAPIUS	[09B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2695, 0x0021 };
    uint32_t const ces[9] = { 0x09B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_383)
{
    // 2695 003F;	
    // (⚕) STAFF OF AESCULAPIUS	[09B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2695, 0x003F };
    uint32_t const ces[9] = { 0x09B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_384)
{
    // 2695 0061;	
    // (⚕) STAFF OF AESCULAPIUS	[09B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2695, 0x0061 };
    uint32_t const ces[9] = { 0x09B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_385)
{
    // 2695 0041;	
    // (⚕) STAFF OF AESCULAPIUS	[09B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2695, 0x0041 };
    uint32_t const ces[9] = { 0x09B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_386)
{
    // 2695 0062;	
    // (⚕) STAFF OF AESCULAPIUS	[09B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2695, 0x0062 };
    uint32_t const ces[9] = { 0x09B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_387)
{
    // 2696 0021;	
    // (⚖) SCALES	[09B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2696, 0x0021 };
    uint32_t const ces[9] = { 0x09B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_388)
{
    // 2696 003F;	
    // (⚖) SCALES	[09B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2696, 0x003F };
    uint32_t const ces[9] = { 0x09B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_389)
{
    // 2696 0061;	
    // (⚖) SCALES	[09B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2696, 0x0061 };
    uint32_t const ces[9] = { 0x09B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_390)
{
    // 2696 0041;	
    // (⚖) SCALES	[09B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2696, 0x0041 };
    uint32_t const ces[9] = { 0x09B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_391)
{
    // 2696 0062;	
    // (⚖) SCALES	[09B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2696, 0x0062 };
    uint32_t const ces[9] = { 0x09B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_392)
{
    // 2697 0021;	
    // (⚗) ALEMBIC	[09B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2697, 0x0021 };
    uint32_t const ces[9] = { 0x09B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_393)
{
    // 2697 003F;	
    // (⚗) ALEMBIC	[09B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2697, 0x003F };
    uint32_t const ces[9] = { 0x09B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_394)
{
    // 2697 0061;	
    // (⚗) ALEMBIC	[09B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2697, 0x0061 };
    uint32_t const ces[9] = { 0x09B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_395)
{
    // 2697 0041;	
    // (⚗) ALEMBIC	[09B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2697, 0x0041 };
    uint32_t const ces[9] = { 0x09B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_396)
{
    // 2697 0062;	
    // (⚗) ALEMBIC	[09B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2697, 0x0062 };
    uint32_t const ces[9] = { 0x09B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_397)
{
    // 2698 0021;	
    // (⚘) FLOWER	[09B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2698, 0x0021 };
    uint32_t const ces[9] = { 0x09B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_398)
{
    // 2698 003F;	
    // (⚘) FLOWER	[09B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2698, 0x003F };
    uint32_t const ces[9] = { 0x09B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_399)
{
    // 2698 0061;	
    // (⚘) FLOWER	[09B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2698, 0x0061 };
    uint32_t const ces[9] = { 0x09B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_400)
{
    // 2698 0041;	
    // (⚘) FLOWER	[09B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2698, 0x0041 };
    uint32_t const ces[9] = { 0x09B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_401)
{
    // 2698 0062;	
    // (⚘) FLOWER	[09B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2698, 0x0062 };
    uint32_t const ces[9] = { 0x09B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_402)
{
    // 2699 0021;	
    // (⚙) GEAR	[09B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2699, 0x0021 };
    uint32_t const ces[9] = { 0x09B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_403)
{
    // 2699 003F;	
    // (⚙) GEAR	[09B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2699, 0x003F };
    uint32_t const ces[9] = { 0x09B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_404)
{
    // 2699 0061;	
    // (⚙) GEAR	[09B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2699, 0x0061 };
    uint32_t const ces[9] = { 0x09B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_405)
{
    // 2699 0041;	
    // (⚙) GEAR	[09B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2699, 0x0041 };
    uint32_t const ces[9] = { 0x09B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_406)
{
    // 2699 0062;	
    // (⚙) GEAR	[09B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2699, 0x0062 };
    uint32_t const ces[9] = { 0x09B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_407)
{
    // 269A 0021;	
    // (⚚) STAFF OF HERMES	[09B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269A, 0x0021 };
    uint32_t const ces[9] = { 0x09B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_408)
{
    // 269A 003F;	
    // (⚚) STAFF OF HERMES	[09B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269A, 0x003F };
    uint32_t const ces[9] = { 0x09B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_409)
{
    // 269A 0061;	
    // (⚚) STAFF OF HERMES	[09B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269A, 0x0061 };
    uint32_t const ces[9] = { 0x09B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_410)
{
    // 269A 0041;	
    // (⚚) STAFF OF HERMES	[09B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x269A, 0x0041 };
    uint32_t const ces[9] = { 0x09B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_411)
{
    // 269A 0062;	
    // (⚚) STAFF OF HERMES	[09B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269A, 0x0062 };
    uint32_t const ces[9] = { 0x09B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_412)
{
    // 269B 0021;	
    // (⚛) ATOM SYMBOL	[09B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269B, 0x0021 };
    uint32_t const ces[9] = { 0x09B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_413)
{
    // 269B 003F;	
    // (⚛) ATOM SYMBOL	[09B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269B, 0x003F };
    uint32_t const ces[9] = { 0x09B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_414)
{
    // 269B 0061;	
    // (⚛) ATOM SYMBOL	[09B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269B, 0x0061 };
    uint32_t const ces[9] = { 0x09B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_415)
{
    // 269B 0041;	
    // (⚛) ATOM SYMBOL	[09B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x269B, 0x0041 };
    uint32_t const ces[9] = { 0x09B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_416)
{
    // 269B 0062;	
    // (⚛) ATOM SYMBOL	[09B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269B, 0x0062 };
    uint32_t const ces[9] = { 0x09B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_417)
{
    // 269C 0021;	
    // (⚜) FLEUR-DE-LIS	[09BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269C, 0x0021 };
    uint32_t const ces[9] = { 0x09BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_418)
{
    // 269C 003F;	
    // (⚜) FLEUR-DE-LIS	[09BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269C, 0x003F };
    uint32_t const ces[9] = { 0x09BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_419)
{
    // 269C 0061;	
    // (⚜) FLEUR-DE-LIS	[09BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269C, 0x0061 };
    uint32_t const ces[9] = { 0x09BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_420)
{
    // 269C 0041;	
    // (⚜) FLEUR-DE-LIS	[09BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x269C, 0x0041 };
    uint32_t const ces[9] = { 0x09BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_421)
{
    // 269C 0062;	
    // (⚜) FLEUR-DE-LIS	[09BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269C, 0x0062 };
    uint32_t const ces[9] = { 0x09BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_422)
{
    // 269D 0021;	
    // (⚝) OUTLINED WHITE STAR	[09BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269D, 0x0021 };
    uint32_t const ces[9] = { 0x09BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_423)
{
    // 269D 003F;	
    // (⚝) OUTLINED WHITE STAR	[09BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269D, 0x003F };
    uint32_t const ces[9] = { 0x09BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_424)
{
    // 269D 0061;	
    // (⚝) OUTLINED WHITE STAR	[09BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269D, 0x0061 };
    uint32_t const ces[9] = { 0x09BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_425)
{
    // 269D 0041;	
    // (⚝) OUTLINED WHITE STAR	[09BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x269D, 0x0041 };
    uint32_t const ces[9] = { 0x09BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_426)
{
    // 269D 0062;	
    // (⚝) OUTLINED WHITE STAR	[09BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269D, 0x0062 };
    uint32_t const ces[9] = { 0x09BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_427)
{
    // 269E 0021;	
    // (⚞) THREE LINES CONVERGING RIGHT	[09BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269E, 0x0021 };
    uint32_t const ces[9] = { 0x09BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_428)
{
    // 269E 003F;	
    // (⚞) THREE LINES CONVERGING RIGHT	[09BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269E, 0x003F };
    uint32_t const ces[9] = { 0x09BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_429)
{
    // 269E 0061;	
    // (⚞) THREE LINES CONVERGING RIGHT	[09BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269E, 0x0061 };
    uint32_t const ces[9] = { 0x09BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_430)
{
    // 269E 0041;	
    // (⚞) THREE LINES CONVERGING RIGHT	[09BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x269E, 0x0041 };
    uint32_t const ces[9] = { 0x09BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_431)
{
    // 269E 0062;	
    // (⚞) THREE LINES CONVERGING RIGHT	[09BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269E, 0x0062 };
    uint32_t const ces[9] = { 0x09BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_432)
{
    // 269F 0021;	
    // (⚟) THREE LINES CONVERGING LEFT	[09BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269F, 0x0021 };
    uint32_t const ces[9] = { 0x09BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_433)
{
    // 269F 003F;	
    // (⚟) THREE LINES CONVERGING LEFT	[09BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269F, 0x003F };
    uint32_t const ces[9] = { 0x09BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_434)
{
    // 269F 0061;	
    // (⚟) THREE LINES CONVERGING LEFT	[09BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269F, 0x0061 };
    uint32_t const ces[9] = { 0x09BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_435)
{
    // 269F 0041;	
    // (⚟) THREE LINES CONVERGING LEFT	[09BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x269F, 0x0041 };
    uint32_t const ces[9] = { 0x09BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_436)
{
    // 269F 0062;	
    // (⚟) THREE LINES CONVERGING LEFT	[09BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x269F, 0x0062 };
    uint32_t const ces[9] = { 0x09BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_437)
{
    // 26A0 0021;	
    // (⚠) WARNING SIGN	[09BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A0, 0x0021 };
    uint32_t const ces[9] = { 0x09BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_438)
{
    // 26A0 003F;	
    // (⚠) WARNING SIGN	[09BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A0, 0x003F };
    uint32_t const ces[9] = { 0x09BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_439)
{
    // 26A0 0061;	
    // (⚠) WARNING SIGN	[09BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A0, 0x0061 };
    uint32_t const ces[9] = { 0x09BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_440)
{
    // 26A0 0041;	
    // (⚠) WARNING SIGN	[09BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A0, 0x0041 };
    uint32_t const ces[9] = { 0x09BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_441)
{
    // 26A0 0062;	
    // (⚠) WARNING SIGN	[09BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A0, 0x0062 };
    uint32_t const ces[9] = { 0x09BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_442)
{
    // 26A1 0021;	
    // (⚡) HIGH VOLTAGE SIGN	[09BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A1, 0x0021 };
    uint32_t const ces[9] = { 0x09BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_443)
{
    // 26A1 003F;	
    // (⚡) HIGH VOLTAGE SIGN	[09BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A1, 0x003F };
    uint32_t const ces[9] = { 0x09BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_444)
{
    // 26A1 0061;	
    // (⚡) HIGH VOLTAGE SIGN	[09BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A1, 0x0061 };
    uint32_t const ces[9] = { 0x09BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_445)
{
    // 26A1 0041;	
    // (⚡) HIGH VOLTAGE SIGN	[09BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A1, 0x0041 };
    uint32_t const ces[9] = { 0x09BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_446)
{
    // 26A1 0062;	
    // (⚡) HIGH VOLTAGE SIGN	[09BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A1, 0x0062 };
    uint32_t const ces[9] = { 0x09BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_447)
{
    // 26A2 0021;	
    // (⚢) DOUBLED FEMALE SIGN	[09C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A2, 0x0021 };
    uint32_t const ces[9] = { 0x09C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_448)
{
    // 26A2 003F;	
    // (⚢) DOUBLED FEMALE SIGN	[09C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A2, 0x003F };
    uint32_t const ces[9] = { 0x09C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_449)
{
    // 26A2 0061;	
    // (⚢) DOUBLED FEMALE SIGN	[09C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A2, 0x0061 };
    uint32_t const ces[9] = { 0x09C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_450)
{
    // 26A2 0041;	
    // (⚢) DOUBLED FEMALE SIGN	[09C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A2, 0x0041 };
    uint32_t const ces[9] = { 0x09C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_451)
{
    // 26A2 0062;	
    // (⚢) DOUBLED FEMALE SIGN	[09C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A2, 0x0062 };
    uint32_t const ces[9] = { 0x09C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_452)
{
    // 26A3 0021;	
    // (⚣) DOUBLED MALE SIGN	[09C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A3, 0x0021 };
    uint32_t const ces[9] = { 0x09C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_453)
{
    // 26A3 003F;	
    // (⚣) DOUBLED MALE SIGN	[09C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A3, 0x003F };
    uint32_t const ces[9] = { 0x09C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_454)
{
    // 26A3 0061;	
    // (⚣) DOUBLED MALE SIGN	[09C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A3, 0x0061 };
    uint32_t const ces[9] = { 0x09C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_455)
{
    // 26A3 0041;	
    // (⚣) DOUBLED MALE SIGN	[09C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A3, 0x0041 };
    uint32_t const ces[9] = { 0x09C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_456)
{
    // 26A3 0062;	
    // (⚣) DOUBLED MALE SIGN	[09C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A3, 0x0062 };
    uint32_t const ces[9] = { 0x09C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_457)
{
    // 26A4 0021;	
    // (⚤) INTERLOCKED FEMALE AND MALE SIGN	[09C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A4, 0x0021 };
    uint32_t const ces[9] = { 0x09C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_458)
{
    // 26A4 003F;	
    // (⚤) INTERLOCKED FEMALE AND MALE SIGN	[09C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A4, 0x003F };
    uint32_t const ces[9] = { 0x09C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_459)
{
    // 26A4 0061;	
    // (⚤) INTERLOCKED FEMALE AND MALE SIGN	[09C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A4, 0x0061 };
    uint32_t const ces[9] = { 0x09C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_460)
{
    // 26A4 0041;	
    // (⚤) INTERLOCKED FEMALE AND MALE SIGN	[09C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A4, 0x0041 };
    uint32_t const ces[9] = { 0x09C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_461)
{
    // 26A4 0062;	
    // (⚤) INTERLOCKED FEMALE AND MALE SIGN	[09C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A4, 0x0062 };
    uint32_t const ces[9] = { 0x09C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_462)
{
    // 26A5 0021;	
    // (⚥) MALE AND FEMALE SIGN	[09C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A5, 0x0021 };
    uint32_t const ces[9] = { 0x09C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_463)
{
    // 26A5 003F;	
    // (⚥) MALE AND FEMALE SIGN	[09C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A5, 0x003F };
    uint32_t const ces[9] = { 0x09C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_464)
{
    // 26A5 0061;	
    // (⚥) MALE AND FEMALE SIGN	[09C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A5, 0x0061 };
    uint32_t const ces[9] = { 0x09C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_465)
{
    // 26A5 0041;	
    // (⚥) MALE AND FEMALE SIGN	[09C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A5, 0x0041 };
    uint32_t const ces[9] = { 0x09C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_466)
{
    // 26A5 0062;	
    // (⚥) MALE AND FEMALE SIGN	[09C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A5, 0x0062 };
    uint32_t const ces[9] = { 0x09C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_467)
{
    // 26A6 0021;	
    // (⚦) MALE WITH STROKE SIGN	[09C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A6, 0x0021 };
    uint32_t const ces[9] = { 0x09C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_468)
{
    // 26A6 003F;	
    // (⚦) MALE WITH STROKE SIGN	[09C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A6, 0x003F };
    uint32_t const ces[9] = { 0x09C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_469)
{
    // 26A6 0061;	
    // (⚦) MALE WITH STROKE SIGN	[09C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A6, 0x0061 };
    uint32_t const ces[9] = { 0x09C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_470)
{
    // 26A6 0041;	
    // (⚦) MALE WITH STROKE SIGN	[09C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A6, 0x0041 };
    uint32_t const ces[9] = { 0x09C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_471)
{
    // 26A6 0062;	
    // (⚦) MALE WITH STROKE SIGN	[09C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A6, 0x0062 };
    uint32_t const ces[9] = { 0x09C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_472)
{
    // 26A7 0021;	
    // (⚧) MALE WITH STROKE AND MALE AND FEMALE SIGN	[09C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A7, 0x0021 };
    uint32_t const ces[9] = { 0x09C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_473)
{
    // 26A7 003F;	
    // (⚧) MALE WITH STROKE AND MALE AND FEMALE SIGN	[09C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A7, 0x003F };
    uint32_t const ces[9] = { 0x09C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_474)
{
    // 26A7 0061;	
    // (⚧) MALE WITH STROKE AND MALE AND FEMALE SIGN	[09C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A7, 0x0061 };
    uint32_t const ces[9] = { 0x09C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_475)
{
    // 26A7 0041;	
    // (⚧) MALE WITH STROKE AND MALE AND FEMALE SIGN	[09C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A7, 0x0041 };
    uint32_t const ces[9] = { 0x09C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_476)
{
    // 26A7 0062;	
    // (⚧) MALE WITH STROKE AND MALE AND FEMALE SIGN	[09C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A7, 0x0062 };
    uint32_t const ces[9] = { 0x09C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_477)
{
    // 26A8 0021;	
    // (⚨) VERTICAL MALE WITH STROKE SIGN	[09C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A8, 0x0021 };
    uint32_t const ces[9] = { 0x09C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_478)
{
    // 26A8 003F;	
    // (⚨) VERTICAL MALE WITH STROKE SIGN	[09C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A8, 0x003F };
    uint32_t const ces[9] = { 0x09C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_479)
{
    // 26A8 0061;	
    // (⚨) VERTICAL MALE WITH STROKE SIGN	[09C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A8, 0x0061 };
    uint32_t const ces[9] = { 0x09C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_480)
{
    // 26A8 0041;	
    // (⚨) VERTICAL MALE WITH STROKE SIGN	[09C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A8, 0x0041 };
    uint32_t const ces[9] = { 0x09C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_481)
{
    // 26A8 0062;	
    // (⚨) VERTICAL MALE WITH STROKE SIGN	[09C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A8, 0x0062 };
    uint32_t const ces[9] = { 0x09C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_482)
{
    // 26A9 0021;	
    // (⚩) HORIZONTAL MALE WITH STROKE SIGN	[09C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A9, 0x0021 };
    uint32_t const ces[9] = { 0x09C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_483)
{
    // 26A9 003F;	
    // (⚩) HORIZONTAL MALE WITH STROKE SIGN	[09C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A9, 0x003F };
    uint32_t const ces[9] = { 0x09C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_484)
{
    // 26A9 0061;	
    // (⚩) HORIZONTAL MALE WITH STROKE SIGN	[09C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A9, 0x0061 };
    uint32_t const ces[9] = { 0x09C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_485)
{
    // 26A9 0041;	
    // (⚩) HORIZONTAL MALE WITH STROKE SIGN	[09C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26A9, 0x0041 };
    uint32_t const ces[9] = { 0x09C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_486)
{
    // 26A9 0062;	
    // (⚩) HORIZONTAL MALE WITH STROKE SIGN	[09C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26A9, 0x0062 };
    uint32_t const ces[9] = { 0x09C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_487)
{
    // 26AA 0021;	
    // (⚪) MEDIUM WHITE CIRCLE	[09C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AA, 0x0021 };
    uint32_t const ces[9] = { 0x09C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_488)
{
    // 26AA 003F;	
    // (⚪) MEDIUM WHITE CIRCLE	[09C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AA, 0x003F };
    uint32_t const ces[9] = { 0x09C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_489)
{
    // 26AA 0061;	
    // (⚪) MEDIUM WHITE CIRCLE	[09C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AA, 0x0061 };
    uint32_t const ces[9] = { 0x09C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_490)
{
    // 26AA 0041;	
    // (⚪) MEDIUM WHITE CIRCLE	[09C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26AA, 0x0041 };
    uint32_t const ces[9] = { 0x09C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_491)
{
    // 26AA 0062;	
    // (⚪) MEDIUM WHITE CIRCLE	[09C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AA, 0x0062 };
    uint32_t const ces[9] = { 0x09C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_492)
{
    // 26AB 0021;	
    // (⚫) MEDIUM BLACK CIRCLE	[09C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AB, 0x0021 };
    uint32_t const ces[9] = { 0x09C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_493)
{
    // 26AB 003F;	
    // (⚫) MEDIUM BLACK CIRCLE	[09C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AB, 0x003F };
    uint32_t const ces[9] = { 0x09C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_494)
{
    // 26AB 0061;	
    // (⚫) MEDIUM BLACK CIRCLE	[09C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AB, 0x0061 };
    uint32_t const ces[9] = { 0x09C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_495)
{
    // 26AB 0041;	
    // (⚫) MEDIUM BLACK CIRCLE	[09C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26AB, 0x0041 };
    uint32_t const ces[9] = { 0x09C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_496)
{
    // 26AB 0062;	
    // (⚫) MEDIUM BLACK CIRCLE	[09C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AB, 0x0062 };
    uint32_t const ces[9] = { 0x09C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_497)
{
    // 26AC 0021;	
    // (⚬) MEDIUM SMALL WHITE CIRCLE	[09CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AC, 0x0021 };
    uint32_t const ces[9] = { 0x09CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_498)
{
    // 26AC 003F;	
    // (⚬) MEDIUM SMALL WHITE CIRCLE	[09CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AC, 0x003F };
    uint32_t const ces[9] = { 0x09CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_031_499)
{
    // 26AC 0061;	
    // (⚬) MEDIUM SMALL WHITE CIRCLE	[09CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AC, 0x0061 };
    uint32_t const ces[9] = { 0x09CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

