// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_054_000)
{
    // 214F  ; [*05AF.0020.0002] 
    // SYMBOL FOR SAMARITAN SOURCE

    uint32_t const cps[1] = { 0x214f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_001)
{
    // 2150  ; [.1CA4.0020.001E][*063C.0020.001E][.1CAA.0020.001E] 
    // VULGAR FRACTION ONE SEVENTH

    uint32_t const cps[1] = { 0x2150 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_002)
{
    // 2151  ; [.1CA4.0020.001E][*063C.0020.001E][.1CAC.0020.001E] 
    // VULGAR FRACTION ONE NINTH

    uint32_t const cps[1] = { 0x2151 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_003)
{
    // 2152  ; [.1CA4.0020.001E][*063C.0020.001E][.1CA4.0020.001E][.1CA3.0020.001E] 
    // VULGAR FRACTION ONE TENTH

    uint32_t const cps[1] = { 0x2152 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_054_004)
{
    // 2153  ; [.1CA4.0020.001E][*063C.0020.001E][.1CA6.0020.001E] 
    // VULGAR FRACTION ONE THIRD

    uint32_t const cps[1] = { 0x2153 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_005)
{
    // 2154  ; [.1CA5.0020.001E][*063C.0020.001E][.1CA6.0020.001E] 
    // VULGAR FRACTION TWO THIRDS

    uint32_t const cps[1] = { 0x2154 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_006)
{
    // 2155  ; [.1CA4.0020.001E][*063C.0020.001E][.1CA8.0020.001E] 
    // VULGAR FRACTION ONE FIFTH

    uint32_t const cps[1] = { 0x2155 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_007)
{
    // 2156  ; [.1CA5.0020.001E][*063C.0020.001E][.1CA8.0020.001E] 
    // VULGAR FRACTION TWO FIFTHS

    uint32_t const cps[1] = { 0x2156 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_008)
{
    // 2157  ; [.1CA6.0020.001E][*063C.0020.001E][.1CA8.0020.001E] 
    // VULGAR FRACTION THREE FIFTHS

    uint32_t const cps[1] = { 0x2157 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_009)
{
    // 2158  ; [.1CA7.0020.001E][*063C.0020.001E][.1CA8.0020.001E] 
    // VULGAR FRACTION FOUR FIFTHS

    uint32_t const cps[1] = { 0x2158 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_010)
{
    // 2159  ; [.1CA4.0020.001E][*063C.0020.001E][.1CA9.0020.001E] 
    // VULGAR FRACTION ONE SIXTH

    uint32_t const cps[1] = { 0x2159 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_011)
{
    // 215A  ; [.1CA8.0020.001E][*063C.0020.001E][.1CA9.0020.001E] 
    // VULGAR FRACTION FIVE SIXTHS

    uint32_t const cps[1] = { 0x215a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_012)
{
    // 215B  ; [.1CA4.0020.001E][*063C.0020.001E][.1CAB.0020.001E] 
    // VULGAR FRACTION ONE EIGHTH

    uint32_t const cps[1] = { 0x215b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_013)
{
    // 215C  ; [.1CA6.0020.001E][*063C.0020.001E][.1CAB.0020.001E] 
    // VULGAR FRACTION THREE EIGHTHS

    uint32_t const cps[1] = { 0x215c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_014)
{
    // 215D  ; [.1CA8.0020.001E][*063C.0020.001E][.1CAB.0020.001E] 
    // VULGAR FRACTION FIVE EIGHTHS

    uint32_t const cps[1] = { 0x215d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_015)
{
    // 215E  ; [.1CAA.0020.001E][*063C.0020.001E][.1CAB.0020.001E] 
    // VULGAR FRACTION SEVEN EIGHTHS

    uint32_t const cps[1] = { 0x215e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_016)
{
    // 215F  ; [.1CA4.0020.001E][*063C.0020.001E] 
    // FRACTION NUMERATOR ONE

    uint32_t const cps[1] = { 0x215f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_017)
{
    // 2160  ; [.1D98.0020.000A] 
    // ROMAN NUMERAL ONE

    uint32_t const cps[1] = { 0x2160 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_018)
{
    // 2161  ; [.1D98.0020.000A][.1D98.0020.000A] 
    // ROMAN NUMERAL TWO

    uint32_t const cps[1] = { 0x2161 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_019)
{
    // 2162  ; [.1D98.0020.000A][.1D98.0020.000A][.1D98.0020.000A] 
    // ROMAN NUMERAL THREE

    uint32_t const cps[1] = { 0x2162 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_020)
{
    // 2163  ; [.1D98.0020.000A][.1F49.0020.000A] 
    // ROMAN NUMERAL FOUR

    uint32_t const cps[1] = { 0x2163 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_021)
{
    // 2164  ; [.1F49.0020.000A] 
    // ROMAN NUMERAL FIVE

    uint32_t const cps[1] = { 0x2164 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_022)
{
    // 2165  ; [.1F49.0020.000A][.1D98.0020.000A] 
    // ROMAN NUMERAL SIX

    uint32_t const cps[1] = { 0x2165 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_023)
{
    // 2166  ; [.1F49.0020.000A][.1D98.0020.000A][.1D98.0020.000A] 
    // ROMAN NUMERAL SEVEN

    uint32_t const cps[1] = { 0x2166 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_024)
{
    // 2167  ; [.1F49.0020.000A][.1D98.0020.000A][.1D98.0020.000A][.1D98.0020.000A] 
    // ROMAN NUMERAL EIGHT

    uint32_t const cps[1] = { 0x2167 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_054_025)
{
    // 2168  ; [.1D98.0020.000A][.1F65.0020.000A] 
    // ROMAN NUMERAL NINE

    uint32_t const cps[1] = { 0x2168 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_026)
{
    // 2169  ; [.1F65.0020.000A] 
    // ROMAN NUMERAL TEN

    uint32_t const cps[1] = { 0x2169 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_027)
{
    // 216A  ; [.1F65.0020.000A][.1D98.0020.000A] 
    // ROMAN NUMERAL ELEVEN

    uint32_t const cps[1] = { 0x216a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_028)
{
    // 216B  ; [.1F65.0020.000A][.1D98.0020.000A][.1D98.0020.000A] 
    // ROMAN NUMERAL TWELVE

    uint32_t const cps[1] = { 0x216b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_029)
{
    // 216C  ; [.1DDD.0020.000A] 
    // ROMAN NUMERAL FIFTY

    uint32_t const cps[1] = { 0x216c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_030)
{
    // 216D  ; [.1CE0.0020.000A] 
    // ROMAN NUMERAL ONE HUNDRED

    uint32_t const cps[1] = { 0x216d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_031)
{
    // 216E  ; [.1CF5.0020.000A] 
    // ROMAN NUMERAL FIVE HUNDRED

    uint32_t const cps[1] = { 0x216e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_032)
{
    // 216F  ; [.1E10.0020.000A] 
    // ROMAN NUMERAL ONE THOUSAND

    uint32_t const cps[1] = { 0x216f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_033)
{
    // 2170  ; [.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL ONE

    uint32_t const cps[1] = { 0x2170 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_034)
{
    // 2171  ; [.1D98.0020.0004][.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL TWO

    uint32_t const cps[1] = { 0x2171 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_035)
{
    // 2172  ; [.1D98.0020.0004][.1D98.0020.0004][.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL THREE

    uint32_t const cps[1] = { 0x2172 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_036)
{
    // 2173  ; [.1D98.0020.0004][.1F49.0020.0004] 
    // SMALL ROMAN NUMERAL FOUR

    uint32_t const cps[1] = { 0x2173 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_037)
{
    // 2174  ; [.1F49.0020.0004] 
    // SMALL ROMAN NUMERAL FIVE

    uint32_t const cps[1] = { 0x2174 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_038)
{
    // 2175  ; [.1F49.0020.0004][.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL SIX

    uint32_t const cps[1] = { 0x2175 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_039)
{
    // 2176  ; [.1F49.0020.0004][.1D98.0020.0004][.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL SEVEN

    uint32_t const cps[1] = { 0x2176 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_040)
{
    // 2177  ; [.1F49.0020.0004][.1D98.0020.0004][.1D98.0020.0004][.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL EIGHT

    uint32_t const cps[1] = { 0x2177 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_054_041)
{
    // 2178  ; [.1D98.0020.0004][.1F65.0020.0004] 
    // SMALL ROMAN NUMERAL NINE

    uint32_t const cps[1] = { 0x2178 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_042)
{
    // 2179  ; [.1F65.0020.0004] 
    // SMALL ROMAN NUMERAL TEN

    uint32_t const cps[1] = { 0x2179 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_043)
{
    // 217A  ; [.1F65.0020.0004][.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL ELEVEN

    uint32_t const cps[1] = { 0x217a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_044)
{
    // 217B  ; [.1F65.0020.0004][.1D98.0020.0004][.1D98.0020.0004] 
    // SMALL ROMAN NUMERAL TWELVE

    uint32_t const cps[1] = { 0x217b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_045)
{
    // 217C  ; [.1DDD.0020.0004] 
    // SMALL ROMAN NUMERAL FIFTY

    uint32_t const cps[1] = { 0x217c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_046)
{
    // 217D  ; [.1CE0.0020.0004] 
    // SMALL ROMAN NUMERAL ONE HUNDRED

    uint32_t const cps[1] = { 0x217d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_047)
{
    // 217E  ; [.1CF5.0020.0004] 
    // SMALL ROMAN NUMERAL FIVE HUNDRED

    uint32_t const cps[1] = { 0x217e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_048)
{
    // 217F  ; [.1E10.0020.0004] 
    // SMALL ROMAN NUMERAL ONE THOUSAND

    uint32_t const cps[1] = { 0x217f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_049)
{
    // 2180  ; [*1B2A.0020.0002] 
    // ROMAN NUMERAL ONE THOUSAND C D

    uint32_t const cps[1] = { 0x2180 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_050)
{
    // 2181  ; [*1B2B.0020.0002] 
    // ROMAN NUMERAL FIVE THOUSAND

    uint32_t const cps[1] = { 0x2181 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_051)
{
    // 2182  ; [*1B2C.0020.0002] 
    // ROMAN NUMERAL TEN THOUSAND

    uint32_t const cps[1] = { 0x2182 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_052)
{
    // 2183  ; [.1CF3.0020.0008] 
    // ROMAN NUMERAL REVERSED ONE HUNDRED

    uint32_t const cps[1] = { 0x2183 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_053)
{
    // 2184  ; [.1CF3.0020.0002] 
    // LATIN SMALL LETTER REVERSED C

    uint32_t const cps[1] = { 0x2184 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_054)
{
    // 2185  ; [.1CA9.0020.0002] 
    // ROMAN NUMERAL SIX LATE FORM

    uint32_t const cps[1] = { 0x2185 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_055)
{
    // 2186  ; [*1B2D.0020.0002] 
    // ROMAN NUMERAL FIFTY EARLY FORM

    uint32_t const cps[1] = { 0x2186 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_056)
{
    // 2187  ; [*1B2E.0020.0002] 
    // ROMAN NUMERAL FIFTY THOUSAND

    uint32_t const cps[1] = { 0x2187 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_057)
{
    // 2188  ; [*1B2F.0020.0002] 
    // ROMAN NUMERAL ONE HUNDRED THOUSAND

    uint32_t const cps[1] = { 0x2188 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_058)
{
    // 2189  ; [.1CA3.0020.001E][*063C.0020.001E][.1CA6.0020.001E] 
    // VULGAR FRACTION ZERO THIRDS

    uint32_t const cps[1] = { 0x2189 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x1e)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1e)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_054_059)
{
    // 218A  ; [*05B0.0020.0002] 
    // TURNED DIGIT TWO

    uint32_t const cps[1] = { 0x218a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_060)
{
    // 218B  ; [*05B1.0020.0002] 
    // TURNED DIGIT THREE

    uint32_t const cps[1] = { 0x218b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_061)
{
    // 2190  ; [*05B2.0020.0002] 
    // LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2190 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_062)
{
    // 2191  ; [*05B4.0020.0002] 
    // UPWARDS ARROW

    uint32_t const cps[1] = { 0x2191 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_063)
{
    // 2192  ; [*05B3.0020.0002] 
    // RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2192 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_064)
{
    // 2193  ; [*05B5.0020.0002] 
    // DOWNWARDS ARROW

    uint32_t const cps[1] = { 0x2193 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_065)
{
    // 2194  ; [*05B6.0020.0002] 
    // LEFT RIGHT ARROW

    uint32_t const cps[1] = { 0x2194 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_066)
{
    // 2195  ; [*05B7.0020.0002] 
    // UP DOWN ARROW

    uint32_t const cps[1] = { 0x2195 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_067)
{
    // 2196  ; [*05B8.0020.0002] 
    // NORTH WEST ARROW

    uint32_t const cps[1] = { 0x2196 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_068)
{
    // 2197  ; [*05B9.0020.0002] 
    // NORTH EAST ARROW

    uint32_t const cps[1] = { 0x2197 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_069)
{
    // 2198  ; [*05BA.0020.0002] 
    // SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x2198 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_070)
{
    // 2199  ; [*05BB.0020.0002] 
    // SOUTH WEST ARROW

    uint32_t const cps[1] = { 0x2199 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_071)
{
    // 219A  ; [*05B2.0020.0002][.0000.002F.0002] 
    // LEFTWARDS ARROW WITH STROKE

    uint32_t const cps[1] = { 0x219a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x5b2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_072)
{
    // 219B  ; [*05B3.0020.0002][.0000.002F.0002] 
    // RIGHTWARDS ARROW WITH STROKE

    uint32_t const cps[1] = { 0x219b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x5b3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_073)
{
    // 219C  ; [*05BC.0020.0002] 
    // LEFTWARDS WAVE ARROW

    uint32_t const cps[1] = { 0x219c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_074)
{
    // 219D  ; [*05BD.0020.0002] 
    // RIGHTWARDS WAVE ARROW

    uint32_t const cps[1] = { 0x219d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_075)
{
    // 219E  ; [*05BE.0020.0002] 
    // LEFTWARDS TWO HEADED ARROW

    uint32_t const cps[1] = { 0x219e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_076)
{
    // 219F  ; [*05BF.0020.0002] 
    // UPWARDS TWO HEADED ARROW

    uint32_t const cps[1] = { 0x219f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_077)
{
    // 21A0  ; [*05C0.0020.0002] 
    // RIGHTWARDS TWO HEADED ARROW

    uint32_t const cps[1] = { 0x21a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_078)
{
    // 21A1  ; [*05C1.0020.0002] 
    // DOWNWARDS TWO HEADED ARROW

    uint32_t const cps[1] = { 0x21a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_079)
{
    // 21A2  ; [*05C2.0020.0002] 
    // LEFTWARDS ARROW WITH TAIL

    uint32_t const cps[1] = { 0x21a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_080)
{
    // 21A3  ; [*05C3.0020.0002] 
    // RIGHTWARDS ARROW WITH TAIL

    uint32_t const cps[1] = { 0x21a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_081)
{
    // 21A4  ; [*05C4.0020.0002] 
    // LEFTWARDS ARROW FROM BAR

    uint32_t const cps[1] = { 0x21a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_082)
{
    // 21A5  ; [*05C5.0020.0002] 
    // UPWARDS ARROW FROM BAR

    uint32_t const cps[1] = { 0x21a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_083)
{
    // 21A6  ; [*05C6.0020.0002] 
    // RIGHTWARDS ARROW FROM BAR

    uint32_t const cps[1] = { 0x21a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_084)
{
    // 21A7  ; [*05C7.0020.0002] 
    // DOWNWARDS ARROW FROM BAR

    uint32_t const cps[1] = { 0x21a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_085)
{
    // 21A8  ; [*05C8.0020.0002] 
    // UP DOWN ARROW WITH BASE

    uint32_t const cps[1] = { 0x21a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_086)
{
    // 21A9  ; [*05C9.0020.0002] 
    // LEFTWARDS ARROW WITH HOOK

    uint32_t const cps[1] = { 0x21a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_087)
{
    // 21AA  ; [*05CA.0020.0002] 
    // RIGHTWARDS ARROW WITH HOOK

    uint32_t const cps[1] = { 0x21aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_088)
{
    // 21AB  ; [*05CB.0020.0002] 
    // LEFTWARDS ARROW WITH LOOP

    uint32_t const cps[1] = { 0x21ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_089)
{
    // 21AC  ; [*05CC.0020.0002] 
    // RIGHTWARDS ARROW WITH LOOP

    uint32_t const cps[1] = { 0x21ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_090)
{
    // 21AD  ; [*05CD.0020.0002] 
    // LEFT RIGHT WAVE ARROW

    uint32_t const cps[1] = { 0x21ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_091)
{
    // 21AE  ; [*05B6.0020.0002][.0000.002F.0002] 
    // LEFT RIGHT ARROW WITH STROKE

    uint32_t const cps[1] = { 0x21ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x5b6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_092)
{
    // 21AF  ; [*05CE.0020.0002] 
    // DOWNWARDS ZIGZAG ARROW

    uint32_t const cps[1] = { 0x21af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_093)
{
    // 21B0  ; [*05CF.0020.0002] 
    // UPWARDS ARROW WITH TIP LEFTWARDS

    uint32_t const cps[1] = { 0x21b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_094)
{
    // 21B1  ; [*05D0.0020.0002] 
    // UPWARDS ARROW WITH TIP RIGHTWARDS

    uint32_t const cps[1] = { 0x21b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_095)
{
    // 21B2  ; [*05D1.0020.0002] 
    // DOWNWARDS ARROW WITH TIP LEFTWARDS

    uint32_t const cps[1] = { 0x21b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_096)
{
    // 21B3  ; [*05D2.0020.0002] 
    // DOWNWARDS ARROW WITH TIP RIGHTWARDS

    uint32_t const cps[1] = { 0x21b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_097)
{
    // 21B4  ; [*05D3.0020.0002] 
    // RIGHTWARDS ARROW WITH CORNER DOWNWARDS

    uint32_t const cps[1] = { 0x21b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_098)
{
    // 21B5  ; [*05D4.0020.0002] 
    // DOWNWARDS ARROW WITH CORNER LEFTWARDS

    uint32_t const cps[1] = { 0x21b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_099)
{
    // 21B6  ; [*05D5.0020.0002] 
    // ANTICLOCKWISE TOP SEMICIRCLE ARROW

    uint32_t const cps[1] = { 0x21b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_100)
{
    // 21B7  ; [*05D6.0020.0002] 
    // CLOCKWISE TOP SEMICIRCLE ARROW

    uint32_t const cps[1] = { 0x21b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_101)
{
    // 21B8  ; [*05D7.0020.0002] 
    // NORTH WEST ARROW TO LONG BAR

    uint32_t const cps[1] = { 0x21b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_102)
{
    // 21B9  ; [*05D8.0020.0002] 
    // LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR

    uint32_t const cps[1] = { 0x21b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_103)
{
    // 21BA  ; [*05D9.0020.0002] 
    // ANTICLOCKWISE OPEN CIRCLE ARROW

    uint32_t const cps[1] = { 0x21ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_104)
{
    // 21BB  ; [*05DA.0020.0002] 
    // CLOCKWISE OPEN CIRCLE ARROW

    uint32_t const cps[1] = { 0x21bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_105)
{
    // 21BC  ; [*05DB.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB UPWARDS

    uint32_t const cps[1] = { 0x21bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_106)
{
    // 21BD  ; [*05DC.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB DOWNWARDS

    uint32_t const cps[1] = { 0x21bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_107)
{
    // 21BE  ; [*05DD.0020.0002] 
    // UPWARDS HARPOON WITH BARB RIGHTWARDS

    uint32_t const cps[1] = { 0x21be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_108)
{
    // 21BF  ; [*05DE.0020.0002] 
    // UPWARDS HARPOON WITH BARB LEFTWARDS

    uint32_t const cps[1] = { 0x21bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_109)
{
    // 21C0  ; [*05DF.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB UPWARDS

    uint32_t const cps[1] = { 0x21c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_110)
{
    // 21C1  ; [*05E0.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB DOWNWARDS

    uint32_t const cps[1] = { 0x21c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_111)
{
    // 21C2  ; [*05E1.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB RIGHTWARDS

    uint32_t const cps[1] = { 0x21c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_112)
{
    // 21C3  ; [*05E2.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB LEFTWARDS

    uint32_t const cps[1] = { 0x21c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_113)
{
    // 21C4  ; [*05E3.0020.0002] 
    // RIGHTWARDS ARROW OVER LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x21c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_114)
{
    // 21C5  ; [*05E4.0020.0002] 
    // UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW

    uint32_t const cps[1] = { 0x21c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_115)
{
    // 21C6  ; [*05E5.0020.0002] 
    // LEFTWARDS ARROW OVER RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x21c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_116)
{
    // 21C7  ; [*05E6.0020.0002] 
    // LEFTWARDS PAIRED ARROWS

    uint32_t const cps[1] = { 0x21c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_117)
{
    // 21C8  ; [*05E7.0020.0002] 
    // UPWARDS PAIRED ARROWS

    uint32_t const cps[1] = { 0x21c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_118)
{
    // 21C9  ; [*05E8.0020.0002] 
    // RIGHTWARDS PAIRED ARROWS

    uint32_t const cps[1] = { 0x21c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_119)
{
    // 21CA  ; [*05E9.0020.0002] 
    // DOWNWARDS PAIRED ARROWS

    uint32_t const cps[1] = { 0x21ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_120)
{
    // 21CB  ; [*05EA.0020.0002] 
    // LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON

    uint32_t const cps[1] = { 0x21cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_121)
{
    // 21CC  ; [*05EB.0020.0002] 
    // RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON

    uint32_t const cps[1] = { 0x21cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_122)
{
    // 21CD  ; [*05EC.0020.0002][.0000.002F.0002] 
    // LEFTWARDS DOUBLE ARROW WITH STROKE

    uint32_t const cps[1] = { 0x21cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x5ec), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_123)
{
    // 21CE  ; [*05F0.0020.0002][.0000.002F.0002] 
    // LEFT RIGHT DOUBLE ARROW WITH STROKE

    uint32_t const cps[1] = { 0x21ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x5f0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_124)
{
    // 21CF  ; [*05EE.0020.0002][.0000.002F.0002] 
    // RIGHTWARDS DOUBLE ARROW WITH STROKE

    uint32_t const cps[1] = { 0x21cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x5ee), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_054_125)
{
    // 21D0  ; [*05EC.0020.0002] 
    // LEFTWARDS DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_126)
{
    // 21D1  ; [*05ED.0020.0002] 
    // UPWARDS DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_127)
{
    // 21D2  ; [*05EE.0020.0002] 
    // RIGHTWARDS DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_128)
{
    // 21D3  ; [*05EF.0020.0002] 
    // DOWNWARDS DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_129)
{
    // 21D4  ; [*05F0.0020.0002] 
    // LEFT RIGHT DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_130)
{
    // 21D5  ; [*05F1.0020.0002] 
    // UP DOWN DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_131)
{
    // 21D6  ; [*05F2.0020.0002] 
    // NORTH WEST DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_132)
{
    // 21D7  ; [*05F3.0020.0002] 
    // NORTH EAST DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_133)
{
    // 21D8  ; [*05F4.0020.0002] 
    // SOUTH EAST DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_134)
{
    // 21D9  ; [*05F5.0020.0002] 
    // SOUTH WEST DOUBLE ARROW

    uint32_t const cps[1] = { 0x21d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_135)
{
    // 21DA  ; [*05F6.0020.0002] 
    // LEFTWARDS TRIPLE ARROW

    uint32_t const cps[1] = { 0x21da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_136)
{
    // 21DB  ; [*05F7.0020.0002] 
    // RIGHTWARDS TRIPLE ARROW

    uint32_t const cps[1] = { 0x21db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_137)
{
    // 21DC  ; [*05F8.0020.0002] 
    // LEFTWARDS SQUIGGLE ARROW

    uint32_t const cps[1] = { 0x21dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_138)
{
    // 21DD  ; [*05F9.0020.0002] 
    // RIGHTWARDS SQUIGGLE ARROW

    uint32_t const cps[1] = { 0x21dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_139)
{
    // 21DE  ; [*05FA.0020.0002] 
    // UPWARDS ARROW WITH DOUBLE STROKE

    uint32_t const cps[1] = { 0x21de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_140)
{
    // 21DF  ; [*05FB.0020.0002] 
    // DOWNWARDS ARROW WITH DOUBLE STROKE

    uint32_t const cps[1] = { 0x21df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_141)
{
    // 21E0  ; [*05FC.0020.0002] 
    // LEFTWARDS DASHED ARROW

    uint32_t const cps[1] = { 0x21e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_142)
{
    // 21E1  ; [*05FD.0020.0002] 
    // UPWARDS DASHED ARROW

    uint32_t const cps[1] = { 0x21e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_143)
{
    // 21E2  ; [*05FE.0020.0002] 
    // RIGHTWARDS DASHED ARROW

    uint32_t const cps[1] = { 0x21e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_144)
{
    // 21E3  ; [*05FF.0020.0002] 
    // DOWNWARDS DASHED ARROW

    uint32_t const cps[1] = { 0x21e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_145)
{
    // 21E4  ; [*0600.0020.0002] 
    // LEFTWARDS ARROW TO BAR

    uint32_t const cps[1] = { 0x21e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x600), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_146)
{
    // 21E5  ; [*0601.0020.0002] 
    // RIGHTWARDS ARROW TO BAR

    uint32_t const cps[1] = { 0x21e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x601), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_147)
{
    // 21E6  ; [*0602.0020.0002] 
    // LEFTWARDS WHITE ARROW

    uint32_t const cps[1] = { 0x21e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x602), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_148)
{
    // 21E7  ; [*0603.0020.0002] 
    // UPWARDS WHITE ARROW

    uint32_t const cps[1] = { 0x21e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x603), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_054_149)
{
    // 21E8  ; [*0604.0020.0002] 
    // RIGHTWARDS WHITE ARROW

    uint32_t const cps[1] = { 0x21e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x604), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

