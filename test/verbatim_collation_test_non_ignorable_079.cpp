// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_079_000)
{
    // 109CB 0041;	
    // (‚Äé‚Äéêßã‚Äé‚Äé) MEROITIC CURSIVE NUMBER THIRTY	[1C0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109CB, 0x0041 };
    uint32_t const ces[9] = { 0x1C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_001)
{
    // 109CB 0062;	
    // (‚Äé‚Äéêßã‚Äé‚Äé) MEROITIC CURSIVE NUMBER THIRTY	[1C0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CB, 0x0062 };
    uint32_t const ces[9] = { 0x1C0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_002)
{
    // 109CC 0021;	
    // (‚Äé‚Äéêßå‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY	[1C0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CC, 0x0021 };
    uint32_t const ces[9] = { 0x1C0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_003)
{
    // 109CC 003F;	
    // (‚Äé‚Äéêßå‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY	[1C0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CC, 0x003F };
    uint32_t const ces[9] = { 0x1C0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_004)
{
    // 109CC 0061;	
    // (‚Äé‚Äéêßå‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY	[1C0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CC, 0x0061 };
    uint32_t const ces[9] = { 0x1C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_005)
{
    // 109CC 0041;	
    // (‚Äé‚Äéêßå‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY	[1C0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109CC, 0x0041 };
    uint32_t const ces[9] = { 0x1C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_006)
{
    // 109CC 0062;	
    // (‚Äé‚Äéêßå‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY	[1C0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CC, 0x0062 };
    uint32_t const ces[9] = { 0x1C0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_007)
{
    // 109CD 0021;	
    // (‚Äé‚Äéêßç‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY	[1C0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CD, 0x0021 };
    uint32_t const ces[9] = { 0x1C0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_008)
{
    // 109CD 003F;	
    // (‚Äé‚Äéêßç‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY	[1C0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CD, 0x003F };
    uint32_t const ces[9] = { 0x1C0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_009)
{
    // 109CD 0061;	
    // (‚Äé‚Äéêßç‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY	[1C0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CD, 0x0061 };
    uint32_t const ces[9] = { 0x1C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_010)
{
    // 109CD 0041;	
    // (‚Äé‚Äéêßç‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY	[1C0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109CD, 0x0041 };
    uint32_t const ces[9] = { 0x1C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_011)
{
    // 109CD 0062;	
    // (‚Äé‚Äéêßç‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY	[1C0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CD, 0x0062 };
    uint32_t const ces[9] = { 0x1C0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_012)
{
    // 109CE 0021;	
    // (‚Äé‚Äéêßé‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY	[1C10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CE, 0x0021 };
    uint32_t const ces[9] = { 0x1C10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_013)
{
    // 109CE 003F;	
    // (‚Äé‚Äéêßé‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY	[1C10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CE, 0x003F };
    uint32_t const ces[9] = { 0x1C10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_014)
{
    // 109CE 0061;	
    // (‚Äé‚Äéêßé‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY	[1C10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CE, 0x0061 };
    uint32_t const ces[9] = { 0x1C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_015)
{
    // 109CE 0041;	
    // (‚Äé‚Äéêßé‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY	[1C10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109CE, 0x0041 };
    uint32_t const ces[9] = { 0x1C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_016)
{
    // 109CE 0062;	
    // (‚Äé‚Äéêßé‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY	[1C10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CE, 0x0062 };
    uint32_t const ces[9] = { 0x1C10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_017)
{
    // 109CF 0021;	
    // (‚Äé‚Äéêßè‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY	[1C11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CF, 0x0021 };
    uint32_t const ces[9] = { 0x1C11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_018)
{
    // 109CF 003F;	
    // (‚Äé‚Äéêßè‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY	[1C11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CF, 0x003F };
    uint32_t const ces[9] = { 0x1C11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_019)
{
    // 109CF 0061;	
    // (‚Äé‚Äéêßè‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY	[1C11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CF, 0x0061 };
    uint32_t const ces[9] = { 0x1C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_020)
{
    // 109CF 0041;	
    // (‚Äé‚Äéêßè‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY	[1C11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109CF, 0x0041 };
    uint32_t const ces[9] = { 0x1C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_021)
{
    // 109CF 0062;	
    // (‚Äé‚Äéêßè‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY	[1C11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109CF, 0x0062 };
    uint32_t const ces[9] = { 0x1C11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_022)
{
    // 109D2 0021;	
    // (‚Äé‚Äéêßí‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED	[1C12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D2, 0x0021 };
    uint32_t const ces[9] = { 0x1C12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_023)
{
    // 109D2 003F;	
    // (‚Äé‚Äéêßí‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED	[1C12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D2, 0x003F };
    uint32_t const ces[9] = { 0x1C12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_024)
{
    // 109D2 0061;	
    // (‚Äé‚Äéêßí‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED	[1C12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D2, 0x0061 };
    uint32_t const ces[9] = { 0x1C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_025)
{
    // 109D2 0041;	
    // (‚Äé‚Äéêßí‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED	[1C12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D2, 0x0041 };
    uint32_t const ces[9] = { 0x1C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_026)
{
    // 109D2 0062;	
    // (‚Äé‚Äéêßí‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED	[1C12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D2, 0x0062 };
    uint32_t const ces[9] = { 0x1C12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_027)
{
    // 109D3 0021;	
    // (‚Äé‚Äéêßì‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED	[1C13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D3, 0x0021 };
    uint32_t const ces[9] = { 0x1C13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_028)
{
    // 109D3 003F;	
    // (‚Äé‚Äéêßì‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED	[1C13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D3, 0x003F };
    uint32_t const ces[9] = { 0x1C13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_029)
{
    // 109D3 0061;	
    // (‚Äé‚Äéêßì‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED	[1C13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D3, 0x0061 };
    uint32_t const ces[9] = { 0x1C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_030)
{
    // 109D3 0041;	
    // (‚Äé‚Äéêßì‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED	[1C13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D3, 0x0041 };
    uint32_t const ces[9] = { 0x1C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_031)
{
    // 109D3 0062;	
    // (‚Äé‚Äéêßì‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED	[1C13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D3, 0x0062 };
    uint32_t const ces[9] = { 0x1C13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_032)
{
    // 109D4 0021;	
    // (‚Äé‚Äéêßî‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED	[1C14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D4, 0x0021 };
    uint32_t const ces[9] = { 0x1C14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_033)
{
    // 109D4 003F;	
    // (‚Äé‚Äéêßî‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED	[1C14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D4, 0x003F };
    uint32_t const ces[9] = { 0x1C14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_034)
{
    // 109D4 0061;	
    // (‚Äé‚Äéêßî‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED	[1C14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D4, 0x0061 };
    uint32_t const ces[9] = { 0x1C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_035)
{
    // 109D4 0041;	
    // (‚Äé‚Äéêßî‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED	[1C14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D4, 0x0041 };
    uint32_t const ces[9] = { 0x1C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_036)
{
    // 109D4 0062;	
    // (‚Äé‚Äéêßî‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED	[1C14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D4, 0x0062 };
    uint32_t const ces[9] = { 0x1C14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_037)
{
    // 109D5 0021;	
    // (‚Äé‚Äéêßï‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED	[1C15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D5, 0x0021 };
    uint32_t const ces[9] = { 0x1C15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_038)
{
    // 109D5 003F;	
    // (‚Äé‚Äéêßï‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED	[1C15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D5, 0x003F };
    uint32_t const ces[9] = { 0x1C15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_039)
{
    // 109D5 0061;	
    // (‚Äé‚Äéêßï‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED	[1C15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D5, 0x0061 };
    uint32_t const ces[9] = { 0x1C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_040)
{
    // 109D5 0041;	
    // (‚Äé‚Äéêßï‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED	[1C15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D5, 0x0041 };
    uint32_t const ces[9] = { 0x1C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_041)
{
    // 109D5 0062;	
    // (‚Äé‚Äéêßï‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED	[1C15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D5, 0x0062 };
    uint32_t const ces[9] = { 0x1C15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_042)
{
    // 109D6 0021;	
    // (‚Äé‚Äéêßñ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED	[1C16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D6, 0x0021 };
    uint32_t const ces[9] = { 0x1C16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_043)
{
    // 109D6 003F;	
    // (‚Äé‚Äéêßñ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED	[1C16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D6, 0x003F };
    uint32_t const ces[9] = { 0x1C16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_044)
{
    // 109D6 0061;	
    // (‚Äé‚Äéêßñ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED	[1C16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D6, 0x0061 };
    uint32_t const ces[9] = { 0x1C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_045)
{
    // 109D6 0041;	
    // (‚Äé‚Äéêßñ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED	[1C16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D6, 0x0041 };
    uint32_t const ces[9] = { 0x1C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_046)
{
    // 109D6 0062;	
    // (‚Äé‚Äéêßñ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED	[1C16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D6, 0x0062 };
    uint32_t const ces[9] = { 0x1C16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_047)
{
    // 109D7 0021;	
    // (‚Äé‚Äéêßó‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED	[1C17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D7, 0x0021 };
    uint32_t const ces[9] = { 0x1C17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_048)
{
    // 109D7 003F;	
    // (‚Äé‚Äéêßó‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED	[1C17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D7, 0x003F };
    uint32_t const ces[9] = { 0x1C17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_049)
{
    // 109D7 0061;	
    // (‚Äé‚Äéêßó‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED	[1C17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D7, 0x0061 };
    uint32_t const ces[9] = { 0x1C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_050)
{
    // 109D7 0041;	
    // (‚Äé‚Äéêßó‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED	[1C17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D7, 0x0041 };
    uint32_t const ces[9] = { 0x1C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_051)
{
    // 109D7 0062;	
    // (‚Äé‚Äéêßó‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED	[1C17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D7, 0x0062 };
    uint32_t const ces[9] = { 0x1C17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_052)
{
    // 109D8 0021;	
    // (‚Äé‚Äéêßò‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED	[1C18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D8, 0x0021 };
    uint32_t const ces[9] = { 0x1C18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_053)
{
    // 109D8 003F;	
    // (‚Äé‚Äéêßò‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED	[1C18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D8, 0x003F };
    uint32_t const ces[9] = { 0x1C18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_054)
{
    // 109D8 0061;	
    // (‚Äé‚Äéêßò‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED	[1C18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D8, 0x0061 };
    uint32_t const ces[9] = { 0x1C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_055)
{
    // 109D8 0041;	
    // (‚Äé‚Äéêßò‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED	[1C18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D8, 0x0041 };
    uint32_t const ces[9] = { 0x1C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_056)
{
    // 109D8 0062;	
    // (‚Äé‚Äéêßò‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED	[1C18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D8, 0x0062 };
    uint32_t const ces[9] = { 0x1C18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_057)
{
    // 109D9 0021;	
    // (‚Äé‚Äéêßô‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED	[1C19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D9, 0x0021 };
    uint32_t const ces[9] = { 0x1C19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_058)
{
    // 109D9 003F;	
    // (‚Äé‚Äéêßô‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED	[1C19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D9, 0x003F };
    uint32_t const ces[9] = { 0x1C19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_059)
{
    // 109D9 0061;	
    // (‚Äé‚Äéêßô‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED	[1C19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D9, 0x0061 };
    uint32_t const ces[9] = { 0x1C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_060)
{
    // 109D9 0041;	
    // (‚Äé‚Äéêßô‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED	[1C19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D9, 0x0041 };
    uint32_t const ces[9] = { 0x1C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_061)
{
    // 109D9 0062;	
    // (‚Äé‚Äéêßô‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED	[1C19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D9, 0x0062 };
    uint32_t const ces[9] = { 0x1C19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_062)
{
    // 109DA 0021;	
    // (‚Äé‚Äéêßö‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED	[1C1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DA, 0x0021 };
    uint32_t const ces[9] = { 0x1C1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_063)
{
    // 109DA 003F;	
    // (‚Äé‚Äéêßö‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED	[1C1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DA, 0x003F };
    uint32_t const ces[9] = { 0x1C1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_064)
{
    // 109DA 0061;	
    // (‚Äé‚Äéêßö‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED	[1C1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DA, 0x0061 };
    uint32_t const ces[9] = { 0x1C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_065)
{
    // 109DA 0041;	
    // (‚Äé‚Äéêßö‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED	[1C1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109DA, 0x0041 };
    uint32_t const ces[9] = { 0x1C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_066)
{
    // 109DA 0062;	
    // (‚Äé‚Äéêßö‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED	[1C1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DA, 0x0062 };
    uint32_t const ces[9] = { 0x1C1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_067)
{
    // 109DB 0021;	
    // (‚Äé‚Äéêßõ‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE THOUSAND	[1C1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DB, 0x0021 };
    uint32_t const ces[9] = { 0x1C1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_068)
{
    // 109DB 003F;	
    // (‚Äé‚Äéêßõ‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE THOUSAND	[1C1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DB, 0x003F };
    uint32_t const ces[9] = { 0x1C1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_069)
{
    // 109DB 0061;	
    // (‚Äé‚Äéêßõ‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE THOUSAND	[1C1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DB, 0x0061 };
    uint32_t const ces[9] = { 0x1C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_070)
{
    // 109DB 0041;	
    // (‚Äé‚Äéêßõ‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE THOUSAND	[1C1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109DB, 0x0041 };
    uint32_t const ces[9] = { 0x1C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_071)
{
    // 109DB 0062;	
    // (‚Äé‚Äéêßõ‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE THOUSAND	[1C1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DB, 0x0062 };
    uint32_t const ces[9] = { 0x1C1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_072)
{
    // 109DC 0021;	
    // (‚Äé‚Äéêßú‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO THOUSAND	[1C1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DC, 0x0021 };
    uint32_t const ces[9] = { 0x1C1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_073)
{
    // 109DC 003F;	
    // (‚Äé‚Äéêßú‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO THOUSAND	[1C1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DC, 0x003F };
    uint32_t const ces[9] = { 0x1C1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_074)
{
    // 109DC 0061;	
    // (‚Äé‚Äéêßú‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO THOUSAND	[1C1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DC, 0x0061 };
    uint32_t const ces[9] = { 0x1C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_075)
{
    // 109DC 0041;	
    // (‚Äé‚Äéêßú‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO THOUSAND	[1C1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109DC, 0x0041 };
    uint32_t const ces[9] = { 0x1C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_076)
{
    // 109DC 0062;	
    // (‚Äé‚Äéêßú‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO THOUSAND	[1C1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DC, 0x0062 };
    uint32_t const ces[9] = { 0x1C1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_077)
{
    // 109DD 0021;	
    // (‚Äé‚Äéêßù‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE THOUSAND	[1C1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DD, 0x0021 };
    uint32_t const ces[9] = { 0x1C1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_078)
{
    // 109DD 003F;	
    // (‚Äé‚Äéêßù‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE THOUSAND	[1C1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DD, 0x003F };
    uint32_t const ces[9] = { 0x1C1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_079)
{
    // 109DD 0061;	
    // (‚Äé‚Äéêßù‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE THOUSAND	[1C1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DD, 0x0061 };
    uint32_t const ces[9] = { 0x1C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_080)
{
    // 109DD 0041;	
    // (‚Äé‚Äéêßù‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE THOUSAND	[1C1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109DD, 0x0041 };
    uint32_t const ces[9] = { 0x1C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_081)
{
    // 109DD 0062;	
    // (‚Äé‚Äéêßù‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE THOUSAND	[1C1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DD, 0x0062 };
    uint32_t const ces[9] = { 0x1C1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_082)
{
    // 109DE 0021;	
    // (‚Äé‚Äéêßû‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR THOUSAND	[1C1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DE, 0x0021 };
    uint32_t const ces[9] = { 0x1C1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_083)
{
    // 109DE 003F;	
    // (‚Äé‚Äéêßû‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR THOUSAND	[1C1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DE, 0x003F };
    uint32_t const ces[9] = { 0x1C1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_084)
{
    // 109DE 0061;	
    // (‚Äé‚Äéêßû‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR THOUSAND	[1C1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DE, 0x0061 };
    uint32_t const ces[9] = { 0x1C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_085)
{
    // 109DE 0041;	
    // (‚Äé‚Äéêßû‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR THOUSAND	[1C1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109DE, 0x0041 };
    uint32_t const ces[9] = { 0x1C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_086)
{
    // 109DE 0062;	
    // (‚Äé‚Äéêßû‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR THOUSAND	[1C1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DE, 0x0062 };
    uint32_t const ces[9] = { 0x1C1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_087)
{
    // 109DF 0021;	
    // (‚Äé‚Äéêßü‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE THOUSAND	[1C1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DF, 0x0021 };
    uint32_t const ces[9] = { 0x1C1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_088)
{
    // 109DF 003F;	
    // (‚Äé‚Äéêßü‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE THOUSAND	[1C1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DF, 0x003F };
    uint32_t const ces[9] = { 0x1C1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_089)
{
    // 109DF 0061;	
    // (‚Äé‚Äéêßü‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE THOUSAND	[1C1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DF, 0x0061 };
    uint32_t const ces[9] = { 0x1C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_090)
{
    // 109DF 0041;	
    // (‚Äé‚Äéêßü‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE THOUSAND	[1C1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109DF, 0x0041 };
    uint32_t const ces[9] = { 0x1C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_091)
{
    // 109DF 0062;	
    // (‚Äé‚Äéêßü‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE THOUSAND	[1C1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109DF, 0x0062 };
    uint32_t const ces[9] = { 0x1C1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_092)
{
    // 109E0 0021;	
    // (‚Äé‚Äéêß†‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX THOUSAND	[1C20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E0, 0x0021 };
    uint32_t const ces[9] = { 0x1C20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_093)
{
    // 109E0 003F;	
    // (‚Äé‚Äéêß†‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX THOUSAND	[1C20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E0, 0x003F };
    uint32_t const ces[9] = { 0x1C20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_094)
{
    // 109E0 0061;	
    // (‚Äé‚Äéêß†‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX THOUSAND	[1C20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E0, 0x0061 };
    uint32_t const ces[9] = { 0x1C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_095)
{
    // 109E0 0041;	
    // (‚Äé‚Äéêß†‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX THOUSAND	[1C20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E0, 0x0041 };
    uint32_t const ces[9] = { 0x1C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_096)
{
    // 109E0 0062;	
    // (‚Äé‚Äéêß†‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX THOUSAND	[1C20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E0, 0x0062 };
    uint32_t const ces[9] = { 0x1C20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_097)
{
    // 109E1 0021;	
    // (‚Äé‚Äéêß°‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN THOUSAND	[1C21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E1, 0x0021 };
    uint32_t const ces[9] = { 0x1C21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_098)
{
    // 109E1 003F;	
    // (‚Äé‚Äéêß°‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN THOUSAND	[1C21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E1, 0x003F };
    uint32_t const ces[9] = { 0x1C21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_099)
{
    // 109E1 0061;	
    // (‚Äé‚Äéêß°‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN THOUSAND	[1C21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E1, 0x0061 };
    uint32_t const ces[9] = { 0x1C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_100)
{
    // 109E1 0041;	
    // (‚Äé‚Äéêß°‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN THOUSAND	[1C21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E1, 0x0041 };
    uint32_t const ces[9] = { 0x1C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_101)
{
    // 109E1 0062;	
    // (‚Äé‚Äéêß°‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN THOUSAND	[1C21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E1, 0x0062 };
    uint32_t const ces[9] = { 0x1C21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_102)
{
    // 109E2 0021;	
    // (‚Äé‚Äéêß¢‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT THOUSAND	[1C22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E2, 0x0021 };
    uint32_t const ces[9] = { 0x1C22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_103)
{
    // 109E2 003F;	
    // (‚Äé‚Äéêß¢‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT THOUSAND	[1C22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E2, 0x003F };
    uint32_t const ces[9] = { 0x1C22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_104)
{
    // 109E2 0061;	
    // (‚Äé‚Äéêß¢‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT THOUSAND	[1C22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E2, 0x0061 };
    uint32_t const ces[9] = { 0x1C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_105)
{
    // 109E2 0041;	
    // (‚Äé‚Äéêß¢‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT THOUSAND	[1C22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E2, 0x0041 };
    uint32_t const ces[9] = { 0x1C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_106)
{
    // 109E2 0062;	
    // (‚Äé‚Äéêß¢‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT THOUSAND	[1C22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E2, 0x0062 };
    uint32_t const ces[9] = { 0x1C22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_107)
{
    // 109E3 0021;	
    // (‚Äé‚Äéêß£‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE THOUSAND	[1C23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E3, 0x0021 };
    uint32_t const ces[9] = { 0x1C23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_108)
{
    // 109E3 003F;	
    // (‚Äé‚Äéêß£‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE THOUSAND	[1C23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E3, 0x003F };
    uint32_t const ces[9] = { 0x1C23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_109)
{
    // 109E3 0061;	
    // (‚Äé‚Äéêß£‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE THOUSAND	[1C23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E3, 0x0061 };
    uint32_t const ces[9] = { 0x1C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_110)
{
    // 109E3 0041;	
    // (‚Äé‚Äéêß£‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE THOUSAND	[1C23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E3, 0x0041 };
    uint32_t const ces[9] = { 0x1C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_111)
{
    // 109E3 0062;	
    // (‚Äé‚Äéêß£‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE THOUSAND	[1C23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E3, 0x0062 };
    uint32_t const ces[9] = { 0x1C23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_112)
{
    // 109E4 0021;	
    // (‚Äé‚Äéêß§‚Äé‚Äé) MEROITIC CURSIVE NUMBER TEN THOUSAND	[1C24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E4, 0x0021 };
    uint32_t const ces[9] = { 0x1C24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_113)
{
    // 109E4 003F;	
    // (‚Äé‚Äéêß§‚Äé‚Äé) MEROITIC CURSIVE NUMBER TEN THOUSAND	[1C24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E4, 0x003F };
    uint32_t const ces[9] = { 0x1C24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_114)
{
    // 109E4 0061;	
    // (‚Äé‚Äéêß§‚Äé‚Äé) MEROITIC CURSIVE NUMBER TEN THOUSAND	[1C24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E4, 0x0061 };
    uint32_t const ces[9] = { 0x1C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_115)
{
    // 109E4 0041;	
    // (‚Äé‚Äéêß§‚Äé‚Äé) MEROITIC CURSIVE NUMBER TEN THOUSAND	[1C24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E4, 0x0041 };
    uint32_t const ces[9] = { 0x1C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_116)
{
    // 109E4 0062;	
    // (‚Äé‚Äéêß§‚Äé‚Äé) MEROITIC CURSIVE NUMBER TEN THOUSAND	[1C24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E4, 0x0062 };
    uint32_t const ces[9] = { 0x1C24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_117)
{
    // 109E5 0021;	
    // (‚Äé‚Äéêß•‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWENTY THOUSAND	[1C25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E5, 0x0021 };
    uint32_t const ces[9] = { 0x1C25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_118)
{
    // 109E5 003F;	
    // (‚Äé‚Äéêß•‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWENTY THOUSAND	[1C25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E5, 0x003F };
    uint32_t const ces[9] = { 0x1C25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_119)
{
    // 109E5 0061;	
    // (‚Äé‚Äéêß•‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWENTY THOUSAND	[1C25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E5, 0x0061 };
    uint32_t const ces[9] = { 0x1C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_120)
{
    // 109E5 0041;	
    // (‚Äé‚Äéêß•‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWENTY THOUSAND	[1C25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E5, 0x0041 };
    uint32_t const ces[9] = { 0x1C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_121)
{
    // 109E5 0062;	
    // (‚Äé‚Äéêß•‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWENTY THOUSAND	[1C25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E5, 0x0062 };
    uint32_t const ces[9] = { 0x1C25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_122)
{
    // 109E6 0021;	
    // (‚Äé‚Äéêß¶‚Äé‚Äé) MEROITIC CURSIVE NUMBER THIRTY THOUSAND	[1C26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E6, 0x0021 };
    uint32_t const ces[9] = { 0x1C26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_123)
{
    // 109E6 003F;	
    // (‚Äé‚Äéêß¶‚Äé‚Äé) MEROITIC CURSIVE NUMBER THIRTY THOUSAND	[1C26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E6, 0x003F };
    uint32_t const ces[9] = { 0x1C26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_124)
{
    // 109E6 0061;	
    // (‚Äé‚Äéêß¶‚Äé‚Äé) MEROITIC CURSIVE NUMBER THIRTY THOUSAND	[1C26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E6, 0x0061 };
    uint32_t const ces[9] = { 0x1C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_125)
{
    // 109E6 0041;	
    // (‚Äé‚Äéêß¶‚Äé‚Äé) MEROITIC CURSIVE NUMBER THIRTY THOUSAND	[1C26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E6, 0x0041 };
    uint32_t const ces[9] = { 0x1C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_126)
{
    // 109E6 0062;	
    // (‚Äé‚Äéêß¶‚Äé‚Äé) MEROITIC CURSIVE NUMBER THIRTY THOUSAND	[1C26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E6, 0x0062 };
    uint32_t const ces[9] = { 0x1C26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_127)
{
    // 109E7 0021;	
    // (‚Äé‚Äéêßß‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY THOUSAND	[1C27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E7, 0x0021 };
    uint32_t const ces[9] = { 0x1C27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_128)
{
    // 109E7 003F;	
    // (‚Äé‚Äéêßß‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY THOUSAND	[1C27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E7, 0x003F };
    uint32_t const ces[9] = { 0x1C27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_129)
{
    // 109E7 0061;	
    // (‚Äé‚Äéêßß‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY THOUSAND	[1C27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E7, 0x0061 };
    uint32_t const ces[9] = { 0x1C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_130)
{
    // 109E7 0041;	
    // (‚Äé‚Äéêßß‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY THOUSAND	[1C27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E7, 0x0041 };
    uint32_t const ces[9] = { 0x1C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_131)
{
    // 109E7 0062;	
    // (‚Äé‚Äéêßß‚Äé‚Äé) MEROITIC CURSIVE NUMBER FORTY THOUSAND	[1C27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E7, 0x0062 };
    uint32_t const ces[9] = { 0x1C27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_132)
{
    // 109E8 0021;	
    // (‚Äé‚Äéêß®‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY THOUSAND	[1C28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E8, 0x0021 };
    uint32_t const ces[9] = { 0x1C28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_133)
{
    // 109E8 003F;	
    // (‚Äé‚Äéêß®‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY THOUSAND	[1C28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E8, 0x003F };
    uint32_t const ces[9] = { 0x1C28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_134)
{
    // 109E8 0061;	
    // (‚Äé‚Äéêß®‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY THOUSAND	[1C28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E8, 0x0061 };
    uint32_t const ces[9] = { 0x1C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_135)
{
    // 109E8 0041;	
    // (‚Äé‚Äéêß®‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY THOUSAND	[1C28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E8, 0x0041 };
    uint32_t const ces[9] = { 0x1C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_136)
{
    // 109E8 0062;	
    // (‚Äé‚Äéêß®‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIFTY THOUSAND	[1C28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E8, 0x0062 };
    uint32_t const ces[9] = { 0x1C28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_137)
{
    // 109E9 0021;	
    // (‚Äé‚Äéêß©‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY THOUSAND	[1C29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E9, 0x0021 };
    uint32_t const ces[9] = { 0x1C29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_138)
{
    // 109E9 003F;	
    // (‚Äé‚Äéêß©‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY THOUSAND	[1C29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E9, 0x003F };
    uint32_t const ces[9] = { 0x1C29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_139)
{
    // 109E9 0061;	
    // (‚Äé‚Äéêß©‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY THOUSAND	[1C29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E9, 0x0061 };
    uint32_t const ces[9] = { 0x1C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_140)
{
    // 109E9 0041;	
    // (‚Äé‚Äéêß©‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY THOUSAND	[1C29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E9, 0x0041 };
    uint32_t const ces[9] = { 0x1C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_141)
{
    // 109E9 0062;	
    // (‚Äé‚Äéêß©‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIXTY THOUSAND	[1C29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E9, 0x0062 };
    uint32_t const ces[9] = { 0x1C29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_142)
{
    // 109EA 0021;	
    // (‚Äé‚Äéêß™‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY THOUSAND	[1C2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EA, 0x0021 };
    uint32_t const ces[9] = { 0x1C2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_143)
{
    // 109EA 003F;	
    // (‚Äé‚Äéêß™‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY THOUSAND	[1C2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EA, 0x003F };
    uint32_t const ces[9] = { 0x1C2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_144)
{
    // 109EA 0061;	
    // (‚Äé‚Äéêß™‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY THOUSAND	[1C2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EA, 0x0061 };
    uint32_t const ces[9] = { 0x1C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_145)
{
    // 109EA 0041;	
    // (‚Äé‚Äéêß™‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY THOUSAND	[1C2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109EA, 0x0041 };
    uint32_t const ces[9] = { 0x1C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_146)
{
    // 109EA 0062;	
    // (‚Äé‚Äéêß™‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVENTY THOUSAND	[1C2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EA, 0x0062 };
    uint32_t const ces[9] = { 0x1C2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_147)
{
    // 109EB 0021;	
    // (‚Äé‚Äéêß´‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHTY THOUSAND	[1C2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EB, 0x0021 };
    uint32_t const ces[9] = { 0x1C2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_148)
{
    // 109EB 003F;	
    // (‚Äé‚Äéêß´‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHTY THOUSAND	[1C2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EB, 0x003F };
    uint32_t const ces[9] = { 0x1C2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_149)
{
    // 109EB 0061;	
    // (‚Äé‚Äéêß´‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHTY THOUSAND	[1C2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EB, 0x0061 };
    uint32_t const ces[9] = { 0x1C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_150)
{
    // 109EB 0041;	
    // (‚Äé‚Äéêß´‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHTY THOUSAND	[1C2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109EB, 0x0041 };
    uint32_t const ces[9] = { 0x1C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_151)
{
    // 109EB 0062;	
    // (‚Äé‚Äéêß´‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHTY THOUSAND	[1C2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EB, 0x0062 };
    uint32_t const ces[9] = { 0x1C2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_152)
{
    // 109EC 0021;	
    // (‚Äé‚Äéêß¨‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINETY THOUSAND	[1C2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EC, 0x0021 };
    uint32_t const ces[9] = { 0x1C2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_153)
{
    // 109EC 003F;	
    // (‚Äé‚Äéêß¨‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINETY THOUSAND	[1C2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EC, 0x003F };
    uint32_t const ces[9] = { 0x1C2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_154)
{
    // 109EC 0061;	
    // (‚Äé‚Äéêß¨‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINETY THOUSAND	[1C2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EC, 0x0061 };
    uint32_t const ces[9] = { 0x1C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_155)
{
    // 109EC 0041;	
    // (‚Äé‚Äéêß¨‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINETY THOUSAND	[1C2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109EC, 0x0041 };
    uint32_t const ces[9] = { 0x1C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_156)
{
    // 109EC 0062;	
    // (‚Äé‚Äéêß¨‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINETY THOUSAND	[1C2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EC, 0x0062 };
    uint32_t const ces[9] = { 0x1C2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_157)
{
    // 109ED 0021;	
    // (‚Äé‚Äéêß≠‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED THOUSAND	[1C2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109ED, 0x0021 };
    uint32_t const ces[9] = { 0x1C2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_158)
{
    // 109ED 003F;	
    // (‚Äé‚Äéêß≠‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED THOUSAND	[1C2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109ED, 0x003F };
    uint32_t const ces[9] = { 0x1C2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_159)
{
    // 109ED 0061;	
    // (‚Äé‚Äéêß≠‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED THOUSAND	[1C2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109ED, 0x0061 };
    uint32_t const ces[9] = { 0x1C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_160)
{
    // 109ED 0041;	
    // (‚Äé‚Äéêß≠‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED THOUSAND	[1C2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109ED, 0x0041 };
    uint32_t const ces[9] = { 0x1C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_161)
{
    // 109ED 0062;	
    // (‚Äé‚Äéêß≠‚Äé‚Äé) MEROITIC CURSIVE NUMBER ONE HUNDRED THOUSAND	[1C2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109ED, 0x0062 };
    uint32_t const ces[9] = { 0x1C2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_162)
{
    // 109EE 0021;	
    // (‚Äé‚ÄéêßÆ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED THOUSAND	[1C2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EE, 0x0021 };
    uint32_t const ces[9] = { 0x1C2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_163)
{
    // 109EE 003F;	
    // (‚Äé‚ÄéêßÆ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED THOUSAND	[1C2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EE, 0x003F };
    uint32_t const ces[9] = { 0x1C2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_164)
{
    // 109EE 0061;	
    // (‚Äé‚ÄéêßÆ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED THOUSAND	[1C2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EE, 0x0061 };
    uint32_t const ces[9] = { 0x1C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_165)
{
    // 109EE 0041;	
    // (‚Äé‚ÄéêßÆ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED THOUSAND	[1C2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109EE, 0x0041 };
    uint32_t const ces[9] = { 0x1C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_166)
{
    // 109EE 0062;	
    // (‚Äé‚ÄéêßÆ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO HUNDRED THOUSAND	[1C2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EE, 0x0062 };
    uint32_t const ces[9] = { 0x1C2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_167)
{
    // 109EF 0021;	
    // (‚Äé‚ÄéêßØ‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED THOUSAND	[1C2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EF, 0x0021 };
    uint32_t const ces[9] = { 0x1C2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_168)
{
    // 109EF 003F;	
    // (‚Äé‚ÄéêßØ‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED THOUSAND	[1C2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EF, 0x003F };
    uint32_t const ces[9] = { 0x1C2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_169)
{
    // 109EF 0061;	
    // (‚Äé‚ÄéêßØ‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED THOUSAND	[1C2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EF, 0x0061 };
    uint32_t const ces[9] = { 0x1C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_170)
{
    // 109EF 0041;	
    // (‚Äé‚ÄéêßØ‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED THOUSAND	[1C2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109EF, 0x0041 };
    uint32_t const ces[9] = { 0x1C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_171)
{
    // 109EF 0062;	
    // (‚Äé‚ÄéêßØ‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE HUNDRED THOUSAND	[1C2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109EF, 0x0062 };
    uint32_t const ces[9] = { 0x1C2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_172)
{
    // 109F0 0021;	
    // (‚Äé‚Äéêß∞‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED THOUSAND	[1C30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F0, 0x0021 };
    uint32_t const ces[9] = { 0x1C30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_173)
{
    // 109F0 003F;	
    // (‚Äé‚Äéêß∞‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED THOUSAND	[1C30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F0, 0x003F };
    uint32_t const ces[9] = { 0x1C30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_174)
{
    // 109F0 0061;	
    // (‚Äé‚Äéêß∞‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED THOUSAND	[1C30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F0, 0x0061 };
    uint32_t const ces[9] = { 0x1C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_175)
{
    // 109F0 0041;	
    // (‚Äé‚Äéêß∞‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED THOUSAND	[1C30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F0, 0x0041 };
    uint32_t const ces[9] = { 0x1C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_176)
{
    // 109F0 0062;	
    // (‚Äé‚Äéêß∞‚Äé‚Äé) MEROITIC CURSIVE NUMBER FOUR HUNDRED THOUSAND	[1C30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F0, 0x0062 };
    uint32_t const ces[9] = { 0x1C30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_177)
{
    // 109F1 0021;	
    // (‚Äé‚Äéêß±‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED THOUSAND	[1C31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F1, 0x0021 };
    uint32_t const ces[9] = { 0x1C31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_178)
{
    // 109F1 003F;	
    // (‚Äé‚Äéêß±‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED THOUSAND	[1C31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F1, 0x003F };
    uint32_t const ces[9] = { 0x1C31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_179)
{
    // 109F1 0061;	
    // (‚Äé‚Äéêß±‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED THOUSAND	[1C31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F1, 0x0061 };
    uint32_t const ces[9] = { 0x1C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_180)
{
    // 109F1 0041;	
    // (‚Äé‚Äéêß±‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED THOUSAND	[1C31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F1, 0x0041 };
    uint32_t const ces[9] = { 0x1C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_181)
{
    // 109F1 0062;	
    // (‚Äé‚Äéêß±‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE HUNDRED THOUSAND	[1C31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F1, 0x0062 };
    uint32_t const ces[9] = { 0x1C31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_182)
{
    // 109F2 0021;	
    // (‚Äé‚Äéêß≤‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED THOUSAND	[1C32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F2, 0x0021 };
    uint32_t const ces[9] = { 0x1C32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_183)
{
    // 109F2 003F;	
    // (‚Äé‚Äéêß≤‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED THOUSAND	[1C32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F2, 0x003F };
    uint32_t const ces[9] = { 0x1C32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_184)
{
    // 109F2 0061;	
    // (‚Äé‚Äéêß≤‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED THOUSAND	[1C32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F2, 0x0061 };
    uint32_t const ces[9] = { 0x1C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_185)
{
    // 109F2 0041;	
    // (‚Äé‚Äéêß≤‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED THOUSAND	[1C32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F2, 0x0041 };
    uint32_t const ces[9] = { 0x1C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_186)
{
    // 109F2 0062;	
    // (‚Äé‚Äéêß≤‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX HUNDRED THOUSAND	[1C32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F2, 0x0062 };
    uint32_t const ces[9] = { 0x1C32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_187)
{
    // 109F3 0021;	
    // (‚Äé‚Äéêß≥‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED THOUSAND	[1C33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F3, 0x0021 };
    uint32_t const ces[9] = { 0x1C33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_188)
{
    // 109F3 003F;	
    // (‚Äé‚Äéêß≥‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED THOUSAND	[1C33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F3, 0x003F };
    uint32_t const ces[9] = { 0x1C33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_189)
{
    // 109F3 0061;	
    // (‚Äé‚Äéêß≥‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED THOUSAND	[1C33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F3, 0x0061 };
    uint32_t const ces[9] = { 0x1C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_190)
{
    // 109F3 0041;	
    // (‚Äé‚Äéêß≥‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED THOUSAND	[1C33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F3, 0x0041 };
    uint32_t const ces[9] = { 0x1C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_191)
{
    // 109F3 0062;	
    // (‚Äé‚Äéêß≥‚Äé‚Äé) MEROITIC CURSIVE NUMBER SEVEN HUNDRED THOUSAND	[1C33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F3, 0x0062 };
    uint32_t const ces[9] = { 0x1C33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_192)
{
    // 109F4 0021;	
    // (‚Äé‚Äéêß¥‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED THOUSAND	[1C34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F4, 0x0021 };
    uint32_t const ces[9] = { 0x1C34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_193)
{
    // 109F4 003F;	
    // (‚Äé‚Äéêß¥‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED THOUSAND	[1C34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F4, 0x003F };
    uint32_t const ces[9] = { 0x1C34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_194)
{
    // 109F4 0061;	
    // (‚Äé‚Äéêß¥‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED THOUSAND	[1C34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F4, 0x0061 };
    uint32_t const ces[9] = { 0x1C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_195)
{
    // 109F4 0041;	
    // (‚Äé‚Äéêß¥‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED THOUSAND	[1C34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F4, 0x0041 };
    uint32_t const ces[9] = { 0x1C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_196)
{
    // 109F4 0062;	
    // (‚Äé‚Äéêß¥‚Äé‚Äé) MEROITIC CURSIVE NUMBER EIGHT HUNDRED THOUSAND	[1C34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F4, 0x0062 };
    uint32_t const ces[9] = { 0x1C34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_197)
{
    // 109F5 0021;	
    // (‚Äé‚Äéêßµ‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED THOUSAND	[1C35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F5, 0x0021 };
    uint32_t const ces[9] = { 0x1C35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_198)
{
    // 109F5 003F;	
    // (‚Äé‚Äéêßµ‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED THOUSAND	[1C35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F5, 0x003F };
    uint32_t const ces[9] = { 0x1C35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_199)
{
    // 109F5 0061;	
    // (‚Äé‚Äéêßµ‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED THOUSAND	[1C35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F5, 0x0061 };
    uint32_t const ces[9] = { 0x1C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_200)
{
    // 109F5 0041;	
    // (‚Äé‚Äéêßµ‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED THOUSAND	[1C35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F5, 0x0041 };
    uint32_t const ces[9] = { 0x1C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_201)
{
    // 109F5 0062;	
    // (‚Äé‚Äéêßµ‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE HUNDRED THOUSAND	[1C35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F5, 0x0062 };
    uint32_t const ces[9] = { 0x1C35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_202)
{
    // 109BD 0021;	
    // (‚Äé‚Äéê¶Ω‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE HALF	[1C36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BD, 0x0021 };
    uint32_t const ces[9] = { 0x1C36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_203)
{
    // 109BD 003F;	
    // (‚Äé‚Äéê¶Ω‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE HALF	[1C36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BD, 0x003F };
    uint32_t const ces[9] = { 0x1C36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_204)
{
    // 109BD 0061;	
    // (‚Äé‚Äéê¶Ω‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE HALF	[1C36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BD, 0x0061 };
    uint32_t const ces[9] = { 0x1C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_205)
{
    // 109BD 0041;	
    // (‚Äé‚Äéê¶Ω‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE HALF	[1C36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109BD, 0x0041 };
    uint32_t const ces[9] = { 0x1C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_206)
{
    // 109BD 0062;	
    // (‚Äé‚Äéê¶Ω‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE HALF	[1C36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BD, 0x0062 };
    uint32_t const ces[9] = { 0x1C36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_207)
{
    // 109F6 0021;	
    // (‚Äé‚Äéêß∂‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE TWELFTH	[1C37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F6, 0x0021 };
    uint32_t const ces[9] = { 0x1C37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_208)
{
    // 109F6 003F;	
    // (‚Äé‚Äéêß∂‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE TWELFTH	[1C37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F6, 0x003F };
    uint32_t const ces[9] = { 0x1C37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_209)
{
    // 109F6 0061;	
    // (‚Äé‚Äéêß∂‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE TWELFTH	[1C37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F6, 0x0061 };
    uint32_t const ces[9] = { 0x1C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_210)
{
    // 109F6 0041;	
    // (‚Äé‚Äéêß∂‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE TWELFTH	[1C37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F6, 0x0041 };
    uint32_t const ces[9] = { 0x1C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_211)
{
    // 109F6 0062;	
    // (‚Äé‚Äéêß∂‚Äé‚Äé) MEROITIC CURSIVE FRACTION ONE TWELFTH	[1C37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F6, 0x0062 };
    uint32_t const ces[9] = { 0x1C37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_212)
{
    // 109F7 0021;	
    // (‚Äé‚Äéêß∑‚Äé‚Äé) MEROITIC CURSIVE FRACTION TWO TWELFTHS	[1C38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F7, 0x0021 };
    uint32_t const ces[9] = { 0x1C38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_213)
{
    // 109F7 003F;	
    // (‚Äé‚Äéêß∑‚Äé‚Äé) MEROITIC CURSIVE FRACTION TWO TWELFTHS	[1C38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F7, 0x003F };
    uint32_t const ces[9] = { 0x1C38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_214)
{
    // 109F7 0061;	
    // (‚Äé‚Äéêß∑‚Äé‚Äé) MEROITIC CURSIVE FRACTION TWO TWELFTHS	[1C38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F7, 0x0061 };
    uint32_t const ces[9] = { 0x1C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_215)
{
    // 109F7 0041;	
    // (‚Äé‚Äéêß∑‚Äé‚Äé) MEROITIC CURSIVE FRACTION TWO TWELFTHS	[1C38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F7, 0x0041 };
    uint32_t const ces[9] = { 0x1C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_216)
{
    // 109F7 0062;	
    // (‚Äé‚Äéêß∑‚Äé‚Äé) MEROITIC CURSIVE FRACTION TWO TWELFTHS	[1C38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F7, 0x0062 };
    uint32_t const ces[9] = { 0x1C38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_217)
{
    // 109F8 0021;	
    // (‚Äé‚Äéêß∏‚Äé‚Äé) MEROITIC CURSIVE FRACTION THREE TWELFTHS	[1C39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F8, 0x0021 };
    uint32_t const ces[9] = { 0x1C39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_218)
{
    // 109F8 003F;	
    // (‚Äé‚Äéêß∏‚Äé‚Äé) MEROITIC CURSIVE FRACTION THREE TWELFTHS	[1C39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F8, 0x003F };
    uint32_t const ces[9] = { 0x1C39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_219)
{
    // 109F8 0061;	
    // (‚Äé‚Äéêß∏‚Äé‚Äé) MEROITIC CURSIVE FRACTION THREE TWELFTHS	[1C39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F8, 0x0061 };
    uint32_t const ces[9] = { 0x1C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_220)
{
    // 109F8 0041;	
    // (‚Äé‚Äéêß∏‚Äé‚Äé) MEROITIC CURSIVE FRACTION THREE TWELFTHS	[1C39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F8, 0x0041 };
    uint32_t const ces[9] = { 0x1C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_221)
{
    // 109F8 0062;	
    // (‚Äé‚Äéêß∏‚Äé‚Äé) MEROITIC CURSIVE FRACTION THREE TWELFTHS	[1C39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F8, 0x0062 };
    uint32_t const ces[9] = { 0x1C39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_222)
{
    // 109F9 0021;	
    // (‚Äé‚Äéêßπ‚Äé‚Äé) MEROITIC CURSIVE FRACTION FOUR TWELFTHS	[1C3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F9, 0x0021 };
    uint32_t const ces[9] = { 0x1C3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_223)
{
    // 109F9 003F;	
    // (‚Äé‚Äéêßπ‚Äé‚Äé) MEROITIC CURSIVE FRACTION FOUR TWELFTHS	[1C3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F9, 0x003F };
    uint32_t const ces[9] = { 0x1C3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_224)
{
    // 109F9 0061;	
    // (‚Äé‚Äéêßπ‚Äé‚Äé) MEROITIC CURSIVE FRACTION FOUR TWELFTHS	[1C3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F9, 0x0061 };
    uint32_t const ces[9] = { 0x1C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_225)
{
    // 109F9 0041;	
    // (‚Äé‚Äéêßπ‚Äé‚Äé) MEROITIC CURSIVE FRACTION FOUR TWELFTHS	[1C3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F9, 0x0041 };
    uint32_t const ces[9] = { 0x1C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_226)
{
    // 109F9 0062;	
    // (‚Äé‚Äéêßπ‚Äé‚Äé) MEROITIC CURSIVE FRACTION FOUR TWELFTHS	[1C3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F9, 0x0062 };
    uint32_t const ces[9] = { 0x1C3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_227)
{
    // 109FA 0021;	
    // (‚Äé‚Äéêß∫‚Äé‚Äé) MEROITIC CURSIVE FRACTION FIVE TWELFTHS	[1C3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FA, 0x0021 };
    uint32_t const ces[9] = { 0x1C3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_228)
{
    // 109FA 003F;	
    // (‚Äé‚Äéêß∫‚Äé‚Äé) MEROITIC CURSIVE FRACTION FIVE TWELFTHS	[1C3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FA, 0x003F };
    uint32_t const ces[9] = { 0x1C3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_229)
{
    // 109FA 0061;	
    // (‚Äé‚Äéêß∫‚Äé‚Äé) MEROITIC CURSIVE FRACTION FIVE TWELFTHS	[1C3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FA, 0x0061 };
    uint32_t const ces[9] = { 0x1C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_230)
{
    // 109FA 0041;	
    // (‚Äé‚Äéêß∫‚Äé‚Äé) MEROITIC CURSIVE FRACTION FIVE TWELFTHS	[1C3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109FA, 0x0041 };
    uint32_t const ces[9] = { 0x1C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_231)
{
    // 109FA 0062;	
    // (‚Äé‚Äéêß∫‚Äé‚Äé) MEROITIC CURSIVE FRACTION FIVE TWELFTHS	[1C3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FA, 0x0062 };
    uint32_t const ces[9] = { 0x1C3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_232)
{
    // 109FB 0021;	
    // (‚Äé‚Äéêßª‚Äé‚Äé) MEROITIC CURSIVE FRACTION SIX TWELFTHS	[1C3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FB, 0x0021 };
    uint32_t const ces[9] = { 0x1C3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_233)
{
    // 109FB 003F;	
    // (‚Äé‚Äéêßª‚Äé‚Äé) MEROITIC CURSIVE FRACTION SIX TWELFTHS	[1C3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FB, 0x003F };
    uint32_t const ces[9] = { 0x1C3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_234)
{
    // 109FB 0061;	
    // (‚Äé‚Äéêßª‚Äé‚Äé) MEROITIC CURSIVE FRACTION SIX TWELFTHS	[1C3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FB, 0x0061 };
    uint32_t const ces[9] = { 0x1C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_235)
{
    // 109FB 0041;	
    // (‚Äé‚Äéêßª‚Äé‚Äé) MEROITIC CURSIVE FRACTION SIX TWELFTHS	[1C3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109FB, 0x0041 };
    uint32_t const ces[9] = { 0x1C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_236)
{
    // 109FB 0062;	
    // (‚Äé‚Äéêßª‚Äé‚Äé) MEROITIC CURSIVE FRACTION SIX TWELFTHS	[1C3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FB, 0x0062 };
    uint32_t const ces[9] = { 0x1C3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_237)
{
    // 109FC 0021;	
    // (‚Äé‚Äéêßº‚Äé‚Äé) MEROITIC CURSIVE FRACTION SEVEN TWELFTHS	[1C3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FC, 0x0021 };
    uint32_t const ces[9] = { 0x1C3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_238)
{
    // 109FC 003F;	
    // (‚Äé‚Äéêßº‚Äé‚Äé) MEROITIC CURSIVE FRACTION SEVEN TWELFTHS	[1C3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FC, 0x003F };
    uint32_t const ces[9] = { 0x1C3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_239)
{
    // 109FC 0061;	
    // (‚Äé‚Äéêßº‚Äé‚Äé) MEROITIC CURSIVE FRACTION SEVEN TWELFTHS	[1C3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FC, 0x0061 };
    uint32_t const ces[9] = { 0x1C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_240)
{
    // 109FC 0041;	
    // (‚Äé‚Äéêßº‚Äé‚Äé) MEROITIC CURSIVE FRACTION SEVEN TWELFTHS	[1C3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109FC, 0x0041 };
    uint32_t const ces[9] = { 0x1C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_241)
{
    // 109FC 0062;	
    // (‚Äé‚Äéêßº‚Äé‚Äé) MEROITIC CURSIVE FRACTION SEVEN TWELFTHS	[1C3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FC, 0x0062 };
    uint32_t const ces[9] = { 0x1C3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_242)
{
    // 109FD 0021;	
    // (‚Äé‚ÄéêßΩ‚Äé‚Äé) MEROITIC CURSIVE FRACTION EIGHT TWELFTHS	[1C3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FD, 0x0021 };
    uint32_t const ces[9] = { 0x1C3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_243)
{
    // 109FD 003F;	
    // (‚Äé‚ÄéêßΩ‚Äé‚Äé) MEROITIC CURSIVE FRACTION EIGHT TWELFTHS	[1C3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FD, 0x003F };
    uint32_t const ces[9] = { 0x1C3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_244)
{
    // 109FD 0061;	
    // (‚Äé‚ÄéêßΩ‚Äé‚Äé) MEROITIC CURSIVE FRACTION EIGHT TWELFTHS	[1C3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FD, 0x0061 };
    uint32_t const ces[9] = { 0x1C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_245)
{
    // 109FD 0041;	
    // (‚Äé‚ÄéêßΩ‚Äé‚Äé) MEROITIC CURSIVE FRACTION EIGHT TWELFTHS	[1C3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109FD, 0x0041 };
    uint32_t const ces[9] = { 0x1C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_246)
{
    // 109FD 0062;	
    // (‚Äé‚ÄéêßΩ‚Äé‚Äé) MEROITIC CURSIVE FRACTION EIGHT TWELFTHS	[1C3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FD, 0x0062 };
    uint32_t const ces[9] = { 0x1C3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_247)
{
    // 109FE 0021;	
    // (‚Äé‚Äéêßæ‚Äé‚Äé) MEROITIC CURSIVE FRACTION NINE TWELFTHS	[1C3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FE, 0x0021 };
    uint32_t const ces[9] = { 0x1C3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_248)
{
    // 109FE 003F;	
    // (‚Äé‚Äéêßæ‚Äé‚Äé) MEROITIC CURSIVE FRACTION NINE TWELFTHS	[1C3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FE, 0x003F };
    uint32_t const ces[9] = { 0x1C3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_249)
{
    // 109FE 0061;	
    // (‚Äé‚Äéêßæ‚Äé‚Äé) MEROITIC CURSIVE FRACTION NINE TWELFTHS	[1C3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FE, 0x0061 };
    uint32_t const ces[9] = { 0x1C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_250)
{
    // 109FE 0041;	
    // (‚Äé‚Äéêßæ‚Äé‚Äé) MEROITIC CURSIVE FRACTION NINE TWELFTHS	[1C3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109FE, 0x0041 };
    uint32_t const ces[9] = { 0x1C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_251)
{
    // 109FE 0062;	
    // (‚Äé‚Äéêßæ‚Äé‚Äé) MEROITIC CURSIVE FRACTION NINE TWELFTHS	[1C3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FE, 0x0062 };
    uint32_t const ces[9] = { 0x1C3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_252)
{
    // 109FF 0021;	
    // (‚Äé‚Äéêßø‚Äé‚Äé) MEROITIC CURSIVE FRACTION TEN TWELFTHS	[1C40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FF, 0x0021 };
    uint32_t const ces[9] = { 0x1C40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_253)
{
    // 109FF 003F;	
    // (‚Äé‚Äéêßø‚Äé‚Äé) MEROITIC CURSIVE FRACTION TEN TWELFTHS	[1C40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FF, 0x003F };
    uint32_t const ces[9] = { 0x1C40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_254)
{
    // 109FF 0061;	
    // (‚Äé‚Äéêßø‚Äé‚Äé) MEROITIC CURSIVE FRACTION TEN TWELFTHS	[1C40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FF, 0x0061 };
    uint32_t const ces[9] = { 0x1C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_255)
{
    // 109FF 0041;	
    // (‚Äé‚Äéêßø‚Äé‚Äé) MEROITIC CURSIVE FRACTION TEN TWELFTHS	[1C40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109FF, 0x0041 };
    uint32_t const ces[9] = { 0x1C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_256)
{
    // 109FF 0062;	
    // (‚Äé‚Äéêßø‚Äé‚Äé) MEROITIC CURSIVE FRACTION TEN TWELFTHS	[1C40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109FF, 0x0062 };
    uint32_t const ces[9] = { 0x1C40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_257)
{
    // 109BC 0021;	
    // (‚Äé‚Äéê¶º‚Äé‚Äé) MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS	[1C41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BC, 0x0021 };
    uint32_t const ces[9] = { 0x1C41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_258)
{
    // 109BC 003F;	
    // (‚Äé‚Äéê¶º‚Äé‚Äé) MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS	[1C41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BC, 0x003F };
    uint32_t const ces[9] = { 0x1C41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_259)
{
    // 109BC 0061;	
    // (‚Äé‚Äéê¶º‚Äé‚Äé) MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS	[1C41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BC, 0x0061 };
    uint32_t const ces[9] = { 0x1C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_260)
{
    // 109BC 0041;	
    // (‚Äé‚Äéê¶º‚Äé‚Äé) MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS	[1C41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109BC, 0x0041 };
    uint32_t const ces[9] = { 0x1C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_261)
{
    // 109BC 0062;	
    // (‚Äé‚Äéê¶º‚Äé‚Äé) MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS	[1C41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BC, 0x0062 };
    uint32_t const ces[9] = { 0x1C41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_262)
{
    // 12432 0021;	
    // (íê≤) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH	[1C42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12432, 0x0021 };
    uint32_t const ces[9] = { 0x1C42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_263)
{
    // 12432 003F;	
    // (íê≤) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH	[1C42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12432, 0x003F };
    uint32_t const ces[9] = { 0x1C42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_264)
{
    // 12432 0061;	
    // (íê≤) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH	[1C42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12432, 0x0061 };
    uint32_t const ces[9] = { 0x1C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_265)
{
    // 12432 0041;	
    // (íê≤) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH	[1C42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12432, 0x0041 };
    uint32_t const ces[9] = { 0x1C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_266)
{
    // 12432 0062;	
    // (íê≤) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH	[1C42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12432, 0x0062 };
    uint32_t const ces[9] = { 0x1C42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_267)
{
    // 12433 0021;	
    // (íê≥) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN	[1C43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12433, 0x0021 };
    uint32_t const ces[9] = { 0x1C43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_268)
{
    // 12433 003F;	
    // (íê≥) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN	[1C43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12433, 0x003F };
    uint32_t const ces[9] = { 0x1C43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_269)
{
    // 12433 0061;	
    // (íê≥) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN	[1C43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12433, 0x0061 };
    uint32_t const ces[9] = { 0x1C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_270)
{
    // 12433 0041;	
    // (íê≥) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN	[1C43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12433, 0x0041 };
    uint32_t const ces[9] = { 0x1C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_271)
{
    // 12433 0062;	
    // (íê≥) CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN	[1C43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12433, 0x0062 };
    uint32_t const ces[9] = { 0x1C43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_272)
{
    // 1245A 0021;	
    // (íëö) CUNEIFORM NUMERIC SIGN ONE THIRD DISH	[1C44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245A, 0x0021 };
    uint32_t const ces[9] = { 0x1C44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_273)
{
    // 1245A 003F;	
    // (íëö) CUNEIFORM NUMERIC SIGN ONE THIRD DISH	[1C44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245A, 0x003F };
    uint32_t const ces[9] = { 0x1C44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_274)
{
    // 1245A 0061;	
    // (íëö) CUNEIFORM NUMERIC SIGN ONE THIRD DISH	[1C44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245A, 0x0061 };
    uint32_t const ces[9] = { 0x1C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_275)
{
    // 1245A 0041;	
    // (íëö) CUNEIFORM NUMERIC SIGN ONE THIRD DISH	[1C44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1245A, 0x0041 };
    uint32_t const ces[9] = { 0x1C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_276)
{
    // 1245A 0062;	
    // (íëö) CUNEIFORM NUMERIC SIGN ONE THIRD DISH	[1C44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245A, 0x0062 };
    uint32_t const ces[9] = { 0x1C44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_277)
{
    // 1245B 0021;	
    // (íëõ) CUNEIFORM NUMERIC SIGN TWO THIRDS DISH	[1C45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245B, 0x0021 };
    uint32_t const ces[9] = { 0x1C45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_278)
{
    // 1245B 003F;	
    // (íëõ) CUNEIFORM NUMERIC SIGN TWO THIRDS DISH	[1C45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245B, 0x003F };
    uint32_t const ces[9] = { 0x1C45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_279)
{
    // 1245B 0061;	
    // (íëõ) CUNEIFORM NUMERIC SIGN TWO THIRDS DISH	[1C45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245B, 0x0061 };
    uint32_t const ces[9] = { 0x1C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_280)
{
    // 1245B 0041;	
    // (íëõ) CUNEIFORM NUMERIC SIGN TWO THIRDS DISH	[1C45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1245B, 0x0041 };
    uint32_t const ces[9] = { 0x1C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_281)
{
    // 1245B 0062;	
    // (íëõ) CUNEIFORM NUMERIC SIGN TWO THIRDS DISH	[1C45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245B, 0x0062 };
    uint32_t const ces[9] = { 0x1C45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_282)
{
    // 1245C 0021;	
    // (íëú) CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH	[1C46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245C, 0x0021 };
    uint32_t const ces[9] = { 0x1C46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_283)
{
    // 1245C 003F;	
    // (íëú) CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH	[1C46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245C, 0x003F };
    uint32_t const ces[9] = { 0x1C46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_284)
{
    // 1245C 0061;	
    // (íëú) CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH	[1C46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245C, 0x0061 };
    uint32_t const ces[9] = { 0x1C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_285)
{
    // 1245C 0041;	
    // (íëú) CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH	[1C46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1245C, 0x0041 };
    uint32_t const ces[9] = { 0x1C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_286)
{
    // 1245C 0062;	
    // (íëú) CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH	[1C46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245C, 0x0062 };
    uint32_t const ces[9] = { 0x1C46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_287)
{
    // 1245D 0021;	
    // (íëù) CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A	[1C47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245D, 0x0021 };
    uint32_t const ces[9] = { 0x1C47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_288)
{
    // 1245D 003F;	
    // (íëù) CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A	[1C47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245D, 0x003F };
    uint32_t const ces[9] = { 0x1C47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_289)
{
    // 1245D 0061;	
    // (íëù) CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A	[1C47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245D, 0x0061 };
    uint32_t const ces[9] = { 0x1C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_290)
{
    // 1245D 0041;	
    // (íëù) CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A	[1C47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1245D, 0x0041 };
    uint32_t const ces[9] = { 0x1C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_291)
{
    // 1245D 0062;	
    // (íëù) CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A	[1C47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245D, 0x0062 };
    uint32_t const ces[9] = { 0x1C47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_292)
{
    // 1245E 0021;	
    // (íëû) CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A	[1C48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245E, 0x0021 };
    uint32_t const ces[9] = { 0x1C48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_293)
{
    // 1245E 003F;	
    // (íëû) CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A	[1C48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245E, 0x003F };
    uint32_t const ces[9] = { 0x1C48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_294)
{
    // 1245E 0061;	
    // (íëû) CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A	[1C48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245E, 0x0061 };
    uint32_t const ces[9] = { 0x1C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_295)
{
    // 1245E 0041;	
    // (íëû) CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A	[1C48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1245E, 0x0041 };
    uint32_t const ces[9] = { 0x1C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_296)
{
    // 1245E 0062;	
    // (íëû) CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A	[1C48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245E, 0x0062 };
    uint32_t const ces[9] = { 0x1C48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_297)
{
    // 1245F 0021;	
    // (íëü) CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH	[1C49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245F, 0x0021 };
    uint32_t const ces[9] = { 0x1C49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_298)
{
    // 1245F 003F;	
    // (íëü) CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH	[1C49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245F, 0x003F };
    uint32_t const ces[9] = { 0x1C49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_299)
{
    // 1245F 0061;	
    // (íëü) CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH	[1C49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245F, 0x0061 };
    uint32_t const ces[9] = { 0x1C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_300)
{
    // 1245F 0041;	
    // (íëü) CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH	[1C49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1245F, 0x0041 };
    uint32_t const ces[9] = { 0x1C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_301)
{
    // 1245F 0062;	
    // (íëü) CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH	[1C49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245F, 0x0062 };
    uint32_t const ces[9] = { 0x1C49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_302)
{
    // 12460 0021;	
    // (íë†) CUNEIFORM NUMERIC SIGN ONE QUARTER ASH	[1C4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12460, 0x0021 };
    uint32_t const ces[9] = { 0x1C4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_303)
{
    // 12460 003F;	
    // (íë†) CUNEIFORM NUMERIC SIGN ONE QUARTER ASH	[1C4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12460, 0x003F };
    uint32_t const ces[9] = { 0x1C4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_304)
{
    // 12460 0061;	
    // (íë†) CUNEIFORM NUMERIC SIGN ONE QUARTER ASH	[1C4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12460, 0x0061 };
    uint32_t const ces[9] = { 0x1C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_305)
{
    // 12460 0041;	
    // (íë†) CUNEIFORM NUMERIC SIGN ONE QUARTER ASH	[1C4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12460, 0x0041 };
    uint32_t const ces[9] = { 0x1C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_306)
{
    // 12460 0062;	
    // (íë†) CUNEIFORM NUMERIC SIGN ONE QUARTER ASH	[1C4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12460, 0x0062 };
    uint32_t const ces[9] = { 0x1C4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_307)
{
    // 12461 0021;	
    // (íë°) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH	[1C4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12461, 0x0021 };
    uint32_t const ces[9] = { 0x1C4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_308)
{
    // 12461 003F;	
    // (íë°) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH	[1C4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12461, 0x003F };
    uint32_t const ces[9] = { 0x1C4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_309)
{
    // 12461 0061;	
    // (íë°) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH	[1C4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12461, 0x0061 };
    uint32_t const ces[9] = { 0x1C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_310)
{
    // 12461 0041;	
    // (íë°) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH	[1C4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12461, 0x0041 };
    uint32_t const ces[9] = { 0x1C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_311)
{
    // 12461 0062;	
    // (íë°) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH	[1C4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12461, 0x0062 };
    uint32_t const ces[9] = { 0x1C4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_312)
{
    // 12462 0021;	
    // (íë¢) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER	[1C4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12462, 0x0021 };
    uint32_t const ces[9] = { 0x1C4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_313)
{
    // 12462 003F;	
    // (íë¢) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER	[1C4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12462, 0x003F };
    uint32_t const ces[9] = { 0x1C4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_314)
{
    // 12462 0061;	
    // (íë¢) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER	[1C4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12462, 0x0061 };
    uint32_t const ces[9] = { 0x1C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_315)
{
    // 12462 0041;	
    // (íë¢) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER	[1C4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12462, 0x0041 };
    uint32_t const ces[9] = { 0x1C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_316)
{
    // 12462 0062;	
    // (íë¢) CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER	[1C4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12462, 0x0062 };
    uint32_t const ces[9] = { 0x1C4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_317)
{
    // 12463 0021;	
    // (íë£) CUNEIFORM NUMERIC SIGN ONE QUARTER GUR	[1C4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12463, 0x0021 };
    uint32_t const ces[9] = { 0x1C4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_318)
{
    // 12463 003F;	
    // (íë£) CUNEIFORM NUMERIC SIGN ONE QUARTER GUR	[1C4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12463, 0x003F };
    uint32_t const ces[9] = { 0x1C4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_319)
{
    // 12463 0061;	
    // (íë£) CUNEIFORM NUMERIC SIGN ONE QUARTER GUR	[1C4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12463, 0x0061 };
    uint32_t const ces[9] = { 0x1C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_320)
{
    // 12463 0041;	
    // (íë£) CUNEIFORM NUMERIC SIGN ONE QUARTER GUR	[1C4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12463, 0x0041 };
    uint32_t const ces[9] = { 0x1C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_321)
{
    // 12463 0062;	
    // (íë£) CUNEIFORM NUMERIC SIGN ONE QUARTER GUR	[1C4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12463, 0x0062 };
    uint32_t const ces[9] = { 0x1C4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_322)
{
    // 12464 0021;	
    // (íë§) CUNEIFORM NUMERIC SIGN ONE HALF GUR	[1C4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12464, 0x0021 };
    uint32_t const ces[9] = { 0x1C4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_323)
{
    // 12464 003F;	
    // (íë§) CUNEIFORM NUMERIC SIGN ONE HALF GUR	[1C4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12464, 0x003F };
    uint32_t const ces[9] = { 0x1C4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_324)
{
    // 12464 0061;	
    // (íë§) CUNEIFORM NUMERIC SIGN ONE HALF GUR	[1C4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12464, 0x0061 };
    uint32_t const ces[9] = { 0x1C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_325)
{
    // 12464 0041;	
    // (íë§) CUNEIFORM NUMERIC SIGN ONE HALF GUR	[1C4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12464, 0x0041 };
    uint32_t const ces[9] = { 0x1C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_326)
{
    // 12464 0062;	
    // (íë§) CUNEIFORM NUMERIC SIGN ONE HALF GUR	[1C4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12464, 0x0062 };
    uint32_t const ces[9] = { 0x1C4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_327)
{
    // 12465 0021;	
    // (íë•) CUNEIFORM NUMERIC SIGN ELAMITE ONE THIRD	[1C4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12465, 0x0021 };
    uint32_t const ces[9] = { 0x1C4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_328)
{
    // 12465 003F;	
    // (íë•) CUNEIFORM NUMERIC SIGN ELAMITE ONE THIRD	[1C4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12465, 0x003F };
    uint32_t const ces[9] = { 0x1C4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_329)
{
    // 12465 0061;	
    // (íë•) CUNEIFORM NUMERIC SIGN ELAMITE ONE THIRD	[1C4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12465, 0x0061 };
    uint32_t const ces[9] = { 0x1C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_330)
{
    // 12465 0041;	
    // (íë•) CUNEIFORM NUMERIC SIGN ELAMITE ONE THIRD	[1C4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12465, 0x0041 };
    uint32_t const ces[9] = { 0x1C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_331)
{
    // 12465 0062;	
    // (íë•) CUNEIFORM NUMERIC SIGN ELAMITE ONE THIRD	[1C4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12465, 0x0062 };
    uint32_t const ces[9] = { 0x1C4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_332)
{
    // 12466 0021;	
    // (íë¶) CUNEIFORM NUMERIC SIGN ELAMITE TWO THIRDS	[1C50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12466, 0x0021 };
    uint32_t const ces[9] = { 0x1C50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_333)
{
    // 12466 003F;	
    // (íë¶) CUNEIFORM NUMERIC SIGN ELAMITE TWO THIRDS	[1C50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12466, 0x003F };
    uint32_t const ces[9] = { 0x1C50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_334)
{
    // 12466 0061;	
    // (íë¶) CUNEIFORM NUMERIC SIGN ELAMITE TWO THIRDS	[1C50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12466, 0x0061 };
    uint32_t const ces[9] = { 0x1C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_335)
{
    // 12466 0041;	
    // (íë¶) CUNEIFORM NUMERIC SIGN ELAMITE TWO THIRDS	[1C50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12466, 0x0041 };
    uint32_t const ces[9] = { 0x1C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_336)
{
    // 12466 0062;	
    // (íë¶) CUNEIFORM NUMERIC SIGN ELAMITE TWO THIRDS	[1C50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12466, 0x0062 };
    uint32_t const ces[9] = { 0x1C50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_337)
{
    // 12467 0021;	
    // (íëß) CUNEIFORM NUMERIC SIGN ELAMITE FORTY	[1C51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12467, 0x0021 };
    uint32_t const ces[9] = { 0x1C51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_338)
{
    // 12467 003F;	
    // (íëß) CUNEIFORM NUMERIC SIGN ELAMITE FORTY	[1C51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12467, 0x003F };
    uint32_t const ces[9] = { 0x1C51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_339)
{
    // 12467 0061;	
    // (íëß) CUNEIFORM NUMERIC SIGN ELAMITE FORTY	[1C51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12467, 0x0061 };
    uint32_t const ces[9] = { 0x1C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_340)
{
    // 12467 0041;	
    // (íëß) CUNEIFORM NUMERIC SIGN ELAMITE FORTY	[1C51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12467, 0x0041 };
    uint32_t const ces[9] = { 0x1C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_341)
{
    // 12467 0062;	
    // (íëß) CUNEIFORM NUMERIC SIGN ELAMITE FORTY	[1C51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12467, 0x0062 };
    uint32_t const ces[9] = { 0x1C51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_342)
{
    // 12468 0021;	
    // (íë®) CUNEIFORM NUMERIC SIGN ELAMITE FIFTY	[1C52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12468, 0x0021 };
    uint32_t const ces[9] = { 0x1C52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_343)
{
    // 12468 003F;	
    // (íë®) CUNEIFORM NUMERIC SIGN ELAMITE FIFTY	[1C52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12468, 0x003F };
    uint32_t const ces[9] = { 0x1C52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_344)
{
    // 12468 0061;	
    // (íë®) CUNEIFORM NUMERIC SIGN ELAMITE FIFTY	[1C52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12468, 0x0061 };
    uint32_t const ces[9] = { 0x1C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_345)
{
    // 12468 0041;	
    // (íë®) CUNEIFORM NUMERIC SIGN ELAMITE FIFTY	[1C52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12468, 0x0041 };
    uint32_t const ces[9] = { 0x1C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_346)
{
    // 12468 0062;	
    // (íë®) CUNEIFORM NUMERIC SIGN ELAMITE FIFTY	[1C52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12468, 0x0062 };
    uint32_t const ces[9] = { 0x1C52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_347)
{
    // 1D369 0021;	
    // (ùç©) COUNTING ROD TENS DIGIT ONE	[1C53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D369, 0x0021 };
    uint32_t const ces[9] = { 0x1C53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_348)
{
    // 1D369 003F;	
    // (ùç©) COUNTING ROD TENS DIGIT ONE	[1C53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D369, 0x003F };
    uint32_t const ces[9] = { 0x1C53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_349)
{
    // 1D369 0061;	
    // (ùç©) COUNTING ROD TENS DIGIT ONE	[1C53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D369, 0x0061 };
    uint32_t const ces[9] = { 0x1C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_350)
{
    // 1D369 0041;	
    // (ùç©) COUNTING ROD TENS DIGIT ONE	[1C53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D369, 0x0041 };
    uint32_t const ces[9] = { 0x1C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_351)
{
    // 1D369 0062;	
    // (ùç©) COUNTING ROD TENS DIGIT ONE	[1C53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D369, 0x0062 };
    uint32_t const ces[9] = { 0x1C53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_352)
{
    // 1D36A 0021;	
    // (ùç™) COUNTING ROD TENS DIGIT TWO	[1C54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36A, 0x0021 };
    uint32_t const ces[9] = { 0x1C54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_353)
{
    // 1D36A 003F;	
    // (ùç™) COUNTING ROD TENS DIGIT TWO	[1C54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36A, 0x003F };
    uint32_t const ces[9] = { 0x1C54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_354)
{
    // 1D36A 0061;	
    // (ùç™) COUNTING ROD TENS DIGIT TWO	[1C54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36A, 0x0061 };
    uint32_t const ces[9] = { 0x1C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_355)
{
    // 1D36A 0041;	
    // (ùç™) COUNTING ROD TENS DIGIT TWO	[1C54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D36A, 0x0041 };
    uint32_t const ces[9] = { 0x1C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_356)
{
    // 1D36A 0062;	
    // (ùç™) COUNTING ROD TENS DIGIT TWO	[1C54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36A, 0x0062 };
    uint32_t const ces[9] = { 0x1C54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_357)
{
    // 1D36B 0021;	
    // (ùç´) COUNTING ROD TENS DIGIT THREE	[1C55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36B, 0x0021 };
    uint32_t const ces[9] = { 0x1C55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_358)
{
    // 1D36B 003F;	
    // (ùç´) COUNTING ROD TENS DIGIT THREE	[1C55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36B, 0x003F };
    uint32_t const ces[9] = { 0x1C55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_359)
{
    // 1D36B 0061;	
    // (ùç´) COUNTING ROD TENS DIGIT THREE	[1C55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36B, 0x0061 };
    uint32_t const ces[9] = { 0x1C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_360)
{
    // 1D36B 0041;	
    // (ùç´) COUNTING ROD TENS DIGIT THREE	[1C55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D36B, 0x0041 };
    uint32_t const ces[9] = { 0x1C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_361)
{
    // 1D36B 0062;	
    // (ùç´) COUNTING ROD TENS DIGIT THREE	[1C55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36B, 0x0062 };
    uint32_t const ces[9] = { 0x1C55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_362)
{
    // 1D36C 0021;	
    // (ùç¨) COUNTING ROD TENS DIGIT FOUR	[1C56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36C, 0x0021 };
    uint32_t const ces[9] = { 0x1C56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_363)
{
    // 1D36C 003F;	
    // (ùç¨) COUNTING ROD TENS DIGIT FOUR	[1C56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36C, 0x003F };
    uint32_t const ces[9] = { 0x1C56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_364)
{
    // 1D36C 0061;	
    // (ùç¨) COUNTING ROD TENS DIGIT FOUR	[1C56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36C, 0x0061 };
    uint32_t const ces[9] = { 0x1C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_365)
{
    // 1D36C 0041;	
    // (ùç¨) COUNTING ROD TENS DIGIT FOUR	[1C56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D36C, 0x0041 };
    uint32_t const ces[9] = { 0x1C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_366)
{
    // 1D36C 0062;	
    // (ùç¨) COUNTING ROD TENS DIGIT FOUR	[1C56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36C, 0x0062 };
    uint32_t const ces[9] = { 0x1C56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_367)
{
    // 1D36D 0021;	
    // (ùç≠) COUNTING ROD TENS DIGIT FIVE	[1C57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36D, 0x0021 };
    uint32_t const ces[9] = { 0x1C57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_368)
{
    // 1D36D 003F;	
    // (ùç≠) COUNTING ROD TENS DIGIT FIVE	[1C57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36D, 0x003F };
    uint32_t const ces[9] = { 0x1C57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_369)
{
    // 1D36D 0061;	
    // (ùç≠) COUNTING ROD TENS DIGIT FIVE	[1C57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36D, 0x0061 };
    uint32_t const ces[9] = { 0x1C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_370)
{
    // 1D36D 0041;	
    // (ùç≠) COUNTING ROD TENS DIGIT FIVE	[1C57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D36D, 0x0041 };
    uint32_t const ces[9] = { 0x1C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_371)
{
    // 1D36D 0062;	
    // (ùç≠) COUNTING ROD TENS DIGIT FIVE	[1C57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36D, 0x0062 };
    uint32_t const ces[9] = { 0x1C57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_372)
{
    // 1D36E 0021;	
    // (ùçÆ) COUNTING ROD TENS DIGIT SIX	[1C58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36E, 0x0021 };
    uint32_t const ces[9] = { 0x1C58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_373)
{
    // 1D36E 003F;	
    // (ùçÆ) COUNTING ROD TENS DIGIT SIX	[1C58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36E, 0x003F };
    uint32_t const ces[9] = { 0x1C58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_374)
{
    // 1D36E 0061;	
    // (ùçÆ) COUNTING ROD TENS DIGIT SIX	[1C58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36E, 0x0061 };
    uint32_t const ces[9] = { 0x1C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_375)
{
    // 1D36E 0041;	
    // (ùçÆ) COUNTING ROD TENS DIGIT SIX	[1C58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D36E, 0x0041 };
    uint32_t const ces[9] = { 0x1C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_376)
{
    // 1D36E 0062;	
    // (ùçÆ) COUNTING ROD TENS DIGIT SIX	[1C58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36E, 0x0062 };
    uint32_t const ces[9] = { 0x1C58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_377)
{
    // 1D36F 0021;	
    // (ùçØ) COUNTING ROD TENS DIGIT SEVEN	[1C59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36F, 0x0021 };
    uint32_t const ces[9] = { 0x1C59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_378)
{
    // 1D36F 003F;	
    // (ùçØ) COUNTING ROD TENS DIGIT SEVEN	[1C59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36F, 0x003F };
    uint32_t const ces[9] = { 0x1C59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_379)
{
    // 1D36F 0061;	
    // (ùçØ) COUNTING ROD TENS DIGIT SEVEN	[1C59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36F, 0x0061 };
    uint32_t const ces[9] = { 0x1C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_380)
{
    // 1D36F 0041;	
    // (ùçØ) COUNTING ROD TENS DIGIT SEVEN	[1C59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D36F, 0x0041 };
    uint32_t const ces[9] = { 0x1C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_381)
{
    // 1D36F 0062;	
    // (ùçØ) COUNTING ROD TENS DIGIT SEVEN	[1C59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D36F, 0x0062 };
    uint32_t const ces[9] = { 0x1C59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_382)
{
    // 1D370 0021;	
    // (ùç∞) COUNTING ROD TENS DIGIT EIGHT	[1C5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D370, 0x0021 };
    uint32_t const ces[9] = { 0x1C5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_383)
{
    // 1D370 003F;	
    // (ùç∞) COUNTING ROD TENS DIGIT EIGHT	[1C5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D370, 0x003F };
    uint32_t const ces[9] = { 0x1C5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_384)
{
    // 1D370 0061;	
    // (ùç∞) COUNTING ROD TENS DIGIT EIGHT	[1C5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D370, 0x0061 };
    uint32_t const ces[9] = { 0x1C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_385)
{
    // 1D370 0041;	
    // (ùç∞) COUNTING ROD TENS DIGIT EIGHT	[1C5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D370, 0x0041 };
    uint32_t const ces[9] = { 0x1C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_386)
{
    // 1D370 0062;	
    // (ùç∞) COUNTING ROD TENS DIGIT EIGHT	[1C5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D370, 0x0062 };
    uint32_t const ces[9] = { 0x1C5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_387)
{
    // 1D371 0021;	
    // (ùç±) COUNTING ROD TENS DIGIT NINE	[1C5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D371, 0x0021 };
    uint32_t const ces[9] = { 0x1C5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_388)
{
    // 1D371 003F;	
    // (ùç±) COUNTING ROD TENS DIGIT NINE	[1C5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D371, 0x003F };
    uint32_t const ces[9] = { 0x1C5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_389)
{
    // 1D371 0061;	
    // (ùç±) COUNTING ROD TENS DIGIT NINE	[1C5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D371, 0x0061 };
    uint32_t const ces[9] = { 0x1C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_390)
{
    // 1D371 0041;	
    // (ùç±) COUNTING ROD TENS DIGIT NINE	[1C5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D371, 0x0041 };
    uint32_t const ces[9] = { 0x1C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_391)
{
    // 1D371 0062;	
    // (ùç±) COUNTING ROD TENS DIGIT NINE	[1C5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D371, 0x0062 };
    uint32_t const ces[9] = { 0x1C5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_392)
{
    // 02D0 0021;	
    // (Àê) MODIFIER LETTER TRIANGULAR COLON	[1C5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D0, 0x0021 };
    uint32_t const ces[9] = { 0x1C5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_393)
{
    // 02D0 003F;	
    // (Àê) MODIFIER LETTER TRIANGULAR COLON	[1C5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D0, 0x003F };
    uint32_t const ces[9] = { 0x1C5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_394)
{
    // 02D0 0061;	
    // (Àê) MODIFIER LETTER TRIANGULAR COLON	[1C5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D0, 0x0061 };
    uint32_t const ces[9] = { 0x1C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_395)
{
    // 02D0 0041;	
    // (Àê) MODIFIER LETTER TRIANGULAR COLON	[1C5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D0, 0x0041 };
    uint32_t const ces[9] = { 0x1C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_396)
{
    // 02D0 0062;	
    // (Àê) MODIFIER LETTER TRIANGULAR COLON	[1C5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D0, 0x0062 };
    uint32_t const ces[9] = { 0x1C5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_397)
{
    // 02D1 0021;	
    // (Àë) MODIFIER LETTER HALF TRIANGULAR COLON	[1C5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D1, 0x0021 };
    uint32_t const ces[9] = { 0x1C5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_398)
{
    // 02D1 003F;	
    // (Àë) MODIFIER LETTER HALF TRIANGULAR COLON	[1C5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D1, 0x003F };
    uint32_t const ces[9] = { 0x1C5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_399)
{
    // 02D1 0061;	
    // (Àë) MODIFIER LETTER HALF TRIANGULAR COLON	[1C5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D1, 0x0061 };
    uint32_t const ces[9] = { 0x1C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_400)
{
    // 02D1 0041;	
    // (Àë) MODIFIER LETTER HALF TRIANGULAR COLON	[1C5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D1, 0x0041 };
    uint32_t const ces[9] = { 0x1C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_401)
{
    // 02D1 0062;	
    // (Àë) MODIFIER LETTER HALF TRIANGULAR COLON	[1C5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D1, 0x0062 };
    uint32_t const ces[9] = { 0x1C5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_402)
{
    // 0971 0021;	
    // (‡•±) DEVANAGARI SIGN HIGH SPACING DOT	[1C5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0971, 0x0021 };
    uint32_t const ces[9] = { 0x1C5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_403)
{
    // 0971 003F;	
    // (‡•±) DEVANAGARI SIGN HIGH SPACING DOT	[1C5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0971, 0x003F };
    uint32_t const ces[9] = { 0x1C5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_404)
{
    // 0971 0061;	
    // (‡•±) DEVANAGARI SIGN HIGH SPACING DOT	[1C5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0971, 0x0061 };
    uint32_t const ces[9] = { 0x1C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_405)
{
    // 0971 0041;	
    // (‡•±) DEVANAGARI SIGN HIGH SPACING DOT	[1C5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0971, 0x0041 };
    uint32_t const ces[9] = { 0x1C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_406)
{
    // 0971 0062;	
    // (‡•±) DEVANAGARI SIGN HIGH SPACING DOT	[1C5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0971, 0x0062 };
    uint32_t const ces[9] = { 0x1C5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_407)
{
    // 0E46 0021;	
    // (‡πÜ) THAI CHARACTER MAIYAMOK	[1C5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E46, 0x0021 };
    uint32_t const ces[9] = { 0x1C5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_408)
{
    // 0E46 003F;	
    // (‡πÜ) THAI CHARACTER MAIYAMOK	[1C5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E46, 0x003F };
    uint32_t const ces[9] = { 0x1C5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_409)
{
    // 0E46 0061;	
    // (‡πÜ) THAI CHARACTER MAIYAMOK	[1C5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E46, 0x0061 };
    uint32_t const ces[9] = { 0x1C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_410)
{
    // 0E46 0041;	
    // (‡πÜ) THAI CHARACTER MAIYAMOK	[1C5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E46, 0x0041 };
    uint32_t const ces[9] = { 0x1C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_411)
{
    // 0E46 0062;	
    // (‡πÜ) THAI CHARACTER MAIYAMOK	[1C5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E46, 0x0062 };
    uint32_t const ces[9] = { 0x1C5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_412)
{
    // 0EC6 0021;	
    // (‡ªÜ) LAO KO LA	[1C60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC6, 0x0021 };
    uint32_t const ces[9] = { 0x1C60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_413)
{
    // 0EC6 003F;	
    // (‡ªÜ) LAO KO LA	[1C60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC6, 0x003F };
    uint32_t const ces[9] = { 0x1C60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_414)
{
    // 0EC6 0061;	
    // (‡ªÜ) LAO KO LA	[1C60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC6, 0x0061 };
    uint32_t const ces[9] = { 0x1C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_415)
{
    // 0EC6 0041;	
    // (‡ªÜ) LAO KO LA	[1C60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EC6, 0x0041 };
    uint32_t const ces[9] = { 0x1C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_416)
{
    // 0EC6 0062;	
    // (‡ªÜ) LAO KO LA	[1C60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC6, 0x0062 };
    uint32_t const ces[9] = { 0x1C60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_417)
{
    // 17D7 0021;	
    // (·üó) KHMER SIGN LEK TOO	[1C61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D7, 0x0021 };
    uint32_t const ces[9] = { 0x1C61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_418)
{
    // 17D7 003F;	
    // (·üó) KHMER SIGN LEK TOO	[1C61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D7, 0x003F };
    uint32_t const ces[9] = { 0x1C61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_419)
{
    // 17D7 0061;	
    // (·üó) KHMER SIGN LEK TOO	[1C61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D7, 0x0061 };
    uint32_t const ces[9] = { 0x1C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_420)
{
    // 17D7 0041;	
    // (·üó) KHMER SIGN LEK TOO	[1C61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17D7, 0x0041 };
    uint32_t const ces[9] = { 0x1C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_421)
{
    // 17D7 0062;	
    // (·üó) KHMER SIGN LEK TOO	[1C61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D7, 0x0062 };
    uint32_t const ces[9] = { 0x1C61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_422)
{
    // 1AA7 0021;	
    // (·™ß) TAI THAM SIGN MAI YAMOK	[1C62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AA7, 0x0021 };
    uint32_t const ces[9] = { 0x1C62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_423)
{
    // 1AA7 003F;	
    // (·™ß) TAI THAM SIGN MAI YAMOK	[1C62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AA7, 0x003F };
    uint32_t const ces[9] = { 0x1C62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_424)
{
    // 1AA7 0061;	
    // (·™ß) TAI THAM SIGN MAI YAMOK	[1C62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AA7, 0x0061 };
    uint32_t const ces[9] = { 0x1C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_425)
{
    // 1AA7 0041;	
    // (·™ß) TAI THAM SIGN MAI YAMOK	[1C62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AA7, 0x0041 };
    uint32_t const ces[9] = { 0x1C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_426)
{
    // 1AA7 0062;	
    // (·™ß) TAI THAM SIGN MAI YAMOK	[1C62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AA7, 0x0062 };
    uint32_t const ces[9] = { 0x1C62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_427)
{
    // A9CF 0021;	
    // (Íßè) JAVANESE PANGRANGKEP	[1C63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9CF, 0x0021 };
    uint32_t const ces[9] = { 0x1C63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_428)
{
    // A9CF 003F;	
    // (Íßè) JAVANESE PANGRANGKEP	[1C63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9CF, 0x003F };
    uint32_t const ces[9] = { 0x1C63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_429)
{
    // A9CF 0061;	
    // (Íßè) JAVANESE PANGRANGKEP	[1C63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9CF, 0x0061 };
    uint32_t const ces[9] = { 0x1C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_430)
{
    // A9CF 0041;	
    // (Íßè) JAVANESE PANGRANGKEP	[1C63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9CF, 0x0041 };
    uint32_t const ces[9] = { 0x1C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_431)
{
    // A9CF 0062;	
    // (Íßè) JAVANESE PANGRANGKEP	[1C63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9CF, 0x0062 };
    uint32_t const ces[9] = { 0x1C63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_432)
{
    // A9E6 0021;	
    // (Íß¶) MYANMAR MODIFIER LETTER SHAN REDUPLICATION	[1C64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E6, 0x0021 };
    uint32_t const ces[9] = { 0x1C64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_433)
{
    // A9E6 003F;	
    // (Íß¶) MYANMAR MODIFIER LETTER SHAN REDUPLICATION	[1C64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E6, 0x003F };
    uint32_t const ces[9] = { 0x1C64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_434)
{
    // A9E6 0061;	
    // (Íß¶) MYANMAR MODIFIER LETTER SHAN REDUPLICATION	[1C64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E6, 0x0061 };
    uint32_t const ces[9] = { 0x1C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_435)
{
    // A9E6 0041;	
    // (Íß¶) MYANMAR MODIFIER LETTER SHAN REDUPLICATION	[1C64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9E6, 0x0041 };
    uint32_t const ces[9] = { 0x1C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_436)
{
    // A9E6 0062;	
    // (Íß¶) MYANMAR MODIFIER LETTER SHAN REDUPLICATION	[1C64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E6, 0x0062 };
    uint32_t const ces[9] = { 0x1C64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_437)
{
    // AA70 0021;	
    // (Í©∞) MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION	[1C65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA70, 0x0021 };
    uint32_t const ces[9] = { 0x1C65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_438)
{
    // AA70 003F;	
    // (Í©∞) MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION	[1C65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA70, 0x003F };
    uint32_t const ces[9] = { 0x1C65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_439)
{
    // AA70 0061;	
    // (Í©∞) MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION	[1C65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA70, 0x0061 };
    uint32_t const ces[9] = { 0x1C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_440)
{
    // AA70 0041;	
    // (Í©∞) MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION	[1C65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA70, 0x0041 };
    uint32_t const ces[9] = { 0x1C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_441)
{
    // AA70 0062;	
    // (Í©∞) MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION	[1C65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA70, 0x0062 };
    uint32_t const ces[9] = { 0x1C65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_442)
{
    // AADD 0021;	
    // (Í´ù) TAI VIET SYMBOL SAM	[1C66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADD, 0x0021 };
    uint32_t const ces[9] = { 0x1C66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_443)
{
    // AADD 003F;	
    // (Í´ù) TAI VIET SYMBOL SAM	[1C66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADD, 0x003F };
    uint32_t const ces[9] = { 0x1C66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_444)
{
    // AADD 0061;	
    // (Í´ù) TAI VIET SYMBOL SAM	[1C66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADD, 0x0061 };
    uint32_t const ces[9] = { 0x1C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_445)
{
    // AADD 0041;	
    // (Í´ù) TAI VIET SYMBOL SAM	[1C66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAADD, 0x0041 };
    uint32_t const ces[9] = { 0x1C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_446)
{
    // AADD 0062;	
    // (Í´ù) TAI VIET SYMBOL SAM	[1C66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADD, 0x0062 };
    uint32_t const ces[9] = { 0x1C66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_447)
{
    // AAF3 0021;	
    // (Í´≥) MEETEI MAYEK SYLLABLE REPETITION MARK	[1C67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF3, 0x0021 };
    uint32_t const ces[9] = { 0x1C67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_448)
{
    // AAF3 003F;	
    // (Í´≥) MEETEI MAYEK SYLLABLE REPETITION MARK	[1C67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF3, 0x003F };
    uint32_t const ces[9] = { 0x1C67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_449)
{
    // AAF3 0061;	
    // (Í´≥) MEETEI MAYEK SYLLABLE REPETITION MARK	[1C67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF3, 0x0061 };
    uint32_t const ces[9] = { 0x1C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_450)
{
    // AAF3 0041;	
    // (Í´≥) MEETEI MAYEK SYLLABLE REPETITION MARK	[1C67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAF3, 0x0041 };
    uint32_t const ces[9] = { 0x1C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_451)
{
    // AAF3 0062;	
    // (Í´≥) MEETEI MAYEK SYLLABLE REPETITION MARK	[1C67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF3, 0x0062 };
    uint32_t const ces[9] = { 0x1C67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_452)
{
    // AAF4 0021;	
    // (Í´¥) MEETEI MAYEK WORD REPETITION MARK	[1C68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF4, 0x0021 };
    uint32_t const ces[9] = { 0x1C68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_453)
{
    // AAF4 003F;	
    // (Í´¥) MEETEI MAYEK WORD REPETITION MARK	[1C68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF4, 0x003F };
    uint32_t const ces[9] = { 0x1C68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_454)
{
    // AAF4 0061;	
    // (Í´¥) MEETEI MAYEK WORD REPETITION MARK	[1C68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF4, 0x0061 };
    uint32_t const ces[9] = { 0x1C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_455)
{
    // AAF4 0041;	
    // (Í´¥) MEETEI MAYEK WORD REPETITION MARK	[1C68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAF4, 0x0041 };
    uint32_t const ces[9] = { 0x1C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_456)
{
    // AAF4 0062;	
    // (Í´¥) MEETEI MAYEK WORD REPETITION MARK	[1C68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF4, 0x0062 };
    uint32_t const ces[9] = { 0x1C68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_457)
{
    // 16B42 0021;	
    // (ñ≠Ç) PAHAWH HMONG SIGN VOS NRUA	[1C69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B42, 0x0021 };
    uint32_t const ces[9] = { 0x1C69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_458)
{
    // 16B42 003F;	
    // (ñ≠Ç) PAHAWH HMONG SIGN VOS NRUA	[1C69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B42, 0x003F };
    uint32_t const ces[9] = { 0x1C69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_459)
{
    // 16B42 0061;	
    // (ñ≠Ç) PAHAWH HMONG SIGN VOS NRUA	[1C69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B42, 0x0061 };
    uint32_t const ces[9] = { 0x1C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_460)
{
    // 16B42 0041;	
    // (ñ≠Ç) PAHAWH HMONG SIGN VOS NRUA	[1C69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B42, 0x0041 };
    uint32_t const ces[9] = { 0x1C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_461)
{
    // 16B42 0062;	
    // (ñ≠Ç) PAHAWH HMONG SIGN VOS NRUA	[1C69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B42, 0x0062 };
    uint32_t const ces[9] = { 0x1C69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_462)
{
    // 16B43 0021;	
    // (ñ≠É) PAHAWH HMONG SIGN IB YAM	[1C6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B43, 0x0021 };
    uint32_t const ces[9] = { 0x1C6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_463)
{
    // 16B43 003F;	
    // (ñ≠É) PAHAWH HMONG SIGN IB YAM	[1C6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B43, 0x003F };
    uint32_t const ces[9] = { 0x1C6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_464)
{
    // 16B43 0061;	
    // (ñ≠É) PAHAWH HMONG SIGN IB YAM	[1C6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B43, 0x0061 };
    uint32_t const ces[9] = { 0x1C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_465)
{
    // 16B43 0041;	
    // (ñ≠É) PAHAWH HMONG SIGN IB YAM	[1C6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B43, 0x0041 };
    uint32_t const ces[9] = { 0x1C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_466)
{
    // 16B43 0062;	
    // (ñ≠É) PAHAWH HMONG SIGN IB YAM	[1C6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B43, 0x0062 };
    uint32_t const ces[9] = { 0x1C6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_467)
{
    // 3005 0021;	
    // („ÄÖ) IDEOGRAPHIC ITERATION MARK	[1C6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3005, 0x0021 };
    uint32_t const ces[9] = { 0x1C6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_468)
{
    // 3005 003F;	
    // („ÄÖ) IDEOGRAPHIC ITERATION MARK	[1C6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3005, 0x003F };
    uint32_t const ces[9] = { 0x1C6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_469)
{
    // 3005 0061;	
    // („ÄÖ) IDEOGRAPHIC ITERATION MARK	[1C6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3005, 0x0061 };
    uint32_t const ces[9] = { 0x1C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_470)
{
    // 3005 0041;	
    // („ÄÖ) IDEOGRAPHIC ITERATION MARK	[1C6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3005, 0x0041 };
    uint32_t const ces[9] = { 0x1C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_471)
{
    // 3005 0062;	
    // („ÄÖ) IDEOGRAPHIC ITERATION MARK	[1C6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3005, 0x0062 };
    uint32_t const ces[9] = { 0x1C6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_472)
{
    // 303B 0021;	
    // („Äª) VERTICAL IDEOGRAPHIC ITERATION MARK	[1C6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303B, 0x0021 };
    uint32_t const ces[9] = { 0x1C6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_473)
{
    // 303B 003F;	
    // („Äª) VERTICAL IDEOGRAPHIC ITERATION MARK	[1C6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303B, 0x003F };
    uint32_t const ces[9] = { 0x1C6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_474)
{
    // 303B 0061;	
    // („Äª) VERTICAL IDEOGRAPHIC ITERATION MARK	[1C6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303B, 0x0061 };
    uint32_t const ces[9] = { 0x1C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_475)
{
    // 303B 0041;	
    // („Äª) VERTICAL IDEOGRAPHIC ITERATION MARK	[1C6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x303B, 0x0041 };
    uint32_t const ces[9] = { 0x1C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_476)
{
    // 303B 0062;	
    // („Äª) VERTICAL IDEOGRAPHIC ITERATION MARK	[1C6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303B, 0x0062 };
    uint32_t const ces[9] = { 0x1C6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_477)
{
    // 16FE0 0021;	
    // (ñø†) TANGUT ITERATION MARK	[1C6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE0, 0x0021 };
    uint32_t const ces[9] = { 0x1C6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_478)
{
    // 16FE0 003F;	
    // (ñø†) TANGUT ITERATION MARK	[1C6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE0, 0x003F };
    uint32_t const ces[9] = { 0x1C6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_479)
{
    // 16FE0 0061;	
    // (ñø†) TANGUT ITERATION MARK	[1C6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE0, 0x0061 };
    uint32_t const ces[9] = { 0x1C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_480)
{
    // 16FE0 0041;	
    // (ñø†) TANGUT ITERATION MARK	[1C6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16FE0, 0x0041 };
    uint32_t const ces[9] = { 0x1C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_481)
{
    // 16FE0 0062;	
    // (ñø†) TANGUT ITERATION MARK	[1C6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE0, 0x0062 };
    uint32_t const ces[9] = { 0x1C6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_482)
{
    // 16FE1 0021;	
    // (ñø°) NUSHU ITERATION MARK	[1C6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE1, 0x0021 };
    uint32_t const ces[9] = { 0x1C6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_483)
{
    // 16FE1 003F;	
    // (ñø°) NUSHU ITERATION MARK	[1C6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE1, 0x003F };
    uint32_t const ces[9] = { 0x1C6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_484)
{
    // 16FE1 0061;	
    // (ñø°) NUSHU ITERATION MARK	[1C6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE1, 0x0061 };
    uint32_t const ces[9] = { 0x1C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_485)
{
    // 16FE1 0041;	
    // (ñø°) NUSHU ITERATION MARK	[1C6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16FE1, 0x0041 };
    uint32_t const ces[9] = { 0x1C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_486)
{
    // 16FE1 0062;	
    // (ñø°) NUSHU ITERATION MARK	[1C6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16FE1, 0x0062 };
    uint32_t const ces[9] = { 0x1C6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_487)
{
    // 3031 0021;	
    // („Ä±) VERTICAL KANA REPEAT MARK	[1C6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3031, 0x0021 };
    uint32_t const ces[9] = { 0x1C6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_488)
{
    // 3032 0021;	
    // („Ä≤) VERTICAL KANA REPEAT WITH VOICED SOUND MARK	[1C6F 0261 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3032, 0x0021 };
    uint32_t const ces[11] = { 0x1C6F, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_489)
{
    // 3031 003F;	
    // („Ä±) VERTICAL KANA REPEAT MARK	[1C6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3031, 0x003F };
    uint32_t const ces[9] = { 0x1C6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_490)
{
    // 3032 003F;	
    // („Ä≤) VERTICAL KANA REPEAT WITH VOICED SOUND MARK	[1C6F 0267 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3032, 0x003F };
    uint32_t const ces[11] = { 0x1C6F, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_491)
{
    // 3031 0061;	
    // („Ä±) VERTICAL KANA REPEAT MARK	[1C6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3031, 0x0061 };
    uint32_t const ces[9] = { 0x1C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_492)
{
    // 3031 0041;	
    // („Ä±) VERTICAL KANA REPEAT MARK	[1C6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3031, 0x0041 };
    uint32_t const ces[9] = { 0x1C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_493)
{
    // 3032 0061;	
    // („Ä≤) VERTICAL KANA REPEAT WITH VOICED SOUND MARK	[1C6F 1CAD | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3032, 0x0061 };
    uint32_t const ces[11] = { 0x1C6F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_494)
{
    // 3032 0041;	
    // („Ä≤) VERTICAL KANA REPEAT WITH VOICED SOUND MARK	[1C6F 1CAD | 0020 0037 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x3032, 0x0041 };
    uint32_t const ces[11] = { 0x1C6F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_495)
{
    // 3031 0062;	
    // („Ä±) VERTICAL KANA REPEAT MARK	[1C6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3031, 0x0062 };
    uint32_t const ces[9] = { 0x1C6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_496)
{
    // 3032 0062;	
    // („Ä≤) VERTICAL KANA REPEAT WITH VOICED SOUND MARK	[1C6F 1CC6 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3032, 0x0062 };
    uint32_t const ces[11] = { 0x1C6F, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_497)
{
    // 3033 0021;	
    // („Ä≥) VERTICAL KANA REPEAT MARK UPPER HALF	[1C70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3033, 0x0021 };
    uint32_t const ces[9] = { 0x1C70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_498)
{
    // 3034 0021;	
    // („Ä¥) VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF	[1C70 0261 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3034, 0x0021 };
    uint32_t const ces[11] = { 0x1C70, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_079_499)
{
    // 3033 003F;	
    // („Ä≥) VERTICAL KANA REPEAT MARK UPPER HALF	[1C70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3033, 0x003F };
    uint32_t const ces[9] = { 0x1C70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

