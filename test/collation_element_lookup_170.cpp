// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_170_000)
{
    // 1BC03 ; [.46E4.0020.0002] 
    // DUPLOYAN LETTER T

    uint32_t const cps[1] = { 0x1bc03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_001)
{
    // 1BC04 ; [.46E5.0020.0002] 
    // DUPLOYAN LETTER F

    uint32_t const cps[1] = { 0x1bc04 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_002)
{
    // 1BC05 ; [.46E6.0020.0002] 
    // DUPLOYAN LETTER K

    uint32_t const cps[1] = { 0x1bc05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_003)
{
    // 1BC06 ; [.46E7.0020.0002] 
    // DUPLOYAN LETTER L

    uint32_t const cps[1] = { 0x1bc06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_004)
{
    // 1BC07 ; [.46E8.0020.0002] 
    // DUPLOYAN LETTER B

    uint32_t const cps[1] = { 0x1bc07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_005)
{
    // 1BC08 ; [.46E9.0020.0002] 
    // DUPLOYAN LETTER D

    uint32_t const cps[1] = { 0x1bc08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_006)
{
    // 1BC09 ; [.46EA.0020.0002] 
    // DUPLOYAN LETTER V

    uint32_t const cps[1] = { 0x1bc09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_007)
{
    // 1BC0A ; [.46EB.0020.0002] 
    // DUPLOYAN LETTER G

    uint32_t const cps[1] = { 0x1bc0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_008)
{
    // 1BC0B ; [.46EC.0020.0002] 
    // DUPLOYAN LETTER R

    uint32_t const cps[1] = { 0x1bc0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_009)
{
    // 1BC0C ; [.46ED.0020.0002] 
    // DUPLOYAN LETTER P N

    uint32_t const cps[1] = { 0x1bc0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_010)
{
    // 1BC0D ; [.46EE.0020.0002] 
    // DUPLOYAN LETTER D S

    uint32_t const cps[1] = { 0x1bc0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_011)
{
    // 1BC0E ; [.46EF.0020.0002] 
    // DUPLOYAN LETTER F N

    uint32_t const cps[1] = { 0x1bc0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_012)
{
    // 1BC0F ; [.46F0.0020.0002] 
    // DUPLOYAN LETTER K M

    uint32_t const cps[1] = { 0x1bc0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_013)
{
    // 1BC10 ; [.46F1.0020.0002] 
    // DUPLOYAN LETTER R S

    uint32_t const cps[1] = { 0x1bc10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_014)
{
    // 1BC11 ; [.46F2.0020.0002] 
    // DUPLOYAN LETTER TH

    uint32_t const cps[1] = { 0x1bc11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_015)
{
    // 1BC12 ; [.46F3.0020.0002] 
    // DUPLOYAN LETTER SLOAN DH

    uint32_t const cps[1] = { 0x1bc12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_016)
{
    // 1BC13 ; [.46F4.0020.0002] 
    // DUPLOYAN LETTER DH

    uint32_t const cps[1] = { 0x1bc13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_017)
{
    // 1BC14 ; [.46F5.0020.0002] 
    // DUPLOYAN LETTER KK

    uint32_t const cps[1] = { 0x1bc14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_018)
{
    // 1BC15 ; [.46F6.0020.0002] 
    // DUPLOYAN LETTER SLOAN J

    uint32_t const cps[1] = { 0x1bc15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_019)
{
    // 1BC16 ; [.46F7.0020.0002] 
    // DUPLOYAN LETTER HL

    uint32_t const cps[1] = { 0x1bc16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_020)
{
    // 1BC17 ; [.46F8.0020.0002] 
    // DUPLOYAN LETTER LH

    uint32_t const cps[1] = { 0x1bc17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_021)
{
    // 1BC18 ; [.46F9.0020.0002] 
    // DUPLOYAN LETTER RH

    uint32_t const cps[1] = { 0x1bc18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_022)
{
    // 1BC19 ; [.46FA.0020.0002] 
    // DUPLOYAN LETTER M

    uint32_t const cps[1] = { 0x1bc19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_023)
{
    // 1BC1A ; [.46FB.0020.0002] 
    // DUPLOYAN LETTER N

    uint32_t const cps[1] = { 0x1bc1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_024)
{
    // 1BC1B ; [.46FC.0020.0002] 
    // DUPLOYAN LETTER J

    uint32_t const cps[1] = { 0x1bc1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_025)
{
    // 1BC1C ; [.46FD.0020.0002] 
    // DUPLOYAN LETTER S

    uint32_t const cps[1] = { 0x1bc1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_026)
{
    // 1BC1D ; [.46FE.0020.0002] 
    // DUPLOYAN LETTER M N

    uint32_t const cps[1] = { 0x1bc1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_027)
{
    // 1BC1E ; [.46FF.0020.0002] 
    // DUPLOYAN LETTER N M

    uint32_t const cps[1] = { 0x1bc1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x46ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_028)
{
    // 1BC1F ; [.4700.0020.0002] 
    // DUPLOYAN LETTER J M

    uint32_t const cps[1] = { 0x1bc1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4700), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_029)
{
    // 1BC20 ; [.4701.0020.0002] 
    // DUPLOYAN LETTER S J

    uint32_t const cps[1] = { 0x1bc20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4701), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_030)
{
    // 1BC21 ; [.4702.0020.0002] 
    // DUPLOYAN LETTER M WITH DOT

    uint32_t const cps[1] = { 0x1bc21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4702), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_031)
{
    // 1BC22 ; [.4703.0020.0002] 
    // DUPLOYAN LETTER N WITH DOT

    uint32_t const cps[1] = { 0x1bc22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4703), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_032)
{
    // 1BC23 ; [.4704.0020.0002] 
    // DUPLOYAN LETTER J WITH DOT

    uint32_t const cps[1] = { 0x1bc23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4704), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_033)
{
    // 1BC24 ; [.4705.0020.0002] 
    // DUPLOYAN LETTER J WITH DOTS INSIDE AND ABOVE

    uint32_t const cps[1] = { 0x1bc24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4705), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_034)
{
    // 1BC25 ; [.4706.0020.0002] 
    // DUPLOYAN LETTER S WITH DOT

    uint32_t const cps[1] = { 0x1bc25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4706), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_035)
{
    // 1BC26 ; [.4707.0020.0002] 
    // DUPLOYAN LETTER S WITH DOT BELOW

    uint32_t const cps[1] = { 0x1bc26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4707), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_036)
{
    // 1BC27 ; [.4708.0020.0002] 
    // DUPLOYAN LETTER M S

    uint32_t const cps[1] = { 0x1bc27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4708), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_037)
{
    // 1BC28 ; [.4709.0020.0002] 
    // DUPLOYAN LETTER N S

    uint32_t const cps[1] = { 0x1bc28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4709), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_038)
{
    // 1BC29 ; [.470A.0020.0002] 
    // DUPLOYAN LETTER J S

    uint32_t const cps[1] = { 0x1bc29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x470a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_039)
{
    // 1BC2A ; [.470B.0020.0002] 
    // DUPLOYAN LETTER S S

    uint32_t const cps[1] = { 0x1bc2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x470b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_040)
{
    // 1BC2B ; [.470C.0020.0002] 
    // DUPLOYAN LETTER M N S

    uint32_t const cps[1] = { 0x1bc2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x470c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_041)
{
    // 1BC2C ; [.470D.0020.0002] 
    // DUPLOYAN LETTER N M S

    uint32_t const cps[1] = { 0x1bc2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x470d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_042)
{
    // 1BC2D ; [.470E.0020.0002] 
    // DUPLOYAN LETTER J M S

    uint32_t const cps[1] = { 0x1bc2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x470e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_043)
{
    // 1BC2E ; [.470F.0020.0002] 
    // DUPLOYAN LETTER S J S

    uint32_t const cps[1] = { 0x1bc2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x470f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_044)
{
    // 1BC2F ; [.4710.0020.0002] 
    // DUPLOYAN LETTER J S WITH DOT

    uint32_t const cps[1] = { 0x1bc2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4710), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_045)
{
    // 1BC30 ; [.4711.0020.0002] 
    // DUPLOYAN LETTER J N

    uint32_t const cps[1] = { 0x1bc30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4711), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_046)
{
    // 1BC31 ; [.4712.0020.0002] 
    // DUPLOYAN LETTER J N S

    uint32_t const cps[1] = { 0x1bc31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4712), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_047)
{
    // 1BC32 ; [.4713.0020.0002] 
    // DUPLOYAN LETTER S T

    uint32_t const cps[1] = { 0x1bc32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4713), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_048)
{
    // 1BC33 ; [.4714.0020.0002] 
    // DUPLOYAN LETTER S T R

    uint32_t const cps[1] = { 0x1bc33 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4714), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_049)
{
    // 1BC34 ; [.4715.0020.0002] 
    // DUPLOYAN LETTER S P

    uint32_t const cps[1] = { 0x1bc34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4715), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_050)
{
    // 1BC35 ; [.4716.0020.0002] 
    // DUPLOYAN LETTER S P R

    uint32_t const cps[1] = { 0x1bc35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4716), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_051)
{
    // 1BC36 ; [.4717.0020.0002] 
    // DUPLOYAN LETTER T S

    uint32_t const cps[1] = { 0x1bc36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4717), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_052)
{
    // 1BC37 ; [.4718.0020.0002] 
    // DUPLOYAN LETTER T R S

    uint32_t const cps[1] = { 0x1bc37 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4718), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_053)
{
    // 1BC38 ; [.4719.0020.0002] 
    // DUPLOYAN LETTER W

    uint32_t const cps[1] = { 0x1bc38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4719), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_054)
{
    // 1BC39 ; [.471A.0020.0002] 
    // DUPLOYAN LETTER WH

    uint32_t const cps[1] = { 0x1bc39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x471a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_055)
{
    // 1BC3A ; [.471B.0020.0002] 
    // DUPLOYAN LETTER W R

    uint32_t const cps[1] = { 0x1bc3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x471b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_056)
{
    // 1BC3B ; [.471C.0020.0002] 
    // DUPLOYAN LETTER S N

    uint32_t const cps[1] = { 0x1bc3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x471c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_057)
{
    // 1BC3C ; [.471D.0020.0002] 
    // DUPLOYAN LETTER S M

    uint32_t const cps[1] = { 0x1bc3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x471d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_058)
{
    // 1BC3D ; [.471E.0020.0002] 
    // DUPLOYAN LETTER K R S

    uint32_t const cps[1] = { 0x1bc3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x471e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_059)
{
    // 1BC3E ; [.471F.0020.0002] 
    // DUPLOYAN LETTER G R S

    uint32_t const cps[1] = { 0x1bc3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x471f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_060)
{
    // 1BC3F ; [.4720.0020.0002] 
    // DUPLOYAN LETTER S K

    uint32_t const cps[1] = { 0x1bc3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4720), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_061)
{
    // 1BC40 ; [.4721.0020.0002] 
    // DUPLOYAN LETTER S K R

    uint32_t const cps[1] = { 0x1bc40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4721), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_062)
{
    // 1BC41 ; [.4722.0020.0002] 
    // DUPLOYAN LETTER A

    uint32_t const cps[1] = { 0x1bc41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4722), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_063)
{
    // 1BC42 ; [.4723.0020.0002] 
    // DUPLOYAN LETTER SLOAN OW

    uint32_t const cps[1] = { 0x1bc42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4723), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_064)
{
    // 1BC43 ; [.4724.0020.0002] 
    // DUPLOYAN LETTER OA

    uint32_t const cps[1] = { 0x1bc43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4724), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_065)
{
    // 1BC44 ; [.4725.0020.0002] 
    // DUPLOYAN LETTER O

    uint32_t const cps[1] = { 0x1bc44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4725), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_066)
{
    // 1BC45 ; [.4726.0020.0002] 
    // DUPLOYAN LETTER AOU

    uint32_t const cps[1] = { 0x1bc45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4726), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_067)
{
    // 1BC46 ; [.4727.0020.0002] 
    // DUPLOYAN LETTER I

    uint32_t const cps[1] = { 0x1bc46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4727), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_068)
{
    // 1BC47 ; [.4728.0020.0002] 
    // DUPLOYAN LETTER E

    uint32_t const cps[1] = { 0x1bc47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4728), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_069)
{
    // 1BC48 ; [.4729.0020.0002] 
    // DUPLOYAN LETTER IE

    uint32_t const cps[1] = { 0x1bc48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4729), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_070)
{
    // 1BC49 ; [.472A.0020.0002] 
    // DUPLOYAN LETTER SHORT I

    uint32_t const cps[1] = { 0x1bc49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x472a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_071)
{
    // 1BC4A ; [.472B.0020.0002] 
    // DUPLOYAN LETTER UI

    uint32_t const cps[1] = { 0x1bc4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x472b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_072)
{
    // 1BC4B ; [.472C.0020.0002] 
    // DUPLOYAN LETTER EE

    uint32_t const cps[1] = { 0x1bc4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x472c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_073)
{
    // 1BC4C ; [.472D.0020.0002] 
    // DUPLOYAN LETTER SLOAN EH

    uint32_t const cps[1] = { 0x1bc4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x472d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_074)
{
    // 1BC4D ; [.472E.0020.0002] 
    // DUPLOYAN LETTER ROMANIAN I

    uint32_t const cps[1] = { 0x1bc4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x472e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_075)
{
    // 1BC4E ; [.472F.0020.0002] 
    // DUPLOYAN LETTER SLOAN EE

    uint32_t const cps[1] = { 0x1bc4e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x472f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_076)
{
    // 1BC4F ; [.4730.0020.0002] 
    // DUPLOYAN LETTER LONG I

    uint32_t const cps[1] = { 0x1bc4f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4730), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_077)
{
    // 1BC50 ; [.4731.0020.0002] 
    // DUPLOYAN LETTER YE

    uint32_t const cps[1] = { 0x1bc50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4731), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_078)
{
    // 1BC51 ; [.4732.0020.0002] 
    // DUPLOYAN LETTER U

    uint32_t const cps[1] = { 0x1bc51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4732), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_079)
{
    // 1BC52 ; [.4733.0020.0002] 
    // DUPLOYAN LETTER EU

    uint32_t const cps[1] = { 0x1bc52 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4733), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_080)
{
    // 1BC53 ; [.4734.0020.0002] 
    // DUPLOYAN LETTER XW

    uint32_t const cps[1] = { 0x1bc53 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4734), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_081)
{
    // 1BC54 ; [.4735.0020.0002] 
    // DUPLOYAN LETTER U N

    uint32_t const cps[1] = { 0x1bc54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4735), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_082)
{
    // 1BC55 ; [.4736.0020.0002] 
    // DUPLOYAN LETTER LONG U

    uint32_t const cps[1] = { 0x1bc55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4736), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_083)
{
    // 1BC56 ; [.4737.0020.0002] 
    // DUPLOYAN LETTER ROMANIAN U

    uint32_t const cps[1] = { 0x1bc56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4737), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_084)
{
    // 1BC57 ; [.4738.0020.0002] 
    // DUPLOYAN LETTER UH

    uint32_t const cps[1] = { 0x1bc57 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4738), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_085)
{
    // 1BC58 ; [.4739.0020.0002] 
    // DUPLOYAN LETTER SLOAN U

    uint32_t const cps[1] = { 0x1bc58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4739), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_086)
{
    // 1BC59 ; [.473A.0020.0002] 
    // DUPLOYAN LETTER OOH

    uint32_t const cps[1] = { 0x1bc59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x473a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_087)
{
    // 1BC5A ; [.473B.0020.0002] 
    // DUPLOYAN LETTER OW

    uint32_t const cps[1] = { 0x1bc5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x473b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_088)
{
    // 1BC5B ; [.473C.0020.0002] 
    // DUPLOYAN LETTER OU

    uint32_t const cps[1] = { 0x1bc5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x473c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_089)
{
    // 1BC5C ; [.473D.0020.0002] 
    // DUPLOYAN LETTER WA

    uint32_t const cps[1] = { 0x1bc5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x473d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_090)
{
    // 1BC5D ; [.473E.0020.0002] 
    // DUPLOYAN LETTER WO

    uint32_t const cps[1] = { 0x1bc5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x473e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_091)
{
    // 1BC5E ; [.473F.0020.0002] 
    // DUPLOYAN LETTER WI

    uint32_t const cps[1] = { 0x1bc5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x473f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_092)
{
    // 1BC5F ; [.4740.0020.0002] 
    // DUPLOYAN LETTER WEI

    uint32_t const cps[1] = { 0x1bc5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4740), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_093)
{
    // 1BC60 ; [.4741.0020.0002] 
    // DUPLOYAN LETTER WOW

    uint32_t const cps[1] = { 0x1bc60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4741), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_094)
{
    // 1BC61 ; [.4742.0020.0002] 
    // DUPLOYAN LETTER NASAL U

    uint32_t const cps[1] = { 0x1bc61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4742), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_095)
{
    // 1BC62 ; [.4743.0020.0002] 
    // DUPLOYAN LETTER NASAL O

    uint32_t const cps[1] = { 0x1bc62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4743), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_096)
{
    // 1BC63 ; [.4744.0020.0002] 
    // DUPLOYAN LETTER NASAL I

    uint32_t const cps[1] = { 0x1bc63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4744), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_097)
{
    // 1BC64 ; [.4745.0020.0002] 
    // DUPLOYAN LETTER NASAL A

    uint32_t const cps[1] = { 0x1bc64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4745), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_098)
{
    // 1BC65 ; [.4746.0020.0002] 
    // DUPLOYAN LETTER PERNIN AN

    uint32_t const cps[1] = { 0x1bc65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4746), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_099)
{
    // 1BC66 ; [.4747.0020.0002] 
    // DUPLOYAN LETTER PERNIN AM

    uint32_t const cps[1] = { 0x1bc66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4747), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_100)
{
    // 1BC67 ; [.4748.0020.0002] 
    // DUPLOYAN LETTER SLOAN EN

    uint32_t const cps[1] = { 0x1bc67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4748), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_101)
{
    // 1BC68 ; [.4749.0020.0002] 
    // DUPLOYAN LETTER SLOAN AN

    uint32_t const cps[1] = { 0x1bc68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4749), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_102)
{
    // 1BC69 ; [.474A.0020.0002] 
    // DUPLOYAN LETTER SLOAN ON

    uint32_t const cps[1] = { 0x1bc69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x474a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_103)
{
    // 1BC6A ; [.474B.0020.0002] 
    // DUPLOYAN LETTER VOCALIC M

    uint32_t const cps[1] = { 0x1bc6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x474b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_104)
{
    // 1BC70 ; [.474C.0020.0002] 
    // DUPLOYAN AFFIX LEFT HORIZONTAL SECANT

    uint32_t const cps[1] = { 0x1bc70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x474c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_105)
{
    // 1BC71 ; [.474D.0020.0002] 
    // DUPLOYAN AFFIX MID HORIZONTAL SECANT

    uint32_t const cps[1] = { 0x1bc71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x474d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_106)
{
    // 1BC72 ; [.474E.0020.0002] 
    // DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT

    uint32_t const cps[1] = { 0x1bc72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x474e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_107)
{
    // 1BC73 ; [.474F.0020.0002] 
    // DUPLOYAN AFFIX LOW VERTICAL SECANT

    uint32_t const cps[1] = { 0x1bc73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x474f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_108)
{
    // 1BC74 ; [.4750.0020.0002] 
    // DUPLOYAN AFFIX MID VERTICAL SECANT

    uint32_t const cps[1] = { 0x1bc74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4750), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_109)
{
    // 1BC75 ; [.4751.0020.0002] 
    // DUPLOYAN AFFIX HIGH VERTICAL SECANT

    uint32_t const cps[1] = { 0x1bc75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4751), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_110)
{
    // 1BC76 ; [.4752.0020.0002] 
    // DUPLOYAN AFFIX ATTACHED SECANT

    uint32_t const cps[1] = { 0x1bc76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4752), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_111)
{
    // 1BC77 ; [.4753.0020.0002] 
    // DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT

    uint32_t const cps[1] = { 0x1bc77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4753), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_112)
{
    // 1BC78 ; [.4754.0020.0002] 
    // DUPLOYAN AFFIX ATTACHED TANGENT

    uint32_t const cps[1] = { 0x1bc78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4754), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_113)
{
    // 1BC79 ; [.4755.0020.0002] 
    // DUPLOYAN AFFIX ATTACHED TAIL

    uint32_t const cps[1] = { 0x1bc79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4755), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_114)
{
    // 1BC7A ; [.4756.0020.0002] 
    // DUPLOYAN AFFIX ATTACHED E HOOK

    uint32_t const cps[1] = { 0x1bc7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4756), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_115)
{
    // 1BC7B ; [.4757.0020.0002] 
    // DUPLOYAN AFFIX ATTACHED I HOOK

    uint32_t const cps[1] = { 0x1bc7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4757), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_116)
{
    // 1BC7C ; [.4758.0020.0002] 
    // DUPLOYAN AFFIX ATTACHED TANGENT HOOK

    uint32_t const cps[1] = { 0x1bc7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4758), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_117)
{
    // 1BC80 ; [.4759.0020.0002] 
    // DUPLOYAN AFFIX HIGH ACUTE

    uint32_t const cps[1] = { 0x1bc80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4759), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_118)
{
    // 1BC81 ; [.475A.0020.0002] 
    // DUPLOYAN AFFIX HIGH TIGHT ACUTE

    uint32_t const cps[1] = { 0x1bc81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x475a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_119)
{
    // 1BC82 ; [.475B.0020.0002] 
    // DUPLOYAN AFFIX HIGH GRAVE

    uint32_t const cps[1] = { 0x1bc82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x475b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_120)
{
    // 1BC83 ; [.475C.0020.0002] 
    // DUPLOYAN AFFIX HIGH LONG GRAVE

    uint32_t const cps[1] = { 0x1bc83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x475c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_121)
{
    // 1BC84 ; [.475D.0020.0002] 
    // DUPLOYAN AFFIX HIGH DOT

    uint32_t const cps[1] = { 0x1bc84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x475d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_122)
{
    // 1BC85 ; [.475E.0020.0002] 
    // DUPLOYAN AFFIX HIGH CIRCLE

    uint32_t const cps[1] = { 0x1bc85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x475e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_123)
{
    // 1BC86 ; [.475F.0020.0002] 
    // DUPLOYAN AFFIX HIGH LINE

    uint32_t const cps[1] = { 0x1bc86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x475f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_124)
{
    // 1BC87 ; [.4760.0020.0002] 
    // DUPLOYAN AFFIX HIGH WAVE

    uint32_t const cps[1] = { 0x1bc87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4760), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_125)
{
    // 1BC88 ; [.4761.0020.0002] 
    // DUPLOYAN AFFIX HIGH VERTICAL

    uint32_t const cps[1] = { 0x1bc88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4761), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_126)
{
    // 1BC90 ; [.4762.0020.0002] 
    // DUPLOYAN AFFIX LOW ACUTE

    uint32_t const cps[1] = { 0x1bc90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4762), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_127)
{
    // 1BC91 ; [.4763.0020.0002] 
    // DUPLOYAN AFFIX LOW TIGHT ACUTE

    uint32_t const cps[1] = { 0x1bc91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4763), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_128)
{
    // 1BC92 ; [.4764.0020.0002] 
    // DUPLOYAN AFFIX LOW GRAVE

    uint32_t const cps[1] = { 0x1bc92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4764), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_129)
{
    // 1BC93 ; [.4765.0020.0002] 
    // DUPLOYAN AFFIX LOW LONG GRAVE

    uint32_t const cps[1] = { 0x1bc93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4765), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_130)
{
    // 1BC94 ; [.4766.0020.0002] 
    // DUPLOYAN AFFIX LOW DOT

    uint32_t const cps[1] = { 0x1bc94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4766), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_131)
{
    // 1BC95 ; [.4767.0020.0002] 
    // DUPLOYAN AFFIX LOW CIRCLE

    uint32_t const cps[1] = { 0x1bc95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4767), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_132)
{
    // 1BC96 ; [.4768.0020.0002] 
    // DUPLOYAN AFFIX LOW LINE

    uint32_t const cps[1] = { 0x1bc96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4768), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_133)
{
    // 1BC97 ; [.4769.0020.0002] 
    // DUPLOYAN AFFIX LOW WAVE

    uint32_t const cps[1] = { 0x1bc97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4769), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_134)
{
    // 1BC98 ; [.476A.0020.0002] 
    // DUPLOYAN AFFIX LOW VERTICAL

    uint32_t const cps[1] = { 0x1bc98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x476a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_135)
{
    // 1BC99 ; [.476B.0020.0002] 
    // DUPLOYAN AFFIX LOW ARROW

    uint32_t const cps[1] = { 0x1bc99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x476b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_136)
{
    // 1BC9C ; [*11DE.0020.0002] 
    // DUPLOYAN SIGN O WITH CROSS

    uint32_t const cps[1] = { 0x1bc9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x11de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_137)
{
    // 1BC9D ; [.0000.0033.0002] 
    // DUPLOYAN THICK LETTER SELECTOR

    uint32_t const cps[1] = { 0x1bc9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_138)
{
    // 1BC9E ; [.0000.0035.0002] 
    // DUPLOYAN DOUBLE MARK

    uint32_t const cps[1] = { 0x1bc9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_139)
{
    // 1BC9F ; [*028A.0020.0002] 
    // DUPLOYAN PUNCTUATION CHINOOK FULL STOP

    uint32_t const cps[1] = { 0x1bc9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_140)
{
    // 1BCA0 ; [.0000.0000.0000] 
    // SHORTHAND FORMAT LETTER OVERLAP

    uint32_t const cps[1] = { 0x1bca0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_141)
{
    // 1BCA1 ; [.0000.0000.0000] 
    // SHORTHAND FORMAT CONTINUING OVERLAP

    uint32_t const cps[1] = { 0x1bca1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_142)
{
    // 1BCA2 ; [.0000.0000.0000] 
    // SHORTHAND FORMAT DOWN STEP

    uint32_t const cps[1] = { 0x1bca2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_143)
{
    // 1BCA3 ; [.0000.0000.0000] 
    // SHORTHAND FORMAT UP STEP

    uint32_t const cps[1] = { 0x1bca3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_144)
{
    // 1D000 ; [*0FEE.0020.0002] 
    // BYZANTINE MUSICAL SYMBOL PSILI

    uint32_t const cps[1] = { 0x1d000 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xfee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_145)
{
    // 1D001 ; [*0FEF.0020.0002] 
    // BYZANTINE MUSICAL SYMBOL DASEIA

    uint32_t const cps[1] = { 0x1d001 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xfef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_146)
{
    // 1D002 ; [*0FF0.0020.0002] 
    // BYZANTINE MUSICAL SYMBOL PERISPOMENI

    uint32_t const cps[1] = { 0x1d002 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xff0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_147)
{
    // 1D003 ; [*0FF1.0020.0002] 
    // BYZANTINE MUSICAL SYMBOL OXEIA EKFONITIKON

    uint32_t const cps[1] = { 0x1d003 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xff1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_148)
{
    // 1D004 ; [*0FF2.0020.0002] 
    // BYZANTINE MUSICAL SYMBOL OXEIA DIPLI

    uint32_t const cps[1] = { 0x1d004 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xff2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_170_149)
{
    // 1D005 ; [*0FF3.0020.0002] 
    // BYZANTINE MUSICAL SYMBOL VAREIA EKFONITIKON

    uint32_t const cps[1] = { 0x1d005 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xff3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

