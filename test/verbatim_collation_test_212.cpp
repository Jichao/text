// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_212_000)
{
    uint32_t const cps[2] = { 0xAA08, 0x0061 };

    // AA08 0061;	
    // (ꨈ) CHAM LETTER GA	[3331 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA08 0061;	
    // (ꨈ) CHAM LETTER GA	[3331 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_001)
{
    uint32_t const cps[2] = { 0xAA08, 0x0041 };

    // AA08 0041;	
    // (ꨈ) CHAM LETTER GA	[3331 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA08 0041;	
    // (ꨈ) CHAM LETTER GA	[3331 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_002)
{
    uint32_t const cps[2] = { 0xAA08, 0x0062 };

    // AA08 0062;	
    // (ꨈ) CHAM LETTER GA	[3331 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA08 0062;	
    // (ꨈ) CHAM LETTER GA	[3331 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_003)
{
    uint32_t const cps[2] = { 0xAA09, 0x0021 };

    // AA09 0021;	
    // (ꨉ) CHAM LETTER GHA	[3332 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3332, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA09 0021;	
    // (ꨉ) CHAM LETTER GHA	[3332 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3332, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_004)
{
    uint32_t const cps[2] = { 0xAA09, 0x003F };

    // AA09 003F;	
    // (ꨉ) CHAM LETTER GHA	[3332 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3332, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA09 003F;	
    // (ꨉ) CHAM LETTER GHA	[3332 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3332, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_005)
{
    uint32_t const cps[2] = { 0xAA09, 0x0061 };

    // AA09 0061;	
    // (ꨉ) CHAM LETTER GHA	[3332 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA09 0061;	
    // (ꨉ) CHAM LETTER GHA	[3332 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_006)
{
    uint32_t const cps[2] = { 0xAA09, 0x0041 };

    // AA09 0041;	
    // (ꨉ) CHAM LETTER GHA	[3332 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA09 0041;	
    // (ꨉ) CHAM LETTER GHA	[3332 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_007)
{
    uint32_t const cps[2] = { 0xAA09, 0x0062 };

    // AA09 0062;	
    // (ꨉ) CHAM LETTER GHA	[3332 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3332, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA09 0062;	
    // (ꨉ) CHAM LETTER GHA	[3332 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3332, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_008)
{
    uint32_t const cps[2] = { 0xAA0A, 0x0021 };

    // AA0A 0021;	
    // (ꨊ) CHAM LETTER NGUE	[3333 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3333, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0A 0021;	
    // (ꨊ) CHAM LETTER NGUE	[3333 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3333, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_009)
{
    uint32_t const cps[2] = { 0xAA0A, 0x003F };

    // AA0A 003F;	
    // (ꨊ) CHAM LETTER NGUE	[3333 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3333, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0A 003F;	
    // (ꨊ) CHAM LETTER NGUE	[3333 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3333, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_010)
{
    uint32_t const cps[2] = { 0xAA0A, 0x0061 };

    // AA0A 0061;	
    // (ꨊ) CHAM LETTER NGUE	[3333 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0A 0061;	
    // (ꨊ) CHAM LETTER NGUE	[3333 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_011)
{
    uint32_t const cps[2] = { 0xAA0A, 0x0041 };

    // AA0A 0041;	
    // (ꨊ) CHAM LETTER NGUE	[3333 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0A 0041;	
    // (ꨊ) CHAM LETTER NGUE	[3333 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_012)
{
    uint32_t const cps[2] = { 0xAA0A, 0x0062 };

    // AA0A 0062;	
    // (ꨊ) CHAM LETTER NGUE	[3333 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3333, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0A 0062;	
    // (ꨊ) CHAM LETTER NGUE	[3333 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3333, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_013)
{
    uint32_t const cps[2] = { 0xAA0B, 0x0021 };

    // AA0B 0021;	
    // (ꨋ) CHAM LETTER NGA	[3334 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3334, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0B 0021;	
    // (ꨋ) CHAM LETTER NGA	[3334 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3334, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_014)
{
    uint32_t const cps[2] = { 0xAA0B, 0x003F };

    // AA0B 003F;	
    // (ꨋ) CHAM LETTER NGA	[3334 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3334, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0B 003F;	
    // (ꨋ) CHAM LETTER NGA	[3334 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3334, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_015)
{
    uint32_t const cps[2] = { 0xAA0B, 0x0061 };

    // AA0B 0061;	
    // (ꨋ) CHAM LETTER NGA	[3334 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0B 0061;	
    // (ꨋ) CHAM LETTER NGA	[3334 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_016)
{
    uint32_t const cps[2] = { 0xAA0B, 0x0041 };

    // AA0B 0041;	
    // (ꨋ) CHAM LETTER NGA	[3334 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0B 0041;	
    // (ꨋ) CHAM LETTER NGA	[3334 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_017)
{
    uint32_t const cps[2] = { 0xAA0B, 0x0062 };

    // AA0B 0062;	
    // (ꨋ) CHAM LETTER NGA	[3334 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0B 0062;	
    // (ꨋ) CHAM LETTER NGA	[3334 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_018)
{
    uint32_t const cps[2] = { 0xAA0C, 0x0021 };

    // AA0C 0021;	
    // (ꨌ) CHAM LETTER CHA	[3335 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3335, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0C 0021;	
    // (ꨌ) CHAM LETTER CHA	[3335 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3335, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_019)
{
    uint32_t const cps[2] = { 0xAA0C, 0x003F };

    // AA0C 003F;	
    // (ꨌ) CHAM LETTER CHA	[3335 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3335, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0C 003F;	
    // (ꨌ) CHAM LETTER CHA	[3335 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3335, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_020)
{
    uint32_t const cps[2] = { 0xAA0C, 0x0061 };

    // AA0C 0061;	
    // (ꨌ) CHAM LETTER CHA	[3335 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0C 0061;	
    // (ꨌ) CHAM LETTER CHA	[3335 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_021)
{
    uint32_t const cps[2] = { 0xAA0C, 0x0041 };

    // AA0C 0041;	
    // (ꨌ) CHAM LETTER CHA	[3335 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0C 0041;	
    // (ꨌ) CHAM LETTER CHA	[3335 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_022)
{
    uint32_t const cps[2] = { 0xAA0C, 0x0062 };

    // AA0C 0062;	
    // (ꨌ) CHAM LETTER CHA	[3335 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3335, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0C 0062;	
    // (ꨌ) CHAM LETTER CHA	[3335 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3335, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_023)
{
    uint32_t const cps[2] = { 0xAA0D, 0x0021 };

    // AA0D 0021;	
    // (ꨍ) CHAM LETTER CHHA	[3336 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3336, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0D 0021;	
    // (ꨍ) CHAM LETTER CHHA	[3336 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3336, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_024)
{
    uint32_t const cps[2] = { 0xAA0D, 0x003F };

    // AA0D 003F;	
    // (ꨍ) CHAM LETTER CHHA	[3336 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3336, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0D 003F;	
    // (ꨍ) CHAM LETTER CHHA	[3336 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3336, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_025)
{
    uint32_t const cps[2] = { 0xAA0D, 0x0061 };

    // AA0D 0061;	
    // (ꨍ) CHAM LETTER CHHA	[3336 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0D 0061;	
    // (ꨍ) CHAM LETTER CHHA	[3336 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_026)
{
    uint32_t const cps[2] = { 0xAA0D, 0x0041 };

    // AA0D 0041;	
    // (ꨍ) CHAM LETTER CHHA	[3336 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0D 0041;	
    // (ꨍ) CHAM LETTER CHHA	[3336 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_027)
{
    uint32_t const cps[2] = { 0xAA0D, 0x0062 };

    // AA0D 0062;	
    // (ꨍ) CHAM LETTER CHHA	[3336 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0D 0062;	
    // (ꨍ) CHAM LETTER CHHA	[3336 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_028)
{
    uint32_t const cps[2] = { 0xAA0E, 0x0021 };

    // AA0E 0021;	
    // (ꨎ) CHAM LETTER JA	[3337 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3337, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0E 0021;	
    // (ꨎ) CHAM LETTER JA	[3337 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3337, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_029)
{
    uint32_t const cps[2] = { 0xAA0E, 0x003F };

    // AA0E 003F;	
    // (ꨎ) CHAM LETTER JA	[3337 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3337, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0E 003F;	
    // (ꨎ) CHAM LETTER JA	[3337 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3337, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_030)
{
    uint32_t const cps[2] = { 0xAA0E, 0x0061 };

    // AA0E 0061;	
    // (ꨎ) CHAM LETTER JA	[3337 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0E 0061;	
    // (ꨎ) CHAM LETTER JA	[3337 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_031)
{
    uint32_t const cps[2] = { 0xAA0E, 0x0041 };

    // AA0E 0041;	
    // (ꨎ) CHAM LETTER JA	[3337 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0E 0041;	
    // (ꨎ) CHAM LETTER JA	[3337 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_032)
{
    uint32_t const cps[2] = { 0xAA0E, 0x0062 };

    // AA0E 0062;	
    // (ꨎ) CHAM LETTER JA	[3337 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3337, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0E 0062;	
    // (ꨎ) CHAM LETTER JA	[3337 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3337, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_033)
{
    uint32_t const cps[2] = { 0xAA0F, 0x0021 };

    // AA0F 0021;	
    // (ꨏ) CHAM LETTER JHA	[3338 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3338, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0F 0021;	
    // (ꨏ) CHAM LETTER JHA	[3338 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3338, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_034)
{
    uint32_t const cps[2] = { 0xAA0F, 0x003F };

    // AA0F 003F;	
    // (ꨏ) CHAM LETTER JHA	[3338 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3338, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0F 003F;	
    // (ꨏ) CHAM LETTER JHA	[3338 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3338, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_035)
{
    uint32_t const cps[2] = { 0xAA0F, 0x0061 };

    // AA0F 0061;	
    // (ꨏ) CHAM LETTER JHA	[3338 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0F 0061;	
    // (ꨏ) CHAM LETTER JHA	[3338 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_036)
{
    uint32_t const cps[2] = { 0xAA0F, 0x0041 };

    // AA0F 0041;	
    // (ꨏ) CHAM LETTER JHA	[3338 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0F 0041;	
    // (ꨏ) CHAM LETTER JHA	[3338 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_037)
{
    uint32_t const cps[2] = { 0xAA0F, 0x0062 };

    // AA0F 0062;	
    // (ꨏ) CHAM LETTER JHA	[3338 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA0F 0062;	
    // (ꨏ) CHAM LETTER JHA	[3338 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_038)
{
    uint32_t const cps[2] = { 0xAA10, 0x0021 };

    // AA10 0021;	
    // (ꨐ) CHAM LETTER NHUE	[3339 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3339, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA10 0021;	
    // (ꨐ) CHAM LETTER NHUE	[3339 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3339, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_039)
{
    uint32_t const cps[2] = { 0xAA10, 0x003F };

    // AA10 003F;	
    // (ꨐ) CHAM LETTER NHUE	[3339 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3339, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA10 003F;	
    // (ꨐ) CHAM LETTER NHUE	[3339 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3339, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_040)
{
    uint32_t const cps[2] = { 0xAA10, 0x0061 };

    // AA10 0061;	
    // (ꨐ) CHAM LETTER NHUE	[3339 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA10 0061;	
    // (ꨐ) CHAM LETTER NHUE	[3339 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_041)
{
    uint32_t const cps[2] = { 0xAA10, 0x0041 };

    // AA10 0041;	
    // (ꨐ) CHAM LETTER NHUE	[3339 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA10 0041;	
    // (ꨐ) CHAM LETTER NHUE	[3339 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_042)
{
    uint32_t const cps[2] = { 0xAA10, 0x0062 };

    // AA10 0062;	
    // (ꨐ) CHAM LETTER NHUE	[3339 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3339, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA10 0062;	
    // (ꨐ) CHAM LETTER NHUE	[3339 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3339, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_043)
{
    uint32_t const cps[2] = { 0xAA11, 0x0021 };

    // AA11 0021;	
    // (ꨑ) CHAM LETTER NHA	[333A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA11 0021;	
    // (ꨑ) CHAM LETTER NHA	[333A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x333A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_044)
{
    uint32_t const cps[2] = { 0xAA11, 0x003F };

    // AA11 003F;	
    // (ꨑ) CHAM LETTER NHA	[333A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA11 003F;	
    // (ꨑ) CHAM LETTER NHA	[333A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x333A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_045)
{
    uint32_t const cps[2] = { 0xAA11, 0x0061 };

    // AA11 0061;	
    // (ꨑ) CHAM LETTER NHA	[333A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA11 0061;	
    // (ꨑ) CHAM LETTER NHA	[333A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_046)
{
    uint32_t const cps[2] = { 0xAA11, 0x0041 };

    // AA11 0041;	
    // (ꨑ) CHAM LETTER NHA	[333A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x333A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA11 0041;	
    // (ꨑ) CHAM LETTER NHA	[333A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_047)
{
    uint32_t const cps[2] = { 0xAA11, 0x0062 };

    // AA11 0062;	
    // (ꨑ) CHAM LETTER NHA	[333A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA11 0062;	
    // (ꨑ) CHAM LETTER NHA	[333A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_048)
{
    uint32_t const cps[2] = { 0xAA12, 0x0021 };

    // AA12 0021;	
    // (ꨒ) CHAM LETTER NHJA	[333B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA12 0021;	
    // (ꨒ) CHAM LETTER NHJA	[333B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x333B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_049)
{
    uint32_t const cps[2] = { 0xAA12, 0x003F };

    // AA12 003F;	
    // (ꨒ) CHAM LETTER NHJA	[333B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA12 003F;	
    // (ꨒ) CHAM LETTER NHJA	[333B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x333B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_050)
{
    uint32_t const cps[2] = { 0xAA12, 0x0061 };

    // AA12 0061;	
    // (ꨒ) CHAM LETTER NHJA	[333B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA12 0061;	
    // (ꨒ) CHAM LETTER NHJA	[333B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_051)
{
    uint32_t const cps[2] = { 0xAA12, 0x0041 };

    // AA12 0041;	
    // (ꨒ) CHAM LETTER NHJA	[333B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x333B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA12 0041;	
    // (ꨒ) CHAM LETTER NHJA	[333B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_052)
{
    uint32_t const cps[2] = { 0xAA12, 0x0062 };

    // AA12 0062;	
    // (ꨒ) CHAM LETTER NHJA	[333B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA12 0062;	
    // (ꨒ) CHAM LETTER NHJA	[333B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_053)
{
    uint32_t const cps[2] = { 0xAA13, 0x0021 };

    // AA13 0021;	
    // (ꨓ) CHAM LETTER TA	[333C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA13 0021;	
    // (ꨓ) CHAM LETTER TA	[333C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x333C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_054)
{
    uint32_t const cps[2] = { 0xAA13, 0x003F };

    // AA13 003F;	
    // (ꨓ) CHAM LETTER TA	[333C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA13 003F;	
    // (ꨓ) CHAM LETTER TA	[333C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x333C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_055)
{
    uint32_t const cps[2] = { 0xAA13, 0x0061 };

    // AA13 0061;	
    // (ꨓ) CHAM LETTER TA	[333C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA13 0061;	
    // (ꨓ) CHAM LETTER TA	[333C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_056)
{
    uint32_t const cps[2] = { 0xAA13, 0x0041 };

    // AA13 0041;	
    // (ꨓ) CHAM LETTER TA	[333C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x333C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA13 0041;	
    // (ꨓ) CHAM LETTER TA	[333C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_057)
{
    uint32_t const cps[2] = { 0xAA13, 0x0062 };

    // AA13 0062;	
    // (ꨓ) CHAM LETTER TA	[333C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA13 0062;	
    // (ꨓ) CHAM LETTER TA	[333C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_058)
{
    uint32_t const cps[2] = { 0xAA14, 0x0021 };

    // AA14 0021;	
    // (ꨔ) CHAM LETTER THA	[333D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA14 0021;	
    // (ꨔ) CHAM LETTER THA	[333D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x333D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_059)
{
    uint32_t const cps[2] = { 0xAA14, 0x003F };

    // AA14 003F;	
    // (ꨔ) CHAM LETTER THA	[333D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA14 003F;	
    // (ꨔ) CHAM LETTER THA	[333D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x333D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_060)
{
    uint32_t const cps[2] = { 0xAA14, 0x0061 };

    // AA14 0061;	
    // (ꨔ) CHAM LETTER THA	[333D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA14 0061;	
    // (ꨔ) CHAM LETTER THA	[333D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_061)
{
    uint32_t const cps[2] = { 0xAA14, 0x0041 };

    // AA14 0041;	
    // (ꨔ) CHAM LETTER THA	[333D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x333D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA14 0041;	
    // (ꨔ) CHAM LETTER THA	[333D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_062)
{
    uint32_t const cps[2] = { 0xAA14, 0x0062 };

    // AA14 0062;	
    // (ꨔ) CHAM LETTER THA	[333D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA14 0062;	
    // (ꨔ) CHAM LETTER THA	[333D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_063)
{
    uint32_t const cps[2] = { 0xAA15, 0x0021 };

    // AA15 0021;	
    // (ꨕ) CHAM LETTER DA	[333E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA15 0021;	
    // (ꨕ) CHAM LETTER DA	[333E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x333E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_064)
{
    uint32_t const cps[2] = { 0xAA15, 0x003F };

    // AA15 003F;	
    // (ꨕ) CHAM LETTER DA	[333E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA15 003F;	
    // (ꨕ) CHAM LETTER DA	[333E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x333E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_065)
{
    uint32_t const cps[2] = { 0xAA15, 0x0061 };

    // AA15 0061;	
    // (ꨕ) CHAM LETTER DA	[333E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA15 0061;	
    // (ꨕ) CHAM LETTER DA	[333E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_066)
{
    uint32_t const cps[2] = { 0xAA15, 0x0041 };

    // AA15 0041;	
    // (ꨕ) CHAM LETTER DA	[333E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x333E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA15 0041;	
    // (ꨕ) CHAM LETTER DA	[333E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_067)
{
    uint32_t const cps[2] = { 0xAA15, 0x0062 };

    // AA15 0062;	
    // (ꨕ) CHAM LETTER DA	[333E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA15 0062;	
    // (ꨕ) CHAM LETTER DA	[333E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_068)
{
    uint32_t const cps[2] = { 0xAA16, 0x0021 };

    // AA16 0021;	
    // (ꨖ) CHAM LETTER DHA	[333F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA16 0021;	
    // (ꨖ) CHAM LETTER DHA	[333F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x333F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_069)
{
    uint32_t const cps[2] = { 0xAA16, 0x003F };

    // AA16 003F;	
    // (ꨖ) CHAM LETTER DHA	[333F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA16 003F;	
    // (ꨖ) CHAM LETTER DHA	[333F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x333F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_070)
{
    uint32_t const cps[2] = { 0xAA16, 0x0061 };

    // AA16 0061;	
    // (ꨖ) CHAM LETTER DHA	[333F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA16 0061;	
    // (ꨖ) CHAM LETTER DHA	[333F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_071)
{
    uint32_t const cps[2] = { 0xAA16, 0x0041 };

    // AA16 0041;	
    // (ꨖ) CHAM LETTER DHA	[333F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x333F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA16 0041;	
    // (ꨖ) CHAM LETTER DHA	[333F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_072)
{
    uint32_t const cps[2] = { 0xAA16, 0x0062 };

    // AA16 0062;	
    // (ꨖ) CHAM LETTER DHA	[333F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x333F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA16 0062;	
    // (ꨖ) CHAM LETTER DHA	[333F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x333F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_073)
{
    uint32_t const cps[2] = { 0xAA17, 0x0021 };

    // AA17 0021;	
    // (ꨗ) CHAM LETTER NUE	[3340 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3340, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA17 0021;	
    // (ꨗ) CHAM LETTER NUE	[3340 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3340, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_074)
{
    uint32_t const cps[2] = { 0xAA17, 0x003F };

    // AA17 003F;	
    // (ꨗ) CHAM LETTER NUE	[3340 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3340, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA17 003F;	
    // (ꨗ) CHAM LETTER NUE	[3340 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3340, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_075)
{
    uint32_t const cps[2] = { 0xAA17, 0x0061 };

    // AA17 0061;	
    // (ꨗ) CHAM LETTER NUE	[3340 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA17 0061;	
    // (ꨗ) CHAM LETTER NUE	[3340 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_076)
{
    uint32_t const cps[2] = { 0xAA17, 0x0041 };

    // AA17 0041;	
    // (ꨗ) CHAM LETTER NUE	[3340 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA17 0041;	
    // (ꨗ) CHAM LETTER NUE	[3340 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_077)
{
    uint32_t const cps[2] = { 0xAA17, 0x0062 };

    // AA17 0062;	
    // (ꨗ) CHAM LETTER NUE	[3340 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3340, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA17 0062;	
    // (ꨗ) CHAM LETTER NUE	[3340 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3340, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_078)
{
    uint32_t const cps[2] = { 0xAA18, 0x0021 };

    // AA18 0021;	
    // (ꨘ) CHAM LETTER NA	[3341 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA18 0021;	
    // (ꨘ) CHAM LETTER NA	[3341 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3341, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_079)
{
    uint32_t const cps[2] = { 0xAA18, 0x003F };

    // AA18 003F;	
    // (ꨘ) CHAM LETTER NA	[3341 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA18 003F;	
    // (ꨘ) CHAM LETTER NA	[3341 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3341, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_080)
{
    uint32_t const cps[2] = { 0xAA18, 0x0061 };

    // AA18 0061;	
    // (ꨘ) CHAM LETTER NA	[3341 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA18 0061;	
    // (ꨘ) CHAM LETTER NA	[3341 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_081)
{
    uint32_t const cps[2] = { 0xAA18, 0x0041 };

    // AA18 0041;	
    // (ꨘ) CHAM LETTER NA	[3341 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA18 0041;	
    // (ꨘ) CHAM LETTER NA	[3341 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_082)
{
    uint32_t const cps[2] = { 0xAA18, 0x0062 };

    // AA18 0062;	
    // (ꨘ) CHAM LETTER NA	[3341 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA18 0062;	
    // (ꨘ) CHAM LETTER NA	[3341 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_083)
{
    uint32_t const cps[2] = { 0xAA19, 0x0021 };

    // AA19 0021;	
    // (ꨙ) CHAM LETTER DDA	[3342 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3342, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA19 0021;	
    // (ꨙ) CHAM LETTER DDA	[3342 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3342, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_084)
{
    uint32_t const cps[2] = { 0xAA19, 0x003F };

    // AA19 003F;	
    // (ꨙ) CHAM LETTER DDA	[3342 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3342, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA19 003F;	
    // (ꨙ) CHAM LETTER DDA	[3342 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3342, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_085)
{
    uint32_t const cps[2] = { 0xAA19, 0x0061 };

    // AA19 0061;	
    // (ꨙ) CHAM LETTER DDA	[3342 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA19 0061;	
    // (ꨙ) CHAM LETTER DDA	[3342 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_086)
{
    uint32_t const cps[2] = { 0xAA19, 0x0041 };

    // AA19 0041;	
    // (ꨙ) CHAM LETTER DDA	[3342 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA19 0041;	
    // (ꨙ) CHAM LETTER DDA	[3342 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_087)
{
    uint32_t const cps[2] = { 0xAA19, 0x0062 };

    // AA19 0062;	
    // (ꨙ) CHAM LETTER DDA	[3342 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3342, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA19 0062;	
    // (ꨙ) CHAM LETTER DDA	[3342 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3342, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_088)
{
    uint32_t const cps[2] = { 0xAA1A, 0x0021 };

    // AA1A 0021;	
    // (ꨚ) CHAM LETTER PA	[3343 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3343, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1A 0021;	
    // (ꨚ) CHAM LETTER PA	[3343 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3343, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_089)
{
    uint32_t const cps[2] = { 0xAA1A, 0x003F };

    // AA1A 003F;	
    // (ꨚ) CHAM LETTER PA	[3343 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3343, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1A 003F;	
    // (ꨚ) CHAM LETTER PA	[3343 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3343, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_090)
{
    uint32_t const cps[2] = { 0xAA1A, 0x0061 };

    // AA1A 0061;	
    // (ꨚ) CHAM LETTER PA	[3343 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1A 0061;	
    // (ꨚ) CHAM LETTER PA	[3343 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_091)
{
    uint32_t const cps[2] = { 0xAA1A, 0x0041 };

    // AA1A 0041;	
    // (ꨚ) CHAM LETTER PA	[3343 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1A 0041;	
    // (ꨚ) CHAM LETTER PA	[3343 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_092)
{
    uint32_t const cps[2] = { 0xAA1A, 0x0062 };

    // AA1A 0062;	
    // (ꨚ) CHAM LETTER PA	[3343 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3343, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1A 0062;	
    // (ꨚ) CHAM LETTER PA	[3343 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3343, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_093)
{
    uint32_t const cps[2] = { 0xAA1B, 0x0021 };

    // AA1B 0021;	
    // (ꨛ) CHAM LETTER PPA	[3344 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3344, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1B 0021;	
    // (ꨛ) CHAM LETTER PPA	[3344 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3344, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_094)
{
    uint32_t const cps[2] = { 0xAA1B, 0x003F };

    // AA1B 003F;	
    // (ꨛ) CHAM LETTER PPA	[3344 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3344, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1B 003F;	
    // (ꨛ) CHAM LETTER PPA	[3344 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3344, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_095)
{
    uint32_t const cps[2] = { 0xAA1B, 0x0061 };

    // AA1B 0061;	
    // (ꨛ) CHAM LETTER PPA	[3344 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1B 0061;	
    // (ꨛ) CHAM LETTER PPA	[3344 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_096)
{
    uint32_t const cps[2] = { 0xAA1B, 0x0041 };

    // AA1B 0041;	
    // (ꨛ) CHAM LETTER PPA	[3344 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1B 0041;	
    // (ꨛ) CHAM LETTER PPA	[3344 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_097)
{
    uint32_t const cps[2] = { 0xAA1B, 0x0062 };

    // AA1B 0062;	
    // (ꨛ) CHAM LETTER PPA	[3344 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1B 0062;	
    // (ꨛ) CHAM LETTER PPA	[3344 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_098)
{
    uint32_t const cps[2] = { 0xAA1C, 0x0021 };

    // AA1C 0021;	
    // (ꨜ) CHAM LETTER PHA	[3345 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3345, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1C 0021;	
    // (ꨜ) CHAM LETTER PHA	[3345 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3345, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_099)
{
    uint32_t const cps[2] = { 0xAA1C, 0x003F };

    // AA1C 003F;	
    // (ꨜ) CHAM LETTER PHA	[3345 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3345, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1C 003F;	
    // (ꨜ) CHAM LETTER PHA	[3345 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3345, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_100)
{
    uint32_t const cps[2] = { 0xAA1C, 0x0061 };

    // AA1C 0061;	
    // (ꨜ) CHAM LETTER PHA	[3345 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1C 0061;	
    // (ꨜ) CHAM LETTER PHA	[3345 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_101)
{
    uint32_t const cps[2] = { 0xAA1C, 0x0041 };

    // AA1C 0041;	
    // (ꨜ) CHAM LETTER PHA	[3345 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1C 0041;	
    // (ꨜ) CHAM LETTER PHA	[3345 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_102)
{
    uint32_t const cps[2] = { 0xAA1C, 0x0062 };

    // AA1C 0062;	
    // (ꨜ) CHAM LETTER PHA	[3345 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1C 0062;	
    // (ꨜ) CHAM LETTER PHA	[3345 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_103)
{
    uint32_t const cps[2] = { 0xAA1D, 0x0021 };

    // AA1D 0021;	
    // (ꨝ) CHAM LETTER BA	[3346 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3346, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1D 0021;	
    // (ꨝ) CHAM LETTER BA	[3346 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3346, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_104)
{
    uint32_t const cps[2] = { 0xAA1D, 0x003F };

    // AA1D 003F;	
    // (ꨝ) CHAM LETTER BA	[3346 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3346, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1D 003F;	
    // (ꨝ) CHAM LETTER BA	[3346 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3346, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_105)
{
    uint32_t const cps[2] = { 0xAA1D, 0x0061 };

    // AA1D 0061;	
    // (ꨝ) CHAM LETTER BA	[3346 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1D 0061;	
    // (ꨝ) CHAM LETTER BA	[3346 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_106)
{
    uint32_t const cps[2] = { 0xAA1D, 0x0041 };

    // AA1D 0041;	
    // (ꨝ) CHAM LETTER BA	[3346 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1D 0041;	
    // (ꨝ) CHAM LETTER BA	[3346 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_107)
{
    uint32_t const cps[2] = { 0xAA1D, 0x0062 };

    // AA1D 0062;	
    // (ꨝ) CHAM LETTER BA	[3346 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3346, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1D 0062;	
    // (ꨝ) CHAM LETTER BA	[3346 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3346, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_108)
{
    uint32_t const cps[2] = { 0xAA1E, 0x0021 };

    // AA1E 0021;	
    // (ꨞ) CHAM LETTER BHA	[3347 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3347, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1E 0021;	
    // (ꨞ) CHAM LETTER BHA	[3347 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3347, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_109)
{
    uint32_t const cps[2] = { 0xAA1E, 0x003F };

    // AA1E 003F;	
    // (ꨞ) CHAM LETTER BHA	[3347 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3347, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1E 003F;	
    // (ꨞ) CHAM LETTER BHA	[3347 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3347, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_110)
{
    uint32_t const cps[2] = { 0xAA1E, 0x0061 };

    // AA1E 0061;	
    // (ꨞ) CHAM LETTER BHA	[3347 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1E 0061;	
    // (ꨞ) CHAM LETTER BHA	[3347 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_111)
{
    uint32_t const cps[2] = { 0xAA1E, 0x0041 };

    // AA1E 0041;	
    // (ꨞ) CHAM LETTER BHA	[3347 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1E 0041;	
    // (ꨞ) CHAM LETTER BHA	[3347 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_112)
{
    uint32_t const cps[2] = { 0xAA1E, 0x0062 };

    // AA1E 0062;	
    // (ꨞ) CHAM LETTER BHA	[3347 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3347, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1E 0062;	
    // (ꨞ) CHAM LETTER BHA	[3347 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3347, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_113)
{
    uint32_t const cps[2] = { 0xAA1F, 0x0021 };

    // AA1F 0021;	
    // (ꨟ) CHAM LETTER MUE	[3348 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3348, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1F 0021;	
    // (ꨟ) CHAM LETTER MUE	[3348 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3348, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_114)
{
    uint32_t const cps[2] = { 0xAA1F, 0x003F };

    // AA1F 003F;	
    // (ꨟ) CHAM LETTER MUE	[3348 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3348, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1F 003F;	
    // (ꨟ) CHAM LETTER MUE	[3348 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3348, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_115)
{
    uint32_t const cps[2] = { 0xAA1F, 0x0061 };

    // AA1F 0061;	
    // (ꨟ) CHAM LETTER MUE	[3348 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1F 0061;	
    // (ꨟ) CHAM LETTER MUE	[3348 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_116)
{
    uint32_t const cps[2] = { 0xAA1F, 0x0041 };

    // AA1F 0041;	
    // (ꨟ) CHAM LETTER MUE	[3348 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1F 0041;	
    // (ꨟ) CHAM LETTER MUE	[3348 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_117)
{
    uint32_t const cps[2] = { 0xAA1F, 0x0062 };

    // AA1F 0062;	
    // (ꨟ) CHAM LETTER MUE	[3348 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3348, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA1F 0062;	
    // (ꨟ) CHAM LETTER MUE	[3348 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3348, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_118)
{
    uint32_t const cps[2] = { 0xAA20, 0x0021 };

    // AA20 0021;	
    // (ꨠ) CHAM LETTER MA	[3349 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3349, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA20 0021;	
    // (ꨠ) CHAM LETTER MA	[3349 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3349, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_119)
{
    uint32_t const cps[2] = { 0xAA20, 0x003F };

    // AA20 003F;	
    // (ꨠ) CHAM LETTER MA	[3349 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3349, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA20 003F;	
    // (ꨠ) CHAM LETTER MA	[3349 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3349, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_120)
{
    uint32_t const cps[2] = { 0xAA20, 0x0061 };

    // AA20 0061;	
    // (ꨠ) CHAM LETTER MA	[3349 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA20 0061;	
    // (ꨠ) CHAM LETTER MA	[3349 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_121)
{
    uint32_t const cps[2] = { 0xAA20, 0x0041 };

    // AA20 0041;	
    // (ꨠ) CHAM LETTER MA	[3349 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA20 0041;	
    // (ꨠ) CHAM LETTER MA	[3349 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_122)
{
    uint32_t const cps[2] = { 0xAA20, 0x0062 };

    // AA20 0062;	
    // (ꨠ) CHAM LETTER MA	[3349 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA20 0062;	
    // (ꨠ) CHAM LETTER MA	[3349 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_123)
{
    uint32_t const cps[2] = { 0xAA21, 0x0021 };

    // AA21 0021;	
    // (ꨡ) CHAM LETTER BBA	[334A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA21 0021;	
    // (ꨡ) CHAM LETTER BBA	[334A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x334A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_124)
{
    uint32_t const cps[2] = { 0xAA21, 0x003F };

    // AA21 003F;	
    // (ꨡ) CHAM LETTER BBA	[334A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA21 003F;	
    // (ꨡ) CHAM LETTER BBA	[334A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x334A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_125)
{
    uint32_t const cps[2] = { 0xAA21, 0x0061 };

    // AA21 0061;	
    // (ꨡ) CHAM LETTER BBA	[334A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA21 0061;	
    // (ꨡ) CHAM LETTER BBA	[334A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_126)
{
    uint32_t const cps[2] = { 0xAA21, 0x0041 };

    // AA21 0041;	
    // (ꨡ) CHAM LETTER BBA	[334A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x334A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA21 0041;	
    // (ꨡ) CHAM LETTER BBA	[334A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_127)
{
    uint32_t const cps[2] = { 0xAA21, 0x0062 };

    // AA21 0062;	
    // (ꨡ) CHAM LETTER BBA	[334A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA21 0062;	
    // (ꨡ) CHAM LETTER BBA	[334A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_128)
{
    uint32_t const cps[2] = { 0xAA22, 0x0021 };

    // AA22 0021;	
    // (ꨢ) CHAM LETTER YA	[334B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA22 0021;	
    // (ꨢ) CHAM LETTER YA	[334B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x334B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_129)
{
    uint32_t const cps[2] = { 0xAA22, 0x003F };

    // AA22 003F;	
    // (ꨢ) CHAM LETTER YA	[334B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA22 003F;	
    // (ꨢ) CHAM LETTER YA	[334B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x334B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_130)
{
    uint32_t const cps[2] = { 0xAA22, 0x0061 };

    // AA22 0061;	
    // (ꨢ) CHAM LETTER YA	[334B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA22 0061;	
    // (ꨢ) CHAM LETTER YA	[334B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_131)
{
    uint32_t const cps[2] = { 0xAA22, 0x0041 };

    // AA22 0041;	
    // (ꨢ) CHAM LETTER YA	[334B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x334B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA22 0041;	
    // (ꨢ) CHAM LETTER YA	[334B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_132)
{
    uint32_t const cps[2] = { 0xAA22, 0x0062 };

    // AA22 0062;	
    // (ꨢ) CHAM LETTER YA	[334B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA22 0062;	
    // (ꨢ) CHAM LETTER YA	[334B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_133)
{
    uint32_t const cps[2] = { 0xAA23, 0x0021 };

    // AA23 0021;	
    // (ꨣ) CHAM LETTER RA	[334C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA23 0021;	
    // (ꨣ) CHAM LETTER RA	[334C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x334C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_134)
{
    uint32_t const cps[2] = { 0xAA23, 0x003F };

    // AA23 003F;	
    // (ꨣ) CHAM LETTER RA	[334C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA23 003F;	
    // (ꨣ) CHAM LETTER RA	[334C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x334C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_135)
{
    uint32_t const cps[2] = { 0xAA23, 0x0061 };

    // AA23 0061;	
    // (ꨣ) CHAM LETTER RA	[334C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA23 0061;	
    // (ꨣ) CHAM LETTER RA	[334C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_136)
{
    uint32_t const cps[2] = { 0xAA23, 0x0041 };

    // AA23 0041;	
    // (ꨣ) CHAM LETTER RA	[334C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x334C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA23 0041;	
    // (ꨣ) CHAM LETTER RA	[334C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_137)
{
    uint32_t const cps[2] = { 0xAA23, 0x0062 };

    // AA23 0062;	
    // (ꨣ) CHAM LETTER RA	[334C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA23 0062;	
    // (ꨣ) CHAM LETTER RA	[334C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_138)
{
    uint32_t const cps[2] = { 0xAA24, 0x0021 };

    // AA24 0021;	
    // (ꨤ) CHAM LETTER LA	[334D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA24 0021;	
    // (ꨤ) CHAM LETTER LA	[334D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x334D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_139)
{
    uint32_t const cps[2] = { 0xAA24, 0x003F };

    // AA24 003F;	
    // (ꨤ) CHAM LETTER LA	[334D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA24 003F;	
    // (ꨤ) CHAM LETTER LA	[334D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x334D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_140)
{
    uint32_t const cps[2] = { 0xAA24, 0x0061 };

    // AA24 0061;	
    // (ꨤ) CHAM LETTER LA	[334D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA24 0061;	
    // (ꨤ) CHAM LETTER LA	[334D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_141)
{
    uint32_t const cps[2] = { 0xAA24, 0x0041 };

    // AA24 0041;	
    // (ꨤ) CHAM LETTER LA	[334D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x334D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA24 0041;	
    // (ꨤ) CHAM LETTER LA	[334D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_142)
{
    uint32_t const cps[2] = { 0xAA24, 0x0062 };

    // AA24 0062;	
    // (ꨤ) CHAM LETTER LA	[334D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA24 0062;	
    // (ꨤ) CHAM LETTER LA	[334D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_143)
{
    uint32_t const cps[2] = { 0xAA25, 0x0021 };

    // AA25 0021;	
    // (ꨥ) CHAM LETTER VA	[334E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA25 0021;	
    // (ꨥ) CHAM LETTER VA	[334E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x334E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_144)
{
    uint32_t const cps[2] = { 0xAA25, 0x003F };

    // AA25 003F;	
    // (ꨥ) CHAM LETTER VA	[334E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA25 003F;	
    // (ꨥ) CHAM LETTER VA	[334E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x334E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_145)
{
    uint32_t const cps[2] = { 0xAA25, 0x0061 };

    // AA25 0061;	
    // (ꨥ) CHAM LETTER VA	[334E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA25 0061;	
    // (ꨥ) CHAM LETTER VA	[334E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_146)
{
    uint32_t const cps[2] = { 0xAA25, 0x0041 };

    // AA25 0041;	
    // (ꨥ) CHAM LETTER VA	[334E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x334E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA25 0041;	
    // (ꨥ) CHAM LETTER VA	[334E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_147)
{
    uint32_t const cps[2] = { 0xAA25, 0x0062 };

    // AA25 0062;	
    // (ꨥ) CHAM LETTER VA	[334E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA25 0062;	
    // (ꨥ) CHAM LETTER VA	[334E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_148)
{
    uint32_t const cps[2] = { 0xAA26, 0x0021 };

    // AA26 0021;	
    // (ꨦ) CHAM LETTER SSA	[334F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA26 0021;	
    // (ꨦ) CHAM LETTER SSA	[334F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x334F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_149)
{
    uint32_t const cps[2] = { 0xAA26, 0x003F };

    // AA26 003F;	
    // (ꨦ) CHAM LETTER SSA	[334F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA26 003F;	
    // (ꨦ) CHAM LETTER SSA	[334F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x334F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_150)
{
    uint32_t const cps[2] = { 0xAA26, 0x0061 };

    // AA26 0061;	
    // (ꨦ) CHAM LETTER SSA	[334F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA26 0061;	
    // (ꨦ) CHAM LETTER SSA	[334F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_151)
{
    uint32_t const cps[2] = { 0xAA26, 0x0041 };

    // AA26 0041;	
    // (ꨦ) CHAM LETTER SSA	[334F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x334F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA26 0041;	
    // (ꨦ) CHAM LETTER SSA	[334F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_152)
{
    uint32_t const cps[2] = { 0xAA26, 0x0062 };

    // AA26 0062;	
    // (ꨦ) CHAM LETTER SSA	[334F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x334F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA26 0062;	
    // (ꨦ) CHAM LETTER SSA	[334F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x334F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_153)
{
    uint32_t const cps[2] = { 0xAA27, 0x0021 };

    // AA27 0021;	
    // (ꨧ) CHAM LETTER SA	[3350 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3350, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA27 0021;	
    // (ꨧ) CHAM LETTER SA	[3350 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3350, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_154)
{
    uint32_t const cps[2] = { 0xAA27, 0x003F };

    // AA27 003F;	
    // (ꨧ) CHAM LETTER SA	[3350 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3350, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA27 003F;	
    // (ꨧ) CHAM LETTER SA	[3350 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3350, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_155)
{
    uint32_t const cps[2] = { 0xAA27, 0x0061 };

    // AA27 0061;	
    // (ꨧ) CHAM LETTER SA	[3350 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA27 0061;	
    // (ꨧ) CHAM LETTER SA	[3350 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_156)
{
    uint32_t const cps[2] = { 0xAA27, 0x0041 };

    // AA27 0041;	
    // (ꨧ) CHAM LETTER SA	[3350 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA27 0041;	
    // (ꨧ) CHAM LETTER SA	[3350 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_157)
{
    uint32_t const cps[2] = { 0xAA27, 0x0062 };

    // AA27 0062;	
    // (ꨧ) CHAM LETTER SA	[3350 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA27 0062;	
    // (ꨧ) CHAM LETTER SA	[3350 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_158)
{
    uint32_t const cps[2] = { 0xAA28, 0x0021 };

    // AA28 0021;	
    // (ꨨ) CHAM LETTER HA	[3351 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA28 0021;	
    // (ꨨ) CHAM LETTER HA	[3351 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3351, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_159)
{
    uint32_t const cps[2] = { 0xAA28, 0x003F };

    // AA28 003F;	
    // (ꨨ) CHAM LETTER HA	[3351 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA28 003F;	
    // (ꨨ) CHAM LETTER HA	[3351 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3351, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_160)
{
    uint32_t const cps[2] = { 0xAA28, 0x0061 };

    // AA28 0061;	
    // (ꨨ) CHAM LETTER HA	[3351 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA28 0061;	
    // (ꨨ) CHAM LETTER HA	[3351 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_161)
{
    uint32_t const cps[2] = { 0xAA28, 0x0041 };

    // AA28 0041;	
    // (ꨨ) CHAM LETTER HA	[3351 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA28 0041;	
    // (ꨨ) CHAM LETTER HA	[3351 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_162)
{
    uint32_t const cps[2] = { 0xAA28, 0x0062 };

    // AA28 0062;	
    // (ꨨ) CHAM LETTER HA	[3351 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA28 0062;	
    // (ꨨ) CHAM LETTER HA	[3351 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_163)
{
    uint32_t const cps[2] = { 0xAA33, 0x0021 };

    // AA33 0021;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3352, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA33 0021;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3352, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_164)
{
    uint32_t const cps[2] = { 0xAA33, 0x003F };

    // AA33 003F;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3352, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA33 003F;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3352, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_165)
{
    uint32_t const cps[2] = { 0xAA33, 0x0061 };

    // AA33 0061;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA33 0061;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_166)
{
    uint32_t const cps[2] = { 0xAA33, 0x0041 };

    // AA33 0041;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA33 0041;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_167)
{
    uint32_t const cps[2] = { 0xAA33, 0x0062 };

    // AA33 0062;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA33 0062;	
    // (ꨳ) CHAM CONSONANT SIGN YA	[3352 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_168)
{
    uint32_t const cps[2] = { 0xAA34, 0x0021 };

    // AA34 0021;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3353, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA34 0021;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3353, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_169)
{
    uint32_t const cps[2] = { 0xAA34, 0x003F };

    // AA34 003F;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3353, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA34 003F;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3353, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_170)
{
    uint32_t const cps[2] = { 0xAA34, 0x0061 };

    // AA34 0061;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA34 0061;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_171)
{
    uint32_t const cps[2] = { 0xAA34, 0x0041 };

    // AA34 0041;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA34 0041;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_172)
{
    uint32_t const cps[2] = { 0xAA34, 0x0062 };

    // AA34 0062;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA34 0062;	
    // (ꨴ) CHAM CONSONANT SIGN RA	[3353 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_173)
{
    uint32_t const cps[2] = { 0xAA35, 0x0021 };

    // AA35 0021;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3354, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA35 0021;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3354, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_174)
{
    uint32_t const cps[2] = { 0xAA35, 0x003F };

    // AA35 003F;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3354, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA35 003F;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3354, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_175)
{
    uint32_t const cps[2] = { 0xAA35, 0x0061 };

    // AA35 0061;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA35 0061;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_176)
{
    uint32_t const cps[2] = { 0xAA35, 0x0041 };

    // AA35 0041;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA35 0041;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_177)
{
    uint32_t const cps[2] = { 0xAA35, 0x0062 };

    // AA35 0062;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA35 0062;	
    // (ꨵ) CHAM CONSONANT SIGN LA	[3354 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_178)
{
    uint32_t const cps[2] = { 0xAA36, 0x0021 };

    // AA36 0021;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3355, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA36 0021;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3355, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_179)
{
    uint32_t const cps[2] = { 0xAA36, 0x003F };

    // AA36 003F;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3355, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA36 003F;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3355, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_180)
{
    uint32_t const cps[2] = { 0xAA36, 0x0061 };

    // AA36 0061;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA36 0061;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_181)
{
    uint32_t const cps[2] = { 0xAA36, 0x0041 };

    // AA36 0041;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA36 0041;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_182)
{
    uint32_t const cps[2] = { 0xAA36, 0x0062 };

    // AA36 0062;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA36 0062;	
    // (ꨶ) CHAM CONSONANT SIGN WA	[3355 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_183)
{
    uint32_t const cps[2] = { 0xAA29, 0x0021 };

    // AA29 0021;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3356, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA29 0021;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3356, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_184)
{
    uint32_t const cps[2] = { 0xAA29, 0x003F };

    // AA29 003F;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3356, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA29 003F;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3356, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_185)
{
    uint32_t const cps[2] = { 0xAA29, 0x0061 };

    // AA29 0061;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA29 0061;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_186)
{
    uint32_t const cps[2] = { 0xAA29, 0x0041 };

    // AA29 0041;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA29 0041;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_187)
{
    uint32_t const cps[2] = { 0xAA29, 0x0062 };

    // AA29 0062;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3356, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA29 0062;	
    // (ꨩ) CHAM VOWEL SIGN AA	[3356 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3356, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_188)
{
    uint32_t const cps[2] = { 0xAA2A, 0x0021 };

    // AA2A 0021;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3357, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2A 0021;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3357, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_189)
{
    uint32_t const cps[2] = { 0xAA2A, 0x003F };

    // AA2A 003F;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3357, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2A 003F;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3357, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_190)
{
    uint32_t const cps[2] = { 0xAA2A, 0x0061 };

    // AA2A 0061;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2A 0061;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_191)
{
    uint32_t const cps[2] = { 0xAA2A, 0x0041 };

    // AA2A 0041;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2A 0041;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_192)
{
    uint32_t const cps[2] = { 0xAA2A, 0x0062 };

    // AA2A 0062;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3357, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2A 0062;	
    // (ꨪ) CHAM VOWEL SIGN I	[3357 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3357, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_193)
{
    uint32_t const cps[2] = { 0xAA2B, 0x0021 };

    // AA2B 0021;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3358, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2B 0021;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3358, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_194)
{
    uint32_t const cps[2] = { 0xAA2B, 0x003F };

    // AA2B 003F;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3358, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2B 003F;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3358, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_195)
{
    uint32_t const cps[2] = { 0xAA2B, 0x0061 };

    // AA2B 0061;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2B 0061;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_196)
{
    uint32_t const cps[2] = { 0xAA2B, 0x0041 };

    // AA2B 0041;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2B 0041;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_197)
{
    uint32_t const cps[2] = { 0xAA2B, 0x0062 };

    // AA2B 0062;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3358, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2B 0062;	
    // (ꨫ) CHAM VOWEL SIGN II	[3358 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3358, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_198)
{
    uint32_t const cps[2] = { 0xAA2C, 0x0021 };

    // AA2C 0021;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3359, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2C 0021;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3359, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_199)
{
    uint32_t const cps[2] = { 0xAA2C, 0x003F };

    // AA2C 003F;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3359, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2C 003F;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3359, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_200)
{
    uint32_t const cps[2] = { 0xAA2C, 0x0061 };

    // AA2C 0061;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2C 0061;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_201)
{
    uint32_t const cps[2] = { 0xAA2C, 0x0041 };

    // AA2C 0041;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2C 0041;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_202)
{
    uint32_t const cps[2] = { 0xAA2C, 0x0062 };

    // AA2C 0062;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2C 0062;	
    // (ꨬ) CHAM VOWEL SIGN EI	[3359 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_203)
{
    uint32_t const cps[2] = { 0xAA2D, 0x0021 };

    // AA2D 0021;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2D 0021;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x335A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_204)
{
    uint32_t const cps[2] = { 0xAA2D, 0x003F };

    // AA2D 003F;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2D 003F;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x335A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_205)
{
    uint32_t const cps[2] = { 0xAA2D, 0x0061 };

    // AA2D 0061;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2D 0061;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_206)
{
    uint32_t const cps[2] = { 0xAA2D, 0x0041 };

    // AA2D 0041;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x335A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2D 0041;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_207)
{
    uint32_t const cps[2] = { 0xAA2D, 0x0062 };

    // AA2D 0062;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2D 0062;	
    // (ꨭ) CHAM VOWEL SIGN U	[335A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_208)
{
    uint32_t const cps[2] = { 0xAA2E, 0x0021 };

    // AA2E 0021;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2E 0021;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x335B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_209)
{
    uint32_t const cps[2] = { 0xAA2E, 0x003F };

    // AA2E 003F;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2E 003F;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x335B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_210)
{
    uint32_t const cps[2] = { 0xAA2E, 0x0061 };

    // AA2E 0061;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2E 0061;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_211)
{
    uint32_t const cps[2] = { 0xAA2E, 0x0041 };

    // AA2E 0041;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x335B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2E 0041;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_212)
{
    uint32_t const cps[2] = { 0xAA2E, 0x0062 };

    // AA2E 0062;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2E 0062;	
    // (ꨮ) CHAM VOWEL SIGN OE	[335B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_213)
{
    uint32_t const cps[2] = { 0xAA2F, 0x0021 };

    // AA2F 0021;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2F 0021;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x335C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_214)
{
    uint32_t const cps[2] = { 0xAA2F, 0x003F };

    // AA2F 003F;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2F 003F;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x335C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_215)
{
    uint32_t const cps[2] = { 0xAA2F, 0x0061 };

    // AA2F 0061;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2F 0061;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_216)
{
    uint32_t const cps[2] = { 0xAA2F, 0x0041 };

    // AA2F 0041;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x335C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2F 0041;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_217)
{
    uint32_t const cps[2] = { 0xAA2F, 0x0062 };

    // AA2F 0062;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA2F 0062;	
    // (ꨯ) CHAM VOWEL SIGN O	[335C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_218)
{
    uint32_t const cps[2] = { 0xAA30, 0x0021 };

    // AA30 0021;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA30 0021;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x335D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_219)
{
    uint32_t const cps[2] = { 0xAA30, 0x003F };

    // AA30 003F;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA30 003F;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x335D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_220)
{
    uint32_t const cps[2] = { 0xAA30, 0x0061 };

    // AA30 0061;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA30 0061;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_221)
{
    uint32_t const cps[2] = { 0xAA30, 0x0041 };

    // AA30 0041;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x335D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA30 0041;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_222)
{
    uint32_t const cps[2] = { 0xAA30, 0x0062 };

    // AA30 0062;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA30 0062;	
    // (ꨰ) CHAM VOWEL SIGN AI	[335D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_223)
{
    uint32_t const cps[2] = { 0xAA31, 0x0021 };

    // AA31 0021;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA31 0021;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x335E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_224)
{
    uint32_t const cps[2] = { 0xAA31, 0x003F };

    // AA31 003F;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA31 003F;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x335E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_225)
{
    uint32_t const cps[2] = { 0xAA31, 0x0061 };

    // AA31 0061;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA31 0061;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_226)
{
    uint32_t const cps[2] = { 0xAA31, 0x0041 };

    // AA31 0041;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x335E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA31 0041;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_227)
{
    uint32_t const cps[2] = { 0xAA31, 0x0062 };

    // AA31 0062;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA31 0062;	
    // (ꨱ) CHAM VOWEL SIGN AU	[335E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_228)
{
    uint32_t const cps[2] = { 0xAA32, 0x0021 };

    // AA32 0021;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA32 0021;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x335F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_229)
{
    uint32_t const cps[2] = { 0xAA32, 0x003F };

    // AA32 003F;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA32 003F;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x335F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_230)
{
    uint32_t const cps[2] = { 0xAA32, 0x0061 };

    // AA32 0061;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA32 0061;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_231)
{
    uint32_t const cps[2] = { 0xAA32, 0x0041 };

    // AA32 0041;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x335F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA32 0041;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_232)
{
    uint32_t const cps[2] = { 0xAA32, 0x0062 };

    // AA32 0062;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x335F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA32 0062;	
    // (ꨲ) CHAM VOWEL SIGN UE	[335F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x335F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_233)
{
    uint32_t const cps[2] = { 0xAA40, 0x0021 };

    // AA40 0021;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3360, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA40 0021;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3360, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_234)
{
    uint32_t const cps[2] = { 0xAA40, 0x003F };

    // AA40 003F;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3360, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA40 003F;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3360, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_235)
{
    uint32_t const cps[2] = { 0xAA40, 0x0061 };

    // AA40 0061;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA40 0061;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_236)
{
    uint32_t const cps[2] = { 0xAA40, 0x0041 };

    // AA40 0041;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA40 0041;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_237)
{
    uint32_t const cps[2] = { 0xAA40, 0x0062 };

    // AA40 0062;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3360, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA40 0062;	
    // (ꩀ) CHAM LETTER FINAL K	[3360 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3360, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_238)
{
    uint32_t const cps[2] = { 0xAA41, 0x0021 };

    // AA41 0021;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3361, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA41 0021;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3361, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_239)
{
    uint32_t const cps[2] = { 0xAA41, 0x003F };

    // AA41 003F;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3361, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA41 003F;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3361, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_240)
{
    uint32_t const cps[2] = { 0xAA41, 0x0061 };

    // AA41 0061;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA41 0061;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_241)
{
    uint32_t const cps[2] = { 0xAA41, 0x0041 };

    // AA41 0041;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA41 0041;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_242)
{
    uint32_t const cps[2] = { 0xAA41, 0x0062 };

    // AA41 0062;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3361, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA41 0062;	
    // (ꩁ) CHAM LETTER FINAL G	[3361 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3361, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_243)
{
    uint32_t const cps[2] = { 0xAA42, 0x0021 };

    // AA42 0021;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3362, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA42 0021;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3362, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_244)
{
    uint32_t const cps[2] = { 0xAA42, 0x003F };

    // AA42 003F;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3362, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA42 003F;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3362, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_245)
{
    uint32_t const cps[2] = { 0xAA42, 0x0061 };

    // AA42 0061;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA42 0061;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_246)
{
    uint32_t const cps[2] = { 0xAA42, 0x0041 };

    // AA42 0041;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA42 0041;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_247)
{
    uint32_t const cps[2] = { 0xAA42, 0x0062 };

    // AA42 0062;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3362, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA42 0062;	
    // (ꩂ) CHAM LETTER FINAL NG	[3362 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3362, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_248)
{
    uint32_t const cps[2] = { 0xAA43, 0x0021 };

    // AA43 0021;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA43 0021;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3363, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_249)
{
    uint32_t const cps[2] = { 0xAA43, 0x003F };

    // AA43 003F;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA43 003F;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3363, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_250)
{
    uint32_t const cps[2] = { 0xAA43, 0x0061 };

    // AA43 0061;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA43 0061;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_251)
{
    uint32_t const cps[2] = { 0xAA43, 0x0041 };

    // AA43 0041;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA43 0041;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_252)
{
    uint32_t const cps[2] = { 0xAA43, 0x0062 };

    // AA43 0062;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA43 0062;	
    // (ꩃ) CHAM CONSONANT SIGN FINAL NG	[3363 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_253)
{
    uint32_t const cps[2] = { 0xAA44, 0x0021 };

    // AA44 0021;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA44 0021;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3364, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_254)
{
    uint32_t const cps[2] = { 0xAA44, 0x003F };

    // AA44 003F;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA44 003F;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3364, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_255)
{
    uint32_t const cps[2] = { 0xAA44, 0x0061 };

    // AA44 0061;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA44 0061;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_256)
{
    uint32_t const cps[2] = { 0xAA44, 0x0041 };

    // AA44 0041;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA44 0041;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_257)
{
    uint32_t const cps[2] = { 0xAA44, 0x0062 };

    // AA44 0062;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA44 0062;	
    // (ꩄ) CHAM LETTER FINAL CH	[3364 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_258)
{
    uint32_t const cps[2] = { 0xAA45, 0x0021 };

    // AA45 0021;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA45 0021;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3365, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_259)
{
    uint32_t const cps[2] = { 0xAA45, 0x003F };

    // AA45 003F;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA45 003F;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3365, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_260)
{
    uint32_t const cps[2] = { 0xAA45, 0x0061 };

    // AA45 0061;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA45 0061;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_261)
{
    uint32_t const cps[2] = { 0xAA45, 0x0041 };

    // AA45 0041;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA45 0041;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_262)
{
    uint32_t const cps[2] = { 0xAA45, 0x0062 };

    // AA45 0062;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA45 0062;	
    // (ꩅ) CHAM LETTER FINAL T	[3365 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_263)
{
    uint32_t const cps[2] = { 0xAA46, 0x0021 };

    // AA46 0021;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3366, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA46 0021;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3366, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_264)
{
    uint32_t const cps[2] = { 0xAA46, 0x003F };

    // AA46 003F;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3366, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA46 003F;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3366, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_265)
{
    uint32_t const cps[2] = { 0xAA46, 0x0061 };

    // AA46 0061;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA46 0061;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_266)
{
    uint32_t const cps[2] = { 0xAA46, 0x0041 };

    // AA46 0041;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA46 0041;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_267)
{
    uint32_t const cps[2] = { 0xAA46, 0x0062 };

    // AA46 0062;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3366, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA46 0062;	
    // (ꩆ) CHAM LETTER FINAL N	[3366 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3366, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_268)
{
    uint32_t const cps[2] = { 0xAA47, 0x0021 };

    // AA47 0021;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA47 0021;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3367, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_269)
{
    uint32_t const cps[2] = { 0xAA47, 0x003F };

    // AA47 003F;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA47 003F;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3367, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_270)
{
    uint32_t const cps[2] = { 0xAA47, 0x0061 };

    // AA47 0061;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA47 0061;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_271)
{
    uint32_t const cps[2] = { 0xAA47, 0x0041 };

    // AA47 0041;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA47 0041;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_272)
{
    uint32_t const cps[2] = { 0xAA47, 0x0062 };

    // AA47 0062;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA47 0062;	
    // (ꩇ) CHAM LETTER FINAL P	[3367 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_273)
{
    uint32_t const cps[2] = { 0xAA48, 0x0021 };

    // AA48 0021;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA48 0021;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3368, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_274)
{
    uint32_t const cps[2] = { 0xAA48, 0x003F };

    // AA48 003F;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA48 003F;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3368, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_275)
{
    uint32_t const cps[2] = { 0xAA48, 0x0061 };

    // AA48 0061;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA48 0061;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_276)
{
    uint32_t const cps[2] = { 0xAA48, 0x0041 };

    // AA48 0041;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA48 0041;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_277)
{
    uint32_t const cps[2] = { 0xAA48, 0x0062 };

    // AA48 0062;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA48 0062;	
    // (ꩈ) CHAM LETTER FINAL Y	[3368 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_278)
{
    uint32_t const cps[2] = { 0xAA49, 0x0021 };

    // AA49 0021;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA49 0021;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3369, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_279)
{
    uint32_t const cps[2] = { 0xAA49, 0x003F };

    // AA49 003F;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA49 003F;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3369, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_280)
{
    uint32_t const cps[2] = { 0xAA49, 0x0061 };

    // AA49 0061;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA49 0061;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_281)
{
    uint32_t const cps[2] = { 0xAA49, 0x0041 };

    // AA49 0041;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA49 0041;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_282)
{
    uint32_t const cps[2] = { 0xAA49, 0x0062 };

    // AA49 0062;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA49 0062;	
    // (ꩉ) CHAM LETTER FINAL R	[3369 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_283)
{
    uint32_t const cps[2] = { 0xAA4A, 0x0021 };

    // AA4A 0021;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4A 0021;	
    // (ꩊ) CHAM LETTER FINAL L	[336A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x336A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_284)
{
    uint32_t const cps[2] = { 0xAA4A, 0x003F };

    // AA4A 003F;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4A 003F;	
    // (ꩊ) CHAM LETTER FINAL L	[336A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x336A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_285)
{
    uint32_t const cps[2] = { 0xAA4A, 0x0061 };

    // AA4A 0061;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4A 0061;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_286)
{
    uint32_t const cps[2] = { 0xAA4A, 0x0041 };

    // AA4A 0041;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x336A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4A 0041;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_287)
{
    uint32_t const cps[2] = { 0xAA4A, 0x0062 };

    // AA4A 0062;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4A 0062;	
    // (ꩊ) CHAM LETTER FINAL L	[336A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_288)
{
    uint32_t const cps[2] = { 0xAA4B, 0x0021 };

    // AA4B 0021;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4B 0021;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x336B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_289)
{
    uint32_t const cps[2] = { 0xAA4B, 0x003F };

    // AA4B 003F;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4B 003F;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x336B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_290)
{
    uint32_t const cps[2] = { 0xAA4B, 0x0061 };

    // AA4B 0061;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4B 0061;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_291)
{
    uint32_t const cps[2] = { 0xAA4B, 0x0041 };

    // AA4B 0041;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x336B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4B 0041;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_292)
{
    uint32_t const cps[2] = { 0xAA4B, 0x0062 };

    // AA4B 0062;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4B 0062;	
    // (ꩋ) CHAM LETTER FINAL SS	[336B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_293)
{
    uint32_t const cps[2] = { 0xAA4C, 0x0021 };

    // AA4C 0021;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4C 0021;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x336C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_294)
{
    uint32_t const cps[2] = { 0xAA4C, 0x003F };

    // AA4C 003F;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4C 003F;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x336C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_295)
{
    uint32_t const cps[2] = { 0xAA4C, 0x0061 };

    // AA4C 0061;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4C 0061;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_296)
{
    uint32_t const cps[2] = { 0xAA4C, 0x0041 };

    // AA4C 0041;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x336C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4C 0041;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_297)
{
    uint32_t const cps[2] = { 0xAA4C, 0x0062 };

    // AA4C 0062;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4C 0062;	
    // (ꩌ) CHAM CONSONANT SIGN FINAL M	[336C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_298)
{
    uint32_t const cps[2] = { 0xAA4D, 0x0021 };

    // AA4D 0021;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4D 0021;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x336D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_299)
{
    uint32_t const cps[2] = { 0xAA4D, 0x003F };

    // AA4D 003F;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4D 003F;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x336D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_300)
{
    uint32_t const cps[2] = { 0xAA4D, 0x0061 };

    // AA4D 0061;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4D 0061;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_301)
{
    uint32_t const cps[2] = { 0xAA4D, 0x0041 };

    // AA4D 0041;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x336D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4D 0041;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_302)
{
    uint32_t const cps[2] = { 0xAA4D, 0x0062 };

    // AA4D 0062;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AA4D 0062;	
    // (ꩍ) CHAM CONSONANT SIGN FINAL H	[336D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_303)
{
    uint32_t const cps[2] = { 0x1B05, 0x0021 };

    // 1B05 0021;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 0021;	
    // (ᬅ) BALINESE LETTER AKARA	[336E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x336E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_304)
{
    uint32_t const cps[2] = { 0x1B05, 0x003F };

    // 1B05 003F;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 003F;	
    // (ᬅ) BALINESE LETTER AKARA	[336E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x336E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_305)
{
    uint32_t const cps[2] = { 0x1B05, 0x0061 };

    // 1B05 0061;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 0061;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_306)
{
    uint32_t const cps[2] = { 0x1B05, 0x0041 };

    // 1B05 0041;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x336E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 0041;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_307)
{
    uint32_t const cps[2] = { 0x1B05, 0x0062 };

    // 1B05 0062;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 0062;	
    // (ᬅ) BALINESE LETTER AKARA	[336E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_308)
{
    uint32_t const cps[4] = { 0x1B05, 0x0001, 0x1B35, 0x0061 };

    // 1B05 0001 1B35 0061;	
    // (ᬅ'\u0001'ᬵ) BALINESE LETTER AKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[336E 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x336E, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 0001 1B35 0061;	
    // (ᬅ'\u0001'ᬵ) BALINESE LETTER AKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[336E 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x336E, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_309)
{
    uint32_t const cps[4] = { 0x1B05, 0x0591, 0x1B35, 0x0061 };

    // 1B05 0591 1B35 0061;	
    // (ᬅ֑ᬵ) BALINESE LETTER AKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[336E 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x336E, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 0591 1B35 0061;	
    // (ᬅ֑ᬵ) BALINESE LETTER AKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[336E 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x336E, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_310)
{
    uint32_t const cps[4] = { 0x1B05, 0x1D165, 0x1B35, 0x0061 };

    // 1B05 1D165 1B35 0061;	
    // (ᬅ𝅥ᬵ) BALINESE LETTER AKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[336E 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x336E, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 1D165 1B35 0061;	
    // (ᬅ𝅥ᬵ) BALINESE LETTER AKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[336E 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x336E, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_311)
{
    uint32_t const cps[3] = { 0x1B05, 0x1B35, 0x0021 };

    // 1B05 1B35 0021;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 1B35 0021;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x336F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_312)
{
    uint32_t const cps[2] = { 0x1B06, 0x0021 };

    // 1B06 0021;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B06 0021;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x336F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_313)
{
    uint32_t const cps[3] = { 0x1B05, 0x1B35, 0x003F };

    // 1B05 1B35 003F;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 1B35 003F;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x336F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_314)
{
    uint32_t const cps[2] = { 0x1B06, 0x003F };

    // 1B06 003F;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B06 003F;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x336F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_315)
{
    uint32_t const cps[3] = { 0x1B05, 0x1B35, 0x0061 };

    // 1B05 1B35 0061;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 1B35 0061;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_316)
{
    uint32_t const cps[2] = { 0x1B06, 0x0061 };

    // 1B06 0061;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B06 0061;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_317)
{
    uint32_t const cps[3] = { 0x1B05, 0x1B35, 0x0041 };

    // 1B05 1B35 0041;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 1B35 0041;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_318)
{
    uint32_t const cps[2] = { 0x1B06, 0x0041 };

    // 1B06 0041;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B06 0041;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_319)
{
    uint32_t const cps[3] = { 0x1B05, 0x1B35, 0x0062 };

    // 1B05 1B35 0062;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B05 1B35 0062;	
    // (ᬆ) BALINESE LETTER AKARA, BALINESE VOWEL SIGN TEDUNG	[336F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_320)
{
    uint32_t const cps[2] = { 0x1B06, 0x0062 };

    // 1B06 0062;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x336F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B06 0062;	
    // (ᬆ) BALINESE LETTER AKARA TEDUNG	[336F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x336F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_321)
{
    uint32_t const cps[2] = { 0x1B07, 0x0021 };

    // 1B07 0021;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 0021;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3370, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_322)
{
    uint32_t const cps[2] = { 0x1B07, 0x003F };

    // 1B07 003F;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 003F;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3370, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_323)
{
    uint32_t const cps[2] = { 0x1B07, 0x0061 };

    // 1B07 0061;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 0061;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_324)
{
    uint32_t const cps[2] = { 0x1B07, 0x0041 };

    // 1B07 0041;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 0041;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_325)
{
    uint32_t const cps[2] = { 0x1B07, 0x0062 };

    // 1B07 0062;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 0062;	
    // (ᬇ) BALINESE LETTER IKARA	[3370 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_326)
{
    uint32_t const cps[4] = { 0x1B07, 0x0001, 0x1B35, 0x0061 };

    // 1B07 0001 1B35 0061;	
    // (ᬇ'\u0001'ᬵ) BALINESE LETTER IKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3370 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3370, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 0001 1B35 0061;	
    // (ᬇ'\u0001'ᬵ) BALINESE LETTER IKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3370 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3370, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_327)
{
    uint32_t const cps[4] = { 0x1B07, 0x0591, 0x1B35, 0x0061 };

    // 1B07 0591 1B35 0061;	
    // (ᬇ֑ᬵ) BALINESE LETTER IKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3370 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3370, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 0591 1B35 0061;	
    // (ᬇ֑ᬵ) BALINESE LETTER IKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3370 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3370, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_328)
{
    uint32_t const cps[4] = { 0x1B07, 0x1D165, 0x1B35, 0x0061 };

    // 1B07 1D165 1B35 0061;	
    // (ᬇ𝅥ᬵ) BALINESE LETTER IKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3370 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3370, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 1D165 1B35 0061;	
    // (ᬇ𝅥ᬵ) BALINESE LETTER IKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3370 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3370, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_329)
{
    uint32_t const cps[3] = { 0x1B07, 0x1B35, 0x0021 };

    // 1B07 1B35 0021;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 1B35 0021;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3371, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_330)
{
    uint32_t const cps[2] = { 0x1B08, 0x0021 };

    // 1B08 0021;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B08 0021;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3371, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_331)
{
    uint32_t const cps[3] = { 0x1B07, 0x1B35, 0x003F };

    // 1B07 1B35 003F;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 1B35 003F;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3371, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_332)
{
    uint32_t const cps[2] = { 0x1B08, 0x003F };

    // 1B08 003F;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B08 003F;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3371, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_333)
{
    uint32_t const cps[3] = { 0x1B07, 0x1B35, 0x0061 };

    // 1B07 1B35 0061;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 1B35 0061;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_334)
{
    uint32_t const cps[2] = { 0x1B08, 0x0061 };

    // 1B08 0061;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B08 0061;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_335)
{
    uint32_t const cps[3] = { 0x1B07, 0x1B35, 0x0041 };

    // 1B07 1B35 0041;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 1B35 0041;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_336)
{
    uint32_t const cps[2] = { 0x1B08, 0x0041 };

    // 1B08 0041;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B08 0041;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_337)
{
    uint32_t const cps[3] = { 0x1B07, 0x1B35, 0x0062 };

    // 1B07 1B35 0062;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B07 1B35 0062;	
    // (ᬈ) BALINESE LETTER IKARA, BALINESE VOWEL SIGN TEDUNG	[3371 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_338)
{
    uint32_t const cps[2] = { 0x1B08, 0x0062 };

    // 1B08 0062;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B08 0062;	
    // (ᬈ) BALINESE LETTER IKARA TEDUNG	[3371 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_339)
{
    uint32_t const cps[2] = { 0x1B09, 0x0021 };

    // 1B09 0021;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 0021;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3372, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_340)
{
    uint32_t const cps[2] = { 0x1B09, 0x003F };

    // 1B09 003F;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 003F;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3372, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_341)
{
    uint32_t const cps[2] = { 0x1B09, 0x0061 };

    // 1B09 0061;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 0061;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_342)
{
    uint32_t const cps[2] = { 0x1B09, 0x0041 };

    // 1B09 0041;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 0041;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_343)
{
    uint32_t const cps[2] = { 0x1B09, 0x0062 };

    // 1B09 0062;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 0062;	
    // (ᬉ) BALINESE LETTER UKARA	[3372 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_344)
{
    uint32_t const cps[4] = { 0x1B09, 0x0001, 0x1B35, 0x0061 };

    // 1B09 0001 1B35 0061;	
    // (ᬉ'\u0001'ᬵ) BALINESE LETTER UKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3372 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3372, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 0001 1B35 0061;	
    // (ᬉ'\u0001'ᬵ) BALINESE LETTER UKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3372 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3372, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_345)
{
    uint32_t const cps[4] = { 0x1B09, 0x0591, 0x1B35, 0x0061 };

    // 1B09 0591 1B35 0061;	
    // (ᬉ֑ᬵ) BALINESE LETTER UKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3372 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3372, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 0591 1B35 0061;	
    // (ᬉ֑ᬵ) BALINESE LETTER UKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3372 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3372, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_346)
{
    uint32_t const cps[4] = { 0x1B09, 0x1D165, 0x1B35, 0x0061 };

    // 1B09 1D165 1B35 0061;	
    // (ᬉ𝅥ᬵ) BALINESE LETTER UKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3372 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3372, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 1D165 1B35 0061;	
    // (ᬉ𝅥ᬵ) BALINESE LETTER UKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3372 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3372, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_347)
{
    uint32_t const cps[3] = { 0x1B09, 0x1B35, 0x0021 };

    // 1B09 1B35 0021;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 1B35 0021;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3373, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_348)
{
    uint32_t const cps[2] = { 0x1B0A, 0x0021 };

    // 1B0A 0021;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0A 0021;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3373, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_349)
{
    uint32_t const cps[3] = { 0x1B09, 0x1B35, 0x003F };

    // 1B09 1B35 003F;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 1B35 003F;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3373, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_350)
{
    uint32_t const cps[2] = { 0x1B0A, 0x003F };

    // 1B0A 003F;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0A 003F;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3373, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_351)
{
    uint32_t const cps[3] = { 0x1B09, 0x1B35, 0x0061 };

    // 1B09 1B35 0061;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 1B35 0061;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_352)
{
    uint32_t const cps[2] = { 0x1B0A, 0x0061 };

    // 1B0A 0061;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0A 0061;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_353)
{
    uint32_t const cps[3] = { 0x1B09, 0x1B35, 0x0041 };

    // 1B09 1B35 0041;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 1B35 0041;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_354)
{
    uint32_t const cps[2] = { 0x1B0A, 0x0041 };

    // 1B0A 0041;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0A 0041;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_355)
{
    uint32_t const cps[3] = { 0x1B09, 0x1B35, 0x0062 };

    // 1B09 1B35 0062;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B09 1B35 0062;	
    // (ᬊ) BALINESE LETTER UKARA, BALINESE VOWEL SIGN TEDUNG	[3373 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_356)
{
    uint32_t const cps[2] = { 0x1B0A, 0x0062 };

    // 1B0A 0062;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0A 0062;	
    // (ᬊ) BALINESE LETTER UKARA TEDUNG	[3373 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_357)
{
    uint32_t const cps[2] = { 0x1B0B, 0x0021 };

    // 1B0B 0021;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 0021;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3374, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_358)
{
    uint32_t const cps[2] = { 0x1B0B, 0x003F };

    // 1B0B 003F;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 003F;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3374, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_359)
{
    uint32_t const cps[2] = { 0x1B0B, 0x0061 };

    // 1B0B 0061;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 0061;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_360)
{
    uint32_t const cps[2] = { 0x1B0B, 0x0041 };

    // 1B0B 0041;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 0041;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_361)
{
    uint32_t const cps[2] = { 0x1B0B, 0x0062 };

    // 1B0B 0062;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 0062;	
    // (ᬋ) BALINESE LETTER RA REPA	[3374 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_362)
{
    uint32_t const cps[4] = { 0x1B0B, 0x0001, 0x1B35, 0x0061 };

    // 1B0B 0001 1B35 0061;	
    // (ᬋ'\u0001'ᬵ) BALINESE LETTER RA REPA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3374 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3374, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 0001 1B35 0061;	
    // (ᬋ'\u0001'ᬵ) BALINESE LETTER RA REPA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3374 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3374, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_363)
{
    uint32_t const cps[4] = { 0x1B0B, 0x0591, 0x1B35, 0x0061 };

    // 1B0B 0591 1B35 0061;	
    // (ᬋ֑ᬵ) BALINESE LETTER RA REPA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3374 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3374, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 0591 1B35 0061;	
    // (ᬋ֑ᬵ) BALINESE LETTER RA REPA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3374 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3374, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_364)
{
    uint32_t const cps[4] = { 0x1B0B, 0x1D165, 0x1B35, 0x0061 };

    // 1B0B 1D165 1B35 0061;	
    // (ᬋ𝅥ᬵ) BALINESE LETTER RA REPA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3374 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3374, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 1D165 1B35 0061;	
    // (ᬋ𝅥ᬵ) BALINESE LETTER RA REPA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3374 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3374, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_365)
{
    uint32_t const cps[3] = { 0x1B0B, 0x1B35, 0x0021 };

    // 1B0B 1B35 0021;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 1B35 0021;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3375, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_366)
{
    uint32_t const cps[2] = { 0x1B0C, 0x0021 };

    // 1B0C 0021;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0C 0021;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3375, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_367)
{
    uint32_t const cps[3] = { 0x1B0B, 0x1B35, 0x003F };

    // 1B0B 1B35 003F;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 1B35 003F;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3375, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_368)
{
    uint32_t const cps[2] = { 0x1B0C, 0x003F };

    // 1B0C 003F;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0C 003F;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3375, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_369)
{
    uint32_t const cps[3] = { 0x1B0B, 0x1B35, 0x0061 };

    // 1B0B 1B35 0061;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 1B35 0061;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_370)
{
    uint32_t const cps[2] = { 0x1B0C, 0x0061 };

    // 1B0C 0061;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0C 0061;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_371)
{
    uint32_t const cps[3] = { 0x1B0B, 0x1B35, 0x0041 };

    // 1B0B 1B35 0041;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 1B35 0041;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_372)
{
    uint32_t const cps[2] = { 0x1B0C, 0x0041 };

    // 1B0C 0041;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0C 0041;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_373)
{
    uint32_t const cps[3] = { 0x1B0B, 0x1B35, 0x0062 };

    // 1B0B 1B35 0062;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0B 1B35 0062;	
    // (ᬌ) BALINESE LETTER RA REPA, BALINESE VOWEL SIGN TEDUNG	[3375 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_374)
{
    uint32_t const cps[2] = { 0x1B0C, 0x0062 };

    // 1B0C 0062;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0C 0062;	
    // (ᬌ) BALINESE LETTER RA REPA TEDUNG	[3375 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_375)
{
    uint32_t const cps[2] = { 0x1B0D, 0x0021 };

    // 1B0D 0021;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 0021;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3376, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_376)
{
    uint32_t const cps[2] = { 0x1B0D, 0x003F };

    // 1B0D 003F;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 003F;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3376, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_377)
{
    uint32_t const cps[2] = { 0x1B0D, 0x0061 };

    // 1B0D 0061;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 0061;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_378)
{
    uint32_t const cps[2] = { 0x1B0D, 0x0041 };

    // 1B0D 0041;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 0041;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_379)
{
    uint32_t const cps[2] = { 0x1B0D, 0x0062 };

    // 1B0D 0062;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 0062;	
    // (ᬍ) BALINESE LETTER LA LENGA	[3376 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_380)
{
    uint32_t const cps[4] = { 0x1B0D, 0x0001, 0x1B35, 0x0061 };

    // 1B0D 0001 1B35 0061;	
    // (ᬍ'\u0001'ᬵ) BALINESE LETTER LA LENGA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3376 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3376, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 0001 1B35 0061;	
    // (ᬍ'\u0001'ᬵ) BALINESE LETTER LA LENGA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[3376 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3376, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_381)
{
    uint32_t const cps[4] = { 0x1B0D, 0x0591, 0x1B35, 0x0061 };

    // 1B0D 0591 1B35 0061;	
    // (ᬍ֑ᬵ) BALINESE LETTER LA LENGA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3376 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3376, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 0591 1B35 0061;	
    // (ᬍ֑ᬵ) BALINESE LETTER LA LENGA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[3376 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3376, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_382)
{
    uint32_t const cps[4] = { 0x1B0D, 0x1D165, 0x1B35, 0x0061 };

    // 1B0D 1D165 1B35 0061;	
    // (ᬍ𝅥ᬵ) BALINESE LETTER LA LENGA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3376 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3376, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 1D165 1B35 0061;	
    // (ᬍ𝅥ᬵ) BALINESE LETTER LA LENGA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[3376 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3376, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_383)
{
    uint32_t const cps[3] = { 0x1B0D, 0x1B35, 0x0021 };

    // 1B0D 1B35 0021;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 1B35 0021;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3377, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_384)
{
    uint32_t const cps[2] = { 0x1B0E, 0x0021 };

    // 1B0E 0021;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0E 0021;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3377, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_385)
{
    uint32_t const cps[3] = { 0x1B0D, 0x1B35, 0x003F };

    // 1B0D 1B35 003F;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 1B35 003F;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3377, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_386)
{
    uint32_t const cps[2] = { 0x1B0E, 0x003F };

    // 1B0E 003F;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0E 003F;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3377, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_387)
{
    uint32_t const cps[3] = { 0x1B0D, 0x1B35, 0x0061 };

    // 1B0D 1B35 0061;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 1B35 0061;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_388)
{
    uint32_t const cps[2] = { 0x1B0E, 0x0061 };

    // 1B0E 0061;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0E 0061;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_389)
{
    uint32_t const cps[3] = { 0x1B0D, 0x1B35, 0x0041 };

    // 1B0D 1B35 0041;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 1B35 0041;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_390)
{
    uint32_t const cps[2] = { 0x1B0E, 0x0041 };

    // 1B0E 0041;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0E 0041;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_391)
{
    uint32_t const cps[3] = { 0x1B0D, 0x1B35, 0x0062 };

    // 1B0D 1B35 0062;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0D 1B35 0062;	
    // (ᬎ) BALINESE LETTER LA LENGA, BALINESE VOWEL SIGN TEDUNG	[3377 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_392)
{
    uint32_t const cps[2] = { 0x1B0E, 0x0062 };

    // 1B0E 0062;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0E 0062;	
    // (ᬎ) BALINESE LETTER LA LENGA TEDUNG	[3377 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_393)
{
    uint32_t const cps[2] = { 0x1B0F, 0x0021 };

    // 1B0F 0021;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0F 0021;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3378, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_394)
{
    uint32_t const cps[2] = { 0x1B0F, 0x003F };

    // 1B0F 003F;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0F 003F;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3378, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_395)
{
    uint32_t const cps[2] = { 0x1B0F, 0x0061 };

    // 1B0F 0061;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0F 0061;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_396)
{
    uint32_t const cps[2] = { 0x1B0F, 0x0041 };

    // 1B0F 0041;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0F 0041;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_397)
{
    uint32_t const cps[2] = { 0x1B0F, 0x0062 };

    // 1B0F 0062;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B0F 0062;	
    // (ᬏ) BALINESE LETTER EKARA	[3378 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_398)
{
    uint32_t const cps[2] = { 0x1B10, 0x0021 };

    // 1B10 0021;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3379, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B10 0021;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3379, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_399)
{
    uint32_t const cps[2] = { 0x1B10, 0x003F };

    // 1B10 003F;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3379, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B10 003F;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3379, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_400)
{
    uint32_t const cps[2] = { 0x1B10, 0x0061 };

    // 1B10 0061;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B10 0061;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_401)
{
    uint32_t const cps[2] = { 0x1B10, 0x0041 };

    // 1B10 0041;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B10 0041;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_402)
{
    uint32_t const cps[2] = { 0x1B10, 0x0062 };

    // 1B10 0062;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B10 0062;	
    // (ᬐ) BALINESE LETTER AIKARA	[3379 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_403)
{
    uint32_t const cps[2] = { 0x1B11, 0x0021 };

    // 1B11 0021;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 0021;	
    // (ᬑ) BALINESE LETTER OKARA	[337A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x337A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_404)
{
    uint32_t const cps[2] = { 0x1B11, 0x003F };

    // 1B11 003F;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 003F;	
    // (ᬑ) BALINESE LETTER OKARA	[337A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x337A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_405)
{
    uint32_t const cps[2] = { 0x1B11, 0x0061 };

    // 1B11 0061;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 0061;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_406)
{
    uint32_t const cps[2] = { 0x1B11, 0x0041 };

    // 1B11 0041;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x337A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 0041;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_407)
{
    uint32_t const cps[2] = { 0x1B11, 0x0062 };

    // 1B11 0062;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 0062;	
    // (ᬑ) BALINESE LETTER OKARA	[337A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_408)
{
    uint32_t const cps[4] = { 0x1B11, 0x0001, 0x1B35, 0x0061 };

    // 1B11 0001 1B35 0061;	
    // (ᬑ'\u0001'ᬵ) BALINESE LETTER OKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[337A 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x337A, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 0001 1B35 0061;	
    // (ᬑ'\u0001'ᬵ) BALINESE LETTER OKARA, <START OF HEADING>, BALINESE VOWEL SIGN TEDUNG	[337A 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x337A, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_409)
{
    uint32_t const cps[4] = { 0x1B11, 0x0591, 0x1B35, 0x0061 };

    // 1B11 0591 1B35 0061;	
    // (ᬑ֑ᬵ) BALINESE LETTER OKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[337A 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x337A, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 0591 1B35 0061;	
    // (ᬑ֑ᬵ) BALINESE LETTER OKARA, HEBREW ACCENT ETNAHTA, BALINESE VOWEL SIGN TEDUNG	[337A 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x337A, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_410)
{
    uint32_t const cps[4] = { 0x1B11, 0x1D165, 0x1B35, 0x0061 };

    // 1B11 1D165 1B35 0061;	
    // (ᬑ𝅥ᬵ) BALINESE LETTER OKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[337A 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x337A, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 1D165 1B35 0061;	
    // (ᬑ𝅥ᬵ) BALINESE LETTER OKARA, MUSICAL SYMBOL COMBINING STEM, BALINESE VOWEL SIGN TEDUNG	[337A 33A4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x337A, 0x33A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_411)
{
    uint32_t const cps[3] = { 0x1B11, 0x1B35, 0x0021 };

    // 1B11 1B35 0021;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 1B35 0021;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x337B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_412)
{
    uint32_t const cps[2] = { 0x1B12, 0x0021 };

    // 1B12 0021;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B12 0021;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x337B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_413)
{
    uint32_t const cps[3] = { 0x1B11, 0x1B35, 0x003F };

    // 1B11 1B35 003F;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 1B35 003F;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x337B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_414)
{
    uint32_t const cps[2] = { 0x1B12, 0x003F };

    // 1B12 003F;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B12 003F;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x337B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_415)
{
    uint32_t const cps[3] = { 0x1B11, 0x1B35, 0x0061 };

    // 1B11 1B35 0061;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 1B35 0061;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_416)
{
    uint32_t const cps[2] = { 0x1B12, 0x0061 };

    // 1B12 0061;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B12 0061;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_417)
{
    uint32_t const cps[3] = { 0x1B11, 0x1B35, 0x0041 };

    // 1B11 1B35 0041;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 1B35 0041;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_418)
{
    uint32_t const cps[2] = { 0x1B12, 0x0041 };

    // 1B12 0041;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B12 0041;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_419)
{
    uint32_t const cps[3] = { 0x1B11, 0x1B35, 0x0062 };

    // 1B11 1B35 0062;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B11 1B35 0062;	
    // (ᬒ) BALINESE LETTER OKARA, BALINESE VOWEL SIGN TEDUNG	[337B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_420)
{
    uint32_t const cps[2] = { 0x1B12, 0x0062 };

    // 1B12 0062;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B12 0062;	
    // (ᬒ) BALINESE LETTER OKARA TEDUNG	[337B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_421)
{
    uint32_t const cps[2] = { 0x1B13, 0x0021 };

    // 1B13 0021;	
    // (ᬓ) BALINESE LETTER KA	[337C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B13 0021;	
    // (ᬓ) BALINESE LETTER KA	[337C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x337C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_422)
{
    uint32_t const cps[2] = { 0x1B13, 0x003F };

    // 1B13 003F;	
    // (ᬓ) BALINESE LETTER KA	[337C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B13 003F;	
    // (ᬓ) BALINESE LETTER KA	[337C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x337C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_423)
{
    uint32_t const cps[2] = { 0x1B13, 0x0061 };

    // 1B13 0061;	
    // (ᬓ) BALINESE LETTER KA	[337C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B13 0061;	
    // (ᬓ) BALINESE LETTER KA	[337C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_424)
{
    uint32_t const cps[2] = { 0x1B13, 0x0041 };

    // 1B13 0041;	
    // (ᬓ) BALINESE LETTER KA	[337C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x337C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B13 0041;	
    // (ᬓ) BALINESE LETTER KA	[337C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_425)
{
    uint32_t const cps[2] = { 0x1B13, 0x0062 };

    // 1B13 0062;	
    // (ᬓ) BALINESE LETTER KA	[337C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B13 0062;	
    // (ᬓ) BALINESE LETTER KA	[337C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_426)
{
    uint32_t const cps[2] = { 0x1B45, 0x0021 };

    // 1B45 0021;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B45 0021;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x337D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_427)
{
    uint32_t const cps[2] = { 0x1B45, 0x003F };

    // 1B45 003F;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B45 003F;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x337D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_428)
{
    uint32_t const cps[2] = { 0x1B45, 0x0061 };

    // 1B45 0061;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B45 0061;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_429)
{
    uint32_t const cps[2] = { 0x1B45, 0x0041 };

    // 1B45 0041;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x337D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B45 0041;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_430)
{
    uint32_t const cps[2] = { 0x1B45, 0x0062 };

    // 1B45 0062;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B45 0062;	
    // (ᭅ) BALINESE LETTER KAF SASAK	[337D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_431)
{
    uint32_t const cps[2] = { 0x1B46, 0x0021 };

    // 1B46 0021;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B46 0021;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x337E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_432)
{
    uint32_t const cps[2] = { 0x1B46, 0x003F };

    // 1B46 003F;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B46 003F;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x337E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_433)
{
    uint32_t const cps[2] = { 0x1B46, 0x0061 };

    // 1B46 0061;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B46 0061;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_434)
{
    uint32_t const cps[2] = { 0x1B46, 0x0041 };

    // 1B46 0041;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x337E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B46 0041;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_435)
{
    uint32_t const cps[2] = { 0x1B46, 0x0062 };

    // 1B46 0062;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B46 0062;	
    // (ᭆ) BALINESE LETTER KHOT SASAK	[337E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_436)
{
    uint32_t const cps[2] = { 0x1B14, 0x0021 };

    // 1B14 0021;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B14 0021;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x337F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_437)
{
    uint32_t const cps[2] = { 0x1B14, 0x003F };

    // 1B14 003F;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B14 003F;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x337F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_438)
{
    uint32_t const cps[2] = { 0x1B14, 0x0061 };

    // 1B14 0061;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B14 0061;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_439)
{
    uint32_t const cps[2] = { 0x1B14, 0x0041 };

    // 1B14 0041;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x337F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B14 0041;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_440)
{
    uint32_t const cps[2] = { 0x1B14, 0x0062 };

    // 1B14 0062;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x337F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B14 0062;	
    // (ᬔ) BALINESE LETTER KA MAHAPRANA	[337F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x337F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_441)
{
    uint32_t const cps[2] = { 0x1B15, 0x0021 };

    // 1B15 0021;	
    // (ᬕ) BALINESE LETTER GA	[3380 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3380, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B15 0021;	
    // (ᬕ) BALINESE LETTER GA	[3380 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3380, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_442)
{
    uint32_t const cps[2] = { 0x1B15, 0x003F };

    // 1B15 003F;	
    // (ᬕ) BALINESE LETTER GA	[3380 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3380, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B15 003F;	
    // (ᬕ) BALINESE LETTER GA	[3380 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3380, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_443)
{
    uint32_t const cps[2] = { 0x1B15, 0x0061 };

    // 1B15 0061;	
    // (ᬕ) BALINESE LETTER GA	[3380 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B15 0061;	
    // (ᬕ) BALINESE LETTER GA	[3380 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_444)
{
    uint32_t const cps[2] = { 0x1B15, 0x0041 };

    // 1B15 0041;	
    // (ᬕ) BALINESE LETTER GA	[3380 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B15 0041;	
    // (ᬕ) BALINESE LETTER GA	[3380 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_445)
{
    uint32_t const cps[2] = { 0x1B15, 0x0062 };

    // 1B15 0062;	
    // (ᬕ) BALINESE LETTER GA	[3380 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3380, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B15 0062;	
    // (ᬕ) BALINESE LETTER GA	[3380 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3380, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_446)
{
    uint32_t const cps[2] = { 0x1B16, 0x0021 };

    // 1B16 0021;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3381, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B16 0021;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3381, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_447)
{
    uint32_t const cps[2] = { 0x1B16, 0x003F };

    // 1B16 003F;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3381, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B16 003F;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3381, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_448)
{
    uint32_t const cps[2] = { 0x1B16, 0x0061 };

    // 1B16 0061;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B16 0061;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_449)
{
    uint32_t const cps[2] = { 0x1B16, 0x0041 };

    // 1B16 0041;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B16 0041;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_450)
{
    uint32_t const cps[2] = { 0x1B16, 0x0062 };

    // 1B16 0062;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3381, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B16 0062;	
    // (ᬖ) BALINESE LETTER GA GORA	[3381 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3381, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_451)
{
    uint32_t const cps[2] = { 0x1B17, 0x0021 };

    // 1B17 0021;	
    // (ᬗ) BALINESE LETTER NGA	[3382 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B17 0021;	
    // (ᬗ) BALINESE LETTER NGA	[3382 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3382, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_452)
{
    uint32_t const cps[2] = { 0x1B17, 0x003F };

    // 1B17 003F;	
    // (ᬗ) BALINESE LETTER NGA	[3382 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B17 003F;	
    // (ᬗ) BALINESE LETTER NGA	[3382 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3382, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_453)
{
    uint32_t const cps[2] = { 0x1B17, 0x0061 };

    // 1B17 0061;	
    // (ᬗ) BALINESE LETTER NGA	[3382 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B17 0061;	
    // (ᬗ) BALINESE LETTER NGA	[3382 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_454)
{
    uint32_t const cps[2] = { 0x1B17, 0x0041 };

    // 1B17 0041;	
    // (ᬗ) BALINESE LETTER NGA	[3382 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B17 0041;	
    // (ᬗ) BALINESE LETTER NGA	[3382 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_455)
{
    uint32_t const cps[2] = { 0x1B17, 0x0062 };

    // 1B17 0062;	
    // (ᬗ) BALINESE LETTER NGA	[3382 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B17 0062;	
    // (ᬗ) BALINESE LETTER NGA	[3382 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_456)
{
    uint32_t const cps[2] = { 0x1B18, 0x0021 };

    // 1B18 0021;	
    // (ᬘ) BALINESE LETTER CA	[3383 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B18 0021;	
    // (ᬘ) BALINESE LETTER CA	[3383 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3383, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_457)
{
    uint32_t const cps[2] = { 0x1B18, 0x003F };

    // 1B18 003F;	
    // (ᬘ) BALINESE LETTER CA	[3383 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B18 003F;	
    // (ᬘ) BALINESE LETTER CA	[3383 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3383, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_458)
{
    uint32_t const cps[2] = { 0x1B18, 0x0061 };

    // 1B18 0061;	
    // (ᬘ) BALINESE LETTER CA	[3383 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B18 0061;	
    // (ᬘ) BALINESE LETTER CA	[3383 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_459)
{
    uint32_t const cps[2] = { 0x1B18, 0x0041 };

    // 1B18 0041;	
    // (ᬘ) BALINESE LETTER CA	[3383 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B18 0041;	
    // (ᬘ) BALINESE LETTER CA	[3383 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_460)
{
    uint32_t const cps[2] = { 0x1B18, 0x0062 };

    // 1B18 0062;	
    // (ᬘ) BALINESE LETTER CA	[3383 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B18 0062;	
    // (ᬘ) BALINESE LETTER CA	[3383 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_461)
{
    uint32_t const cps[2] = { 0x1B19, 0x0021 };

    // 1B19 0021;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B19 0021;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3384, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_462)
{
    uint32_t const cps[2] = { 0x1B19, 0x003F };

    // 1B19 003F;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B19 003F;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3384, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_463)
{
    uint32_t const cps[2] = { 0x1B19, 0x0061 };

    // 1B19 0061;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B19 0061;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_464)
{
    uint32_t const cps[2] = { 0x1B19, 0x0041 };

    // 1B19 0041;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B19 0041;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_465)
{
    uint32_t const cps[2] = { 0x1B19, 0x0062 };

    // 1B19 0062;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B19 0062;	
    // (ᬙ) BALINESE LETTER CA LACA	[3384 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_466)
{
    uint32_t const cps[2] = { 0x1B1A, 0x0021 };

    // 1B1A 0021;	
    // (ᬚ) BALINESE LETTER JA	[3385 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1A 0021;	
    // (ᬚ) BALINESE LETTER JA	[3385 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3385, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_467)
{
    uint32_t const cps[2] = { 0x1B1A, 0x003F };

    // 1B1A 003F;	
    // (ᬚ) BALINESE LETTER JA	[3385 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1A 003F;	
    // (ᬚ) BALINESE LETTER JA	[3385 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3385, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_468)
{
    uint32_t const cps[2] = { 0x1B1A, 0x0061 };

    // 1B1A 0061;	
    // (ᬚ) BALINESE LETTER JA	[3385 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1A 0061;	
    // (ᬚ) BALINESE LETTER JA	[3385 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_469)
{
    uint32_t const cps[2] = { 0x1B1A, 0x0041 };

    // 1B1A 0041;	
    // (ᬚ) BALINESE LETTER JA	[3385 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1A 0041;	
    // (ᬚ) BALINESE LETTER JA	[3385 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_470)
{
    uint32_t const cps[2] = { 0x1B1A, 0x0062 };

    // 1B1A 0062;	
    // (ᬚ) BALINESE LETTER JA	[3385 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1A 0062;	
    // (ᬚ) BALINESE LETTER JA	[3385 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_471)
{
    uint32_t const cps[2] = { 0x1B1B, 0x0021 };

    // 1B1B 0021;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1B 0021;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3386, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_472)
{
    uint32_t const cps[2] = { 0x1B1B, 0x003F };

    // 1B1B 003F;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1B 003F;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3386, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_473)
{
    uint32_t const cps[2] = { 0x1B1B, 0x0061 };

    // 1B1B 0061;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1B 0061;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_474)
{
    uint32_t const cps[2] = { 0x1B1B, 0x0041 };

    // 1B1B 0041;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1B 0041;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_475)
{
    uint32_t const cps[2] = { 0x1B1B, 0x0062 };

    // 1B1B 0062;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1B 0062;	
    // (ᬛ) BALINESE LETTER JA JERA	[3386 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_476)
{
    uint32_t const cps[2] = { 0x1B1C, 0x0021 };

    // 1B1C 0021;	
    // (ᬜ) BALINESE LETTER NYA	[3387 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1C 0021;	
    // (ᬜ) BALINESE LETTER NYA	[3387 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3387, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_477)
{
    uint32_t const cps[2] = { 0x1B1C, 0x003F };

    // 1B1C 003F;	
    // (ᬜ) BALINESE LETTER NYA	[3387 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1C 003F;	
    // (ᬜ) BALINESE LETTER NYA	[3387 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3387, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_478)
{
    uint32_t const cps[2] = { 0x1B1C, 0x0061 };

    // 1B1C 0061;	
    // (ᬜ) BALINESE LETTER NYA	[3387 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1C 0061;	
    // (ᬜ) BALINESE LETTER NYA	[3387 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_479)
{
    uint32_t const cps[2] = { 0x1B1C, 0x0041 };

    // 1B1C 0041;	
    // (ᬜ) BALINESE LETTER NYA	[3387 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1C 0041;	
    // (ᬜ) BALINESE LETTER NYA	[3387 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_480)
{
    uint32_t const cps[2] = { 0x1B1C, 0x0062 };

    // 1B1C 0062;	
    // (ᬜ) BALINESE LETTER NYA	[3387 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1C 0062;	
    // (ᬜ) BALINESE LETTER NYA	[3387 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_481)
{
    uint32_t const cps[2] = { 0x1B1D, 0x0021 };

    // 1B1D 0021;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3388, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1D 0021;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3388, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_482)
{
    uint32_t const cps[2] = { 0x1B1D, 0x003F };

    // 1B1D 003F;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3388, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1D 003F;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3388, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_483)
{
    uint32_t const cps[2] = { 0x1B1D, 0x0061 };

    // 1B1D 0061;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1D 0061;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_484)
{
    uint32_t const cps[2] = { 0x1B1D, 0x0041 };

    // 1B1D 0041;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1D 0041;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_485)
{
    uint32_t const cps[2] = { 0x1B1D, 0x0062 };

    // 1B1D 0062;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1D 0062;	
    // (ᬝ) BALINESE LETTER TA LATIK	[3388 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_486)
{
    uint32_t const cps[2] = { 0x1B1E, 0x0021 };

    // 1B1E 0021;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1E 0021;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3389, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_487)
{
    uint32_t const cps[2] = { 0x1B1E, 0x003F };

    // 1B1E 003F;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1E 003F;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3389, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_488)
{
    uint32_t const cps[2] = { 0x1B1E, 0x0061 };

    // 1B1E 0061;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1E 0061;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_489)
{
    uint32_t const cps[2] = { 0x1B1E, 0x0041 };

    // 1B1E 0041;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1E 0041;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_490)
{
    uint32_t const cps[2] = { 0x1B1E, 0x0062 };

    // 1B1E 0062;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1E 0062;	
    // (ᬞ) BALINESE LETTER TA MURDA MAHAPRANA	[3389 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_491)
{
    uint32_t const cps[2] = { 0x1B1F, 0x0021 };

    // 1B1F 0021;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x338A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1F 0021;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x338A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_492)
{
    uint32_t const cps[2] = { 0x1B1F, 0x003F };

    // 1B1F 003F;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x338A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1F 003F;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x338A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_493)
{
    uint32_t const cps[2] = { 0x1B1F, 0x0061 };

    // 1B1F 0061;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x338A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1F 0061;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x338A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_494)
{
    uint32_t const cps[2] = { 0x1B1F, 0x0041 };

    // 1B1F 0041;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x338A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1F 0041;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x338A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_495)
{
    uint32_t const cps[2] = { 0x1B1F, 0x0062 };

    // 1B1F 0062;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x338A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B1F 0062;	
    // (ᬟ) BALINESE LETTER DA MURDA ALPAPRANA	[338A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x338A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_496)
{
    uint32_t const cps[2] = { 0x1B20, 0x0021 };

    // 1B20 0021;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x338B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B20 0021;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x338B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_497)
{
    uint32_t const cps[2] = { 0x1B20, 0x003F };

    // 1B20 003F;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x338B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B20 003F;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x338B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_498)
{
    uint32_t const cps[2] = { 0x1B20, 0x0061 };

    // 1B20 0061;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x338B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B20 0061;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x338B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_212_499)
{
    uint32_t const cps[2] = { 0x1B20, 0x0041 };

    // 1B20 0041;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x338B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B20 0041;	
    // (ᬠ) BALINESE LETTER DA MURDA MAHAPRANA	[338B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x338B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

