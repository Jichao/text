[section The Unicode Layer]

[note _Text_'s Unicode support is based on the Unicode 10 standard.]

[heading UTF-8 Conversions]

_Text_ provides four converting iterators:

* [classref boost::text::utf8::from_utf32_iterator `from_utf32_iterator`]
* [classref boost::text::utf8::to_utf32_iterator `to_utf32_iterator`]
* [classref boost::text::utf8::from_utf16_iterator `from_utf16_iterator`]
* [classref boost::text::utf8::to_utf16_iterator `to_utf16_iterator`]

By default, these produce the Unicode replacement character `0xFFFD` when
encoutering an invalid encoding.  These are the ones that _Text_ uses
internally when performing conversions.  The exact error handling behavior can
be controlled via the `ErrorHandler` template parameter.

The Unicode standard is flexible with respect to where, in an incoming stream,
encoding errors are repored.  However, the standard provides recommendations
for where within a stream, and how frequently within that stream, errors
should be reported.  _Text_'s converting iterators follow the Unicode
recommendations.  See Unicode 10, "Best Practices for Using U+FFFD" and Table
3-8.

The converting iterators are pretty straightforward, but there is an important
caveat.  Because each of these converting iterators does a substantial amount
of work in increment and decrement operations, including in some cases caching
the result of reading several characters of a multi-character encoding,
post-increment and pot-decrement can be quite a bit more expensive than
pre-increment and pre-decrement.

[note The `to_utf32_iterator` converting iterator can be used to iterate
across Unicode code points in the _Text_ string types.]

TODO

[endsect]
