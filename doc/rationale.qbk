[section Rationale]

[heading Size and Index Types]

Signed values as sizes are advantageous for a number of reasons:

# When doing math with sizes, intermediate values can be negative (which makes
  sense), instead of wrapping around to a very large value (which does not).

# Optimizers produce better code generation in more situations for signed
  values.

# Signed values lead naturally to the negative-indexable slicing that _Text_
  uses.

This last point is particularly important.  I think that negative indexing
should be allowed on all random access ranges.


[heading `char const *` Iterators]

_s_ and _sv_ both use `char const *` as their forward iterator types.  This
allows interoperability with C strings and arrays of `char`.


[heading Where Are `data()`, `c_str()`, `front()`, and `back()`?]

_s_ does not have any of these, even though `std::string` does.  Here's why:

* Since `string::iterator` is just `char const *`, and _s_ is always
  null-terminated, `data()`, `c_str()`, and `begin()` are synonyms.

* `front()` and `back()` have no reason to be members, so they are now free
  functions.  This makes them usable on many types of sequences of `char`, not
  just _s_.


[heading Inserting Null Terminated Sequences]

The _s_ inserting interfaces (`insert()` and `replace()`) remove explicit null
terminators from inserted _svs_ and _rsvs_, because leaving them in is almost
certainly an error.  This can still be accomplished by directly writing
through the index operator or or an iterator, or by inserting
`string_view("\0")`.


[heading None of the _Text_ String Types Does Formatted Output]

This is necessary because a single `char` is not a code point, and a even
single code point does not correspond to a single formatted output glyph.
This means that the layout/spacing of the output is not something _Text_ can
determine.  Higher-level code must deal with such issues.


[heading _Text_ Does Not Use allocators]

Allocators are too low gain for the cost they impose.  How many
`std::basic_string` template instantations in the code bases of the world
involve a non-default allocator?  I would be surprised if it was as high as
1%.  Allocators may once have served an important function, but in modern C++
are a perfect example of not sticking to "Don't pay for what you don't use."

[endsect]
