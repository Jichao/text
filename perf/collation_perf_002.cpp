// Warning! This file is autogenerated.
#include <boost/text/collate.hpp>

#include <benchmark/benchmark.h>

uint32_t cps_200[] = {
0x11160, 0x11161, 0x11162, 0x11163, 0x11164, 0x11165, 0x11166, 0x11167, 0x11168, 0x11169, 0x1116a, 0x1116b, 0x1116c, 0x1116d, 0x1116e, 0x1116f, 0x11170, 0x11171, 0x11172, 0x11173, 0x11174, 0x11175, 0x11176, 0x11180, 0x11181, 0x11182, 0x11183, 0x11184, 0x11185, 0x11186, 0x11187, 0x11188, 0x11189, 0x1118a, 0x1118b, 0x1118c, 0x1118d, 0x1118e, 0x1118f, 0x11190, 0x11191, 0x11192, 0x11193, 0x11194, 0x11195, 0x11196, 0x11197, 0x11198, 0x11199, 0x1119a, 0x1119b, 0x1119c, 0x1119d, 0x1119e, 0x1119f, 0x111a0, 0x111a1, 0x111a2, 0x111a3, 0x111a4, 0x111a5, 0x111a6, 0x111a7, 0x111a8, 0x111a9, 0x111aa, 0x111ab, 0x111ac, 0x111ad, 0x111ae, 0x111af, 0x111b0, 0x111b1, 0x111b2, 0x111b3, 0x111b4, 0x111b5, 0x111b6, 0x111b7, 0x111b8, 0x111b9, 0x111ba, 0x111bb, 0x111bc, 0x111bd, 0x111be, 0x111bf, 0x111c0, 0x111c1, 0x111c2, 0x111c3, 0x111c4, 0x111c5, 0x111c6, 0x111c7, 0x111c8, 0x111c9, 0x111ca, 0x111cb, 0x111cc
};

void BM_collation_200(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_200, cps_200 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_200);

uint32_t cps_201[] = {
0x111cd, 0x111d0, 0x111d1, 0x111d2, 0x111d3, 0x111d4, 0x111d5, 0x111d6, 0x111d7, 0x111d8, 0x111d9, 0x111da, 0x111db, 0x111dc, 0x111dd, 0x111de, 0x111df, 0x111e1, 0x111e2, 0x111e3, 0x111e4, 0x111e5, 0x111e6, 0x111e7, 0x111e8, 0x111e9, 0x111ea, 0x111eb, 0x111ec, 0x111ed, 0x111ee, 0x111ef, 0x111f0, 0x111f1, 0x111f2, 0x111f3, 0x111f4, 0x11200, 0x11201, 0x11202, 0x11203, 0x11204, 0x11205, 0x11206, 0x11207, 0x11208, 0x11209, 0x1120a, 0x1120b, 0x1120c, 0x1120d, 0x1120e, 0x1120f, 0x11210, 0x11211, 0x11213, 0x11214, 0x11215, 0x11216, 0x11217, 0x11218, 0x11219, 0x1121a, 0x1121b, 0x1121c, 0x1121d, 0x1121e, 0x1121f, 0x11220, 0x11221, 0x11222, 0x11223, 0x11224, 0x11225, 0x11226, 0x11227, 0x11228, 0x11229, 0x1122a, 0x1122b, 0x1122c, 0x1122d, 0x1122e, 0x1122f, 0x11230, 0x11231, 0x11232, 0x11233, 0x11234, 0x11235, 0x11236, 0x11237, 0x11238, 0x11239, 0x1123a, 0x1123b, 0x1123c, 0x1123d, 0x1123e, 0x11280
};

void BM_collation_201(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_201, cps_201 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_201);

uint32_t cps_202[] = {
0x11281, 0x11282, 0x11283, 0x11284, 0x11285, 0x11286, 0x11288, 0x1128a, 0x1128b, 0x1128c, 0x1128d, 0x1128f, 0x11290, 0x11291, 0x11292, 0x11293, 0x11294, 0x11295, 0x11296, 0x11297, 0x11298, 0x11299, 0x1129a, 0x1129b, 0x1129c, 0x1129d, 0x1129f, 0x112a0, 0x112a1, 0x112a2, 0x112a3, 0x112a4, 0x112a5, 0x112a6, 0x112a7, 0x112a8, 0x112a9, 0x112b0, 0x112b1, 0x112b2, 0x112b3, 0x112b4, 0x112b5, 0x112b6, 0x112b7, 0x112b8, 0x112b9, 0x112ba, 0x112bb, 0x112bc, 0x112bd, 0x112be, 0x112bf, 0x112c0, 0x112c1, 0x112c2, 0x112c3, 0x112c4, 0x112c5, 0x112c6, 0x112c7, 0x112c8, 0x112c9, 0x112ca, 0x112cb, 0x112cc, 0x112cd, 0x112ce, 0x112cf, 0x112d0, 0x112d1, 0x112d2, 0x112d3, 0x112d4, 0x112d5, 0x112d6, 0x112d7, 0x112d8, 0x112d9, 0x112da, 0x112db, 0x112dc, 0x112dd, 0x112de, 0x112df, 0x112e0, 0x112e1, 0x112e2, 0x112e3, 0x112e4, 0x112e5, 0x112e6, 0x112e7, 0x112e8, 0x112e9, 0x112ea, 0x112f0, 0x112f1, 0x112f2, 0x112f3
};

void BM_collation_202(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_202, cps_202 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_202);

uint32_t cps_203[] = {
0x112f4, 0x112f5, 0x112f6, 0x112f7, 0x112f8, 0x112f9, 0x11300, 0x11301, 0x11302, 0x11303, 0x11305, 0x11306, 0x11307, 0x11308, 0x11309, 0x1130a, 0x1130b, 0x1130c, 0x1130f, 0x11310, 0x11313, 0x11314, 0x11315, 0x11316, 0x11317, 0x11318, 0x11319, 0x1131a, 0x1131b, 0x1131c, 0x1131d, 0x1131e, 0x1131f, 0x11320, 0x11321, 0x11322, 0x11323, 0x11324, 0x11325, 0x11326, 0x11327, 0x11328, 0x1132a, 0x1132b, 0x1132c, 0x1132d, 0x1132e, 0x1132f, 0x11330, 0x11332, 0x11333, 0x11335, 0x11336, 0x11337, 0x11338, 0x11339, 0x1133c, 0x1133d, 0x1133e, 0x1133f, 0x11340, 0x11341, 0x11342, 0x11343, 0x11344, 0x11347, 0x11347, 0x1133e, 0x11347, 0x11357, 0x11348, 0x1134b, 0x1134c, 0x1134d, 0x11350, 0x11357, 0x1135d, 0x1135e, 0x1135f, 0x11360, 0x11361, 0x11362, 0x11363, 0x11366, 0x11367, 0x11368, 0x11369, 0x1136a, 0x1136b, 0x1136c, 0x11370, 0x11371, 0x11372, 0x11373, 0x11374, 0x11400, 0x11401, 0x11402, 0x11403, 0x11404, 0x11405, 0x11406
};

void BM_collation_203(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_203, cps_203 + 102, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_203);

uint32_t cps_204[] = {
0x11407, 0x11408, 0x11409, 0x1140a, 0x1140b, 0x1140c, 0x1140d, 0x1140e, 0x1140f, 0x11410, 0x11411, 0x11412, 0x11413, 0x11414, 0x11415, 0x11416, 0x11417, 0x11418, 0x11419, 0x1141a, 0x1141b, 0x1141c, 0x1141d, 0x1141e, 0x1141f, 0x11420, 0x11421, 0x11422, 0x11423, 0x11424, 0x11425, 0x11426, 0x11427, 0x11428, 0x11429, 0x1142a, 0x1142b, 0x1142c, 0x1142d, 0x1142e, 0x1142f, 0x11430, 0x11431, 0x11432, 0x11433, 0x11434, 0x11435, 0x11436, 0x11437, 0x11438, 0x11439, 0x1143a, 0x1143b, 0x1143c, 0x1143d, 0x1143e, 0x1143f, 0x11440, 0x11441, 0x11442, 0x11443, 0x11444, 0x11445, 0x11446, 0x11447, 0x11448, 0x11449, 0x1144a, 0x1144b, 0x1144c, 0x1144d, 0x1144e, 0x1144f, 0x11450, 0x11451, 0x11452, 0x11453, 0x11454, 0x11455, 0x11456, 0x11457, 0x11458, 0x11459, 0x1145b, 0x1145d, 0x11480, 0x11481, 0x11482, 0x11483, 0x11484, 0x11485, 0x11486, 0x11487, 0x11488, 0x11489, 0x1148a, 0x1148b, 0x1148c, 0x1148d, 0x1148e
};

void BM_collation_204(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_204, cps_204 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_204);

uint32_t cps_205[] = {
0x1148f, 0x11490, 0x11491, 0x11492, 0x11493, 0x11494, 0x11495, 0x11496, 0x11497, 0x11498, 0x11499, 0x1149a, 0x1149b, 0x1149c, 0x1149d, 0x1149e, 0x1149f, 0x114a0, 0x114a1, 0x114a2, 0x114a3, 0x114a4, 0x114a5, 0x114a6, 0x114a7, 0x114a8, 0x114a9, 0x114aa, 0x114ab, 0x114ac, 0x114ad, 0x114ae, 0x114af, 0x114b0, 0x114b1, 0x114b2, 0x114b3, 0x114b4, 0x114b5, 0x114b6, 0x114b7, 0x114b8, 0x114b9, 0x114b9, 0x114b0, 0x114b9, 0x114ba, 0x114b9, 0x114bd, 0x114ba, 0x114bb, 0x114bc, 0x114bd, 0x114be, 0x114bf, 0x114c0, 0x114c1, 0x114c2, 0x114c3, 0x114c4, 0x114c5, 0x114c6, 0x114c7, 0x114d0, 0x114d1, 0x114d2, 0x114d3, 0x114d4, 0x114d5, 0x114d6, 0x114d7, 0x114d8, 0x114d9, 0x11580, 0x11581, 0x11582, 0x11583, 0x11584, 0x11585, 0x11586, 0x11587, 0x11588, 0x11589, 0x1158a, 0x1158b, 0x1158c, 0x1158d, 0x1158e, 0x1158f, 0x11590, 0x11591, 0x11592, 0x11593, 0x11594, 0x11595, 0x11596, 0x11597, 0x11598, 0x11599, 0x1159a, 0x1159b, 0x1159c, 0x1159d
};

void BM_collation_205(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_205, cps_205 + 103, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_205);

uint32_t cps_206[] = {
0x1159e, 0x1159f, 0x115a0, 0x115a1, 0x115a2, 0x115a3, 0x115a4, 0x115a5, 0x115a6, 0x115a7, 0x115a8, 0x115a9, 0x115aa, 0x115ab, 0x115ac, 0x115ad, 0x115ae, 0x115af, 0x115b0, 0x115b1, 0x115b2, 0x115b3, 0x115b4, 0x115b5, 0x115b8, 0x115b8, 0x115af, 0x115b9, 0x115b9, 0x115af, 0x115ba, 0x115bb, 0x115bc, 0x115bd, 0x115be, 0x115bf, 0x115c0, 0x115c1, 0x115c2, 0x115c3, 0x115c4, 0x115c5, 0x115c6, 0x115c7, 0x115c8, 0x115c9, 0x115ca, 0x115cb, 0x115cc, 0x115cd, 0x115ce, 0x115cf, 0x115d0, 0x115d1, 0x115d2, 0x115d3, 0x115d4, 0x115d5, 0x115d6, 0x115d7, 0x115d8, 0x115d9, 0x115da, 0x115db, 0x115dc, 0x115dd, 0x11600, 0x11601, 0x11602, 0x11603, 0x11604, 0x11605, 0x11606, 0x11607, 0x11608, 0x11609, 0x1160a, 0x1160b, 0x1160c, 0x1160d, 0x1160e, 0x1160f, 0x11610, 0x11611, 0x11612, 0x11613, 0x11614, 0x11615, 0x11616, 0x11617, 0x11618, 0x11619, 0x1161a, 0x1161b, 0x1161c, 0x1161d, 0x1161e, 0x1161f, 0x11620, 0x11621, 0x11622, 0x11623
};

void BM_collation_206(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_206, cps_206 + 102, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_206);

uint32_t cps_207[] = {
0x11624, 0x11625, 0x11626, 0x11627, 0x11628, 0x11629, 0x1162a, 0x1162b, 0x1162c, 0x1162d, 0x1162e, 0x1162f, 0x11630, 0x11631, 0x11632, 0x11633, 0x11634, 0x11635, 0x11636, 0x11637, 0x11638, 0x11639, 0x1163a, 0x1163b, 0x1163c, 0x1163d, 0x1163e, 0x1163f, 0x11640, 0x11641, 0x11642, 0x11643, 0x11644, 0x11650, 0x11651, 0x11652, 0x11653, 0x11654, 0x11655, 0x11656, 0x11657, 0x11658, 0x11659, 0x11660, 0x11661, 0x11662, 0x11663, 0x11664, 0x11665, 0x11666, 0x11667, 0x11668, 0x11669, 0x1166a, 0x1166b, 0x1166c, 0x11680, 0x11681, 0x11682, 0x11683, 0x11684, 0x11685, 0x11686, 0x11687, 0x11688, 0x11689, 0x1168a, 0x1168b, 0x1168c, 0x1168d, 0x1168e, 0x1168f, 0x11690, 0x11691, 0x11692, 0x11693, 0x11694, 0x11695, 0x11696, 0x11697, 0x11698, 0x11699, 0x1169a, 0x1169b, 0x1169c, 0x1169d, 0x1169e, 0x1169f, 0x116a0, 0x116a1, 0x116a2, 0x116a3, 0x116a4, 0x116a5, 0x116a6, 0x116a7, 0x116a8, 0x116a9, 0x116aa, 0x116ab
};

void BM_collation_207(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_207, cps_207 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_207);

uint32_t cps_208[] = {
0x116ac, 0x116ad, 0x116ae, 0x116af, 0x116b0, 0x116b1, 0x116b2, 0x116b3, 0x116b4, 0x116b5, 0x116b6, 0x116b7, 0x116c0, 0x116c1, 0x116c2, 0x116c3, 0x116c4, 0x116c5, 0x116c6, 0x116c7, 0x116c8, 0x116c9, 0x11700, 0x11701, 0x11702, 0x11703, 0x11704, 0x11705, 0x11706, 0x11707, 0x11708, 0x11709, 0x1170a, 0x1170b, 0x1170c, 0x1170d, 0x1170e, 0x1170f, 0x11710, 0x11711, 0x11712, 0x11713, 0x11714, 0x11715, 0x11716, 0x11717, 0x11718, 0x11719, 0x1171d, 0x1171e, 0x1171f, 0x11720, 0x11721, 0x11722, 0x11723, 0x11724, 0x11725, 0x11726, 0x11727, 0x11728, 0x11729, 0x1172a, 0x1172b, 0x11730, 0x11731, 0x11732, 0x11733, 0x11734, 0x11735, 0x11736, 0x11737, 0x11738, 0x11739, 0x1173a, 0x1173b, 0x1173c, 0x1173d, 0x1173e, 0x1173f, 0x118a0, 0x118a1, 0x118a2, 0x118a3, 0x118a4, 0x118a5, 0x118a6, 0x118a7, 0x118a8, 0x118a9, 0x118aa, 0x118ab, 0x118ac, 0x118ad, 0x118ae, 0x118af, 0x118b0, 0x118b1, 0x118b2, 0x118b3, 0x118b4
};

void BM_collation_208(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_208, cps_208 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_208);

uint32_t cps_209[] = {
0x118b5, 0x118b6, 0x118b7, 0x118b8, 0x118b9, 0x118ba, 0x118bb, 0x118bc, 0x118bd, 0x118be, 0x118bf, 0x118c0, 0x118c1, 0x118c2, 0x118c3, 0x118c4, 0x118c5, 0x118c6, 0x118c7, 0x118c8, 0x118c9, 0x118ca, 0x118cb, 0x118cc, 0x118cd, 0x118ce, 0x118cf, 0x118d0, 0x118d1, 0x118d2, 0x118d3, 0x118d4, 0x118d5, 0x118d6, 0x118d7, 0x118d8, 0x118d9, 0x118da, 0x118db, 0x118dc, 0x118dd, 0x118de, 0x118df, 0x118e0, 0x118e1, 0x118e2, 0x118e3, 0x118e4, 0x118e5, 0x118e6, 0x118e7, 0x118e8, 0x118e9, 0x118ea, 0x118eb, 0x118ec, 0x118ed, 0x118ee, 0x118ef, 0x118f0, 0x118f1, 0x118f2, 0x118ff, 0x11a00, 0x11a01, 0x11a02, 0x11a03, 0x11a04, 0x11a05, 0x11a06, 0x11a07, 0x11a08, 0x11a09, 0x11a0a, 0x11a0b, 0x11a0c, 0x11a0d, 0x11a0e, 0x11a0f, 0x11a10, 0x11a11, 0x11a12, 0x11a13, 0x11a14, 0x11a15, 0x11a16, 0x11a17, 0x11a18, 0x11a19, 0x11a1a, 0x11a1b, 0x11a1c, 0x11a1d, 0x11a1e, 0x11a1f, 0x11a20, 0x11a21, 0x11a22, 0x11a23, 0x11a24
};

void BM_collation_209(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_209, cps_209 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_209);

uint32_t cps_210[] = {
0x11a25, 0x11a26, 0x11a27, 0x11a28, 0x11a29, 0x11a2a, 0x11a2b, 0x11a2c, 0x11a2d, 0x11a2e, 0x11a2f, 0x11a30, 0x11a31, 0x11a32, 0x11a33, 0x11a34, 0x11a35, 0x11a36, 0x11a37, 0x11a38, 0x11a39, 0x11a3a, 0x11a3b, 0x11a3c, 0x11a3d, 0x11a3e, 0x11a3f, 0x11a40, 0x11a41, 0x11a42, 0x11a43, 0x11a44, 0x11a45, 0x11a46, 0x11a47, 0x11a50, 0x11a51, 0x11a52, 0x11a53, 0x11a54, 0x11a55, 0x11a56, 0x11a57, 0x11a58, 0x11a59, 0x11a5a, 0x11a5b, 0x11a5c, 0x11a5d, 0x11a5e, 0x11a5f, 0x11a60, 0x11a61, 0x11a62, 0x11a63, 0x11a64, 0x11a65, 0x11a66, 0x11a67, 0x11a68, 0x11a69, 0x11a6a, 0x11a6b, 0x11a6c, 0x11a6d, 0x11a6e, 0x11a6f, 0x11a70, 0x11a71, 0x11a72, 0x11a73, 0x11a74, 0x11a75, 0x11a76, 0x11a77, 0x11a78, 0x11a79, 0x11a7a, 0x11a7b, 0x11a7c, 0x11a7d, 0x11a7e, 0x11a7f, 0x11a80, 0x11a81, 0x11a82, 0x11a83, 0x11a86, 0x11a87, 0x11a88, 0x11a89, 0x11a8a, 0x11a8b, 0x11a8c, 0x11a8d, 0x11a8e, 0x11a8f, 0x11a90, 0x11a91, 0x11a92
};

void BM_collation_210(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_210, cps_210 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_210);

uint32_t cps_211[] = {
0x11a93, 0x11a94, 0x11a95, 0x11a96, 0x11a97, 0x11a98, 0x11a99, 0x11a9a, 0x11a9b, 0x11a9c, 0x11a9e, 0x11a9f, 0x11aa0, 0x11aa1, 0x11aa2, 0x11ac0, 0x11ac1, 0x11ac2, 0x11ac3, 0x11ac4, 0x11ac5, 0x11ac6, 0x11ac7, 0x11ac8, 0x11ac9, 0x11aca, 0x11acb, 0x11acc, 0x11acd, 0x11ace, 0x11acf, 0x11ad0, 0x11ad1, 0x11ad2, 0x11ad3, 0x11ad4, 0x11ad5, 0x11ad6, 0x11ad7, 0x11ad8, 0x11ad9, 0x11ada, 0x11adb, 0x11adc, 0x11add, 0x11ade, 0x11adf, 0x11ae0, 0x11ae1, 0x11ae2, 0x11ae3, 0x11ae4, 0x11ae5, 0x11ae6, 0x11ae7, 0x11ae8, 0x11ae9, 0x11aea, 0x11aeb, 0x11aec, 0x11aed, 0x11aee, 0x11aef, 0x11af0, 0x11af1, 0x11af2, 0x11af3, 0x11af4, 0x11af5, 0x11af6, 0x11af7, 0x11af8, 0x11c00, 0x11c01, 0x11c02, 0x11c03, 0x11c04, 0x11c05, 0x11c06, 0x11c07, 0x11c08, 0x11c0a, 0x11c0b, 0x11c0c, 0x11c0d, 0x11c0e, 0x11c0f, 0x11c10, 0x11c11, 0x11c12, 0x11c13, 0x11c14, 0x11c15, 0x11c16, 0x11c17, 0x11c18, 0x11c19, 0x11c1a, 0x11c1b, 0x11c1c
};

void BM_collation_211(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_211, cps_211 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_211);

uint32_t cps_212[] = {
0x11c1d, 0x11c1e, 0x11c1f, 0x11c20, 0x11c21, 0x11c22, 0x11c23, 0x11c24, 0x11c25, 0x11c26, 0x11c27, 0x11c28, 0x11c29, 0x11c2a, 0x11c2b, 0x11c2c, 0x11c2d, 0x11c2e, 0x11c2f, 0x11c30, 0x11c31, 0x11c32, 0x11c33, 0x11c34, 0x11c35, 0x11c36, 0x11c38, 0x11c39, 0x11c3a, 0x11c3b, 0x11c3c, 0x11c3d, 0x11c3e, 0x11c3f, 0x11c40, 0x11c41, 0x11c42, 0x11c43, 0x11c44, 0x11c45, 0x11c50, 0x11c51, 0x11c52, 0x11c53, 0x11c54, 0x11c55, 0x11c56, 0x11c57, 0x11c58, 0x11c59, 0x11c5a, 0x11c5b, 0x11c5c, 0x11c5d, 0x11c5e, 0x11c5f, 0x11c60, 0x11c61, 0x11c62, 0x11c63, 0x11c64, 0x11c65, 0x11c66, 0x11c67, 0x11c68, 0x11c69, 0x11c6a, 0x11c6b, 0x11c6c, 0x11c70, 0x11c71, 0x11c72, 0x11c73, 0x11c74, 0x11c75, 0x11c76, 0x11c77, 0x11c78, 0x11c79, 0x11c7a, 0x11c7b, 0x11c7c, 0x11c7d, 0x11c7e, 0x11c7f, 0x11c80, 0x11c81, 0x11c82, 0x11c83, 0x11c84, 0x11c85, 0x11c86, 0x11c87, 0x11c88, 0x11c89, 0x11c8a, 0x11c8b, 0x11c8c, 0x11c8d, 0x11c8e
};

void BM_collation_212(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_212, cps_212 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_212);

uint32_t cps_213[] = {
0x11c8f, 0x11c92, 0x11c93, 0x11c94, 0x11c95, 0x11c96, 0x11c97, 0x11c98, 0x11c99, 0x11c9a, 0x11c9b, 0x11c9c, 0x11c9d, 0x11c9e, 0x11c9f, 0x11ca0, 0x11ca1, 0x11ca2, 0x11ca3, 0x11ca4, 0x11ca5, 0x11ca6, 0x11ca7, 0x11ca9, 0x11caa, 0x11cab, 0x11cac, 0x11cad, 0x11cae, 0x11caf, 0x11cb0, 0x11cb1, 0x11cb2, 0x11cb3, 0x11cb4, 0x11cb5, 0x11cb6, 0x11d00, 0x11d01, 0x11d02, 0x11d03, 0x11d04, 0x11d05, 0x11d06, 0x11d08, 0x11d09, 0x11d0b, 0x11d0c, 0x11d0d, 0x11d0e, 0x11d0f, 0x11d10, 0x11d11, 0x11d12, 0x11d13, 0x11d14, 0x11d15, 0x11d16, 0x11d17, 0x11d18, 0x11d19, 0x11d1a, 0x11d1b, 0x11d1c, 0x11d1d, 0x11d1e, 0x11d1f, 0x11d20, 0x11d21, 0x11d22, 0x11d23, 0x11d24, 0x11d25, 0x11d26, 0x11d27, 0x11d28, 0x11d29, 0x11d2a, 0x11d2b, 0x11d2c, 0x11d2d, 0x11d2e, 0x11d2f, 0x11d30, 0x11d31, 0x11d32, 0x11d33, 0x11d34, 0x11d35, 0x11d36, 0x11d3a, 0x11d3c, 0x11d3d, 0x11d3f, 0x11d40, 0x11d41, 0x11d42, 0x11d43, 0x11d44, 0x11d45
};

void BM_collation_213(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_213, cps_213 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_213);

uint32_t cps_214[] = {
0x11d46, 0x11d47, 0x11d50, 0x11d51, 0x11d52, 0x11d53, 0x11d54, 0x11d55, 0x11d56, 0x11d57, 0x11d58, 0x11d59, 0x12000, 0x12001, 0x12002, 0x12003, 0x12004, 0x12005, 0x12006, 0x12007, 0x12008, 0x12009, 0x1200a, 0x1200b, 0x1200c, 0x1200d, 0x1200e, 0x1200f, 0x12010, 0x12011, 0x12012, 0x12013, 0x12014, 0x12015, 0x12016, 0x12017, 0x12018, 0x12019, 0x1201a, 0x1201b, 0x1201c, 0x1201d, 0x1201e, 0x1201f, 0x12020, 0x12021, 0x12022, 0x12023, 0x12024, 0x12025, 0x12026, 0x12027, 0x12028, 0x12029, 0x1202a, 0x1202b, 0x1202c, 0x1202d, 0x1202e, 0x1202f, 0x12030, 0x12031, 0x12032, 0x12033, 0x12034, 0x12035, 0x12036, 0x12037, 0x12038, 0x12039, 0x1203a, 0x1203b, 0x1203c, 0x1203d, 0x1203e, 0x1203f, 0x12040, 0x12041, 0x12042, 0x12043, 0x12044, 0x12045, 0x12046, 0x12047, 0x12048, 0x12049, 0x1204a, 0x1204b, 0x1204c, 0x1204d, 0x1204e, 0x1204f, 0x12050, 0x12051, 0x12052, 0x12053, 0x12054, 0x12055, 0x12056, 0x12057
};

void BM_collation_214(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_214, cps_214 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_214);

uint32_t cps_215[] = {
0x12058, 0x12059, 0x1205a, 0x1205b, 0x1205c, 0x1205d, 0x1205e, 0x1205f, 0x12060, 0x12061, 0x12062, 0x12063, 0x12064, 0x12065, 0x12066, 0x12067, 0x12068, 0x12069, 0x1206a, 0x1206b, 0x1206c, 0x1206d, 0x1206e, 0x1206f, 0x12070, 0x12071, 0x12072, 0x12073, 0x12074, 0x12075, 0x12076, 0x12077, 0x12078, 0x12079, 0x1207a, 0x1207b, 0x1207c, 0x1207d, 0x1207e, 0x1207f, 0x12080, 0x12081, 0x12082, 0x12083, 0x12084, 0x12085, 0x12086, 0x12087, 0x12088, 0x12089, 0x1208a, 0x1208b, 0x1208c, 0x1208d, 0x1208e, 0x1208f, 0x12090, 0x12091, 0x12092, 0x12093, 0x12094, 0x12095, 0x12096, 0x12097, 0x12098, 0x12099, 0x1209a, 0x1209b, 0x1209c, 0x1209d, 0x1209e, 0x1209f, 0x120a0, 0x120a1, 0x120a2, 0x120a3, 0x120a4, 0x120a5, 0x120a6, 0x120a7, 0x120a8, 0x120a9, 0x120aa, 0x120ab, 0x120ac, 0x120ad, 0x120ae, 0x120af, 0x120b0, 0x120b1, 0x120b2, 0x120b3, 0x120b4, 0x120b5, 0x120b6, 0x120b7, 0x120b8, 0x120b9, 0x120ba, 0x120bb
};

void BM_collation_215(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_215, cps_215 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_215);

uint32_t cps_216[] = {
0x120bc, 0x120bd, 0x120be, 0x120bf, 0x120c0, 0x120c1, 0x120c2, 0x120c3, 0x120c4, 0x120c5, 0x120c6, 0x120c7, 0x120c8, 0x120c9, 0x120ca, 0x120cb, 0x120cc, 0x120cd, 0x120ce, 0x120cf, 0x120d0, 0x120d1, 0x120d2, 0x120d3, 0x120d4, 0x120d5, 0x120d6, 0x120d7, 0x120d8, 0x120d9, 0x120da, 0x120db, 0x120dc, 0x120dd, 0x120de, 0x120df, 0x120e0, 0x120e1, 0x120e2, 0x120e3, 0x120e4, 0x120e5, 0x120e6, 0x120e7, 0x120e8, 0x120e9, 0x120ea, 0x120eb, 0x120ec, 0x120ed, 0x120ee, 0x120ef, 0x120f0, 0x120f1, 0x120f2, 0x120f3, 0x120f4, 0x120f5, 0x120f6, 0x120f7, 0x120f8, 0x120f9, 0x120fa, 0x120fb, 0x120fc, 0x120fd, 0x120fe, 0x120ff, 0x12100, 0x12101, 0x12102, 0x12103, 0x12104, 0x12105, 0x12106, 0x12107, 0x12108, 0x12109, 0x1210a, 0x1210b, 0x1210c, 0x1210d, 0x1210e, 0x1210f, 0x12110, 0x12111, 0x12112, 0x12113, 0x12114, 0x12115, 0x12116, 0x12117, 0x12118, 0x12119, 0x1211a, 0x1211b, 0x1211c, 0x1211d, 0x1211e, 0x1211f
};

void BM_collation_216(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_216, cps_216 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_216);

uint32_t cps_217[] = {
0x12120, 0x12121, 0x12122, 0x12123, 0x12124, 0x12125, 0x12126, 0x12127, 0x12128, 0x12129, 0x1212a, 0x1212b, 0x1212c, 0x1212d, 0x1212e, 0x1212f, 0x12130, 0x12131, 0x12132, 0x12133, 0x12134, 0x12135, 0x12136, 0x12137, 0x12138, 0x12139, 0x1213a, 0x1213b, 0x1213c, 0x1213d, 0x1213e, 0x1213f, 0x12140, 0x12141, 0x12142, 0x12143, 0x12144, 0x12145, 0x12146, 0x12147, 0x12148, 0x12149, 0x1214a, 0x1214b, 0x1214c, 0x1214d, 0x1214e, 0x1214f, 0x12150, 0x12151, 0x12152, 0x12153, 0x12154, 0x12155, 0x12156, 0x12157, 0x12158, 0x12159, 0x1215a, 0x1215b, 0x1215c, 0x1215d, 0x1215e, 0x1215f, 0x12160, 0x12161, 0x12162, 0x12163, 0x12164, 0x12165, 0x12166, 0x12167, 0x12168, 0x12169, 0x1216a, 0x1216b, 0x1216c, 0x1216d, 0x1216e, 0x1216f, 0x12170, 0x12171, 0x12172, 0x12173, 0x12174, 0x12175, 0x12176, 0x12177, 0x12178, 0x12179, 0x1217a, 0x1217b, 0x1217c, 0x1217d, 0x1217e, 0x1217f, 0x12180, 0x12181, 0x12182, 0x12183
};

void BM_collation_217(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_217, cps_217 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_217);

uint32_t cps_218[] = {
0x12184, 0x12185, 0x12186, 0x12187, 0x12188, 0x12189, 0x1218a, 0x1218b, 0x1218c, 0x1218d, 0x1218e, 0x1218f, 0x12190, 0x12191, 0x12192, 0x12193, 0x12194, 0x12195, 0x12196, 0x12197, 0x12198, 0x12199, 0x1219a, 0x1219b, 0x1219c, 0x1219d, 0x1219e, 0x1219f, 0x121a0, 0x121a1, 0x121a2, 0x121a3, 0x121a4, 0x121a5, 0x121a6, 0x121a7, 0x121a8, 0x121a9, 0x121aa, 0x121ab, 0x121ac, 0x121ad, 0x121ae, 0x121af, 0x121b0, 0x121b1, 0x121b2, 0x121b3, 0x121b4, 0x121b5, 0x121b6, 0x121b7, 0x121b8, 0x121b9, 0x121ba, 0x121bb, 0x121bc, 0x121bd, 0x121be, 0x121bf, 0x121c0, 0x121c1, 0x121c2, 0x121c3, 0x121c4, 0x121c5, 0x121c6, 0x121c7, 0x121c8, 0x121c9, 0x121ca, 0x121cb, 0x121cc, 0x121cd, 0x121ce, 0x121cf, 0x121d0, 0x121d1, 0x121d2, 0x121d3, 0x121d4, 0x121d5, 0x121d6, 0x121d7, 0x121d8, 0x121d9, 0x121da, 0x121db, 0x121dc, 0x121dd, 0x121de, 0x121df, 0x121e0, 0x121e1, 0x121e2, 0x121e3, 0x121e4, 0x121e5, 0x121e6, 0x121e7
};

void BM_collation_218(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_218, cps_218 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_218);

uint32_t cps_219[] = {
0x121e8, 0x121e9, 0x121ea, 0x121eb, 0x121ec, 0x121ed, 0x121ee, 0x121ef, 0x121f0, 0x121f1, 0x121f2, 0x121f3, 0x121f4, 0x121f5, 0x121f6, 0x121f7, 0x121f8, 0x121f9, 0x121fa, 0x121fb, 0x121fc, 0x121fd, 0x121fe, 0x121ff, 0x12200, 0x12201, 0x12202, 0x12203, 0x12204, 0x12205, 0x12206, 0x12207, 0x12208, 0x12209, 0x1220a, 0x1220b, 0x1220c, 0x1220d, 0x1220e, 0x1220f, 0x12210, 0x12211, 0x12212, 0x12213, 0x12214, 0x12215, 0x12216, 0x12217, 0x12218, 0x12219, 0x1221a, 0x1221b, 0x1221c, 0x1221d, 0x1221e, 0x1221f, 0x12220, 0x12221, 0x12222, 0x12223, 0x12224, 0x12225, 0x12226, 0x12227, 0x12228, 0x12229, 0x1222a, 0x1222b, 0x1222c, 0x1222d, 0x1222e, 0x1222f, 0x12230, 0x12231, 0x12232, 0x12233, 0x12234, 0x12235, 0x12236, 0x12237, 0x12238, 0x12239, 0x1223a, 0x1223b, 0x1223c, 0x1223d, 0x1223e, 0x1223f, 0x12240, 0x12241, 0x12242, 0x12243, 0x12244, 0x12245, 0x12246, 0x12247, 0x12248, 0x12249, 0x1224a, 0x1224b
};

void BM_collation_219(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_219, cps_219 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_219);

uint32_t cps_220[] = {
0x1224c, 0x1224d, 0x1224e, 0x1224f, 0x12250, 0x12251, 0x12252, 0x12253, 0x12254, 0x12255, 0x12256, 0x12257, 0x12258, 0x12259, 0x1225a, 0x1225b, 0x1225c, 0x1225d, 0x1225e, 0x1225f, 0x12260, 0x12261, 0x12262, 0x12263, 0x12264, 0x12265, 0x12266, 0x12267, 0x12268, 0x12269, 0x1226a, 0x1226b, 0x1226c, 0x1226d, 0x1226e, 0x1226f, 0x12270, 0x12271, 0x12272, 0x12273, 0x12274, 0x12275, 0x12276, 0x12277, 0x12278, 0x12279, 0x1227a, 0x1227b, 0x1227c, 0x1227d, 0x1227e, 0x1227f, 0x12280, 0x12281, 0x12282, 0x12283, 0x12284, 0x12285, 0x12286, 0x12287, 0x12288, 0x12289, 0x1228a, 0x1228b, 0x1228c, 0x1228d, 0x1228e, 0x1228f, 0x12290, 0x12291, 0x12292, 0x12293, 0x12294, 0x12295, 0x12296, 0x12297, 0x12298, 0x12299, 0x1229a, 0x1229b, 0x1229c, 0x1229d, 0x1229e, 0x1229f, 0x122a0, 0x122a1, 0x122a2, 0x122a3, 0x122a4, 0x122a5, 0x122a6, 0x122a7, 0x122a8, 0x122a9, 0x122aa, 0x122ab, 0x122ac, 0x122ad, 0x122ae, 0x122af
};

void BM_collation_220(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_220, cps_220 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_220);

uint32_t cps_221[] = {
0x122b0, 0x122b1, 0x122b2, 0x122b3, 0x122b4, 0x122b5, 0x122b6, 0x122b7, 0x122b8, 0x122b9, 0x122ba, 0x122bb, 0x122bc, 0x122bd, 0x122be, 0x122bf, 0x122c0, 0x122c1, 0x122c2, 0x122c3, 0x122c4, 0x122c5, 0x122c6, 0x122c7, 0x122c8, 0x122c9, 0x122ca, 0x122cb, 0x122cc, 0x122cd, 0x122ce, 0x122cf, 0x122d0, 0x122d1, 0x122d2, 0x122d3, 0x122d4, 0x122d5, 0x122d6, 0x122d7, 0x122d8, 0x122d9, 0x122da, 0x122db, 0x122dc, 0x122dd, 0x122de, 0x122df, 0x122e0, 0x122e1, 0x122e2, 0x122e3, 0x122e4, 0x122e5, 0x122e6, 0x122e7, 0x122e8, 0x122e9, 0x122ea, 0x122eb, 0x122ec, 0x122ed, 0x122ee, 0x122ef, 0x122f0, 0x122f1, 0x122f2, 0x122f3, 0x122f4, 0x122f5, 0x122f6, 0x122f7, 0x122f8, 0x122f9, 0x122fa, 0x122fb, 0x122fc, 0x122fd, 0x122fe, 0x122ff, 0x12300, 0x12301, 0x12302, 0x12303, 0x12304, 0x12305, 0x12306, 0x12307, 0x12308, 0x12309, 0x1230a, 0x1230b, 0x1230c, 0x1230d, 0x1230e, 0x1230f, 0x12310, 0x12311, 0x12312, 0x12313
};

void BM_collation_221(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_221, cps_221 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_221);

uint32_t cps_222[] = {
0x12314, 0x12315, 0x12316, 0x12317, 0x12318, 0x12319, 0x1231a, 0x1231b, 0x1231c, 0x1231d, 0x1231e, 0x1231f, 0x12320, 0x12321, 0x12322, 0x12323, 0x12324, 0x12325, 0x12326, 0x12327, 0x12328, 0x12329, 0x1232a, 0x1232b, 0x1232c, 0x1232d, 0x1232e, 0x1232f, 0x12330, 0x12331, 0x12332, 0x12333, 0x12334, 0x12335, 0x12336, 0x12337, 0x12338, 0x12339, 0x1233a, 0x1233b, 0x1233c, 0x1233d, 0x1233e, 0x1233f, 0x12340, 0x12341, 0x12342, 0x12343, 0x12344, 0x12345, 0x12346, 0x12347, 0x12348, 0x12349, 0x1234a, 0x1234b, 0x1234c, 0x1234d, 0x1234e, 0x1234f, 0x12350, 0x12351, 0x12352, 0x12353, 0x12354, 0x12355, 0x12356, 0x12357, 0x12358, 0x12359, 0x1235a, 0x1235b, 0x1235c, 0x1235d, 0x1235e, 0x1235f, 0x12360, 0x12361, 0x12362, 0x12363, 0x12364, 0x12365, 0x12366, 0x12367, 0x12368, 0x12369, 0x1236a, 0x1236b, 0x1236c, 0x1236d, 0x1236e, 0x1236f, 0x12370, 0x12371, 0x12372, 0x12373, 0x12374, 0x12375, 0x12376, 0x12377
};

void BM_collation_222(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_222, cps_222 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_222);

uint32_t cps_223[] = {
0x12378, 0x12379, 0x1237a, 0x1237b, 0x1237c, 0x1237d, 0x1237e, 0x1237f, 0x12380, 0x12381, 0x12382, 0x12383, 0x12384, 0x12385, 0x12386, 0x12387, 0x12388, 0x12389, 0x1238a, 0x1238b, 0x1238c, 0x1238d, 0x1238e, 0x1238f, 0x12390, 0x12391, 0x12392, 0x12393, 0x12394, 0x12395, 0x12396, 0x12397, 0x12398, 0x12399, 0x12400, 0x12401, 0x12402, 0x12403, 0x12404, 0x12405, 0x12406, 0x12407, 0x12408, 0x12409, 0x1240a, 0x1240b, 0x1240c, 0x1240d, 0x1240e, 0x1240f, 0x12410, 0x12411, 0x12412, 0x12413, 0x12414, 0x12415, 0x12416, 0x12417, 0x12418, 0x12419, 0x1241a, 0x1241b, 0x1241c, 0x1241d, 0x1241e, 0x1241f, 0x12420, 0x12421, 0x12422, 0x12423, 0x12424, 0x12425, 0x12426, 0x12427, 0x12428, 0x12429, 0x1242a, 0x1242b, 0x1242c, 0x1242d, 0x1242e, 0x1242f, 0x12430, 0x12431, 0x12432, 0x12433, 0x12434, 0x12435, 0x12436, 0x12437, 0x12438, 0x12439, 0x1243a, 0x1243b, 0x1243c, 0x1243d, 0x1243e, 0x1243f, 0x12440, 0x12441
};

void BM_collation_223(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_223, cps_223 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_223);

uint32_t cps_224[] = {
0x12442, 0x12443, 0x12444, 0x12445, 0x12446, 0x12447, 0x12448, 0x12449, 0x1244a, 0x1244b, 0x1244c, 0x1244d, 0x1244e, 0x1244f, 0x12450, 0x12451, 0x12452, 0x12453, 0x12454, 0x12455, 0x12456, 0x12457, 0x12458, 0x12459, 0x1245a, 0x1245b, 0x1245c, 0x1245d, 0x1245e, 0x1245f, 0x12460, 0x12461, 0x12462, 0x12463, 0x12464, 0x12465, 0x12466, 0x12467, 0x12468, 0x12469, 0x1246a, 0x1246b, 0x1246c, 0x1246d, 0x1246e, 0x12470, 0x12471, 0x12472, 0x12473, 0x12474, 0x12480, 0x12481, 0x12482, 0x12483, 0x12484, 0x12485, 0x12486, 0x12487, 0x12488, 0x12489, 0x1248a, 0x1248b, 0x1248c, 0x1248d, 0x1248e, 0x1248f, 0x12490, 0x12491, 0x12492, 0x12493, 0x12494, 0x12495, 0x12496, 0x12497, 0x12498, 0x12499, 0x1249a, 0x1249b, 0x1249c, 0x1249d, 0x1249e, 0x1249f, 0x124a0, 0x124a1, 0x124a2, 0x124a3, 0x124a4, 0x124a5, 0x124a6, 0x124a7, 0x124a8, 0x124a9, 0x124aa, 0x124ab, 0x124ac, 0x124ad, 0x124ae, 0x124af, 0x124b0, 0x124b1
};

void BM_collation_224(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_224, cps_224 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_224);

uint32_t cps_225[] = {
0x124b2, 0x124b3, 0x124b4, 0x124b5, 0x124b6, 0x124b7, 0x124b8, 0x124b9, 0x124ba, 0x124bb, 0x124bc, 0x124bd, 0x124be, 0x124bf, 0x124c0, 0x124c1, 0x124c2, 0x124c3, 0x124c4, 0x124c5, 0x124c6, 0x124c7, 0x124c8, 0x124c9, 0x124ca, 0x124cb, 0x124cc, 0x124cd, 0x124ce, 0x124cf, 0x124d0, 0x124d1, 0x124d2, 0x124d3, 0x124d4, 0x124d5, 0x124d6, 0x124d7, 0x124d8, 0x124d9, 0x124da, 0x124db, 0x124dc, 0x124dd, 0x124de, 0x124df, 0x124e0, 0x124e1, 0x124e2, 0x124e3, 0x124e4, 0x124e5, 0x124e6, 0x124e7, 0x124e8, 0x124e9, 0x124ea, 0x124eb, 0x124ec, 0x124ed, 0x124ee, 0x124ef, 0x124f0, 0x124f1, 0x124f2, 0x124f3, 0x124f4, 0x124f5, 0x124f6, 0x124f7, 0x124f8, 0x124f9, 0x124fa, 0x124fb, 0x124fc, 0x124fd, 0x124fe, 0x124ff, 0x12500, 0x12501, 0x12502, 0x12503, 0x12504, 0x12505, 0x12506, 0x12507, 0x12508, 0x12509, 0x1250a, 0x1250b, 0x1250c, 0x1250d, 0x1250e, 0x1250f, 0x12510, 0x12511, 0x12512, 0x12513, 0x12514, 0x12515
};

void BM_collation_225(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_225, cps_225 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_225);

uint32_t cps_226[] = {
0x12516, 0x12517, 0x12518, 0x12519, 0x1251a, 0x1251b, 0x1251c, 0x1251d, 0x1251e, 0x1251f, 0x12520, 0x12521, 0x12522, 0x12523, 0x12524, 0x12525, 0x12526, 0x12527, 0x12528, 0x12529, 0x1252a, 0x1252b, 0x1252c, 0x1252d, 0x1252e, 0x1252f, 0x12530, 0x12531, 0x12532, 0x12533, 0x12534, 0x12535, 0x12536, 0x12537, 0x12538, 0x12539, 0x1253a, 0x1253b, 0x1253c, 0x1253d, 0x1253e, 0x1253f, 0x12540, 0x12541, 0x12542, 0x12543, 0x13000, 0x13001, 0x13002, 0x13003, 0x13004, 0x13005, 0x13006, 0x13007, 0x13008, 0x13009, 0x1300a, 0x1300b, 0x1300c, 0x1300d, 0x1300e, 0x1300f, 0x13010, 0x13011, 0x13012, 0x13013, 0x13014, 0x13015, 0x13016, 0x13017, 0x13018, 0x13019, 0x1301a, 0x1301b, 0x1301c, 0x1301d, 0x1301e, 0x1301f, 0x13020, 0x13021, 0x13022, 0x13023, 0x13024, 0x13025, 0x13026, 0x13027, 0x13028, 0x13029, 0x1302a, 0x1302b, 0x1302c, 0x1302d, 0x1302e, 0x1302f, 0x13030, 0x13031, 0x13032, 0x13033, 0x13034, 0x13035
};

void BM_collation_226(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_226, cps_226 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_226);

uint32_t cps_227[] = {
0x13036, 0x13037, 0x13038, 0x13039, 0x1303a, 0x1303b, 0x1303c, 0x1303d, 0x1303e, 0x1303f, 0x13040, 0x13041, 0x13042, 0x13043, 0x13044, 0x13045, 0x13046, 0x13047, 0x13048, 0x13049, 0x1304a, 0x1304b, 0x1304c, 0x1304d, 0x1304e, 0x1304f, 0x13050, 0x13051, 0x13052, 0x13053, 0x13054, 0x13055, 0x13056, 0x13057, 0x13058, 0x13059, 0x1305a, 0x1305b, 0x1305c, 0x1305d, 0x1305e, 0x1305f, 0x13060, 0x13061, 0x13062, 0x13063, 0x13064, 0x13065, 0x13066, 0x13067, 0x13068, 0x13069, 0x1306a, 0x1306b, 0x1306c, 0x1306d, 0x1306e, 0x1306f, 0x13070, 0x13071, 0x13072, 0x13073, 0x13074, 0x13075, 0x13076, 0x13077, 0x13078, 0x13079, 0x1307a, 0x1307b, 0x1307c, 0x1307d, 0x1307e, 0x1307f, 0x13080, 0x13081, 0x13082, 0x13083, 0x13084, 0x13085, 0x13086, 0x13087, 0x13088, 0x13089, 0x1308a, 0x1308b, 0x1308c, 0x1308d, 0x1308e, 0x1308f, 0x13090, 0x13091, 0x13092, 0x13093, 0x13094, 0x13095, 0x13096, 0x13097, 0x13098, 0x13099
};

void BM_collation_227(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_227, cps_227 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_227);

uint32_t cps_228[] = {
0x1309a, 0x1309b, 0x1309c, 0x1309d, 0x1309e, 0x1309f, 0x130a0, 0x130a1, 0x130a2, 0x130a3, 0x130a4, 0x130a5, 0x130a6, 0x130a7, 0x130a8, 0x130a9, 0x130aa, 0x130ab, 0x130ac, 0x130ad, 0x130ae, 0x130af, 0x130b0, 0x130b1, 0x130b2, 0x130b3, 0x130b4, 0x130b5, 0x130b6, 0x130b7, 0x130b8, 0x130b9, 0x130ba, 0x130bb, 0x130bc, 0x130bd, 0x130be, 0x130bf, 0x130c0, 0x130c1, 0x130c2, 0x130c3, 0x130c4, 0x130c5, 0x130c6, 0x130c7, 0x130c8, 0x130c9, 0x130ca, 0x130cb, 0x130cc, 0x130cd, 0x130ce, 0x130cf, 0x130d0, 0x130d1, 0x130d2, 0x130d3, 0x130d4, 0x130d5, 0x130d6, 0x130d7, 0x130d8, 0x130d9, 0x130da, 0x130db, 0x130dc, 0x130dd, 0x130de, 0x130df, 0x130e0, 0x130e1, 0x130e2, 0x130e3, 0x130e4, 0x130e5, 0x130e6, 0x130e7, 0x130e8, 0x130e9, 0x130ea, 0x130eb, 0x130ec, 0x130ed, 0x130ee, 0x130ef, 0x130f0, 0x130f1, 0x130f2, 0x130f3, 0x130f4, 0x130f5, 0x130f6, 0x130f7, 0x130f8, 0x130f9, 0x130fa, 0x130fb, 0x130fc, 0x130fd
};

void BM_collation_228(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_228, cps_228 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_228);

uint32_t cps_229[] = {
0x130fe, 0x130ff, 0x13100, 0x13101, 0x13102, 0x13103, 0x13104, 0x13105, 0x13106, 0x13107, 0x13108, 0x13109, 0x1310a, 0x1310b, 0x1310c, 0x1310d, 0x1310e, 0x1310f, 0x13110, 0x13111, 0x13112, 0x13113, 0x13114, 0x13115, 0x13116, 0x13117, 0x13118, 0x13119, 0x1311a, 0x1311b, 0x1311c, 0x1311d, 0x1311e, 0x1311f, 0x13120, 0x13121, 0x13122, 0x13123, 0x13124, 0x13125, 0x13126, 0x13127, 0x13128, 0x13129, 0x1312a, 0x1312b, 0x1312c, 0x1312d, 0x1312e, 0x1312f, 0x13130, 0x13131, 0x13132, 0x13133, 0x13134, 0x13135, 0x13136, 0x13137, 0x13138, 0x13139, 0x1313a, 0x1313b, 0x1313c, 0x1313d, 0x1313e, 0x1313f, 0x13140, 0x13141, 0x13142, 0x13143, 0x13144, 0x13145, 0x13146, 0x13147, 0x13148, 0x13149, 0x1314a, 0x1314b, 0x1314c, 0x1314d, 0x1314e, 0x1314f, 0x13150, 0x13151, 0x13152, 0x13153, 0x13154, 0x13155, 0x13156, 0x13157, 0x13158, 0x13159, 0x1315a, 0x1315b, 0x1315c, 0x1315d, 0x1315e, 0x1315f, 0x13160, 0x13161
};

void BM_collation_229(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_229, cps_229 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_229);

uint32_t cps_230[] = {
0x13162, 0x13163, 0x13164, 0x13165, 0x13166, 0x13167, 0x13168, 0x13169, 0x1316a, 0x1316b, 0x1316c, 0x1316d, 0x1316e, 0x1316f, 0x13170, 0x13171, 0x13172, 0x13173, 0x13174, 0x13175, 0x13176, 0x13177, 0x13178, 0x13179, 0x1317a, 0x1317b, 0x1317c, 0x1317d, 0x1317e, 0x1317f, 0x13180, 0x13181, 0x13182, 0x13183, 0x13184, 0x13185, 0x13186, 0x13187, 0x13188, 0x13189, 0x1318a, 0x1318b, 0x1318c, 0x1318d, 0x1318e, 0x1318f, 0x13190, 0x13191, 0x13192, 0x13193, 0x13194, 0x13195, 0x13196, 0x13197, 0x13198, 0x13199, 0x1319a, 0x1319b, 0x1319c, 0x1319d, 0x1319e, 0x1319f, 0x131a0, 0x131a1, 0x131a2, 0x131a3, 0x131a4, 0x131a5, 0x131a6, 0x131a7, 0x131a8, 0x131a9, 0x131aa, 0x131ab, 0x131ac, 0x131ad, 0x131ae, 0x131af, 0x131b0, 0x131b1, 0x131b2, 0x131b3, 0x131b4, 0x131b5, 0x131b6, 0x131b7, 0x131b8, 0x131b9, 0x131ba, 0x131bb, 0x131bc, 0x131bd, 0x131be, 0x131bf, 0x131c0, 0x131c1, 0x131c2, 0x131c3, 0x131c4, 0x131c5
};

void BM_collation_230(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_230, cps_230 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_230);

uint32_t cps_231[] = {
0x131c6, 0x131c7, 0x131c8, 0x131c9, 0x131ca, 0x131cb, 0x131cc, 0x131cd, 0x131ce, 0x131cf, 0x131d0, 0x131d1, 0x131d2, 0x131d3, 0x131d4, 0x131d5, 0x131d6, 0x131d7, 0x131d8, 0x131d9, 0x131da, 0x131db, 0x131dc, 0x131dd, 0x131de, 0x131df, 0x131e0, 0x131e1, 0x131e2, 0x131e3, 0x131e4, 0x131e5, 0x131e6, 0x131e7, 0x131e8, 0x131e9, 0x131ea, 0x131eb, 0x131ec, 0x131ed, 0x131ee, 0x131ef, 0x131f0, 0x131f1, 0x131f2, 0x131f3, 0x131f4, 0x131f5, 0x131f6, 0x131f7, 0x131f8, 0x131f9, 0x131fa, 0x131fb, 0x131fc, 0x131fd, 0x131fe, 0x131ff, 0x13200, 0x13201, 0x13202, 0x13203, 0x13204, 0x13205, 0x13206, 0x13207, 0x13208, 0x13209, 0x1320a, 0x1320b, 0x1320c, 0x1320d, 0x1320e, 0x1320f, 0x13210, 0x13211, 0x13212, 0x13213, 0x13214, 0x13215, 0x13216, 0x13217, 0x13218, 0x13219, 0x1321a, 0x1321b, 0x1321c, 0x1321d, 0x1321e, 0x1321f, 0x13220, 0x13221, 0x13222, 0x13223, 0x13224, 0x13225, 0x13226, 0x13227, 0x13228, 0x13229
};

void BM_collation_231(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_231, cps_231 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_231);

uint32_t cps_232[] = {
0x1322a, 0x1322b, 0x1322c, 0x1322d, 0x1322e, 0x1322f, 0x13230, 0x13231, 0x13232, 0x13233, 0x13234, 0x13235, 0x13236, 0x13237, 0x13238, 0x13239, 0x1323a, 0x1323b, 0x1323c, 0x1323d, 0x1323e, 0x1323f, 0x13240, 0x13241, 0x13242, 0x13243, 0x13244, 0x13245, 0x13246, 0x13247, 0x13248, 0x13249, 0x1324a, 0x1324b, 0x1324c, 0x1324d, 0x1324e, 0x1324f, 0x13250, 0x13251, 0x13252, 0x13253, 0x13254, 0x13255, 0x13256, 0x13257, 0x13258, 0x13259, 0x1325a, 0x1325b, 0x1325c, 0x1325d, 0x1325e, 0x1325f, 0x13260, 0x13261, 0x13262, 0x13263, 0x13264, 0x13265, 0x13266, 0x13267, 0x13268, 0x13269, 0x1326a, 0x1326b, 0x1326c, 0x1326d, 0x1326e, 0x1326f, 0x13270, 0x13271, 0x13272, 0x13273, 0x13274, 0x13275, 0x13276, 0x13277, 0x13278, 0x13279, 0x1327a, 0x1327b, 0x1327c, 0x1327d, 0x1327e, 0x1327f, 0x13280, 0x13281, 0x13282, 0x13283, 0x13284, 0x13285, 0x13286, 0x13287, 0x13288, 0x13289, 0x1328a, 0x1328b, 0x1328c, 0x1328d
};

void BM_collation_232(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_232, cps_232 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_232);

uint32_t cps_233[] = {
0x1328e, 0x1328f, 0x13290, 0x13291, 0x13292, 0x13293, 0x13294, 0x13295, 0x13296, 0x13297, 0x13298, 0x13299, 0x1329a, 0x1329b, 0x1329c, 0x1329d, 0x1329e, 0x1329f, 0x132a0, 0x132a1, 0x132a2, 0x132a3, 0x132a4, 0x132a5, 0x132a6, 0x132a7, 0x132a8, 0x132a9, 0x132aa, 0x132ab, 0x132ac, 0x132ad, 0x132ae, 0x132af, 0x132b0, 0x132b1, 0x132b2, 0x132b3, 0x132b4, 0x132b5, 0x132b6, 0x132b7, 0x132b8, 0x132b9, 0x132ba, 0x132bb, 0x132bc, 0x132bd, 0x132be, 0x132bf, 0x132c0, 0x132c1, 0x132c2, 0x132c3, 0x132c4, 0x132c5, 0x132c6, 0x132c7, 0x132c8, 0x132c9, 0x132ca, 0x132cb, 0x132cc, 0x132cd, 0x132ce, 0x132cf, 0x132d0, 0x132d1, 0x132d2, 0x132d3, 0x132d4, 0x132d5, 0x132d6, 0x132d7, 0x132d8, 0x132d9, 0x132da, 0x132db, 0x132dc, 0x132dd, 0x132de, 0x132df, 0x132e0, 0x132e1, 0x132e2, 0x132e3, 0x132e4, 0x132e5, 0x132e6, 0x132e7, 0x132e8, 0x132e9, 0x132ea, 0x132eb, 0x132ec, 0x132ed, 0x132ee, 0x132ef, 0x132f0, 0x132f1
};

void BM_collation_233(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_233, cps_233 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_233);

uint32_t cps_234[] = {
0x132f2, 0x132f3, 0x132f4, 0x132f5, 0x132f6, 0x132f7, 0x132f8, 0x132f9, 0x132fa, 0x132fb, 0x132fc, 0x132fd, 0x132fe, 0x132ff, 0x13300, 0x13301, 0x13302, 0x13303, 0x13304, 0x13305, 0x13306, 0x13307, 0x13308, 0x13309, 0x1330a, 0x1330b, 0x1330c, 0x1330d, 0x1330e, 0x1330f, 0x13310, 0x13311, 0x13312, 0x13313, 0x13314, 0x13315, 0x13316, 0x13317, 0x13318, 0x13319, 0x1331a, 0x1331b, 0x1331c, 0x1331d, 0x1331e, 0x1331f, 0x13320, 0x13321, 0x13322, 0x13323, 0x13324, 0x13325, 0x13326, 0x13327, 0x13328, 0x13329, 0x1332a, 0x1332b, 0x1332c, 0x1332d, 0x1332e, 0x1332f, 0x13330, 0x13331, 0x13332, 0x13333, 0x13334, 0x13335, 0x13336, 0x13337, 0x13338, 0x13339, 0x1333a, 0x1333b, 0x1333c, 0x1333d, 0x1333e, 0x1333f, 0x13340, 0x13341, 0x13342, 0x13343, 0x13344, 0x13345, 0x13346, 0x13347, 0x13348, 0x13349, 0x1334a, 0x1334b, 0x1334c, 0x1334d, 0x1334e, 0x1334f, 0x13350, 0x13351, 0x13352, 0x13353, 0x13354, 0x13355
};

void BM_collation_234(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_234, cps_234 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_234);

uint32_t cps_235[] = {
0x13356, 0x13357, 0x13358, 0x13359, 0x1335a, 0x1335b, 0x1335c, 0x1335d, 0x1335e, 0x1335f, 0x13360, 0x13361, 0x13362, 0x13363, 0x13364, 0x13365, 0x13366, 0x13367, 0x13368, 0x13369, 0x1336a, 0x1336b, 0x1336c, 0x1336d, 0x1336e, 0x1336f, 0x13370, 0x13371, 0x13372, 0x13373, 0x13374, 0x13375, 0x13376, 0x13377, 0x13378, 0x13379, 0x1337a, 0x1337b, 0x1337c, 0x1337d, 0x1337e, 0x1337f, 0x13380, 0x13381, 0x13382, 0x13383, 0x13384, 0x13385, 0x13386, 0x13387, 0x13388, 0x13389, 0x1338a, 0x1338b, 0x1338c, 0x1338d, 0x1338e, 0x1338f, 0x13390, 0x13391, 0x13392, 0x13393, 0x13394, 0x13395, 0x13396, 0x13397, 0x13398, 0x13399, 0x1339a, 0x1339b, 0x1339c, 0x1339d, 0x1339e, 0x1339f, 0x133a0, 0x133a1, 0x133a2, 0x133a3, 0x133a4, 0x133a5, 0x133a6, 0x133a7, 0x133a8, 0x133a9, 0x133aa, 0x133ab, 0x133ac, 0x133ad, 0x133ae, 0x133af, 0x133b0, 0x133b1, 0x133b2, 0x133b3, 0x133b4, 0x133b5, 0x133b6, 0x133b7, 0x133b8, 0x133b9
};

void BM_collation_235(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_235, cps_235 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_235);

uint32_t cps_236[] = {
0x133ba, 0x133bb, 0x133bc, 0x133bd, 0x133be, 0x133bf, 0x133c0, 0x133c1, 0x133c2, 0x133c3, 0x133c4, 0x133c5, 0x133c6, 0x133c7, 0x133c8, 0x133c9, 0x133ca, 0x133cb, 0x133cc, 0x133cd, 0x133ce, 0x133cf, 0x133d0, 0x133d1, 0x133d2, 0x133d3, 0x133d4, 0x133d5, 0x133d6, 0x133d7, 0x133d8, 0x133d9, 0x133da, 0x133db, 0x133dc, 0x133dd, 0x133de, 0x133df, 0x133e0, 0x133e1, 0x133e2, 0x133e3, 0x133e4, 0x133e5, 0x133e6, 0x133e7, 0x133e8, 0x133e9, 0x133ea, 0x133eb, 0x133ec, 0x133ed, 0x133ee, 0x133ef, 0x133f0, 0x133f1, 0x133f2, 0x133f3, 0x133f4, 0x133f5, 0x133f6, 0x133f7, 0x133f8, 0x133f9, 0x133fa, 0x133fb, 0x133fc, 0x133fd, 0x133fe, 0x133ff, 0x13400, 0x13401, 0x13402, 0x13403, 0x13404, 0x13405, 0x13406, 0x13407, 0x13408, 0x13409, 0x1340a, 0x1340b, 0x1340c, 0x1340d, 0x1340e, 0x1340f, 0x13410, 0x13411, 0x13412, 0x13413, 0x13414, 0x13415, 0x13416, 0x13417, 0x13418, 0x13419, 0x1341a, 0x1341b, 0x1341c, 0x1341d
};

void BM_collation_236(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_236, cps_236 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_236);

uint32_t cps_237[] = {
0x1341e, 0x1341f, 0x13420, 0x13421, 0x13422, 0x13423, 0x13424, 0x13425, 0x13426, 0x13427, 0x13428, 0x13429, 0x1342a, 0x1342b, 0x1342c, 0x1342d, 0x1342e, 0x14400, 0x14401, 0x14402, 0x14403, 0x14404, 0x14405, 0x14406, 0x14407, 0x14408, 0x14409, 0x1440a, 0x1440b, 0x1440c, 0x1440d, 0x1440e, 0x1440f, 0x14410, 0x14411, 0x14412, 0x14413, 0x14414, 0x14415, 0x14416, 0x14417, 0x14418, 0x14419, 0x1441a, 0x1441b, 0x1441c, 0x1441d, 0x1441e, 0x1441f, 0x14420, 0x14421, 0x14422, 0x14423, 0x14424, 0x14425, 0x14426, 0x14427, 0x14428, 0x14429, 0x1442a, 0x1442b, 0x1442c, 0x1442d, 0x1442e, 0x1442f, 0x14430, 0x14431, 0x14432, 0x14433, 0x14434, 0x14435, 0x14436, 0x14437, 0x14438, 0x14439, 0x1443a, 0x1443b, 0x1443c, 0x1443d, 0x1443e, 0x1443f, 0x14440, 0x14441, 0x14442, 0x14443, 0x14444, 0x14445, 0x14446, 0x14447, 0x14448, 0x14449, 0x1444a, 0x1444b, 0x1444c, 0x1444d, 0x1444e, 0x1444f, 0x14450, 0x14451, 0x14452
};

void BM_collation_237(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_237, cps_237 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_237);

uint32_t cps_238[] = {
0x14453, 0x14454, 0x14455, 0x14456, 0x14457, 0x14458, 0x14459, 0x1445a, 0x1445b, 0x1445c, 0x1445d, 0x1445e, 0x1445f, 0x14460, 0x14461, 0x14462, 0x14463, 0x14464, 0x14465, 0x14466, 0x14467, 0x14468, 0x14469, 0x1446a, 0x1446b, 0x1446c, 0x1446d, 0x1446e, 0x1446f, 0x14470, 0x14471, 0x14472, 0x14473, 0x14474, 0x14475, 0x14476, 0x14477, 0x14478, 0x14479, 0x1447a, 0x1447b, 0x1447c, 0x1447d, 0x1447e, 0x1447f, 0x14480, 0x14481, 0x14482, 0x14483, 0x14484, 0x14485, 0x14486, 0x14487, 0x14488, 0x14489, 0x1448a, 0x1448b, 0x1448c, 0x1448d, 0x1448e, 0x1448f, 0x14490, 0x14491, 0x14492, 0x14493, 0x14494, 0x14495, 0x14496, 0x14497, 0x14498, 0x14499, 0x1449a, 0x1449b, 0x1449c, 0x1449d, 0x1449e, 0x1449f, 0x144a0, 0x144a1, 0x144a2, 0x144a3, 0x144a4, 0x144a5, 0x144a6, 0x144a7, 0x144a8, 0x144a9, 0x144aa, 0x144ab, 0x144ac, 0x144ad, 0x144ae, 0x144af, 0x144b0, 0x144b1, 0x144b2, 0x144b3, 0x144b4, 0x144b5, 0x144b6
};

void BM_collation_238(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_238, cps_238 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_238);

uint32_t cps_239[] = {
0x144b7, 0x144b8, 0x144b9, 0x144ba, 0x144bb, 0x144bc, 0x144bd, 0x144be, 0x144bf, 0x144c0, 0x144c1, 0x144c2, 0x144c3, 0x144c4, 0x144c5, 0x144c6, 0x144c7, 0x144c8, 0x144c9, 0x144ca, 0x144cb, 0x144cc, 0x144cd, 0x144ce, 0x144cf, 0x144d0, 0x144d1, 0x144d2, 0x144d3, 0x144d4, 0x144d5, 0x144d6, 0x144d7, 0x144d8, 0x144d9, 0x144da, 0x144db, 0x144dc, 0x144dd, 0x144de, 0x144df, 0x144e0, 0x144e1, 0x144e2, 0x144e3, 0x144e4, 0x144e5, 0x144e6, 0x144e7, 0x144e8, 0x144e9, 0x144ea, 0x144eb, 0x144ec, 0x144ed, 0x144ee, 0x144ef, 0x144f0, 0x144f1, 0x144f2, 0x144f3, 0x144f4, 0x144f5, 0x144f6, 0x144f7, 0x144f8, 0x144f9, 0x144fa, 0x144fb, 0x144fc, 0x144fd, 0x144fe, 0x144ff, 0x14500, 0x14501, 0x14502, 0x14503, 0x14504, 0x14505, 0x14506, 0x14507, 0x14508, 0x14509, 0x1450a, 0x1450b, 0x1450c, 0x1450d, 0x1450e, 0x1450f, 0x14510, 0x14511, 0x14512, 0x14513, 0x14514, 0x14515, 0x14516, 0x14517, 0x14518, 0x14519, 0x1451a
};

void BM_collation_239(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_239, cps_239 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_239);

uint32_t cps_240[] = {
0x1451b, 0x1451c, 0x1451d, 0x1451e, 0x1451f, 0x14520, 0x14521, 0x14522, 0x14523, 0x14524, 0x14525, 0x14526, 0x14527, 0x14528, 0x14529, 0x1452a, 0x1452b, 0x1452c, 0x1452d, 0x1452e, 0x1452f, 0x14530, 0x14531, 0x14532, 0x14533, 0x14534, 0x14535, 0x14536, 0x14537, 0x14538, 0x14539, 0x1453a, 0x1453b, 0x1453c, 0x1453d, 0x1453e, 0x1453f, 0x14540, 0x14541, 0x14542, 0x14543, 0x14544, 0x14545, 0x14546, 0x14547, 0x14548, 0x14549, 0x1454a, 0x1454b, 0x1454c, 0x1454d, 0x1454e, 0x1454f, 0x14550, 0x14551, 0x14552, 0x14553, 0x14554, 0x14555, 0x14556, 0x14557, 0x14558, 0x14559, 0x1455a, 0x1455b, 0x1455c, 0x1455d, 0x1455e, 0x1455f, 0x14560, 0x14561, 0x14562, 0x14563, 0x14564, 0x14565, 0x14566, 0x14567, 0x14568, 0x14569, 0x1456a, 0x1456b, 0x1456c, 0x1456d, 0x1456e, 0x1456f, 0x14570, 0x14571, 0x14572, 0x14573, 0x14574, 0x14575, 0x14576, 0x14577, 0x14578, 0x14579, 0x1457a, 0x1457b, 0x1457c, 0x1457d, 0x1457e
};

void BM_collation_240(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_240, cps_240 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_240);

uint32_t cps_241[] = {
0x1457f, 0x14580, 0x14581, 0x14582, 0x14583, 0x14584, 0x14585, 0x14586, 0x14587, 0x14588, 0x14589, 0x1458a, 0x1458b, 0x1458c, 0x1458d, 0x1458e, 0x1458f, 0x14590, 0x14591, 0x14592, 0x14593, 0x14594, 0x14595, 0x14596, 0x14597, 0x14598, 0x14599, 0x1459a, 0x1459b, 0x1459c, 0x1459d, 0x1459e, 0x1459f, 0x145a0, 0x145a1, 0x145a2, 0x145a3, 0x145a4, 0x145a5, 0x145a6, 0x145a7, 0x145a8, 0x145a9, 0x145aa, 0x145ab, 0x145ac, 0x145ad, 0x145ae, 0x145af, 0x145b0, 0x145b1, 0x145b2, 0x145b3, 0x145b4, 0x145b5, 0x145b6, 0x145b7, 0x145b8, 0x145b9, 0x145ba, 0x145bb, 0x145bc, 0x145bd, 0x145be, 0x145bf, 0x145c0, 0x145c1, 0x145c2, 0x145c3, 0x145c4, 0x145c5, 0x145c6, 0x145c7, 0x145c8, 0x145c9, 0x145ca, 0x145cb, 0x145cc, 0x145cd, 0x145ce, 0x145cf, 0x145d0, 0x145d1, 0x145d2, 0x145d3, 0x145d4, 0x145d5, 0x145d6, 0x145d7, 0x145d8, 0x145d9, 0x145da, 0x145db, 0x145dc, 0x145dd, 0x145de, 0x145df, 0x145e0, 0x145e1, 0x145e2
};

void BM_collation_241(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_241, cps_241 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_241);

uint32_t cps_242[] = {
0x145e3, 0x145e4, 0x145e5, 0x145e6, 0x145e7, 0x145e8, 0x145e9, 0x145ea, 0x145eb, 0x145ec, 0x145ed, 0x145ee, 0x145ef, 0x145f0, 0x145f1, 0x145f2, 0x145f3, 0x145f4, 0x145f5, 0x145f6, 0x145f7, 0x145f8, 0x145f9, 0x145fa, 0x145fb, 0x145fc, 0x145fd, 0x145fe, 0x145ff, 0x14600, 0x14601, 0x14602, 0x14603, 0x14604, 0x14605, 0x14606, 0x14607, 0x14608, 0x14609, 0x1460a, 0x1460b, 0x1460c, 0x1460d, 0x1460e, 0x1460f, 0x14610, 0x14611, 0x14612, 0x14613, 0x14614, 0x14615, 0x14616, 0x14617, 0x14618, 0x14619, 0x1461a, 0x1461b, 0x1461c, 0x1461d, 0x1461e, 0x1461f, 0x14620, 0x14621, 0x14622, 0x14623, 0x14624, 0x14625, 0x14626, 0x14627, 0x14628, 0x14629, 0x1462a, 0x1462b, 0x1462c, 0x1462d, 0x1462e, 0x1462f, 0x14630, 0x14631, 0x14632, 0x14633, 0x14634, 0x14635, 0x14636, 0x14637, 0x14638, 0x14639, 0x1463a, 0x1463b, 0x1463c, 0x1463d, 0x1463e, 0x1463f, 0x14640, 0x14641, 0x14642, 0x14643, 0x14644, 0x14645, 0x14646
};

void BM_collation_242(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_242, cps_242 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_242);

uint32_t cps_243[] = {
0x16800, 0x16801, 0x16802, 0x16803, 0x16804, 0x16805, 0x16806, 0x16807, 0x16808, 0x16809, 0x1680a, 0x1680b, 0x1680c, 0x1680d, 0x1680e, 0x1680f, 0x16810, 0x16811, 0x16812, 0x16813, 0x16814, 0x16815, 0x16816, 0x16817, 0x16818, 0x16819, 0x1681a, 0x1681b, 0x1681c, 0x1681d, 0x1681e, 0x1681f, 0x16820, 0x16821, 0x16822, 0x16823, 0x16824, 0x16825, 0x16826, 0x16827, 0x16828, 0x16829, 0x1682a, 0x1682b, 0x1682c, 0x1682d, 0x1682e, 0x1682f, 0x16830, 0x16831, 0x16832, 0x16833, 0x16834, 0x16835, 0x16836, 0x16837, 0x16838, 0x16839, 0x1683a, 0x1683b, 0x1683c, 0x1683d, 0x1683e, 0x1683f, 0x16840, 0x16841, 0x16842, 0x16843, 0x16844, 0x16845, 0x16846, 0x16847, 0x16848, 0x16849, 0x1684a, 0x1684b, 0x1684c, 0x1684d, 0x1684e, 0x1684f, 0x16850, 0x16851, 0x16852, 0x16853, 0x16854, 0x16855, 0x16856, 0x16857, 0x16858, 0x16859, 0x1685a, 0x1685b, 0x1685c, 0x1685d, 0x1685e, 0x1685f, 0x16860, 0x16861, 0x16862, 0x16863
};

void BM_collation_243(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_243, cps_243 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_243);

uint32_t cps_244[] = {
0x16864, 0x16865, 0x16866, 0x16867, 0x16868, 0x16869, 0x1686a, 0x1686b, 0x1686c, 0x1686d, 0x1686e, 0x1686f, 0x16870, 0x16871, 0x16872, 0x16873, 0x16874, 0x16875, 0x16876, 0x16877, 0x16878, 0x16879, 0x1687a, 0x1687b, 0x1687c, 0x1687d, 0x1687e, 0x1687f, 0x16880, 0x16881, 0x16882, 0x16883, 0x16884, 0x16885, 0x16886, 0x16887, 0x16888, 0x16889, 0x1688a, 0x1688b, 0x1688c, 0x1688d, 0x1688e, 0x1688f, 0x16890, 0x16891, 0x16892, 0x16893, 0x16894, 0x16895, 0x16896, 0x16897, 0x16898, 0x16899, 0x1689a, 0x1689b, 0x1689c, 0x1689d, 0x1689e, 0x1689f, 0x168a0, 0x168a1, 0x168a2, 0x168a3, 0x168a4, 0x168a5, 0x168a6, 0x168a7, 0x168a8, 0x168a9, 0x168aa, 0x168ab, 0x168ac, 0x168ad, 0x168ae, 0x168af, 0x168b0, 0x168b1, 0x168b2, 0x168b3, 0x168b4, 0x168b5, 0x168b6, 0x168b7, 0x168b8, 0x168b9, 0x168ba, 0x168bb, 0x168bc, 0x168bd, 0x168be, 0x168bf, 0x168c0, 0x168c1, 0x168c2, 0x168c3, 0x168c4, 0x168c5, 0x168c6, 0x168c7
};

void BM_collation_244(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_244, cps_244 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_244);

uint32_t cps_245[] = {
0x168c8, 0x168c9, 0x168ca, 0x168cb, 0x168cc, 0x168cd, 0x168ce, 0x168cf, 0x168d0, 0x168d1, 0x168d2, 0x168d3, 0x168d4, 0x168d5, 0x168d6, 0x168d7, 0x168d8, 0x168d9, 0x168da, 0x168db, 0x168dc, 0x168dd, 0x168de, 0x168df, 0x168e0, 0x168e1, 0x168e2, 0x168e3, 0x168e4, 0x168e5, 0x168e6, 0x168e7, 0x168e8, 0x168e9, 0x168ea, 0x168eb, 0x168ec, 0x168ed, 0x168ee, 0x168ef, 0x168f0, 0x168f1, 0x168f2, 0x168f3, 0x168f4, 0x168f5, 0x168f6, 0x168f7, 0x168f8, 0x168f9, 0x168fa, 0x168fb, 0x168fc, 0x168fd, 0x168fe, 0x168ff, 0x16900, 0x16901, 0x16902, 0x16903, 0x16904, 0x16905, 0x16906, 0x16907, 0x16908, 0x16909, 0x1690a, 0x1690b, 0x1690c, 0x1690d, 0x1690e, 0x1690f, 0x16910, 0x16911, 0x16912, 0x16913, 0x16914, 0x16915, 0x16916, 0x16917, 0x16918, 0x16919, 0x1691a, 0x1691b, 0x1691c, 0x1691d, 0x1691e, 0x1691f, 0x16920, 0x16921, 0x16922, 0x16923, 0x16924, 0x16925, 0x16926, 0x16927, 0x16928, 0x16929, 0x1692a, 0x1692b
};

void BM_collation_245(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_245, cps_245 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_245);

uint32_t cps_246[] = {
0x1692c, 0x1692d, 0x1692e, 0x1692f, 0x16930, 0x16931, 0x16932, 0x16933, 0x16934, 0x16935, 0x16936, 0x16937, 0x16938, 0x16939, 0x1693a, 0x1693b, 0x1693c, 0x1693d, 0x1693e, 0x1693f, 0x16940, 0x16941, 0x16942, 0x16943, 0x16944, 0x16945, 0x16946, 0x16947, 0x16948, 0x16949, 0x1694a, 0x1694b, 0x1694c, 0x1694d, 0x1694e, 0x1694f, 0x16950, 0x16951, 0x16952, 0x16953, 0x16954, 0x16955, 0x16956, 0x16957, 0x16958, 0x16959, 0x1695a, 0x1695b, 0x1695c, 0x1695d, 0x1695e, 0x1695f, 0x16960, 0x16961, 0x16962, 0x16963, 0x16964, 0x16965, 0x16966, 0x16967, 0x16968, 0x16969, 0x1696a, 0x1696b, 0x1696c, 0x1696d, 0x1696e, 0x1696f, 0x16970, 0x16971, 0x16972, 0x16973, 0x16974, 0x16975, 0x16976, 0x16977, 0x16978, 0x16979, 0x1697a, 0x1697b, 0x1697c, 0x1697d, 0x1697e, 0x1697f, 0x16980, 0x16981, 0x16982, 0x16983, 0x16984, 0x16985, 0x16986, 0x16987, 0x16988, 0x16989, 0x1698a, 0x1698b, 0x1698c, 0x1698d, 0x1698e, 0x1698f
};

void BM_collation_246(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_246, cps_246 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_246);

uint32_t cps_247[] = {
0x16990, 0x16991, 0x16992, 0x16993, 0x16994, 0x16995, 0x16996, 0x16997, 0x16998, 0x16999, 0x1699a, 0x1699b, 0x1699c, 0x1699d, 0x1699e, 0x1699f, 0x169a0, 0x169a1, 0x169a2, 0x169a3, 0x169a4, 0x169a5, 0x169a6, 0x169a7, 0x169a8, 0x169a9, 0x169aa, 0x169ab, 0x169ac, 0x169ad, 0x169ae, 0x169af, 0x169b0, 0x169b1, 0x169b2, 0x169b3, 0x169b4, 0x169b5, 0x169b6, 0x169b7, 0x169b8, 0x169b9, 0x169ba, 0x169bb, 0x169bc, 0x169bd, 0x169be, 0x169bf, 0x169c0, 0x169c1, 0x169c2, 0x169c3, 0x169c4, 0x169c5, 0x169c6, 0x169c7, 0x169c8, 0x169c9, 0x169ca, 0x169cb, 0x169cc, 0x169cd, 0x169ce, 0x169cf, 0x169d0, 0x169d1, 0x169d2, 0x169d3, 0x169d4, 0x169d5, 0x169d6, 0x169d7, 0x169d8, 0x169d9, 0x169da, 0x169db, 0x169dc, 0x169dd, 0x169de, 0x169df, 0x169e0, 0x169e1, 0x169e2, 0x169e3, 0x169e4, 0x169e5, 0x169e6, 0x169e7, 0x169e8, 0x169e9, 0x169ea, 0x169eb, 0x169ec, 0x169ed, 0x169ee, 0x169ef, 0x169f0, 0x169f1, 0x169f2, 0x169f3
};

void BM_collation_247(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_247, cps_247 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_247);

uint32_t cps_248[] = {
0x169f4, 0x169f5, 0x169f6, 0x169f7, 0x169f8, 0x169f9, 0x169fa, 0x169fb, 0x169fc, 0x169fd, 0x169fe, 0x169ff, 0x16a00, 0x16a01, 0x16a02, 0x16a03, 0x16a04, 0x16a05, 0x16a06, 0x16a07, 0x16a08, 0x16a09, 0x16a0a, 0x16a0b, 0x16a0c, 0x16a0d, 0x16a0e, 0x16a0f, 0x16a10, 0x16a11, 0x16a12, 0x16a13, 0x16a14, 0x16a15, 0x16a16, 0x16a17, 0x16a18, 0x16a19, 0x16a1a, 0x16a1b, 0x16a1c, 0x16a1d, 0x16a1e, 0x16a1f, 0x16a20, 0x16a21, 0x16a22, 0x16a23, 0x16a24, 0x16a25, 0x16a26, 0x16a27, 0x16a28, 0x16a29, 0x16a2a, 0x16a2b, 0x16a2c, 0x16a2d, 0x16a2e, 0x16a2f, 0x16a30, 0x16a31, 0x16a32, 0x16a33, 0x16a34, 0x16a35, 0x16a36, 0x16a37, 0x16a38, 0x16a40, 0x16a41, 0x16a42, 0x16a43, 0x16a44, 0x16a45, 0x16a46, 0x16a47, 0x16a48, 0x16a49, 0x16a4a, 0x16a4b, 0x16a4c, 0x16a4d, 0x16a4e, 0x16a4f, 0x16a50, 0x16a51, 0x16a52, 0x16a53, 0x16a54, 0x16a55, 0x16a56, 0x16a57, 0x16a58, 0x16a59, 0x16a5a, 0x16a5b, 0x16a5c, 0x16a5d, 0x16a5e
};

void BM_collation_248(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_248, cps_248 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_248);

uint32_t cps_249[] = {
0x16a60, 0x16a61, 0x16a62, 0x16a63, 0x16a64, 0x16a65, 0x16a66, 0x16a67, 0x16a68, 0x16a69, 0x16a6e, 0x16a6f, 0x16ad0, 0x16ad1, 0x16ad2, 0x16ad3, 0x16ad4, 0x16ad5, 0x16ad6, 0x16ad7, 0x16ad8, 0x16ad9, 0x16ada, 0x16adb, 0x16adc, 0x16add, 0x16ade, 0x16adf, 0x16ae0, 0x16ae1, 0x16ae2, 0x16ae3, 0x16ae4, 0x16ae5, 0x16ae6, 0x16ae7, 0x16ae8, 0x16ae9, 0x16aea, 0x16aeb, 0x16aec, 0x16aed, 0x16af0, 0x16af1, 0x16af2, 0x16af3, 0x16af4, 0x16af5, 0x16b00, 0x16b01, 0x16b02, 0x16b03, 0x16b04, 0x16b05, 0x16b06, 0x16b07, 0x16b08, 0x16b09, 0x16b0a, 0x16b0b, 0x16b0c, 0x16b0d, 0x16b0e, 0x16b0f, 0x16b10, 0x16b11, 0x16b12, 0x16b13, 0x16b14, 0x16b15, 0x16b16, 0x16b17, 0x16b18, 0x16b19, 0x16b1a, 0x16b1b, 0x16b1c, 0x16b1d, 0x16b1e, 0x16b1f, 0x16b20, 0x16b21, 0x16b22, 0x16b23, 0x16b24, 0x16b25, 0x16b26, 0x16b27, 0x16b28, 0x16b29, 0x16b2a, 0x16b2b, 0x16b2c, 0x16b2d, 0x16b2e, 0x16b2f, 0x16b30, 0x16b31, 0x16b32, 0x16b33
};

void BM_collation_249(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_249, cps_249 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_249);

uint32_t cps_250[] = {
0x16b34, 0x16b35, 0x16b36, 0x16b37, 0x16b38, 0x16b39, 0x16b3a, 0x16b3b, 0x16b3c, 0x16b3d, 0x16b3e, 0x16b3f, 0x16b40, 0x16b41, 0x16b42, 0x16b43, 0x16b44, 0x16b45, 0x16b50, 0x16b51, 0x16b52, 0x16b53, 0x16b54, 0x16b55, 0x16b56, 0x16b57, 0x16b58, 0x16b59, 0x16b5b, 0x16b5c, 0x16b5d, 0x16b5e, 0x16b5f, 0x16b60, 0x16b61, 0x16b63, 0x16b64, 0x16b65, 0x16b66, 0x16b67, 0x16b68, 0x16b69, 0x16b6a, 0x16b6b, 0x16b6c, 0x16b6d, 0x16b6e, 0x16b6f, 0x16b70, 0x16b71, 0x16b72, 0x16b73, 0x16b74, 0x16b75, 0x16b76, 0x16b77, 0x16b7d, 0x16b7e, 0x16b7f, 0x16b80, 0x16b81, 0x16b82, 0x16b83, 0x16b84, 0x16b85, 0x16b86, 0x16b87, 0x16b88, 0x16b89, 0x16b8a, 0x16b8b, 0x16b8c, 0x16b8d, 0x16b8e, 0x16b8f, 0x16f00, 0x16f01, 0x16f02, 0x16f03, 0x16f04, 0x16f05, 0x16f06, 0x16f07, 0x16f08, 0x16f09, 0x16f0a, 0x16f0b, 0x16f0c, 0x16f0d, 0x16f0e, 0x16f0f, 0x16f10, 0x16f11, 0x16f12, 0x16f13, 0x16f14, 0x16f15, 0x16f16, 0x16f17, 0x16f18
};

void BM_collation_250(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_250, cps_250 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_250);

uint32_t cps_251[] = {
0x16f19, 0x16f1a, 0x16f1b, 0x16f1c, 0x16f1d, 0x16f1e, 0x16f1f, 0x16f20, 0x16f21, 0x16f22, 0x16f23, 0x16f24, 0x16f25, 0x16f26, 0x16f27, 0x16f28, 0x16f29, 0x16f2a, 0x16f2b, 0x16f2c, 0x16f2d, 0x16f2e, 0x16f2f, 0x16f30, 0x16f31, 0x16f32, 0x16f33, 0x16f34, 0x16f35, 0x16f36, 0x16f37, 0x16f38, 0x16f39, 0x16f3a, 0x16f3b, 0x16f3c, 0x16f3d, 0x16f3e, 0x16f3f, 0x16f40, 0x16f41, 0x16f42, 0x16f43, 0x16f44, 0x16f50, 0x16f51, 0x16f52, 0x16f53, 0x16f54, 0x16f55, 0x16f56, 0x16f57, 0x16f58, 0x16f59, 0x16f5a, 0x16f5b, 0x16f5c, 0x16f5d, 0x16f5e, 0x16f5f, 0x16f60, 0x16f61, 0x16f62, 0x16f63, 0x16f64, 0x16f65, 0x16f66, 0x16f67, 0x16f68, 0x16f69, 0x16f6a, 0x16f6b, 0x16f6c, 0x16f6d, 0x16f6e, 0x16f6f, 0x16f70, 0x16f71, 0x16f72, 0x16f73, 0x16f74, 0x16f75, 0x16f76, 0x16f77, 0x16f78, 0x16f79, 0x16f7a, 0x16f7b, 0x16f7c, 0x16f7d, 0x16f7e, 0x16f8f, 0x16f90, 0x16f91, 0x16f92, 0x16f93, 0x16f94, 0x16f95, 0x16f96, 0x16f97
};

void BM_collation_251(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_251, cps_251 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_251);

uint32_t cps_252[] = {
0x16f98, 0x16f99, 0x16f9a, 0x16f9b, 0x16f9c, 0x16f9d, 0x16f9e, 0x16f9f, 0x16fe0, 0x16fe1, 0x1b000, 0x1b001, 0x1b002, 0x1b003, 0x1b004, 0x1b005, 0x1b006, 0x1b007, 0x1b008, 0x1b009, 0x1b00a, 0x1b00b, 0x1b00c, 0x1b00d, 0x1b00e, 0x1b00f, 0x1b010, 0x1b011, 0x1b012, 0x1b013, 0x1b014, 0x1b015, 0x1b016, 0x1b017, 0x1b018, 0x1b019, 0x1b01a, 0x1b01b, 0x1b01c, 0x1b01d, 0x1b01e, 0x1b01f, 0x1b020, 0x1b021, 0x1b022, 0x1b023, 0x1b024, 0x1b025, 0x1b026, 0x1b027, 0x1b028, 0x1b029, 0x1b02a, 0x1b02b, 0x1b02c, 0x1b02d, 0x1b02e, 0x1b02f, 0x1b030, 0x1b031, 0x1b032, 0x1b033, 0x1b034, 0x1b035, 0x1b036, 0x1b037, 0x1b038, 0x1b039, 0x1b03a, 0x1b03b, 0x1b03c, 0x1b03d, 0x1b03e, 0x1b03f, 0x1b040, 0x1b041, 0x1b042, 0x1b043, 0x1b044, 0x1b045, 0x1b046, 0x1b047, 0x1b048, 0x1b049, 0x1b04a, 0x1b04b, 0x1b04c, 0x1b04d, 0x1b04e, 0x1b04f, 0x1b050, 0x1b051, 0x1b052, 0x1b053, 0x1b054, 0x1b055, 0x1b056, 0x1b057, 0x1b058, 0x1b059
};

void BM_collation_252(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_252, cps_252 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_252);

uint32_t cps_253[] = {
0x1b05a, 0x1b05b, 0x1b05c, 0x1b05d, 0x1b05e, 0x1b05f, 0x1b060, 0x1b061, 0x1b062, 0x1b063, 0x1b064, 0x1b065, 0x1b066, 0x1b067, 0x1b068, 0x1b069, 0x1b06a, 0x1b06b, 0x1b06c, 0x1b06d, 0x1b06e, 0x1b06f, 0x1b070, 0x1b071, 0x1b072, 0x1b073, 0x1b074, 0x1b075, 0x1b076, 0x1b077, 0x1b078, 0x1b079, 0x1b07a, 0x1b07b, 0x1b07c, 0x1b07d, 0x1b07e, 0x1b07f, 0x1b080, 0x1b081, 0x1b082, 0x1b083, 0x1b084, 0x1b085, 0x1b086, 0x1b087, 0x1b088, 0x1b089, 0x1b08a, 0x1b08b, 0x1b08c, 0x1b08d, 0x1b08e, 0x1b08f, 0x1b090, 0x1b091, 0x1b092, 0x1b093, 0x1b094, 0x1b095, 0x1b096, 0x1b097, 0x1b098, 0x1b099, 0x1b09a, 0x1b09b, 0x1b09c, 0x1b09d, 0x1b09e, 0x1b09f, 0x1b0a0, 0x1b0a1, 0x1b0a2, 0x1b0a3, 0x1b0a4, 0x1b0a5, 0x1b0a6, 0x1b0a7, 0x1b0a8, 0x1b0a9, 0x1b0aa, 0x1b0ab, 0x1b0ac, 0x1b0ad, 0x1b0ae, 0x1b0af, 0x1b0b0, 0x1b0b1, 0x1b0b2, 0x1b0b3, 0x1b0b4, 0x1b0b5, 0x1b0b6, 0x1b0b7, 0x1b0b8, 0x1b0b9, 0x1b0ba, 0x1b0bb, 0x1b0bc, 0x1b0bd
};

void BM_collation_253(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_253, cps_253 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_253);

uint32_t cps_254[] = {
0x1b0be, 0x1b0bf, 0x1b0c0, 0x1b0c1, 0x1b0c2, 0x1b0c3, 0x1b0c4, 0x1b0c5, 0x1b0c6, 0x1b0c7, 0x1b0c8, 0x1b0c9, 0x1b0ca, 0x1b0cb, 0x1b0cc, 0x1b0cd, 0x1b0ce, 0x1b0cf, 0x1b0d0, 0x1b0d1, 0x1b0d2, 0x1b0d3, 0x1b0d4, 0x1b0d5, 0x1b0d6, 0x1b0d7, 0x1b0d8, 0x1b0d9, 0x1b0da, 0x1b0db, 0x1b0dc, 0x1b0dd, 0x1b0de, 0x1b0df, 0x1b0e0, 0x1b0e1, 0x1b0e2, 0x1b0e3, 0x1b0e4, 0x1b0e5, 0x1b0e6, 0x1b0e7, 0x1b0e8, 0x1b0e9, 0x1b0ea, 0x1b0eb, 0x1b0ec, 0x1b0ed, 0x1b0ee, 0x1b0ef, 0x1b0f0, 0x1b0f1, 0x1b0f2, 0x1b0f3, 0x1b0f4, 0x1b0f5, 0x1b0f6, 0x1b0f7, 0x1b0f8, 0x1b0f9, 0x1b0fa, 0x1b0fb, 0x1b0fc, 0x1b0fd, 0x1b0fe, 0x1b0ff, 0x1b100, 0x1b101, 0x1b102, 0x1b103, 0x1b104, 0x1b105, 0x1b106, 0x1b107, 0x1b108, 0x1b109, 0x1b10a, 0x1b10b, 0x1b10c, 0x1b10d, 0x1b10e, 0x1b10f, 0x1b110, 0x1b111, 0x1b112, 0x1b113, 0x1b114, 0x1b115, 0x1b116, 0x1b117, 0x1b118, 0x1b119, 0x1b11a, 0x1b11b, 0x1b11c, 0x1b11d, 0x1b11e, 0x1bc00, 0x1bc01, 0x1bc02
};

void BM_collation_254(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_254, cps_254 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_254);

uint32_t cps_255[] = {
0x1bc03, 0x1bc04, 0x1bc05, 0x1bc06, 0x1bc07, 0x1bc08, 0x1bc09, 0x1bc0a, 0x1bc0b, 0x1bc0c, 0x1bc0d, 0x1bc0e, 0x1bc0f, 0x1bc10, 0x1bc11, 0x1bc12, 0x1bc13, 0x1bc14, 0x1bc15, 0x1bc16, 0x1bc17, 0x1bc18, 0x1bc19, 0x1bc1a, 0x1bc1b, 0x1bc1c, 0x1bc1d, 0x1bc1e, 0x1bc1f, 0x1bc20, 0x1bc21, 0x1bc22, 0x1bc23, 0x1bc24, 0x1bc25, 0x1bc26, 0x1bc27, 0x1bc28, 0x1bc29, 0x1bc2a, 0x1bc2b, 0x1bc2c, 0x1bc2d, 0x1bc2e, 0x1bc2f, 0x1bc30, 0x1bc31, 0x1bc32, 0x1bc33, 0x1bc34, 0x1bc35, 0x1bc36, 0x1bc37, 0x1bc38, 0x1bc39, 0x1bc3a, 0x1bc3b, 0x1bc3c, 0x1bc3d, 0x1bc3e, 0x1bc3f, 0x1bc40, 0x1bc41, 0x1bc42, 0x1bc43, 0x1bc44, 0x1bc45, 0x1bc46, 0x1bc47, 0x1bc48, 0x1bc49, 0x1bc4a, 0x1bc4b, 0x1bc4c, 0x1bc4d, 0x1bc4e, 0x1bc4f, 0x1bc50, 0x1bc51, 0x1bc52, 0x1bc53, 0x1bc54, 0x1bc55, 0x1bc56, 0x1bc57, 0x1bc58, 0x1bc59, 0x1bc5a, 0x1bc5b, 0x1bc5c, 0x1bc5d, 0x1bc5e, 0x1bc5f, 0x1bc60, 0x1bc61, 0x1bc62, 0x1bc63, 0x1bc64, 0x1bc65, 0x1bc66
};

void BM_collation_255(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_255, cps_255 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_255);

uint32_t cps_256[] = {
0x1bc67, 0x1bc68, 0x1bc69, 0x1bc6a, 0x1bc70, 0x1bc71, 0x1bc72, 0x1bc73, 0x1bc74, 0x1bc75, 0x1bc76, 0x1bc77, 0x1bc78, 0x1bc79, 0x1bc7a, 0x1bc7b, 0x1bc7c, 0x1bc80, 0x1bc81, 0x1bc82, 0x1bc83, 0x1bc84, 0x1bc85, 0x1bc86, 0x1bc87, 0x1bc88, 0x1bc90, 0x1bc91, 0x1bc92, 0x1bc93, 0x1bc94, 0x1bc95, 0x1bc96, 0x1bc97, 0x1bc98, 0x1bc99, 0x1bc9c, 0x1bc9d, 0x1bc9e, 0x1bc9f, 0x1bca0, 0x1bca1, 0x1bca2, 0x1bca3, 0x1d000, 0x1d001, 0x1d002, 0x1d003, 0x1d004, 0x1d005, 0x1d006, 0x1d007, 0x1d008, 0x1d009, 0x1d00a, 0x1d00b, 0x1d00c, 0x1d00d, 0x1d00e, 0x1d00f, 0x1d010, 0x1d011, 0x1d012, 0x1d013, 0x1d014, 0x1d015, 0x1d016, 0x1d017, 0x1d018, 0x1d019, 0x1d01a, 0x1d01b, 0x1d01c, 0x1d01d, 0x1d01e, 0x1d01f, 0x1d020, 0x1d021, 0x1d022, 0x1d023, 0x1d024, 0x1d025, 0x1d026, 0x1d027, 0x1d028, 0x1d029, 0x1d02a, 0x1d02b, 0x1d02c, 0x1d02d, 0x1d02e, 0x1d02f, 0x1d030, 0x1d031, 0x1d032, 0x1d033, 0x1d034, 0x1d035, 0x1d036, 0x1d037
};

void BM_collation_256(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_256, cps_256 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_256);

uint32_t cps_257[] = {
0x1d038, 0x1d039, 0x1d03a, 0x1d03b, 0x1d03c, 0x1d03d, 0x1d03e, 0x1d03f, 0x1d040, 0x1d041, 0x1d042, 0x1d043, 0x1d044, 0x1d045, 0x1d046, 0x1d047, 0x1d048, 0x1d049, 0x1d04a, 0x1d04b, 0x1d04c, 0x1d04d, 0x1d04e, 0x1d04f, 0x1d050, 0x1d051, 0x1d052, 0x1d053, 0x1d054, 0x1d055, 0x1d056, 0x1d057, 0x1d058, 0x1d059, 0x1d05a, 0x1d05b, 0x1d05c, 0x1d05d, 0x1d05e, 0x1d05f, 0x1d060, 0x1d061, 0x1d062, 0x1d063, 0x1d064, 0x1d065, 0x1d066, 0x1d067, 0x1d068, 0x1d069, 0x1d06a, 0x1d06b, 0x1d06c, 0x1d06d, 0x1d06e, 0x1d06f, 0x1d070, 0x1d071, 0x1d072, 0x1d073, 0x1d074, 0x1d075, 0x1d076, 0x1d077, 0x1d078, 0x1d079, 0x1d07a, 0x1d07b, 0x1d07c, 0x1d07d, 0x1d07e, 0x1d07f, 0x1d080, 0x1d081, 0x1d082, 0x1d083, 0x1d084, 0x1d085, 0x1d086, 0x1d087, 0x1d088, 0x1d089, 0x1d08a, 0x1d08b, 0x1d08c, 0x1d08d, 0x1d08e, 0x1d08f, 0x1d090, 0x1d091, 0x1d092, 0x1d093, 0x1d094, 0x1d095, 0x1d096, 0x1d097, 0x1d098, 0x1d099, 0x1d09a, 0x1d09b
};

void BM_collation_257(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_257, cps_257 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_257);

uint32_t cps_258[] = {
0x1d09c, 0x1d09d, 0x1d09e, 0x1d09f, 0x1d0a0, 0x1d0a1, 0x1d0a2, 0x1d0a3, 0x1d0a4, 0x1d0a5, 0x1d0a6, 0x1d0a7, 0x1d0a8, 0x1d0a9, 0x1d0aa, 0x1d0ab, 0x1d0ac, 0x1d0ad, 0x1d0ae, 0x1d0af, 0x1d0b0, 0x1d0b1, 0x1d0b2, 0x1d0b3, 0x1d0b4, 0x1d0b5, 0x1d0b6, 0x1d0b7, 0x1d0b8, 0x1d0b9, 0x1d0ba, 0x1d0bb, 0x1d0bc, 0x1d0bd, 0x1d0be, 0x1d0bf, 0x1d0c0, 0x1d0c1, 0x1d0c2, 0x1d0c3, 0x1d0c4, 0x1d0c5, 0x1d0c6, 0x1d0c7, 0x1d0c8, 0x1d0c9, 0x1d0ca, 0x1d0cb, 0x1d0cc, 0x1d0cd, 0x1d0ce, 0x1d0cf, 0x1d0d0, 0x1d0d1, 0x1d0d2, 0x1d0d3, 0x1d0d4, 0x1d0d5, 0x1d0d6, 0x1d0d7, 0x1d0d8, 0x1d0d9, 0x1d0da, 0x1d0db, 0x1d0dc, 0x1d0dd, 0x1d0de, 0x1d0df, 0x1d0e0, 0x1d0e1, 0x1d0e2, 0x1d0e3, 0x1d0e4, 0x1d0e5, 0x1d0e6, 0x1d0e7, 0x1d0e8, 0x1d0e9, 0x1d0ea, 0x1d0eb, 0x1d0ec, 0x1d0ed, 0x1d0ee, 0x1d0ef, 0x1d0f0, 0x1d0f1, 0x1d0f2, 0x1d0f3, 0x1d0f4, 0x1d0f5, 0x1d100, 0x1d101, 0x1d102, 0x1d103, 0x1d104, 0x1d105, 0x1d106, 0x1d107, 0x1d108, 0x1d109
};

void BM_collation_258(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_258, cps_258 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_258);

uint32_t cps_259[] = {
0x1d10a, 0x1d10b, 0x1d10c, 0x1d10d, 0x1d10e, 0x1d10f, 0x1d110, 0x1d111, 0x1d112, 0x1d113, 0x1d114, 0x1d115, 0x1d116, 0x1d117, 0x1d118, 0x1d119, 0x1d11a, 0x1d11b, 0x1d11c, 0x1d11d, 0x1d11e, 0x1d11f, 0x1d120, 0x1d121, 0x1d122, 0x1d123, 0x1d124, 0x1d125, 0x1d126, 0x1d129, 0x1d12a, 0x1d12b, 0x1d12c, 0x1d12d, 0x1d12e, 0x1d12f, 0x1d130, 0x1d131, 0x1d132, 0x1d133, 0x1d134, 0x1d135, 0x1d136, 0x1d137, 0x1d138, 0x1d139, 0x1d13a, 0x1d13b, 0x1d13c, 0x1d13d, 0x1d13e, 0x1d13f, 0x1d140, 0x1d141, 0x1d142, 0x1d143, 0x1d144, 0x1d145, 0x1d146, 0x1d147, 0x1d148, 0x1d149, 0x1d14a, 0x1d14b, 0x1d14c, 0x1d14d, 0x1d14e, 0x1d14f, 0x1d150, 0x1d151, 0x1d152, 0x1d153, 0x1d154, 0x1d155, 0x1d156, 0x1d157, 0x1d158, 0x1d159, 0x1d15a, 0x1d15b, 0x1d15c, 0x1d15d, 0x1d15e, 0x1d15f, 0x1d160, 0x1d161, 0x1d162, 0x1d163, 0x1d164, 0x1d165, 0x1d166, 0x1d167, 0x1d168, 0x1d169, 0x1d16a, 0x1d16b, 0x1d16c, 0x1d16d, 0x1d16e, 0x1d16f
};

void BM_collation_259(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_259, cps_259 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_259);

uint32_t cps_260[] = {
0x1d170, 0x1d171, 0x1d172, 0x1d173, 0x1d174, 0x1d175, 0x1d176, 0x1d177, 0x1d178, 0x1d179, 0x1d17a, 0x1d17b, 0x1d17c, 0x1d17d, 0x1d17e, 0x1d17f, 0x1d180, 0x1d181, 0x1d182, 0x1d183, 0x1d184, 0x1d185, 0x1d186, 0x1d187, 0x1d188, 0x1d189, 0x1d18a, 0x1d18b, 0x1d18c, 0x1d18d, 0x1d18e, 0x1d18f, 0x1d190, 0x1d191, 0x1d192, 0x1d193, 0x1d194, 0x1d195, 0x1d196, 0x1d197, 0x1d198, 0x1d199, 0x1d19a, 0x1d19b, 0x1d19c, 0x1d19d, 0x1d19e, 0x1d19f, 0x1d1a0, 0x1d1a1, 0x1d1a2, 0x1d1a3, 0x1d1a4, 0x1d1a5, 0x1d1a6, 0x1d1a7, 0x1d1a8, 0x1d1a9, 0x1d1aa, 0x1d1ab, 0x1d1ac, 0x1d1ad, 0x1d1ae, 0x1d1af, 0x1d1b0, 0x1d1b1, 0x1d1b2, 0x1d1b3, 0x1d1b4, 0x1d1b5, 0x1d1b6, 0x1d1b7, 0x1d1b8, 0x1d1b9, 0x1d1ba, 0x1d1bb, 0x1d1bc, 0x1d1bd, 0x1d1be, 0x1d1bf, 0x1d1c0, 0x1d1c1, 0x1d1c2, 0x1d1c3, 0x1d1c4, 0x1d1c5, 0x1d1c6, 0x1d1c7, 0x1d1c8, 0x1d1c9, 0x1d1ca, 0x1d1cb, 0x1d1cc, 0x1d1cd, 0x1d1ce, 0x1d1cf, 0x1d1d0, 0x1d1d1, 0x1d1d2, 0x1d1d3
};

void BM_collation_260(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_260, cps_260 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_260);

uint32_t cps_261[] = {
0x1d1d4, 0x1d1d5, 0x1d1d6, 0x1d1d7, 0x1d1d8, 0x1d1d9, 0x1d1da, 0x1d1db, 0x1d1dc, 0x1d1dd, 0x1d1de, 0x1d1df, 0x1d1e0, 0x1d1e1, 0x1d1e2, 0x1d1e3, 0x1d1e4, 0x1d1e5, 0x1d1e6, 0x1d1e7, 0x1d1e8, 0x1d200, 0x1d201, 0x1d202, 0x1d203, 0x1d204, 0x1d205, 0x1d206, 0x1d207, 0x1d208, 0x1d209, 0x1d20a, 0x1d20b, 0x1d20c, 0x1d20d, 0x1d20e, 0x1d20f, 0x1d210, 0x1d211, 0x1d212, 0x1d213, 0x1d214, 0x1d215, 0x1d216, 0x1d217, 0x1d218, 0x1d219, 0x1d21a, 0x1d21b, 0x1d21c, 0x1d21d, 0x1d21e, 0x1d21f, 0x1d220, 0x1d221, 0x1d222, 0x1d223, 0x1d224, 0x1d225, 0x1d226, 0x1d227, 0x1d228, 0x1d229, 0x1d22a, 0x1d22b, 0x1d22c, 0x1d22d, 0x1d22e, 0x1d22f, 0x1d230, 0x1d231, 0x1d232, 0x1d233, 0x1d234, 0x1d235, 0x1d236, 0x1d237, 0x1d238, 0x1d239, 0x1d23a, 0x1d23b, 0x1d23c, 0x1d23d, 0x1d23e, 0x1d23f, 0x1d240, 0x1d241, 0x1d242, 0x1d243, 0x1d244, 0x1d245, 0x1d300, 0x1d301, 0x1d302, 0x1d303, 0x1d304, 0x1d305, 0x1d306, 0x1d307, 0x1d308
};

void BM_collation_261(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_261, cps_261 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_261);

uint32_t cps_262[] = {
0x1d309, 0x1d30a, 0x1d30b, 0x1d30c, 0x1d30d, 0x1d30e, 0x1d30f, 0x1d310, 0x1d311, 0x1d312, 0x1d313, 0x1d314, 0x1d315, 0x1d316, 0x1d317, 0x1d318, 0x1d319, 0x1d31a, 0x1d31b, 0x1d31c, 0x1d31d, 0x1d31e, 0x1d31f, 0x1d320, 0x1d321, 0x1d322, 0x1d323, 0x1d324, 0x1d325, 0x1d326, 0x1d327, 0x1d328, 0x1d329, 0x1d32a, 0x1d32b, 0x1d32c, 0x1d32d, 0x1d32e, 0x1d32f, 0x1d330, 0x1d331, 0x1d332, 0x1d333, 0x1d334, 0x1d335, 0x1d336, 0x1d337, 0x1d338, 0x1d339, 0x1d33a, 0x1d33b, 0x1d33c, 0x1d33d, 0x1d33e, 0x1d33f, 0x1d340, 0x1d341, 0x1d342, 0x1d343, 0x1d344, 0x1d345, 0x1d346, 0x1d347, 0x1d348, 0x1d349, 0x1d34a, 0x1d34b, 0x1d34c, 0x1d34d, 0x1d34e, 0x1d34f, 0x1d350, 0x1d351, 0x1d352, 0x1d353, 0x1d354, 0x1d355, 0x1d356, 0x1d360, 0x1d361, 0x1d362, 0x1d363, 0x1d364, 0x1d365, 0x1d366, 0x1d367, 0x1d368, 0x1d369, 0x1d36a, 0x1d36b, 0x1d36c, 0x1d36d, 0x1d36e, 0x1d36f, 0x1d370, 0x1d371, 0x1d400, 0x1d401, 0x1d402, 0x1d403
};

void BM_collation_262(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_262, cps_262 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_262);

uint32_t cps_263[] = {
0x1d404, 0x1d405, 0x1d406, 0x1d407, 0x1d408, 0x1d409, 0x1d40a, 0x1d40b, 0x1d40c, 0x1d40d, 0x1d40e, 0x1d40f, 0x1d410, 0x1d411, 0x1d412, 0x1d413, 0x1d414, 0x1d415, 0x1d416, 0x1d417, 0x1d418, 0x1d419, 0x1d41a, 0x1d41b, 0x1d41c, 0x1d41d, 0x1d41e, 0x1d41f, 0x1d420, 0x1d421, 0x1d422, 0x1d423, 0x1d424, 0x1d425, 0x1d426, 0x1d427, 0x1d428, 0x1d429, 0x1d42a, 0x1d42b, 0x1d42c, 0x1d42d, 0x1d42e, 0x1d42f, 0x1d430, 0x1d431, 0x1d432, 0x1d433, 0x1d434, 0x1d435, 0x1d436, 0x1d437, 0x1d438, 0x1d439, 0x1d43a, 0x1d43b, 0x1d43c, 0x1d43d, 0x1d43e, 0x1d43f, 0x1d440, 0x1d441, 0x1d442, 0x1d443, 0x1d444, 0x1d445, 0x1d446, 0x1d447, 0x1d448, 0x1d449, 0x1d44a, 0x1d44b, 0x1d44c, 0x1d44d, 0x1d44e, 0x1d44f, 0x1d450, 0x1d451, 0x1d452, 0x1d453, 0x1d454, 0x1d456, 0x1d457, 0x1d458, 0x1d459, 0x1d45a, 0x1d45b, 0x1d45c, 0x1d45d, 0x1d45e, 0x1d45f, 0x1d460, 0x1d461, 0x1d462, 0x1d463, 0x1d464, 0x1d465, 0x1d466, 0x1d467, 0x1d468
};

void BM_collation_263(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_263, cps_263 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_263);

uint32_t cps_264[] = {
0x1d469, 0x1d46a, 0x1d46b, 0x1d46c, 0x1d46d, 0x1d46e, 0x1d46f, 0x1d470, 0x1d471, 0x1d472, 0x1d473, 0x1d474, 0x1d475, 0x1d476, 0x1d477, 0x1d478, 0x1d479, 0x1d47a, 0x1d47b, 0x1d47c, 0x1d47d, 0x1d47e, 0x1d47f, 0x1d480, 0x1d481, 0x1d482, 0x1d483, 0x1d484, 0x1d485, 0x1d486, 0x1d487, 0x1d488, 0x1d489, 0x1d48a, 0x1d48b, 0x1d48c, 0x1d48d, 0x1d48e, 0x1d48f, 0x1d490, 0x1d491, 0x1d492, 0x1d493, 0x1d494, 0x1d495, 0x1d496, 0x1d497, 0x1d498, 0x1d499, 0x1d49a, 0x1d49b, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4aa, 0x1d4ab, 0x1d4ac, 0x1d4ae, 0x1d4af, 0x1d4b0, 0x1d4b1, 0x1d4b2, 0x1d4b3, 0x1d4b4, 0x1d4b5, 0x1d4b6, 0x1d4b7, 0x1d4b8, 0x1d4b9, 0x1d4bb, 0x1d4bd, 0x1d4be, 0x1d4bf, 0x1d4c0, 0x1d4c1, 0x1d4c2, 0x1d4c3, 0x1d4c5, 0x1d4c6, 0x1d4c7, 0x1d4c8, 0x1d4c9, 0x1d4ca, 0x1d4cb, 0x1d4cc, 0x1d4cd, 0x1d4ce, 0x1d4cf, 0x1d4d0, 0x1d4d1, 0x1d4d2, 0x1d4d3, 0x1d4d4, 0x1d4d5, 0x1d4d6, 0x1d4d7
};

void BM_collation_264(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_264, cps_264 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_264);

uint32_t cps_265[] = {
0x1d4d8, 0x1d4d9, 0x1d4da, 0x1d4db, 0x1d4dc, 0x1d4dd, 0x1d4de, 0x1d4df, 0x1d4e0, 0x1d4e1, 0x1d4e2, 0x1d4e3, 0x1d4e4, 0x1d4e5, 0x1d4e6, 0x1d4e7, 0x1d4e8, 0x1d4e9, 0x1d4ea, 0x1d4eb, 0x1d4ec, 0x1d4ed, 0x1d4ee, 0x1d4ef, 0x1d4f0, 0x1d4f1, 0x1d4f2, 0x1d4f3, 0x1d4f4, 0x1d4f5, 0x1d4f6, 0x1d4f7, 0x1d4f8, 0x1d4f9, 0x1d4fa, 0x1d4fb, 0x1d4fc, 0x1d4fd, 0x1d4fe, 0x1d4ff, 0x1d500, 0x1d501, 0x1d502, 0x1d503, 0x1d504, 0x1d505, 0x1d507, 0x1d508, 0x1d509, 0x1d50a, 0x1d50d, 0x1d50e, 0x1d50f, 0x1d510, 0x1d511, 0x1d512, 0x1d513, 0x1d514, 0x1d516, 0x1d517, 0x1d518, 0x1d519, 0x1d51a, 0x1d51b, 0x1d51c, 0x1d51e, 0x1d51f, 0x1d520, 0x1d521, 0x1d522, 0x1d523, 0x1d524, 0x1d525, 0x1d526, 0x1d527, 0x1d528, 0x1d529, 0x1d52a, 0x1d52b, 0x1d52c, 0x1d52d, 0x1d52e, 0x1d52f, 0x1d530, 0x1d531, 0x1d532, 0x1d533, 0x1d534, 0x1d535, 0x1d536, 0x1d537, 0x1d538, 0x1d539, 0x1d53b, 0x1d53c, 0x1d53d, 0x1d53e, 0x1d540, 0x1d541, 0x1d542
};

void BM_collation_265(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_265, cps_265 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_265);

uint32_t cps_266[] = {
0x1d543, 0x1d544, 0x1d546, 0x1d54a, 0x1d54b, 0x1d54c, 0x1d54d, 0x1d54e, 0x1d54f, 0x1d550, 0x1d552, 0x1d553, 0x1d554, 0x1d555, 0x1d556, 0x1d557, 0x1d558, 0x1d559, 0x1d55a, 0x1d55b, 0x1d55c, 0x1d55d, 0x1d55e, 0x1d55f, 0x1d560, 0x1d561, 0x1d562, 0x1d563, 0x1d564, 0x1d565, 0x1d566, 0x1d567, 0x1d568, 0x1d569, 0x1d56a, 0x1d56b, 0x1d56c, 0x1d56d, 0x1d56e, 0x1d56f, 0x1d570, 0x1d571, 0x1d572, 0x1d573, 0x1d574, 0x1d575, 0x1d576, 0x1d577, 0x1d578, 0x1d579, 0x1d57a, 0x1d57b, 0x1d57c, 0x1d57d, 0x1d57e, 0x1d57f, 0x1d580, 0x1d581, 0x1d582, 0x1d583, 0x1d584, 0x1d585, 0x1d586, 0x1d587, 0x1d588, 0x1d589, 0x1d58a, 0x1d58b, 0x1d58c, 0x1d58d, 0x1d58e, 0x1d58f, 0x1d590, 0x1d591, 0x1d592, 0x1d593, 0x1d594, 0x1d595, 0x1d596, 0x1d597, 0x1d598, 0x1d599, 0x1d59a, 0x1d59b, 0x1d59c, 0x1d59d, 0x1d59e, 0x1d59f, 0x1d5a0, 0x1d5a1, 0x1d5a2, 0x1d5a3, 0x1d5a4, 0x1d5a5, 0x1d5a6, 0x1d5a7, 0x1d5a8, 0x1d5a9, 0x1d5aa, 0x1d5ab
};

void BM_collation_266(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_266, cps_266 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_266);

uint32_t cps_267[] = {
0x1d5ac, 0x1d5ad, 0x1d5ae, 0x1d5af, 0x1d5b0, 0x1d5b1, 0x1d5b2, 0x1d5b3, 0x1d5b4, 0x1d5b5, 0x1d5b6, 0x1d5b7, 0x1d5b8, 0x1d5b9, 0x1d5ba, 0x1d5bb, 0x1d5bc, 0x1d5bd, 0x1d5be, 0x1d5bf, 0x1d5c0, 0x1d5c1, 0x1d5c2, 0x1d5c3, 0x1d5c4, 0x1d5c5, 0x1d5c6, 0x1d5c7, 0x1d5c8, 0x1d5c9, 0x1d5ca, 0x1d5cb, 0x1d5cc, 0x1d5cd, 0x1d5ce, 0x1d5cf, 0x1d5d0, 0x1d5d1, 0x1d5d2, 0x1d5d3, 0x1d5d4, 0x1d5d5, 0x1d5d6, 0x1d5d7, 0x1d5d8, 0x1d5d9, 0x1d5da, 0x1d5db, 0x1d5dc, 0x1d5dd, 0x1d5de, 0x1d5df, 0x1d5e0, 0x1d5e1, 0x1d5e2, 0x1d5e3, 0x1d5e4, 0x1d5e5, 0x1d5e6, 0x1d5e7, 0x1d5e8, 0x1d5e9, 0x1d5ea, 0x1d5eb, 0x1d5ec, 0x1d5ed, 0x1d5ee, 0x1d5ef, 0x1d5f0, 0x1d5f1, 0x1d5f2, 0x1d5f3, 0x1d5f4, 0x1d5f5, 0x1d5f6, 0x1d5f7, 0x1d5f8, 0x1d5f9, 0x1d5fa, 0x1d5fb, 0x1d5fc, 0x1d5fd, 0x1d5fe, 0x1d5ff, 0x1d600, 0x1d601, 0x1d602, 0x1d603, 0x1d604, 0x1d605, 0x1d606, 0x1d607, 0x1d608, 0x1d609, 0x1d60a, 0x1d60b, 0x1d60c, 0x1d60d, 0x1d60e, 0x1d60f
};

void BM_collation_267(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_267, cps_267 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_267);

uint32_t cps_268[] = {
0x1d610, 0x1d611, 0x1d612, 0x1d613, 0x1d614, 0x1d615, 0x1d616, 0x1d617, 0x1d618, 0x1d619, 0x1d61a, 0x1d61b, 0x1d61c, 0x1d61d, 0x1d61e, 0x1d61f, 0x1d620, 0x1d621, 0x1d622, 0x1d623, 0x1d624, 0x1d625, 0x1d626, 0x1d627, 0x1d628, 0x1d629, 0x1d62a, 0x1d62b, 0x1d62c, 0x1d62d, 0x1d62e, 0x1d62f, 0x1d630, 0x1d631, 0x1d632, 0x1d633, 0x1d634, 0x1d635, 0x1d636, 0x1d637, 0x1d638, 0x1d639, 0x1d63a, 0x1d63b, 0x1d63c, 0x1d63d, 0x1d63e, 0x1d63f, 0x1d640, 0x1d641, 0x1d642, 0x1d643, 0x1d644, 0x1d645, 0x1d646, 0x1d647, 0x1d648, 0x1d649, 0x1d64a, 0x1d64b, 0x1d64c, 0x1d64d, 0x1d64e, 0x1d64f, 0x1d650, 0x1d651, 0x1d652, 0x1d653, 0x1d654, 0x1d655, 0x1d656, 0x1d657, 0x1d658, 0x1d659, 0x1d65a, 0x1d65b, 0x1d65c, 0x1d65d, 0x1d65e, 0x1d65f, 0x1d660, 0x1d661, 0x1d662, 0x1d663, 0x1d664, 0x1d665, 0x1d666, 0x1d667, 0x1d668, 0x1d669, 0x1d66a, 0x1d66b, 0x1d66c, 0x1d66d, 0x1d66e, 0x1d66f, 0x1d670, 0x1d671, 0x1d672, 0x1d673
};

void BM_collation_268(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_268, cps_268 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_268);

uint32_t cps_269[] = {
0x1d674, 0x1d675, 0x1d676, 0x1d677, 0x1d678, 0x1d679, 0x1d67a, 0x1d67b, 0x1d67c, 0x1d67d, 0x1d67e, 0x1d67f, 0x1d680, 0x1d681, 0x1d682, 0x1d683, 0x1d684, 0x1d685, 0x1d686, 0x1d687, 0x1d688, 0x1d689, 0x1d68a, 0x1d68b, 0x1d68c, 0x1d68d, 0x1d68e, 0x1d68f, 0x1d690, 0x1d691, 0x1d692, 0x1d693, 0x1d694, 0x1d695, 0x1d696, 0x1d697, 0x1d698, 0x1d699, 0x1d69a, 0x1d69b, 0x1d69c, 0x1d69d, 0x1d69e, 0x1d69f, 0x1d6a0, 0x1d6a1, 0x1d6a2, 0x1d6a3, 0x1d6a4, 0x1d6a5, 0x1d6a8, 0x1d6a9, 0x1d6aa, 0x1d6ab, 0x1d6ac, 0x1d6ad, 0x1d6ae, 0x1d6af, 0x1d6b0, 0x1d6b1, 0x1d6b2, 0x1d6b3, 0x1d6b4, 0x1d6b5, 0x1d6b6, 0x1d6b7, 0x1d6b8, 0x1d6b9, 0x1d6ba, 0x1d6bb, 0x1d6bc, 0x1d6bd, 0x1d6be, 0x1d6bf, 0x1d6c0, 0x1d6c1, 0x1d6c2, 0x1d6c3, 0x1d6c4, 0x1d6c5, 0x1d6c6, 0x1d6c7, 0x1d6c8, 0x1d6c9, 0x1d6ca, 0x1d6cb, 0x1d6cc, 0x1d6cd, 0x1d6ce, 0x1d6cf, 0x1d6d0, 0x1d6d1, 0x1d6d2, 0x1d6d3, 0x1d6d4, 0x1d6d5, 0x1d6d6, 0x1d6d7, 0x1d6d8, 0x1d6d9
};

void BM_collation_269(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_269, cps_269 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_269);

uint32_t cps_270[] = {
0x1d6da, 0x1d6db, 0x1d6dc, 0x1d6dd, 0x1d6de, 0x1d6df, 0x1d6e0, 0x1d6e1, 0x1d6e2, 0x1d6e3, 0x1d6e4, 0x1d6e5, 0x1d6e6, 0x1d6e7, 0x1d6e8, 0x1d6e9, 0x1d6ea, 0x1d6eb, 0x1d6ec, 0x1d6ed, 0x1d6ee, 0x1d6ef, 0x1d6f0, 0x1d6f1, 0x1d6f2, 0x1d6f3, 0x1d6f4, 0x1d6f5, 0x1d6f6, 0x1d6f7, 0x1d6f8, 0x1d6f9, 0x1d6fa, 0x1d6fb, 0x1d6fc, 0x1d6fd, 0x1d6fe, 0x1d6ff, 0x1d700, 0x1d701, 0x1d702, 0x1d703, 0x1d704, 0x1d705, 0x1d706, 0x1d707, 0x1d708, 0x1d709, 0x1d70a, 0x1d70b, 0x1d70c, 0x1d70d, 0x1d70e, 0x1d70f, 0x1d710, 0x1d711, 0x1d712, 0x1d713, 0x1d714, 0x1d715, 0x1d716, 0x1d717, 0x1d718, 0x1d719, 0x1d71a, 0x1d71b, 0x1d71c, 0x1d71d, 0x1d71e, 0x1d71f, 0x1d720, 0x1d721, 0x1d722, 0x1d723, 0x1d724, 0x1d725, 0x1d726, 0x1d727, 0x1d728, 0x1d729, 0x1d72a, 0x1d72b, 0x1d72c, 0x1d72d, 0x1d72e, 0x1d72f, 0x1d730, 0x1d731, 0x1d732, 0x1d733, 0x1d734, 0x1d735, 0x1d736, 0x1d737, 0x1d738, 0x1d739, 0x1d73a, 0x1d73b, 0x1d73c, 0x1d73d
};

void BM_collation_270(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_270, cps_270 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_270);

uint32_t cps_271[] = {
0x1d73e, 0x1d73f, 0x1d740, 0x1d741, 0x1d742, 0x1d743, 0x1d744, 0x1d745, 0x1d746, 0x1d747, 0x1d748, 0x1d749, 0x1d74a, 0x1d74b, 0x1d74c, 0x1d74d, 0x1d74e, 0x1d74f, 0x1d750, 0x1d751, 0x1d752, 0x1d753, 0x1d754, 0x1d755, 0x1d756, 0x1d757, 0x1d758, 0x1d759, 0x1d75a, 0x1d75b, 0x1d75c, 0x1d75d, 0x1d75e, 0x1d75f, 0x1d760, 0x1d761, 0x1d762, 0x1d763, 0x1d764, 0x1d765, 0x1d766, 0x1d767, 0x1d768, 0x1d769, 0x1d76a, 0x1d76b, 0x1d76c, 0x1d76d, 0x1d76e, 0x1d76f, 0x1d770, 0x1d771, 0x1d772, 0x1d773, 0x1d774, 0x1d775, 0x1d776, 0x1d777, 0x1d778, 0x1d779, 0x1d77a, 0x1d77b, 0x1d77c, 0x1d77d, 0x1d77e, 0x1d77f, 0x1d780, 0x1d781, 0x1d782, 0x1d783, 0x1d784, 0x1d785, 0x1d786, 0x1d787, 0x1d788, 0x1d789, 0x1d78a, 0x1d78b, 0x1d78c, 0x1d78d, 0x1d78e, 0x1d78f, 0x1d790, 0x1d791, 0x1d792, 0x1d793, 0x1d794, 0x1d795, 0x1d796, 0x1d797, 0x1d798, 0x1d799, 0x1d79a, 0x1d79b, 0x1d79c, 0x1d79d, 0x1d79e, 0x1d79f, 0x1d7a0, 0x1d7a1
};

void BM_collation_271(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_271, cps_271 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_271);

uint32_t cps_272[] = {
0x1d7a2, 0x1d7a3, 0x1d7a4, 0x1d7a5, 0x1d7a6, 0x1d7a7, 0x1d7a8, 0x1d7a9, 0x1d7aa, 0x1d7ab, 0x1d7ac, 0x1d7ad, 0x1d7ae, 0x1d7af, 0x1d7b0, 0x1d7b1, 0x1d7b2, 0x1d7b3, 0x1d7b4, 0x1d7b5, 0x1d7b6, 0x1d7b7, 0x1d7b8, 0x1d7b9, 0x1d7ba, 0x1d7bb, 0x1d7bc, 0x1d7bd, 0x1d7be, 0x1d7bf, 0x1d7c0, 0x1d7c1, 0x1d7c2, 0x1d7c3, 0x1d7c4, 0x1d7c5, 0x1d7c6, 0x1d7c7, 0x1d7c8, 0x1d7c9, 0x1d7ca, 0x1d7cb, 0x1d7ce, 0x1d7cf, 0x1d7d0, 0x1d7d1, 0x1d7d2, 0x1d7d3, 0x1d7d4, 0x1d7d5, 0x1d7d6, 0x1d7d7, 0x1d7d8, 0x1d7d9, 0x1d7da, 0x1d7db, 0x1d7dc, 0x1d7dd, 0x1d7de, 0x1d7df, 0x1d7e0, 0x1d7e1, 0x1d7e2, 0x1d7e3, 0x1d7e4, 0x1d7e5, 0x1d7e6, 0x1d7e7, 0x1d7e8, 0x1d7e9, 0x1d7ea, 0x1d7eb, 0x1d7ec, 0x1d7ed, 0x1d7ee, 0x1d7ef, 0x1d7f0, 0x1d7f1, 0x1d7f2, 0x1d7f3, 0x1d7f4, 0x1d7f5, 0x1d7f6, 0x1d7f7, 0x1d7f8, 0x1d7f9, 0x1d7fa, 0x1d7fb, 0x1d7fc, 0x1d7fd, 0x1d7fe, 0x1d7ff, 0x1d800, 0x1d801, 0x1d802, 0x1d803, 0x1d804, 0x1d805, 0x1d806, 0x1d807
};

void BM_collation_272(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_272, cps_272 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_272);

uint32_t cps_273[] = {
0x1d808, 0x1d809, 0x1d80a, 0x1d80b, 0x1d80c, 0x1d80d, 0x1d80e, 0x1d80f, 0x1d810, 0x1d811, 0x1d812, 0x1d813, 0x1d814, 0x1d815, 0x1d816, 0x1d817, 0x1d818, 0x1d819, 0x1d81a, 0x1d81b, 0x1d81c, 0x1d81d, 0x1d81e, 0x1d81f, 0x1d820, 0x1d821, 0x1d822, 0x1d823, 0x1d824, 0x1d825, 0x1d826, 0x1d827, 0x1d828, 0x1d829, 0x1d82a, 0x1d82b, 0x1d82c, 0x1d82d, 0x1d82e, 0x1d82f, 0x1d830, 0x1d831, 0x1d832, 0x1d833, 0x1d834, 0x1d835, 0x1d836, 0x1d837, 0x1d838, 0x1d839, 0x1d83a, 0x1d83b, 0x1d83c, 0x1d83d, 0x1d83e, 0x1d83f, 0x1d840, 0x1d841, 0x1d842, 0x1d843, 0x1d844, 0x1d845, 0x1d846, 0x1d847, 0x1d848, 0x1d849, 0x1d84a, 0x1d84b, 0x1d84c, 0x1d84d, 0x1d84e, 0x1d84f, 0x1d850, 0x1d851, 0x1d852, 0x1d853, 0x1d854, 0x1d855, 0x1d856, 0x1d857, 0x1d858, 0x1d859, 0x1d85a, 0x1d85b, 0x1d85c, 0x1d85d, 0x1d85e, 0x1d85f, 0x1d860, 0x1d861, 0x1d862, 0x1d863, 0x1d864, 0x1d865, 0x1d866, 0x1d867, 0x1d868, 0x1d869, 0x1d86a, 0x1d86b
};

void BM_collation_273(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_273, cps_273 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_273);

uint32_t cps_274[] = {
0x1d86c, 0x1d86d, 0x1d86e, 0x1d86f, 0x1d870, 0x1d871, 0x1d872, 0x1d873, 0x1d874, 0x1d875, 0x1d876, 0x1d877, 0x1d878, 0x1d879, 0x1d87a, 0x1d87b, 0x1d87c, 0x1d87d, 0x1d87e, 0x1d87f, 0x1d880, 0x1d881, 0x1d882, 0x1d883, 0x1d884, 0x1d885, 0x1d886, 0x1d887, 0x1d888, 0x1d889, 0x1d88a, 0x1d88b, 0x1d88c, 0x1d88d, 0x1d88e, 0x1d88f, 0x1d890, 0x1d891, 0x1d892, 0x1d893, 0x1d894, 0x1d895, 0x1d896, 0x1d897, 0x1d898, 0x1d899, 0x1d89a, 0x1d89b, 0x1d89c, 0x1d89d, 0x1d89e, 0x1d89f, 0x1d8a0, 0x1d8a1, 0x1d8a2, 0x1d8a3, 0x1d8a4, 0x1d8a5, 0x1d8a6, 0x1d8a7, 0x1d8a8, 0x1d8a9, 0x1d8aa, 0x1d8ab, 0x1d8ac, 0x1d8ad, 0x1d8ae, 0x1d8af, 0x1d8b0, 0x1d8b1, 0x1d8b2, 0x1d8b3, 0x1d8b4, 0x1d8b5, 0x1d8b6, 0x1d8b7, 0x1d8b8, 0x1d8b9, 0x1d8ba, 0x1d8bb, 0x1d8bc, 0x1d8bd, 0x1d8be, 0x1d8bf, 0x1d8c0, 0x1d8c1, 0x1d8c2, 0x1d8c3, 0x1d8c4, 0x1d8c5, 0x1d8c6, 0x1d8c7, 0x1d8c8, 0x1d8c9, 0x1d8ca, 0x1d8cb, 0x1d8cc, 0x1d8cd, 0x1d8ce, 0x1d8cf
};

void BM_collation_274(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_274, cps_274 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_274);

uint32_t cps_275[] = {
0x1d8d0, 0x1d8d1, 0x1d8d2, 0x1d8d3, 0x1d8d4, 0x1d8d5, 0x1d8d6, 0x1d8d7, 0x1d8d8, 0x1d8d9, 0x1d8da, 0x1d8db, 0x1d8dc, 0x1d8dd, 0x1d8de, 0x1d8df, 0x1d8e0, 0x1d8e1, 0x1d8e2, 0x1d8e3, 0x1d8e4, 0x1d8e5, 0x1d8e6, 0x1d8e7, 0x1d8e8, 0x1d8e9, 0x1d8ea, 0x1d8eb, 0x1d8ec, 0x1d8ed, 0x1d8ee, 0x1d8ef, 0x1d8f0, 0x1d8f1, 0x1d8f2, 0x1d8f3, 0x1d8f4, 0x1d8f5, 0x1d8f6, 0x1d8f7, 0x1d8f8, 0x1d8f9, 0x1d8fa, 0x1d8fb, 0x1d8fc, 0x1d8fd, 0x1d8fe, 0x1d8ff, 0x1d900, 0x1d901, 0x1d902, 0x1d903, 0x1d904, 0x1d905, 0x1d906, 0x1d907, 0x1d908, 0x1d909, 0x1d90a, 0x1d90b, 0x1d90c, 0x1d90d, 0x1d90e, 0x1d90f, 0x1d910, 0x1d911, 0x1d912, 0x1d913, 0x1d914, 0x1d915, 0x1d916, 0x1d917, 0x1d918, 0x1d919, 0x1d91a, 0x1d91b, 0x1d91c, 0x1d91d, 0x1d91e, 0x1d91f, 0x1d920, 0x1d921, 0x1d922, 0x1d923, 0x1d924, 0x1d925, 0x1d926, 0x1d927, 0x1d928, 0x1d929, 0x1d92a, 0x1d92b, 0x1d92c, 0x1d92d, 0x1d92e, 0x1d92f, 0x1d930, 0x1d931, 0x1d932, 0x1d933
};

void BM_collation_275(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_275, cps_275 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_275);

uint32_t cps_276[] = {
0x1d934, 0x1d935, 0x1d936, 0x1d937, 0x1d938, 0x1d939, 0x1d93a, 0x1d93b, 0x1d93c, 0x1d93d, 0x1d93e, 0x1d93f, 0x1d940, 0x1d941, 0x1d942, 0x1d943, 0x1d944, 0x1d945, 0x1d946, 0x1d947, 0x1d948, 0x1d949, 0x1d94a, 0x1d94b, 0x1d94c, 0x1d94d, 0x1d94e, 0x1d94f, 0x1d950, 0x1d951, 0x1d952, 0x1d953, 0x1d954, 0x1d955, 0x1d956, 0x1d957, 0x1d958, 0x1d959, 0x1d95a, 0x1d95b, 0x1d95c, 0x1d95d, 0x1d95e, 0x1d95f, 0x1d960, 0x1d961, 0x1d962, 0x1d963, 0x1d964, 0x1d965, 0x1d966, 0x1d967, 0x1d968, 0x1d969, 0x1d96a, 0x1d96b, 0x1d96c, 0x1d96d, 0x1d96e, 0x1d96f, 0x1d970, 0x1d971, 0x1d972, 0x1d973, 0x1d974, 0x1d975, 0x1d976, 0x1d977, 0x1d978, 0x1d979, 0x1d97a, 0x1d97b, 0x1d97c, 0x1d97d, 0x1d97e, 0x1d97f, 0x1d980, 0x1d981, 0x1d982, 0x1d983, 0x1d984, 0x1d985, 0x1d986, 0x1d987, 0x1d988, 0x1d989, 0x1d98a, 0x1d98b, 0x1d98c, 0x1d98d, 0x1d98e, 0x1d98f, 0x1d990, 0x1d991, 0x1d992, 0x1d993, 0x1d994, 0x1d995, 0x1d996, 0x1d997
};

void BM_collation_276(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_276, cps_276 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_276);

uint32_t cps_277[] = {
0x1d998, 0x1d999, 0x1d99a, 0x1d99b, 0x1d99c, 0x1d99d, 0x1d99e, 0x1d99f, 0x1d9a0, 0x1d9a1, 0x1d9a2, 0x1d9a3, 0x1d9a4, 0x1d9a5, 0x1d9a6, 0x1d9a7, 0x1d9a8, 0x1d9a9, 0x1d9aa, 0x1d9ab, 0x1d9ac, 0x1d9ad, 0x1d9ae, 0x1d9af, 0x1d9b0, 0x1d9b1, 0x1d9b2, 0x1d9b3, 0x1d9b4, 0x1d9b5, 0x1d9b6, 0x1d9b7, 0x1d9b8, 0x1d9b9, 0x1d9ba, 0x1d9bb, 0x1d9bc, 0x1d9bd, 0x1d9be, 0x1d9bf, 0x1d9c0, 0x1d9c1, 0x1d9c2, 0x1d9c3, 0x1d9c4, 0x1d9c5, 0x1d9c6, 0x1d9c7, 0x1d9c8, 0x1d9c9, 0x1d9ca, 0x1d9cb, 0x1d9cc, 0x1d9cd, 0x1d9ce, 0x1d9cf, 0x1d9d0, 0x1d9d1, 0x1d9d2, 0x1d9d3, 0x1d9d4, 0x1d9d5, 0x1d9d6, 0x1d9d7, 0x1d9d8, 0x1d9d9, 0x1d9da, 0x1d9db, 0x1d9dc, 0x1d9dd, 0x1d9de, 0x1d9df, 0x1d9e0, 0x1d9e1, 0x1d9e2, 0x1d9e3, 0x1d9e4, 0x1d9e5, 0x1d9e6, 0x1d9e7, 0x1d9e8, 0x1d9e9, 0x1d9ea, 0x1d9eb, 0x1d9ec, 0x1d9ed, 0x1d9ee, 0x1d9ef, 0x1d9f0, 0x1d9f1, 0x1d9f2, 0x1d9f3, 0x1d9f4, 0x1d9f5, 0x1d9f6, 0x1d9f7, 0x1d9f8, 0x1d9f9, 0x1d9fa, 0x1d9fb
};

void BM_collation_277(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_277, cps_277 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_277);

uint32_t cps_278[] = {
0x1d9fc, 0x1d9fd, 0x1d9fe, 0x1d9ff, 0x1da00, 0x1da01, 0x1da02, 0x1da03, 0x1da04, 0x1da05, 0x1da06, 0x1da07, 0x1da08, 0x1da09, 0x1da0a, 0x1da0b, 0x1da0c, 0x1da0d, 0x1da0e, 0x1da0f, 0x1da10, 0x1da11, 0x1da12, 0x1da13, 0x1da14, 0x1da15, 0x1da16, 0x1da17, 0x1da18, 0x1da19, 0x1da1a, 0x1da1b, 0x1da1c, 0x1da1d, 0x1da1e, 0x1da1f, 0x1da20, 0x1da21, 0x1da22, 0x1da23, 0x1da24, 0x1da25, 0x1da26, 0x1da27, 0x1da28, 0x1da29, 0x1da2a, 0x1da2b, 0x1da2c, 0x1da2d, 0x1da2e, 0x1da2f, 0x1da30, 0x1da31, 0x1da32, 0x1da33, 0x1da34, 0x1da35, 0x1da36, 0x1da37, 0x1da38, 0x1da39, 0x1da3a, 0x1da3b, 0x1da3c, 0x1da3d, 0x1da3e, 0x1da3f, 0x1da40, 0x1da41, 0x1da42, 0x1da43, 0x1da44, 0x1da45, 0x1da46, 0x1da47, 0x1da48, 0x1da49, 0x1da4a, 0x1da4b, 0x1da4c, 0x1da4d, 0x1da4e, 0x1da4f, 0x1da50, 0x1da51, 0x1da52, 0x1da53, 0x1da54, 0x1da55, 0x1da56, 0x1da57, 0x1da58, 0x1da59, 0x1da5a, 0x1da5b, 0x1da5c, 0x1da5d, 0x1da5e, 0x1da5f
};

void BM_collation_278(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_278, cps_278 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_278);

uint32_t cps_279[] = {
0x1da60, 0x1da61, 0x1da62, 0x1da63, 0x1da64, 0x1da65, 0x1da66, 0x1da67, 0x1da68, 0x1da69, 0x1da6a, 0x1da6b, 0x1da6c, 0x1da6d, 0x1da6e, 0x1da6f, 0x1da70, 0x1da71, 0x1da72, 0x1da73, 0x1da74, 0x1da75, 0x1da76, 0x1da77, 0x1da78, 0x1da79, 0x1da7a, 0x1da7b, 0x1da7c, 0x1da7d, 0x1da7e, 0x1da7f, 0x1da80, 0x1da81, 0x1da82, 0x1da83, 0x1da84, 0x1da85, 0x1da86, 0x1da87, 0x1da88, 0x1da89, 0x1da8a, 0x1da8b, 0x1da9b, 0x1da9c, 0x1da9d, 0x1da9e, 0x1da9f, 0x1daa1, 0x1daa2, 0x1daa3, 0x1daa4, 0x1daa5, 0x1daa6, 0x1daa7, 0x1daa8, 0x1daa9, 0x1daaa, 0x1daab, 0x1daac, 0x1daad, 0x1daae, 0x1daaf, 0x1e000, 0x1e001, 0x1e002, 0x1e003, 0x1e004, 0x1e005, 0x1e006, 0x1e008, 0x1e009, 0x1e00a, 0x1e00b, 0x1e00c, 0x1e00d, 0x1e00e, 0x1e00f, 0x1e010, 0x1e011, 0x1e012, 0x1e013, 0x1e014, 0x1e015, 0x1e016, 0x1e017, 0x1e018, 0x1e01b, 0x1e01c, 0x1e01d, 0x1e01e, 0x1e01f, 0x1e020, 0x1e021, 0x1e023, 0x1e024, 0x1e026, 0x1e027, 0x1e028
};

void BM_collation_279(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_279, cps_279 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_279);

uint32_t cps_280[] = {
0x1e029, 0x1e02a, 0x1e800, 0x1e801, 0x1e802, 0x1e803, 0x1e804, 0x1e805, 0x1e806, 0x1e807, 0x1e808, 0x1e809, 0x1e80a, 0x1e80b, 0x1e80c, 0x1e80d, 0x1e80e, 0x1e80f, 0x1e810, 0x1e811, 0x1e812, 0x1e813, 0x1e814, 0x1e815, 0x1e816, 0x1e817, 0x1e818, 0x1e819, 0x1e81a, 0x1e81b, 0x1e81c, 0x1e81d, 0x1e81e, 0x1e81f, 0x1e820, 0x1e821, 0x1e822, 0x1e823, 0x1e824, 0x1e825, 0x1e826, 0x1e827, 0x1e828, 0x1e829, 0x1e82a, 0x1e82b, 0x1e82c, 0x1e82d, 0x1e82e, 0x1e82f, 0x1e830, 0x1e831, 0x1e832, 0x1e833, 0x1e834, 0x1e835, 0x1e836, 0x1e837, 0x1e838, 0x1e839, 0x1e83a, 0x1e83b, 0x1e83c, 0x1e83d, 0x1e83e, 0x1e83f, 0x1e840, 0x1e841, 0x1e842, 0x1e843, 0x1e844, 0x1e845, 0x1e846, 0x1e847, 0x1e848, 0x1e849, 0x1e84a, 0x1e84b, 0x1e84c, 0x1e84d, 0x1e84e, 0x1e84f, 0x1e850, 0x1e851, 0x1e852, 0x1e853, 0x1e854, 0x1e855, 0x1e856, 0x1e857, 0x1e858, 0x1e859, 0x1e85a, 0x1e85b, 0x1e85c, 0x1e85d, 0x1e85e, 0x1e85f, 0x1e860, 0x1e861
};

void BM_collation_280(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_280, cps_280 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_280);

uint32_t cps_281[] = {
0x1e862, 0x1e863, 0x1e864, 0x1e865, 0x1e866, 0x1e867, 0x1e868, 0x1e869, 0x1e86a, 0x1e86b, 0x1e86c, 0x1e86d, 0x1e86e, 0x1e86f, 0x1e870, 0x1e871, 0x1e872, 0x1e873, 0x1e874, 0x1e875, 0x1e876, 0x1e877, 0x1e878, 0x1e879, 0x1e87a, 0x1e87b, 0x1e87c, 0x1e87d, 0x1e87e, 0x1e87f, 0x1e880, 0x1e881, 0x1e882, 0x1e883, 0x1e884, 0x1e885, 0x1e886, 0x1e887, 0x1e888, 0x1e889, 0x1e88a, 0x1e88b, 0x1e88c, 0x1e88d, 0x1e88e, 0x1e88f, 0x1e890, 0x1e891, 0x1e892, 0x1e893, 0x1e894, 0x1e895, 0x1e896, 0x1e897, 0x1e898, 0x1e899, 0x1e89a, 0x1e89b, 0x1e89c, 0x1e89d, 0x1e89e, 0x1e89f, 0x1e8a0, 0x1e8a1, 0x1e8a2, 0x1e8a3, 0x1e8a4, 0x1e8a5, 0x1e8a6, 0x1e8a7, 0x1e8a8, 0x1e8a9, 0x1e8aa, 0x1e8ab, 0x1e8ac, 0x1e8ad, 0x1e8ae, 0x1e8af, 0x1e8b0, 0x1e8b1, 0x1e8b2, 0x1e8b3, 0x1e8b4, 0x1e8b5, 0x1e8b6, 0x1e8b7, 0x1e8b8, 0x1e8b9, 0x1e8ba, 0x1e8bb, 0x1e8bc, 0x1e8bd, 0x1e8be, 0x1e8bf, 0x1e8c0, 0x1e8c1, 0x1e8c2, 0x1e8c3, 0x1e8c4, 0x1e8c7
};

void BM_collation_281(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_281, cps_281 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_281);

uint32_t cps_282[] = {
0x1e8c8, 0x1e8c9, 0x1e8ca, 0x1e8cb, 0x1e8cc, 0x1e8cd, 0x1e8ce, 0x1e8cf, 0x1e8d0, 0x1e8d1, 0x1e8d2, 0x1e8d3, 0x1e8d4, 0x1e8d5, 0x1e8d6, 0x1e900, 0x1e901, 0x1e902, 0x1e903, 0x1e904, 0x1e905, 0x1e906, 0x1e907, 0x1e908, 0x1e909, 0x1e90a, 0x1e90b, 0x1e90c, 0x1e90d, 0x1e90e, 0x1e90f, 0x1e910, 0x1e911, 0x1e912, 0x1e913, 0x1e914, 0x1e915, 0x1e916, 0x1e917, 0x1e918, 0x1e919, 0x1e91a, 0x1e91b, 0x1e91c, 0x1e91d, 0x1e91e, 0x1e91f, 0x1e920, 0x1e921, 0x1e922, 0x1e923, 0x1e924, 0x1e925, 0x1e926, 0x1e927, 0x1e928, 0x1e929, 0x1e92a, 0x1e92b, 0x1e92c, 0x1e92d, 0x1e92e, 0x1e92f, 0x1e930, 0x1e931, 0x1e932, 0x1e933, 0x1e934, 0x1e935, 0x1e936, 0x1e937, 0x1e938, 0x1e939, 0x1e93a, 0x1e93b, 0x1e93c, 0x1e93d, 0x1e93e, 0x1e93f, 0x1e940, 0x1e941, 0x1e942, 0x1e943, 0x1e944, 0x1e945, 0x1e946, 0x1e947, 0x1e948, 0x1e949, 0x1e94a, 0x1e950, 0x1e951, 0x1e952, 0x1e953, 0x1e954, 0x1e955, 0x1e956, 0x1e957, 0x1e958, 0x1e959
};

void BM_collation_282(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_282, cps_282 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_282);

uint32_t cps_283[] = {
0x1e95e, 0x1e95f, 0x1ee00, 0x1ee01, 0x1ee02, 0x1ee03, 0x1ee05, 0x1ee06, 0x1ee07, 0x1ee08, 0x1ee09, 0x1ee0a, 0x1ee0b, 0x1ee0c, 0x1ee0d, 0x1ee0e, 0x1ee0f, 0x1ee10, 0x1ee11, 0x1ee12, 0x1ee13, 0x1ee14, 0x1ee15, 0x1ee16, 0x1ee17, 0x1ee18, 0x1ee19, 0x1ee1a, 0x1ee1b, 0x1ee1c, 0x1ee1d, 0x1ee1e, 0x1ee1f, 0x1ee21, 0x1ee22, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee2a, 0x1ee2b, 0x1ee2c, 0x1ee2d, 0x1ee2e, 0x1ee2f, 0x1ee30, 0x1ee31, 0x1ee32, 0x1ee34, 0x1ee35, 0x1ee36, 0x1ee37, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49, 0x1ee4b, 0x1ee4d, 0x1ee4e, 0x1ee4f, 0x1ee51, 0x1ee52, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee62, 0x1ee64, 0x1ee67, 0x1ee68, 0x1ee69, 0x1ee6a, 0x1ee6c, 0x1ee6d, 0x1ee6e, 0x1ee6f, 0x1ee70, 0x1ee71, 0x1ee72, 0x1ee74, 0x1ee75, 0x1ee76, 0x1ee77, 0x1ee79, 0x1ee7a, 0x1ee7b, 0x1ee7c, 0x1ee7e, 0x1ee80, 0x1ee81, 0x1ee82, 0x1ee83, 0x1ee84, 0x1ee85, 0x1ee86, 0x1ee87, 0x1ee88
};

void BM_collation_283(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_283, cps_283 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_283);

uint32_t cps_284[] = {
0x1ee89, 0x1ee8b, 0x1ee8c, 0x1ee8d, 0x1ee8e, 0x1ee8f, 0x1ee90, 0x1ee91, 0x1ee92, 0x1ee93, 0x1ee94, 0x1ee95, 0x1ee96, 0x1ee97, 0x1ee98, 0x1ee99, 0x1ee9a, 0x1ee9b, 0x1eea1, 0x1eea2, 0x1eea3, 0x1eea5, 0x1eea6, 0x1eea7, 0x1eea8, 0x1eea9, 0x1eeab, 0x1eeac, 0x1eead, 0x1eeae, 0x1eeaf, 0x1eeb0, 0x1eeb1, 0x1eeb2, 0x1eeb3, 0x1eeb4, 0x1eeb5, 0x1eeb6, 0x1eeb7, 0x1eeb8, 0x1eeb9, 0x1eeba, 0x1eebb, 0x1eef0, 0x1eef1, 0x1f000, 0x1f001, 0x1f002, 0x1f003, 0x1f004, 0x1f005, 0x1f006, 0x1f007, 0x1f008, 0x1f009, 0x1f00a, 0x1f00b, 0x1f00c, 0x1f00d, 0x1f00e, 0x1f00f, 0x1f010, 0x1f011, 0x1f012, 0x1f013, 0x1f014, 0x1f015, 0x1f016, 0x1f017, 0x1f018, 0x1f019, 0x1f01a, 0x1f01b, 0x1f01c, 0x1f01d, 0x1f01e, 0x1f01f, 0x1f020, 0x1f021, 0x1f022, 0x1f023, 0x1f024, 0x1f025, 0x1f026, 0x1f027, 0x1f028, 0x1f029, 0x1f02a, 0x1f02b, 0x1f030, 0x1f031, 0x1f032, 0x1f033, 0x1f034, 0x1f035, 0x1f036, 0x1f037, 0x1f038, 0x1f039, 0x1f03a
};

void BM_collation_284(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_284, cps_284 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_284);

uint32_t cps_285[] = {
0x1f03b, 0x1f03c, 0x1f03d, 0x1f03e, 0x1f03f, 0x1f040, 0x1f041, 0x1f042, 0x1f043, 0x1f044, 0x1f045, 0x1f046, 0x1f047, 0x1f048, 0x1f049, 0x1f04a, 0x1f04b, 0x1f04c, 0x1f04d, 0x1f04e, 0x1f04f, 0x1f050, 0x1f051, 0x1f052, 0x1f053, 0x1f054, 0x1f055, 0x1f056, 0x1f057, 0x1f058, 0x1f059, 0x1f05a, 0x1f05b, 0x1f05c, 0x1f05d, 0x1f05e, 0x1f05f, 0x1f060, 0x1f061, 0x1f062, 0x1f063, 0x1f064, 0x1f065, 0x1f066, 0x1f067, 0x1f068, 0x1f069, 0x1f06a, 0x1f06b, 0x1f06c, 0x1f06d, 0x1f06e, 0x1f06f, 0x1f070, 0x1f071, 0x1f072, 0x1f073, 0x1f074, 0x1f075, 0x1f076, 0x1f077, 0x1f078, 0x1f079, 0x1f07a, 0x1f07b, 0x1f07c, 0x1f07d, 0x1f07e, 0x1f07f, 0x1f080, 0x1f081, 0x1f082, 0x1f083, 0x1f084, 0x1f085, 0x1f086, 0x1f087, 0x1f088, 0x1f089, 0x1f08a, 0x1f08b, 0x1f08c, 0x1f08d, 0x1f08e, 0x1f08f, 0x1f090, 0x1f091, 0x1f092, 0x1f093, 0x1f0a0, 0x1f0a1, 0x1f0a2, 0x1f0a3, 0x1f0a4, 0x1f0a5, 0x1f0a6, 0x1f0a7, 0x1f0a8, 0x1f0a9, 0x1f0aa
};

void BM_collation_285(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_285, cps_285 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_285);

uint32_t cps_286[] = {
0x1f0ab, 0x1f0ac, 0x1f0ad, 0x1f0ae, 0x1f0b1, 0x1f0b2, 0x1f0b3, 0x1f0b4, 0x1f0b5, 0x1f0b6, 0x1f0b7, 0x1f0b8, 0x1f0b9, 0x1f0ba, 0x1f0bb, 0x1f0bc, 0x1f0bd, 0x1f0be, 0x1f0bf, 0x1f0c1, 0x1f0c2, 0x1f0c3, 0x1f0c4, 0x1f0c5, 0x1f0c6, 0x1f0c7, 0x1f0c8, 0x1f0c9, 0x1f0ca, 0x1f0cb, 0x1f0cc, 0x1f0cd, 0x1f0ce, 0x1f0cf, 0x1f0d1, 0x1f0d2, 0x1f0d3, 0x1f0d4, 0x1f0d5, 0x1f0d6, 0x1f0d7, 0x1f0d8, 0x1f0d9, 0x1f0da, 0x1f0db, 0x1f0dc, 0x1f0dd, 0x1f0de, 0x1f0df, 0x1f0e0, 0x1f0e1, 0x1f0e2, 0x1f0e3, 0x1f0e4, 0x1f0e5, 0x1f0e6, 0x1f0e7, 0x1f0e8, 0x1f0e9, 0x1f0ea, 0x1f0eb, 0x1f0ec, 0x1f0ed, 0x1f0ee, 0x1f0ef, 0x1f0f0, 0x1f0f1, 0x1f0f2, 0x1f0f3, 0x1f0f4, 0x1f0f5, 0x1f100, 0x1f101, 0x1f102, 0x1f103, 0x1f104, 0x1f105, 0x1f106, 0x1f107, 0x1f108, 0x1f109, 0x1f10a, 0x1f10b, 0x1f10c, 0x1f110, 0x1f111, 0x1f112, 0x1f113, 0x1f114, 0x1f115, 0x1f116, 0x1f117, 0x1f118, 0x1f119, 0x1f11a, 0x1f11b, 0x1f11c, 0x1f11d, 0x1f11e, 0x1f11f
};

void BM_collation_286(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_286, cps_286 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_286);

uint32_t cps_287[] = {
0x1f120, 0x1f121, 0x1f122, 0x1f123, 0x1f124, 0x1f125, 0x1f126, 0x1f127, 0x1f128, 0x1f129, 0x1f12a, 0x1f12b, 0x1f12c, 0x1f12d, 0x1f12e, 0x1f130, 0x1f131, 0x1f132, 0x1f133, 0x1f134, 0x1f135, 0x1f136, 0x1f137, 0x1f138, 0x1f139, 0x1f13a, 0x1f13b, 0x1f13c, 0x1f13d, 0x1f13e, 0x1f13f, 0x1f140, 0x1f141, 0x1f142, 0x1f143, 0x1f144, 0x1f145, 0x1f146, 0x1f147, 0x1f148, 0x1f149, 0x1f14a, 0x1f14b, 0x1f14c, 0x1f14d, 0x1f14e, 0x1f14f, 0x1f150, 0x1f151, 0x1f152, 0x1f153, 0x1f154, 0x1f155, 0x1f156, 0x1f157, 0x1f158, 0x1f159, 0x1f15a, 0x1f15b, 0x1f15c, 0x1f15d, 0x1f15e, 0x1f15f, 0x1f160, 0x1f161, 0x1f162, 0x1f163, 0x1f164, 0x1f165, 0x1f166, 0x1f167, 0x1f168, 0x1f169, 0x1f16a, 0x1f16b, 0x1f170, 0x1f171, 0x1f172, 0x1f173, 0x1f174, 0x1f175, 0x1f176, 0x1f177, 0x1f178, 0x1f179, 0x1f17a, 0x1f17b, 0x1f17c, 0x1f17d, 0x1f17e, 0x1f17f, 0x1f180, 0x1f181, 0x1f182, 0x1f183, 0x1f184, 0x1f185, 0x1f186, 0x1f187, 0x1f188
};

void BM_collation_287(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_287, cps_287 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_287);

uint32_t cps_288[] = {
0x1f189, 0x1f18a, 0x1f18b, 0x1f18c, 0x1f18d, 0x1f18e, 0x1f18f, 0x1f190, 0x1f191, 0x1f192, 0x1f193, 0x1f194, 0x1f195, 0x1f196, 0x1f197, 0x1f198, 0x1f199, 0x1f19a, 0x1f19b, 0x1f19c, 0x1f19d, 0x1f19e, 0x1f19f, 0x1f1a0, 0x1f1a1, 0x1f1a2, 0x1f1a3, 0x1f1a4, 0x1f1a5, 0x1f1a6, 0x1f1a7, 0x1f1a8, 0x1f1a9, 0x1f1aa, 0x1f1ab, 0x1f1ac, 0x1f1e6, 0x1f1e7, 0x1f1e8, 0x1f1e9, 0x1f1ea, 0x1f1eb, 0x1f1ec, 0x1f1ed, 0x1f1ee, 0x1f1ef, 0x1f1f0, 0x1f1f1, 0x1f1f2, 0x1f1f3, 0x1f1f4, 0x1f1f5, 0x1f1f6, 0x1f1f7, 0x1f1f8, 0x1f1f9, 0x1f1fa, 0x1f1fb, 0x1f1fc, 0x1f1fd, 0x1f1fe, 0x1f1ff, 0x1f200, 0x1f201, 0x1f202, 0x1f210, 0x1f211, 0x1f212, 0x1f213, 0x1f214, 0x1f215, 0x1f216, 0x1f217, 0x1f218, 0x1f219, 0x1f21a, 0x1f21b, 0x1f21c, 0x1f21d, 0x1f21e, 0x1f21f, 0x1f220, 0x1f221, 0x1f222, 0x1f223, 0x1f224, 0x1f225, 0x1f226, 0x1f227, 0x1f228, 0x1f229, 0x1f22a, 0x1f22b, 0x1f22c, 0x1f22d, 0x1f22e, 0x1f22f, 0x1f230, 0x1f231, 0x1f232
};

void BM_collation_288(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_288, cps_288 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_288);

uint32_t cps_289[] = {
0x1f233, 0x1f234, 0x1f235, 0x1f236, 0x1f237, 0x1f238, 0x1f239, 0x1f23a, 0x1f23b, 0x1f240, 0x1f241, 0x1f242, 0x1f243, 0x1f244, 0x1f245, 0x1f246, 0x1f247, 0x1f248, 0x1f250, 0x1f251, 0x1f260, 0x1f261, 0x1f262, 0x1f263, 0x1f264, 0x1f265, 0x1f300, 0x1f301, 0x1f302, 0x1f303, 0x1f304, 0x1f305, 0x1f306, 0x1f307, 0x1f308, 0x1f309, 0x1f30a, 0x1f30b, 0x1f30c, 0x1f30d, 0x1f30e, 0x1f30f, 0x1f310, 0x1f311, 0x1f312, 0x1f313, 0x1f314, 0x1f315, 0x1f316, 0x1f317, 0x1f318, 0x1f319, 0x1f31a, 0x1f31b, 0x1f31c, 0x1f31d, 0x1f31e, 0x1f31f, 0x1f320, 0x1f321, 0x1f322, 0x1f323, 0x1f324, 0x1f325, 0x1f326, 0x1f327, 0x1f328, 0x1f329, 0x1f32a, 0x1f32b, 0x1f32c, 0x1f32d, 0x1f32e, 0x1f32f, 0x1f330, 0x1f331, 0x1f332, 0x1f333, 0x1f334, 0x1f335, 0x1f336, 0x1f337, 0x1f338, 0x1f339, 0x1f33a, 0x1f33b, 0x1f33c, 0x1f33d, 0x1f33e, 0x1f33f, 0x1f340, 0x1f341, 0x1f342, 0x1f343, 0x1f344, 0x1f345, 0x1f346, 0x1f347, 0x1f348, 0x1f349
};

void BM_collation_289(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_289, cps_289 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_289);

uint32_t cps_290[] = {
0x1f34a, 0x1f34b, 0x1f34c, 0x1f34d, 0x1f34e, 0x1f34f, 0x1f350, 0x1f351, 0x1f352, 0x1f353, 0x1f354, 0x1f355, 0x1f356, 0x1f357, 0x1f358, 0x1f359, 0x1f35a, 0x1f35b, 0x1f35c, 0x1f35d, 0x1f35e, 0x1f35f, 0x1f360, 0x1f361, 0x1f362, 0x1f363, 0x1f364, 0x1f365, 0x1f366, 0x1f367, 0x1f368, 0x1f369, 0x1f36a, 0x1f36b, 0x1f36c, 0x1f36d, 0x1f36e, 0x1f36f, 0x1f370, 0x1f371, 0x1f372, 0x1f373, 0x1f374, 0x1f375, 0x1f376, 0x1f377, 0x1f378, 0x1f379, 0x1f37a, 0x1f37b, 0x1f37c, 0x1f37d, 0x1f37e, 0x1f37f, 0x1f380, 0x1f381, 0x1f382, 0x1f383, 0x1f384, 0x1f385, 0x1f386, 0x1f387, 0x1f388, 0x1f389, 0x1f38a, 0x1f38b, 0x1f38c, 0x1f38d, 0x1f38e, 0x1f38f, 0x1f390, 0x1f391, 0x1f392, 0x1f393, 0x1f394, 0x1f395, 0x1f396, 0x1f397, 0x1f398, 0x1f399, 0x1f39a, 0x1f39b, 0x1f39c, 0x1f39d, 0x1f39e, 0x1f39f, 0x1f3a0, 0x1f3a1, 0x1f3a2, 0x1f3a3, 0x1f3a4, 0x1f3a5, 0x1f3a6, 0x1f3a7, 0x1f3a8, 0x1f3a9, 0x1f3aa, 0x1f3ab, 0x1f3ac, 0x1f3ad
};

void BM_collation_290(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_290, cps_290 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_290);

uint32_t cps_291[] = {
0x1f3ae, 0x1f3af, 0x1f3b0, 0x1f3b1, 0x1f3b2, 0x1f3b3, 0x1f3b4, 0x1f3b5, 0x1f3b6, 0x1f3b7, 0x1f3b8, 0x1f3b9, 0x1f3ba, 0x1f3bb, 0x1f3bc, 0x1f3bd, 0x1f3be, 0x1f3bf, 0x1f3c0, 0x1f3c1, 0x1f3c2, 0x1f3c3, 0x1f3c4, 0x1f3c5, 0x1f3c6, 0x1f3c7, 0x1f3c8, 0x1f3c9, 0x1f3ca, 0x1f3cb, 0x1f3cc, 0x1f3cd, 0x1f3ce, 0x1f3cf, 0x1f3d0, 0x1f3d1, 0x1f3d2, 0x1f3d3, 0x1f3d4, 0x1f3d5, 0x1f3d6, 0x1f3d7, 0x1f3d8, 0x1f3d9, 0x1f3da, 0x1f3db, 0x1f3dc, 0x1f3dd, 0x1f3de, 0x1f3df, 0x1f3e0, 0x1f3e1, 0x1f3e2, 0x1f3e3, 0x1f3e4, 0x1f3e5, 0x1f3e6, 0x1f3e7, 0x1f3e8, 0x1f3e9, 0x1f3ea, 0x1f3eb, 0x1f3ec, 0x1f3ed, 0x1f3ee, 0x1f3ef, 0x1f3f0, 0x1f3f1, 0x1f3f2, 0x1f3f3, 0x1f3f4, 0x1f3f5, 0x1f3f6, 0x1f3f7, 0x1f3f8, 0x1f3f9, 0x1f3fa, 0x1f3fb, 0x1f3fc, 0x1f3fd, 0x1f3fe, 0x1f3ff, 0x1f400, 0x1f401, 0x1f402, 0x1f403, 0x1f404, 0x1f405, 0x1f406, 0x1f407, 0x1f408, 0x1f409, 0x1f40a, 0x1f40b, 0x1f40c, 0x1f40d, 0x1f40e, 0x1f40f, 0x1f410, 0x1f411
};

void BM_collation_291(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_291, cps_291 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_291);

uint32_t cps_292[] = {
0x1f412, 0x1f413, 0x1f414, 0x1f415, 0x1f416, 0x1f417, 0x1f418, 0x1f419, 0x1f41a, 0x1f41b, 0x1f41c, 0x1f41d, 0x1f41e, 0x1f41f, 0x1f420, 0x1f421, 0x1f422, 0x1f423, 0x1f424, 0x1f425, 0x1f426, 0x1f427, 0x1f428, 0x1f429, 0x1f42a, 0x1f42b, 0x1f42c, 0x1f42d, 0x1f42e, 0x1f42f, 0x1f430, 0x1f431, 0x1f432, 0x1f433, 0x1f434, 0x1f435, 0x1f436, 0x1f437, 0x1f438, 0x1f439, 0x1f43a, 0x1f43b, 0x1f43c, 0x1f43d, 0x1f43e, 0x1f43f, 0x1f440, 0x1f441, 0x1f442, 0x1f443, 0x1f444, 0x1f445, 0x1f446, 0x1f447, 0x1f448, 0x1f449, 0x1f44a, 0x1f44b, 0x1f44c, 0x1f44d, 0x1f44e, 0x1f44f, 0x1f450, 0x1f451, 0x1f452, 0x1f453, 0x1f454, 0x1f455, 0x1f456, 0x1f457, 0x1f458, 0x1f459, 0x1f45a, 0x1f45b, 0x1f45c, 0x1f45d, 0x1f45e, 0x1f45f, 0x1f460, 0x1f461, 0x1f462, 0x1f463, 0x1f464, 0x1f465, 0x1f466, 0x1f467, 0x1f468, 0x1f469, 0x1f46a, 0x1f46b, 0x1f46c, 0x1f46d, 0x1f46e, 0x1f46f, 0x1f470, 0x1f471, 0x1f472, 0x1f473, 0x1f474, 0x1f475
};

void BM_collation_292(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_292, cps_292 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_292);

uint32_t cps_293[] = {
0x1f476, 0x1f477, 0x1f478, 0x1f479, 0x1f47a, 0x1f47b, 0x1f47c, 0x1f47d, 0x1f47e, 0x1f47f, 0x1f480, 0x1f481, 0x1f482, 0x1f483, 0x1f484, 0x1f485, 0x1f486, 0x1f487, 0x1f488, 0x1f489, 0x1f48a, 0x1f48b, 0x1f48c, 0x1f48d, 0x1f48e, 0x1f48f, 0x1f490, 0x1f491, 0x1f492, 0x1f493, 0x1f494, 0x1f495, 0x1f496, 0x1f497, 0x1f498, 0x1f499, 0x1f49a, 0x1f49b, 0x1f49c, 0x1f49d, 0x1f49e, 0x1f49f, 0x1f4a0, 0x1f4a1, 0x1f4a2, 0x1f4a3, 0x1f4a4, 0x1f4a5, 0x1f4a6, 0x1f4a7, 0x1f4a8, 0x1f4a9, 0x1f4aa, 0x1f4ab, 0x1f4ac, 0x1f4ad, 0x1f4ae, 0x1f4af, 0x1f4b0, 0x1f4b1, 0x1f4b2, 0x1f4b3, 0x1f4b4, 0x1f4b5, 0x1f4b6, 0x1f4b7, 0x1f4b8, 0x1f4b9, 0x1f4ba, 0x1f4bb, 0x1f4bc, 0x1f4bd, 0x1f4be, 0x1f4bf, 0x1f4c0, 0x1f4c1, 0x1f4c2, 0x1f4c3, 0x1f4c4, 0x1f4c5, 0x1f4c6, 0x1f4c7, 0x1f4c8, 0x1f4c9, 0x1f4ca, 0x1f4cb, 0x1f4cc, 0x1f4cd, 0x1f4ce, 0x1f4cf, 0x1f4d0, 0x1f4d1, 0x1f4d2, 0x1f4d3, 0x1f4d4, 0x1f4d5, 0x1f4d6, 0x1f4d7, 0x1f4d8, 0x1f4d9
};

void BM_collation_293(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_293, cps_293 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_293);

uint32_t cps_294[] = {
0x1f4da, 0x1f4db, 0x1f4dc, 0x1f4dd, 0x1f4de, 0x1f4df, 0x1f4e0, 0x1f4e1, 0x1f4e2, 0x1f4e3, 0x1f4e4, 0x1f4e5, 0x1f4e6, 0x1f4e7, 0x1f4e8, 0x1f4e9, 0x1f4ea, 0x1f4eb, 0x1f4ec, 0x1f4ed, 0x1f4ee, 0x1f4ef, 0x1f4f0, 0x1f4f1, 0x1f4f2, 0x1f4f3, 0x1f4f4, 0x1f4f5, 0x1f4f6, 0x1f4f7, 0x1f4f8, 0x1f4f9, 0x1f4fa, 0x1f4fb, 0x1f4fc, 0x1f4fd, 0x1f4fe, 0x1f4ff, 0x1f500, 0x1f501, 0x1f502, 0x1f503, 0x1f504, 0x1f505, 0x1f506, 0x1f507, 0x1f508, 0x1f509, 0x1f50a, 0x1f50b, 0x1f50c, 0x1f50d, 0x1f50e, 0x1f50f, 0x1f510, 0x1f511, 0x1f512, 0x1f513, 0x1f514, 0x1f515, 0x1f516, 0x1f517, 0x1f518, 0x1f519, 0x1f51a, 0x1f51b, 0x1f51c, 0x1f51d, 0x1f51e, 0x1f51f, 0x1f520, 0x1f521, 0x1f522, 0x1f523, 0x1f524, 0x1f525, 0x1f526, 0x1f527, 0x1f528, 0x1f529, 0x1f52a, 0x1f52b, 0x1f52c, 0x1f52d, 0x1f52e, 0x1f52f, 0x1f530, 0x1f531, 0x1f532, 0x1f533, 0x1f534, 0x1f535, 0x1f536, 0x1f537, 0x1f538, 0x1f539, 0x1f53a, 0x1f53b, 0x1f53c, 0x1f53d
};

void BM_collation_294(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_294, cps_294 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_294);

uint32_t cps_295[] = {
0x1f53e, 0x1f53f, 0x1f540, 0x1f541, 0x1f542, 0x1f543, 0x1f544, 0x1f545, 0x1f546, 0x1f547, 0x1f548, 0x1f549, 0x1f54a, 0x1f54b, 0x1f54c, 0x1f54d, 0x1f54e, 0x1f54f, 0x1f550, 0x1f551, 0x1f552, 0x1f553, 0x1f554, 0x1f555, 0x1f556, 0x1f557, 0x1f558, 0x1f559, 0x1f55a, 0x1f55b, 0x1f55c, 0x1f55d, 0x1f55e, 0x1f55f, 0x1f560, 0x1f561, 0x1f562, 0x1f563, 0x1f564, 0x1f565, 0x1f566, 0x1f567, 0x1f568, 0x1f569, 0x1f56a, 0x1f56b, 0x1f56c, 0x1f56d, 0x1f56e, 0x1f56f, 0x1f570, 0x1f571, 0x1f572, 0x1f573, 0x1f574, 0x1f575, 0x1f576, 0x1f577, 0x1f578, 0x1f579, 0x1f57a, 0x1f57b, 0x1f57c, 0x1f57d, 0x1f57e, 0x1f57f, 0x1f580, 0x1f581, 0x1f582, 0x1f583, 0x1f584, 0x1f585, 0x1f586, 0x1f587, 0x1f588, 0x1f589, 0x1f58a, 0x1f58b, 0x1f58c, 0x1f58d, 0x1f58e, 0x1f58f, 0x1f590, 0x1f591, 0x1f592, 0x1f593, 0x1f594, 0x1f595, 0x1f596, 0x1f597, 0x1f598, 0x1f599, 0x1f59a, 0x1f59b, 0x1f59c, 0x1f59d, 0x1f59e, 0x1f59f, 0x1f5a0, 0x1f5a1
};

void BM_collation_295(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_295, cps_295 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_295);

uint32_t cps_296[] = {
0x1f5a2, 0x1f5a3, 0x1f5a4, 0x1f5a5, 0x1f5a6, 0x1f5a7, 0x1f5a8, 0x1f5a9, 0x1f5aa, 0x1f5ab, 0x1f5ac, 0x1f5ad, 0x1f5ae, 0x1f5af, 0x1f5b0, 0x1f5b1, 0x1f5b2, 0x1f5b3, 0x1f5b4, 0x1f5b5, 0x1f5b6, 0x1f5b7, 0x1f5b8, 0x1f5b9, 0x1f5ba, 0x1f5bb, 0x1f5bc, 0x1f5bd, 0x1f5be, 0x1f5bf, 0x1f5c0, 0x1f5c1, 0x1f5c2, 0x1f5c3, 0x1f5c4, 0x1f5c5, 0x1f5c6, 0x1f5c7, 0x1f5c8, 0x1f5c9, 0x1f5ca, 0x1f5cb, 0x1f5cc, 0x1f5cd, 0x1f5ce, 0x1f5cf, 0x1f5d0, 0x1f5d1, 0x1f5d2, 0x1f5d3, 0x1f5d4, 0x1f5d5, 0x1f5d6, 0x1f5d7, 0x1f5d8, 0x1f5d9, 0x1f5da, 0x1f5db, 0x1f5dc, 0x1f5dd, 0x1f5de, 0x1f5df, 0x1f5e0, 0x1f5e1, 0x1f5e2, 0x1f5e3, 0x1f5e4, 0x1f5e5, 0x1f5e6, 0x1f5e7, 0x1f5e8, 0x1f5e9, 0x1f5ea, 0x1f5eb, 0x1f5ec, 0x1f5ed, 0x1f5ee, 0x1f5ef, 0x1f5f0, 0x1f5f1, 0x1f5f2, 0x1f5f3, 0x1f5f4, 0x1f5f5, 0x1f5f6, 0x1f5f7, 0x1f5f8, 0x1f5f9, 0x1f5fa, 0x1f5fb, 0x1f5fc, 0x1f5fd, 0x1f5fe, 0x1f5ff, 0x1f600, 0x1f601, 0x1f602, 0x1f603, 0x1f604, 0x1f605
};

void BM_collation_296(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_296, cps_296 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_296);

uint32_t cps_297[] = {
0x1f606, 0x1f607, 0x1f608, 0x1f609, 0x1f60a, 0x1f60b, 0x1f60c, 0x1f60d, 0x1f60e, 0x1f60f, 0x1f610, 0x1f611, 0x1f612, 0x1f613, 0x1f614, 0x1f615, 0x1f616, 0x1f617, 0x1f618, 0x1f619, 0x1f61a, 0x1f61b, 0x1f61c, 0x1f61d, 0x1f61e, 0x1f61f, 0x1f620, 0x1f621, 0x1f622, 0x1f623, 0x1f624, 0x1f625, 0x1f626, 0x1f627, 0x1f628, 0x1f629, 0x1f62a, 0x1f62b, 0x1f62c, 0x1f62d, 0x1f62e, 0x1f62f, 0x1f630, 0x1f631, 0x1f632, 0x1f633, 0x1f634, 0x1f635, 0x1f636, 0x1f637, 0x1f638, 0x1f639, 0x1f63a, 0x1f63b, 0x1f63c, 0x1f63d, 0x1f63e, 0x1f63f, 0x1f640, 0x1f641, 0x1f642, 0x1f643, 0x1f644, 0x1f645, 0x1f646, 0x1f647, 0x1f648, 0x1f649, 0x1f64a, 0x1f64b, 0x1f64c, 0x1f64d, 0x1f64e, 0x1f64f, 0x1f650, 0x1f651, 0x1f652, 0x1f653, 0x1f654, 0x1f655, 0x1f656, 0x1f657, 0x1f658, 0x1f659, 0x1f65a, 0x1f65b, 0x1f65c, 0x1f65d, 0x1f65e, 0x1f65f, 0x1f660, 0x1f661, 0x1f662, 0x1f663, 0x1f664, 0x1f665, 0x1f666, 0x1f667, 0x1f668, 0x1f669
};

void BM_collation_297(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_297, cps_297 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_297);

uint32_t cps_298[] = {
0x1f66a, 0x1f66b, 0x1f66c, 0x1f66d, 0x1f66e, 0x1f66f, 0x1f670, 0x1f671, 0x1f672, 0x1f673, 0x1f674, 0x1f675, 0x1f676, 0x1f677, 0x1f678, 0x1f679, 0x1f67a, 0x1f67b, 0x1f67c, 0x1f67d, 0x1f67e, 0x1f67f, 0x1f680, 0x1f681, 0x1f682, 0x1f683, 0x1f684, 0x1f685, 0x1f686, 0x1f687, 0x1f688, 0x1f689, 0x1f68a, 0x1f68b, 0x1f68c, 0x1f68d, 0x1f68e, 0x1f68f, 0x1f690, 0x1f691, 0x1f692, 0x1f693, 0x1f694, 0x1f695, 0x1f696, 0x1f697, 0x1f698, 0x1f699, 0x1f69a, 0x1f69b, 0x1f69c, 0x1f69d, 0x1f69e, 0x1f69f, 0x1f6a0, 0x1f6a1, 0x1f6a2, 0x1f6a3, 0x1f6a4, 0x1f6a5, 0x1f6a6, 0x1f6a7, 0x1f6a8, 0x1f6a9, 0x1f6aa, 0x1f6ab, 0x1f6ac, 0x1f6ad, 0x1f6ae, 0x1f6af, 0x1f6b0, 0x1f6b1, 0x1f6b2, 0x1f6b3, 0x1f6b4, 0x1f6b5, 0x1f6b6, 0x1f6b7, 0x1f6b8, 0x1f6b9, 0x1f6ba, 0x1f6bb, 0x1f6bc, 0x1f6bd, 0x1f6be, 0x1f6bf, 0x1f6c0, 0x1f6c1, 0x1f6c2, 0x1f6c3, 0x1f6c4, 0x1f6c5, 0x1f6c6, 0x1f6c7, 0x1f6c8, 0x1f6c9, 0x1f6ca, 0x1f6cb, 0x1f6cc, 0x1f6cd
};

void BM_collation_298(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_298, cps_298 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_298);

uint32_t cps_299[] = {
0x1f6ce, 0x1f6cf, 0x1f6d0, 0x1f6d1, 0x1f6d2, 0x1f6d3, 0x1f6d4, 0x1f6e0, 0x1f6e1, 0x1f6e2, 0x1f6e3, 0x1f6e4, 0x1f6e5, 0x1f6e6, 0x1f6e7, 0x1f6e8, 0x1f6e9, 0x1f6ea, 0x1f6eb, 0x1f6ec, 0x1f6f0, 0x1f6f1, 0x1f6f2, 0x1f6f3, 0x1f6f4, 0x1f6f5, 0x1f6f6, 0x1f6f7, 0x1f6f8, 0x1f700, 0x1f701, 0x1f702, 0x1f703, 0x1f704, 0x1f705, 0x1f706, 0x1f707, 0x1f708, 0x1f709, 0x1f70a, 0x1f70b, 0x1f70c, 0x1f70d, 0x1f70e, 0x1f70f, 0x1f710, 0x1f711, 0x1f712, 0x1f713, 0x1f714, 0x1f715, 0x1f716, 0x1f717, 0x1f718, 0x1f719, 0x1f71a, 0x1f71b, 0x1f71c, 0x1f71d, 0x1f71e, 0x1f71f, 0x1f720, 0x1f721, 0x1f722, 0x1f723, 0x1f724, 0x1f725, 0x1f726, 0x1f727, 0x1f728, 0x1f729, 0x1f72a, 0x1f72b, 0x1f72c, 0x1f72d, 0x1f72e, 0x1f72f, 0x1f730, 0x1f731, 0x1f732, 0x1f733, 0x1f734, 0x1f735, 0x1f736, 0x1f737, 0x1f738, 0x1f739, 0x1f73a, 0x1f73b, 0x1f73c, 0x1f73d, 0x1f73e, 0x1f73f, 0x1f740, 0x1f741, 0x1f742, 0x1f743, 0x1f744, 0x1f745, 0x1f746
};

void BM_collation_299(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_299, cps_299 + 100, boost::text::collation_strength::quaternary, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_299);



BENCHMARK_MAIN()
