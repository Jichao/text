// Warning! This file is autogenerated.
#ifndef BOOST_TEXT_DETAIL_BIDI_BRACKETS_HPP
#define BOOST_TEXT_DETAIL_BIDI_BRACKETS_HPP

#include <boost/text/bidirectional_fwd.hpp>

#include <algorithm>
#include <array>

#include <stdint.h>


namespace boost { namespace text { namespace detail {

enum class bidi_bracket_type {
    open,
    close
};

struct bidi_bracket_data
{
    explicit operator bool() const { return cp_ != 0; }

    uint32_t cp_;
    uint32_t paired_bracket_;
    bidi_bracket_type paired_bracket_type_;
};

inline bidi_bracket_data bidi_bracket(uint32_t cp) noexcept
{
    constexpr std::array<bidi_bracket_data, 120> brackets = {{
        {0x0028, 0x0029, bidi_bracket_type::open},
        {0x0029, 0x0028, bidi_bracket_type::close},
        {0x005B, 0x005D, bidi_bracket_type::open},
        {0x005D, 0x005B, bidi_bracket_type::close},
        {0x007B, 0x007D, bidi_bracket_type::open},
        {0x007D, 0x007B, bidi_bracket_type::close},
        {0x0F3A, 0x0F3B, bidi_bracket_type::open},
        {0x0F3B, 0x0F3A, bidi_bracket_type::close},
        {0x0F3C, 0x0F3D, bidi_bracket_type::open},
        {0x0F3D, 0x0F3C, bidi_bracket_type::close},
        {0x169B, 0x169C, bidi_bracket_type::open},
        {0x169C, 0x169B, bidi_bracket_type::close},
        {0x2045, 0x2046, bidi_bracket_type::open},
        {0x2046, 0x2045, bidi_bracket_type::close},
        {0x207D, 0x207E, bidi_bracket_type::open},
        {0x207E, 0x207D, bidi_bracket_type::close},
        {0x208D, 0x208E, bidi_bracket_type::open},
        {0x208E, 0x208D, bidi_bracket_type::close},
        {0x2308, 0x2309, bidi_bracket_type::open},
        {0x2309, 0x2308, bidi_bracket_type::close},
        {0x230A, 0x230B, bidi_bracket_type::open},
        {0x230B, 0x230A, bidi_bracket_type::close},
        {0x2329, 0x232A, bidi_bracket_type::open},
        {0x232A, 0x2329, bidi_bracket_type::close},
        {0x2768, 0x2769, bidi_bracket_type::open},
        {0x2769, 0x2768, bidi_bracket_type::close},
        {0x276A, 0x276B, bidi_bracket_type::open},
        {0x276B, 0x276A, bidi_bracket_type::close},
        {0x276C, 0x276D, bidi_bracket_type::open},
        {0x276D, 0x276C, bidi_bracket_type::close},
        {0x276E, 0x276F, bidi_bracket_type::open},
        {0x276F, 0x276E, bidi_bracket_type::close},
        {0x2770, 0x2771, bidi_bracket_type::open},
        {0x2771, 0x2770, bidi_bracket_type::close},
        {0x2772, 0x2773, bidi_bracket_type::open},
        {0x2773, 0x2772, bidi_bracket_type::close},
        {0x2774, 0x2775, bidi_bracket_type::open},
        {0x2775, 0x2774, bidi_bracket_type::close},
        {0x27C5, 0x27C6, bidi_bracket_type::open},
        {0x27C6, 0x27C5, bidi_bracket_type::close},
        {0x27E6, 0x27E7, bidi_bracket_type::open},
        {0x27E7, 0x27E6, bidi_bracket_type::close},
        {0x27E8, 0x27E9, bidi_bracket_type::open},
        {0x27E9, 0x27E8, bidi_bracket_type::close},
        {0x27EA, 0x27EB, bidi_bracket_type::open},
        {0x27EB, 0x27EA, bidi_bracket_type::close},
        {0x27EC, 0x27ED, bidi_bracket_type::open},
        {0x27ED, 0x27EC, bidi_bracket_type::close},
        {0x27EE, 0x27EF, bidi_bracket_type::open},
        {0x27EF, 0x27EE, bidi_bracket_type::close},
        {0x2983, 0x2984, bidi_bracket_type::open},
        {0x2984, 0x2983, bidi_bracket_type::close},
        {0x2985, 0x2986, bidi_bracket_type::open},
        {0x2986, 0x2985, bidi_bracket_type::close},
        {0x2987, 0x2988, bidi_bracket_type::open},
        {0x2988, 0x2987, bidi_bracket_type::close},
        {0x2989, 0x298A, bidi_bracket_type::open},
        {0x298A, 0x2989, bidi_bracket_type::close},
        {0x298B, 0x298C, bidi_bracket_type::open},
        {0x298C, 0x298B, bidi_bracket_type::close},
        {0x298D, 0x2990, bidi_bracket_type::open},
        {0x298E, 0x298F, bidi_bracket_type::close},
        {0x298F, 0x298E, bidi_bracket_type::open},
        {0x2990, 0x298D, bidi_bracket_type::close},
        {0x2991, 0x2992, bidi_bracket_type::open},
        {0x2992, 0x2991, bidi_bracket_type::close},
        {0x2993, 0x2994, bidi_bracket_type::open},
        {0x2994, 0x2993, bidi_bracket_type::close},
        {0x2995, 0x2996, bidi_bracket_type::open},
        {0x2996, 0x2995, bidi_bracket_type::close},
        {0x2997, 0x2998, bidi_bracket_type::open},
        {0x2998, 0x2997, bidi_bracket_type::close},
        {0x29D8, 0x29D9, bidi_bracket_type::open},
        {0x29D9, 0x29D8, bidi_bracket_type::close},
        {0x29DA, 0x29DB, bidi_bracket_type::open},
        {0x29DB, 0x29DA, bidi_bracket_type::close},
        {0x29FC, 0x29FD, bidi_bracket_type::open},
        {0x29FD, 0x29FC, bidi_bracket_type::close},
        {0x2E22, 0x2E23, bidi_bracket_type::open},
        {0x2E23, 0x2E22, bidi_bracket_type::close},
        {0x2E24, 0x2E25, bidi_bracket_type::open},
        {0x2E25, 0x2E24, bidi_bracket_type::close},
        {0x2E26, 0x2E27, bidi_bracket_type::open},
        {0x2E27, 0x2E26, bidi_bracket_type::close},
        {0x2E28, 0x2E29, bidi_bracket_type::open},
        {0x2E29, 0x2E28, bidi_bracket_type::close},
        {0x3008, 0x3009, bidi_bracket_type::open},
        {0x3009, 0x3008, bidi_bracket_type::close},
        {0x300A, 0x300B, bidi_bracket_type::open},
        {0x300B, 0x300A, bidi_bracket_type::close},
        {0x300C, 0x300D, bidi_bracket_type::open},
        {0x300D, 0x300C, bidi_bracket_type::close},
        {0x300E, 0x300F, bidi_bracket_type::open},
        {0x300F, 0x300E, bidi_bracket_type::close},
        {0x3010, 0x3011, bidi_bracket_type::open},
        {0x3011, 0x3010, bidi_bracket_type::close},
        {0x3014, 0x3015, bidi_bracket_type::open},
        {0x3015, 0x3014, bidi_bracket_type::close},
        {0x3016, 0x3017, bidi_bracket_type::open},
        {0x3017, 0x3016, bidi_bracket_type::close},
        {0x3018, 0x3019, bidi_bracket_type::open},
        {0x3019, 0x3018, bidi_bracket_type::close},
        {0x301A, 0x301B, bidi_bracket_type::open},
        {0x301B, 0x301A, bidi_bracket_type::close},
        {0xFE59, 0xFE5A, bidi_bracket_type::open},
        {0xFE5A, 0xFE59, bidi_bracket_type::close},
        {0xFE5B, 0xFE5C, bidi_bracket_type::open},
        {0xFE5C, 0xFE5B, bidi_bracket_type::close},
        {0xFE5D, 0xFE5E, bidi_bracket_type::open},
        {0xFE5E, 0xFE5D, bidi_bracket_type::close},
        {0xFF08, 0xFF09, bidi_bracket_type::open},
        {0xFF09, 0xFF08, bidi_bracket_type::close},
        {0xFF3B, 0xFF3D, bidi_bracket_type::open},
        {0xFF3D, 0xFF3B, bidi_bracket_type::close},
        {0xFF5B, 0xFF5D, bidi_bracket_type::open},
        {0xFF5D, 0xFF5B, bidi_bracket_type::close},
        {0xFF5F, 0xFF60, bidi_bracket_type::open},
        {0xFF60, 0xFF5F, bidi_bracket_type::close},
        {0xFF62, 0xFF63, bidi_bracket_type::open},
        {0xFF63, 0xFF62, bidi_bracket_type::close},
    }};

    auto const it = std::lower_bound(
        brackets.begin(), brackets.end(), bidi_bracket_data{cp},
        [](bidi_bracket_data lhs, bidi_bracket_data rhs){
            return lhs.cp_ < rhs.cp_;
        });
    if (it == brackets.end() || it->cp_ != cp)
        return bidi_bracket_data{0};
    return *it;
}

}}}

#endif
