#!/usr/bin/env python
# -*- coding: utf-8 -*-

prop_lookup_test_form = decls = '''\
// Warning! This file is autogenerated.
#include <boost/text/{0}.hpp>

#include <gtest/gtest.h>


TEST({0}, prop_lookups)
{{{1}
}}
'''

break_test_form = decls = '''\
// Warning! This file is autogenerated.
#include <boost/text/{0}.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST({0}, breaks)
{{{1}
}}
'''


def extract_break_tests(filename, prop_, prop_names):
    prop_lookup_test = ''
    break_test = ''
    lines = open(filename, 'r').readlines()
    for line in lines:
        line = line[:-1]
        if not line.startswith('#') and len(line) != 0:
            comment_start = line.find('#')
            comment = ''
            if comment_start != -1:
                comment = line[comment_start + 1:].strip()
                line = line[:comment_start]
            fields = line.split(' ')[1:-1]
            cps = []
            active_break = True
            break_test += '''
    // {0}
    {{
        boost::text::{1}_break_t prev_break;
'''.format(line, prop_)
            for f in fields:
                if f[0] in '0123456789ABCDEF':
                    break_test += '''
        prev_break = boost::text::{}_break(prev_break.prop_, 0x{});
        EXPECT_EQ(prev_break.break_, {});'''.format(prop_, f, active_break and 'true' or 'false')
                    cps.append(f)
                else:
                    active_break = f == 'รท' # Divide symbol used in the input.
            break_test += '\n    }\n'

            comment_fields = comment.split(' ')
            i = 0
            for f in comment_fields:
                if f.startswith('(') and f.endswith(')'):
                    prop_lookup_test += \
                        '\n    EXPECT_EQ(boost::text::{0}_prop(0x{1}), {2});'.format(
                            prop_, cps[i], prop_names[f[1:-1]]
                        )
                    i += 1
    return (prop_lookup_test, break_test)

grapheme_prop_names = {
    'Other': 'boost::text::grapheme_prop_t::Other',
    'Prepend': 'boost::text::grapheme_prop_t::Prepend',
    'CR': 'boost::text::grapheme_prop_t::CR',
    'LF': 'boost::text::grapheme_prop_t::LF',
    'Control': 'boost::text::grapheme_prop_t::Control',
    'Extend': 'boost::text::grapheme_prop_t::Extend',
    'RI': 'boost::text::grapheme_prop_t::Regional_Indicator',
    'SpacingMark': 'boost::text::grapheme_prop_t::SpacingMark',
    'L': 'boost::text::grapheme_prop_t::L',
    'V': 'boost::text::grapheme_prop_t::V',
    'T': 'boost::text::grapheme_prop_t::T',
    'LV': 'boost::text::grapheme_prop_t::LV',
    'LVT': 'boost::text::grapheme_prop_t::LVT',
    'E_Base': 'boost::text::grapheme_prop_t::E_Base',
    'E_Modifier': 'boost::text::grapheme_prop_t::E_Modifier',
    'ZWJ': 'boost::text::grapheme_prop_t::ZWJ',
    'Glue_After_Zwj': 'boost::text::grapheme_prop_t::Glue_After_Zwj',
    'EBG': 'boost::text::grapheme_prop_t::E_Base_GAZ'
}

(grapheme_prop_lookup_test, grapheme_break_test) = \
    extract_break_tests('GraphemeBreakTest.txt', 'grapheme', grapheme_prop_names)
cpp_file = open('grapheme_prop_lookup.cpp', 'w')
cpp_file.write(prop_lookup_test_form.format('grapheme', grapheme_prop_lookup_test))
cpp_file = open('grapheme_break.cpp', 'w')
cpp_file.write(break_test_form.format('grapheme', grapheme_break_test))


word_prop_names = {
    'Other': 'boost::text::word_prop_t::Other',
    'Double_Quote': 'boost::text::word_prop_t::Double_Quote',
    'Single_Quote': 'boost::text::word_prop_t::Single_Quote',
    'Hebrew_Letter': 'boost::text::word_prop_t::Hebrew_Letter',
    'CR': 'boost::text::word_prop_t::CR',
    'LF': 'boost::text::word_prop_t::LF',
    'Newline': 'boost::text::word_prop_t::Newline',
    'Extend_FE': 'boost::text::word_prop_t::Extend',
    'RI': 'boost::text::word_prop_t::Regional_Indicator',
    'Format_FE': 'boost::text::word_prop_t::Format',
    'Katakana': 'boost::text::word_prop_t::Katakana',
    'ALetter': 'boost::text::word_prop_t::ALetter',
    'MidLetter': 'boost::text::word_prop_t::MidLetter',
    'MidNum': 'boost::text::word_prop_t::MidNum',
    'MidNumLet': 'boost::text::word_prop_t::MidNumLet',
    'Numeric': 'boost::text::word_prop_t::Numeric',
    'ExtendNumLet': 'boost::text::word_prop_t::ExtendNumLet',
    'E_Base': 'boost::text::word_prop_t::E_Base',
    'E_Modifier': 'boost::text::word_prop_t::E_Modifier',
    'ZWJ_FE': 'boost::text::word_prop_t::ZWJ',
    'Glue_After_Zwj': 'boost::text::word_prop_t::Glue_After_Zwj',
    'EBG': 'boost::text::word_prop_t::E_Base_GAZ'
}

(word_prop_lookup_test, word_break_test) = \
    extract_break_tests('WordBreakTest.txt', 'word', word_prop_names)
cpp_file = open('word_prop_lookup.cpp', 'w')
cpp_file.write(prop_lookup_test_form.format('word', word_prop_lookup_test))
cpp_file = open('word_break.cpp', 'w')
cpp_file.write(break_test_form.format('word', word_break_test))

# TODO: Add sentence breaks?
