#!/usr/bin/env python

cpp_file_form = decls = '''\
// Warning! This file is autogenerated.
#include <unordered_map>


namespace boost {{ namespace text {{

static const std::unordered_map<uint32_t, int> g_ccc_map = {{
{0}
}};

int ccc(uint32_t cp) noexcept
{{
    auto const it = g_ccc_map.find(cp);
    if (it == g_ccc_map.end())
        return 0;
    return it->second;
}}

}}}}
'''


def cccs(filename):
    intervals = []
    lines = open(filename, 'r').readlines()
    for line in lines:
        line = line[:-1]
        if not line.startswith('#') and len(line) != 0:
            comment_start = line.find('#')
            comment = ''
            if comment_start != -1:
                comment = line[comment_start + 1:].strip()
                line = line[:comment_start]
            fields = map(lambda x: x.strip(), line.split(';'))
            ccc = fields[1]
            if ccc == '0':
                continue
            code_points = fields[0]
            if '..' in code_points:
                cps = code_points.split('.')
                interval = (int(cps[0], 16), int(cps[2], 16) + 1, ccc)
            else:
                cp = int(code_points, 16)
                interval = (cp, cp + 1, ccc)
            intervals.append(interval)

    intervals = sorted(intervals)
    intervals_list = ''
    intervals_map = ''
    num_intervals = 0
    for interval in intervals:
        if 128 < interval[1] - interval[0]:
            num_intervals += 1
            intervals_list += '    ccc_interval{{{}, {}, {}}},\n'.format(
                hex(interval[0]), hex(interval[1]), interval[2]
            )
        else:
            for i in range(interval[0], interval[1]):
                intervals_map += '    {{ {}, {} }},\n'.format(
                    hex(i), interval[2]
                )
    return (intervals_list, num_intervals, intervals_map)

(ccc_intervals, num_ccc_intervals, ccc_intervals_map) = cccs('DerivedCombiningClass.txt')
if num_ccc_intervals != 0:
    print 'Unhandled ccc intervals!  Fix immediately.'
    exit(1)
cpp_file = open('normalization_data.cpp', 'w')
cpp_file.write(cpp_file_form.format(ccc_intervals_map))
