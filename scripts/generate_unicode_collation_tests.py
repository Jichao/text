#!/usr/bin/env python
# -*- coding: utf-8 -*-

from generate_unicode_collation_data import get_ducet
from generate_unicode_collation_data import trie_insert
from generate_unicode_collation_data import make_trie
from generate_unicode_collation_data import find_singleton_keys
from generate_unicode_collation_data import ce_to_cpp

lookup_tests_form = '''\
// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>


{0}
'''

def lookup_tests(ducet, ducet_lines):
    singleton_case = '''\
    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, {0});
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + {1}));'''

    multi_case = '''\
    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, {0});
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + {1}));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);'''

    trie = make_trie(ducet)
    singleton_keys = find_singleton_keys(ducet, trie)

    chunk_size = 150

    lines = ''
    chunk = 0
    i = 0
    for k,v in sorted(ducet.items()):
        lines += '''
TEST(collation, table_lookup_{0:03}_{1:03})
{{
    // {2}
    // {3}

    uint32_t const cps[{5}] = {{ {4} }};
    // biased L2 weight
    boost::text::collation_element const ces[{7}] = {{ {6} }};

    auto const multi_coll = boost::text::longest_collation(cps, cps + {5});
    auto const singleton_coll = boost::text::collation(cps[0]);

{8}
}}
'''.format(
    chunk, i, ducet_lines[k][0], ducet_lines[k][1],
    ', '.join(map(lambda x: hex(x), k)), len(k),
    ', '.join(map(lambda x: ce_to_cpp(x, min_l2), v)), len(v),
    k in singleton_keys and singleton_case.format(len(k), len(v)) or multi_case.format(len(k), len(v))
    )
        i += 1
        if i == chunk_size:
            cpp_file = open('collation_element_lookup_{0:03}.cpp'.format(chunk), 'w')
            cpp_file.write(lookup_tests_form.format(lines))
            lines = ''
            chunk += 1
            i = 0

    cpp_file = open('collation_element_lookup_{0:03}.cpp'.format(chunk), 'w')
    cpp_file.write(lookup_tests_form.format(lines))


# TODO: Consider using allkeys_CLDR.txt.
(ducet, ducet_lines, min_var, max_var, min_l1, max_l1, min_l2, max_l2, min_l3, max_l3) = \
  get_ducet('allkeys.txt')

lookup_tests(ducet, ducet_lines)
